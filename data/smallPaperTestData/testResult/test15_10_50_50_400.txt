LocalSearchHeuristicSolver solver = new LocalSearchHeuristicSolver("./data/testset/test15_10_50_50_400.txt", 2,5,3,5,150);
solver.TabuSearch(solutionList.get(0),10,300);

问题：intensify阶段3分钟太少，要延长时间。另外300的限制也要增加

number of service arcs=2500
number of holding arcs=500

Time of first LP solve= 18289

There are 9513 columns added to the model.

Tried aggregator 2 times.
MIP Presolve eliminated 191736 rows and 140390 columns.
MIP Presolve modified 5580 coefficients.
Aggregator did 10580 substitutions.
Reduced MIP has 214 rows, 2833 columns, and 12266 nonzeros.
Reduced MIP has 202 binaries, 2492 generals, 0 SOSs, and 0 indicators.
Presolve time = 0.17 sec. (152.41 ticks)
Found incumbent of value 146454.000000 after 0.20 sec. (180.09 ticks)
Tried aggregator 1 time.
Reduced MIP has 214 rows, 2833 columns, and 12266 nonzeros.
Reduced MIP has 202 binaries, 2492 generals, 0 SOSs, and 0 indicators.
Presolve time = 0.01 sec. (5.46 ticks)
Probing time = 0.08 sec. (0.79 ticks)
Clique table members: 1.
MIP emphasis: balance optimality and feasibility.
MIP search method: dynamic search.
Parallel mode: deterministic, using up to 4 threads.
Root relaxation solution time = 0.02 sec. (7.16 ticks)

        Nodes                                         Cuts/
   Node  Left     Objective  IInf  Best Integer    Best Bound    ItCnt     Gap

*     0+    0                       146454.0000    63787.0000            56.45%
*     0+    0                       111293.0000    63787.0000            42.69%
*     0+    0                       109504.0000    63787.0000            41.75%
      0     0    92090.1915    87   109504.0000    92090.1915      269   15.90%
      0     0    92904.2432    95   109504.0000     Cuts: 109      455   15.16%
      0     0    93186.7141    94   109504.0000      Cuts: 50      554   14.90%
      0     0    93319.0753   106   109504.0000   MIRcuts: 39      662   14.78%
      0     0    93365.5306   107   109504.0000   MIRcuts: 33      726   14.74%
      0     0    93428.8261    99   109504.0000   MIRcuts: 20      805   14.68%
      0     0    93440.8092    95   109504.0000   MIRcuts: 19      848   14.67%
      0     0    93461.7981    96   109504.0000      Cuts: 15      871   14.65%
      0     0    93464.2224   100   109504.0000    MIRcuts: 4      907   14.65%
      0     0    93464.9530    97   109504.0000    MIRcuts: 2      926   14.65%
*     0+    0                        94717.0000    93464.9530             1.32%
*     0+    0                        94238.0000    93471.3304             0.81%

Mixed integer rounding cuts applied:  105
Zero-half cuts applied:  1
Gomory fractional cuts applied:  11

Root node processing (before b&c):
  Real time             =    0.99 sec. (599.00 ticks)
Parallel b&c, 4 threads:
  Real time             =    0.00 sec. (0.00 ticks)
  Sync time (average)   =    0.00 sec.
  Wait time (average)   =    0.00 sec.
                          ------------
Total (root+branch&cut) =    0.99 sec. (599.00 ticks)
optimal objective= 94238.0

artificial: false set: [2944, 2945, 2946, 2947, 2948, 2949, 2886, 775, 1937, 2900, 2901, 2902, 2903, 2904, 2905, 2906, 2907, 2908, 2909, 2910, 2015, 2911, 2912, 2913, 2914, 2670, 2671, 2672, 2673, 2674, 180] start node= 8 start time= 45 capacity type= 2
(8,0)->(8,1)->(8,2)->(8,3)->(8,4)->(8,5)->(8,6)->(8,7)->(8,8)->(8,9)->(8,10)->(8,11)->(8,12)->(8,13)->(8,14)->(8,15)->(3,20)->(3,21)->(3,22)->(3,23)->(3,24)->(3,25)->(0,30)->(7,36)->(7,37)->(8,44)->(8,45)->(8,46)->(8,47)->(8,48)->(8,49)->(8,0):1

artificial: false set: [2520, 2521, 2522, 2523, 2524, 2525, 2526, 2527, 2528, 2529, 2849, 2530, 2531, 2532, 1892, 233, 1515, 2800, 2801, 2802, 2803, 2804, 2805, 2806, 2807, 2487, 2808, 2809, 2810, 2811, 2812, 2813, 2814] start node= 9 start time= 37 capacity type= 1
(6,0)->(6,1)->(6,2)->(6,3)->(6,4)->(6,5)->(6,6)->(6,7)->(6,8)->(6,9)->(6,10)->(6,11)->(6,12)->(6,13)->(6,14)->(6,15)->(0,20)->(0,21)->(0,22)->(0,23)->(0,24)->(0,25)->(0,26)->(0,27)->(0,28)->(0,29)->(0,30)->(0,31)->(0,32)->(0,33)->(9,37)->(7,42)->(6,49)->(6,0):1

artificial: false set: [2891, 2520, 2521, 2522, 2523, 2524, 2525, 2526, 2527, 2528, 2529, 2849, 2530, 2531, 1892, 232, 1515, 2800, 2801, 2802, 2803, 2804, 2805, 2486, 2806, 2807, 2808, 2809, 2810, 2811, 2812, 2813, 2814] start node= 7 start time= 41 capacity type= 0
(6,0)->(6,1)->(6,2)->(6,3)->(6,4)->(6,5)->(6,6)->(6,7)->(6,8)->(6,9)->(6,10)->(6,11)->(6,12)->(6,13)->(6,14)->(6,15)->(0,20)->(0,21)->(0,22)->(0,23)->(0,24)->(0,25)->(0,26)->(0,27)->(0,28)->(0,29)->(0,30)->(0,31)->(0,32)->(9,36)->(7,41)->(7,42)->(6,49)->(6,0):1

artificial: false set: [2561, 2562, 2563, 2564, 2565, 2566, 2950, 2567, 2951, 2568, 2952, 2569, 2570, 2571, 2572, 2573, 2253, 2574, 2575, 2576, 2577, 2578, 339, 2579, 2580, 2581, 2582, 2583, 2584, 2585, 2586, 2587, 2588, 745] start node= 9 start time= 0 capacity type= 2
(9,0)->(9,1)->(9,2)->(9,3)->(1,11)->(1,12)->(1,13)->(1,14)->(1,15)->(1,16)->(1,17)->(1,18)->(1,19)->(1,20)->(1,21)->(1,22)->(1,23)->(1,24)->(1,25)->(1,26)->(1,27)->(1,28)->(1,29)->(1,30)->(1,31)->(1,32)->(1,33)->(1,34)->(1,35)->(1,36)->(1,37)->(1,38)->(1,39)->(2,45)->(9,0):1

artificial: false set: [2753, 2754, 2755, 2756, 2757, 2758, 2759, 2760, 2761, 2762, 2763, 2764, 2765, 2766, 2767, 2768, 147, 2590, 2977, 2978, 291, 2979, 2980, 2981, 2282, 2546, 1469] start node= 5 start time= 11 capacity type= 2
(5,3)->(5,4)->(5,5)->(5,6)->(5,7)->(5,8)->(5,9)->(5,10)->(5,11)->(5,12)->(5,13)->(5,14)->(5,15)->(5,16)->(5,17)->(5,18)->(5,19)->(9,27)->(9,28)->(9,29)->(9,30)->(9,31)->(9,32)->(1,40)->(1,41)->(0,46)->(0,47)->(5,3):1

artificial: false set: [2944, 2880, 2945, 2881, 2946, 2882, 2947, 2883, 2948, 2884, 2949, 2885, 2886, 1937, 2900, 2901, 2902, 2903, 2904, 2905, 2906, 2907, 2908, 2909, 2910, 2911, 2912, 2913, 2914, 2915, 2916, 2917, 2918, 2919, 2920, 2921, 2922, 2877, 2173, 2878, 2879] start node= 8 start time= 0 capacity type= 1
(8,0)->(8,1)->(8,2)->(8,3)->(8,4)->(8,5)->(8,6)->(8,7)->(8,8)->(8,9)->(8,10)->(8,11)->(8,12)->(8,13)->(8,14)->(8,15)->(8,16)->(8,17)->(8,18)->(8,19)->(8,20)->(8,21)->(8,22)->(8,23)->(7,27)->(7,28)->(7,29)->(7,30)->(7,31)->(7,32)->(7,33)->(7,34)->(7,35)->(7,36)->(7,37)->(8,44)->(8,45)->(8,46)->(8,47)->(8,48)->(8,49)->(8,0):2

artificial: false set: [2560, 2561, 2562, 2563, 2564, 2565, 2566, 2567, 2568, 2569, 2570, 2571, 2572, 589, 333, 2573, 2574, 2575, 2576, 2577, 2578, 2579, 2580, 2581, 2582, 2594, 2595, 2596, 2597, 2598, 2599, 2550, 2551, 2552, 2553, 2554, 2555, 2556, 2557, 2558, 2559] start node= 1 start time= 19 capacity type= 2
(1,0)->(1,1)->(1,2)->(1,3)->(1,4)->(1,5)->(1,6)->(1,7)->(1,8)->(1,9)->(1,10)->(1,11)->(1,12)->(1,13)->(1,14)->(1,15)->(1,16)->(1,17)->(1,18)->(1,19)->(1,20)->(1,21)->(1,22)->(1,23)->(1,24)->(1,25)->(1,26)->(1,27)->(1,28)->(1,29)->(1,30)->(1,31)->(1,32)->(1,33)->(2,39)->(1,44)->(1,45)->(1,46)->(1,47)->(1,48)->(1,49)->(1,0):1

artificial: false set: [1089, 643, 2697, 2698, 2699, 2650, 2651, 2652, 2653, 2654, 2655, 2656, 2657, 2658, 2659, 2660, 2661, 934, 2662, 2663, 2664, 2665, 2666, 2667, 2668, 2669, 2670, 2671, 2672, 2673, 2674, 2675, 2676, 2677, 2678, 2679, 2680, 2681, 2682, 2683] start node= 4 start time= 39 capacity type= 1
(3,0)->(3,1)->(3,2)->(3,3)->(3,4)->(3,5)->(3,6)->(3,7)->(3,8)->(3,9)->(3,10)->(3,11)->(3,12)->(3,13)->(3,14)->(3,15)->(3,16)->(3,17)->(3,18)->(3,19)->(3,20)->(3,21)->(3,22)->(3,23)->(3,24)->(3,25)->(3,26)->(3,27)->(3,28)->(3,29)->(3,30)->(3,31)->(3,32)->(3,33)->(3,34)->(4,39)->(2,43)->(3,47)->(3,48)->(3,49)->(3,0):1

artificial: false set: [1605, 2634, 2635, 2636, 2637, 2638, 2639, 2640, 2709, 2710, 2711, 2712, 2713, 2714, 2715, 2716, 2717, 2718, 2847, 2719, 2848, 2720, 2849, 2721, 2722, 2723, 2724, 2725, 2726, 2727, 2728, 2729, 2800, 2801, 2802, 2803, 691, 2804, 1080] start node= 4 start time= 9 capacity type= 1
(6,0)->(6,1)->(6,2)->(6,3)->(6,4)->(6,5)->(4,9)->(4,10)->(4,11)->(4,12)->(4,13)->(4,14)->(4,15)->(4,16)->(4,17)->(4,18)->(4,19)->(4,20)->(4,21)->(4,22)->(4,23)->(4,24)->(4,25)->(4,26)->(4,27)->(4,28)->(4,29)->(4,30)->(2,34)->(2,35)->(2,36)->(2,37)->(2,38)->(2,39)->(2,40)->(2,41)->(6,47)->(6,48)->(6,49)->(6,0):1

artificial: false set: [2624, 2625, 2626, 2627, 2628, 2629, 2630, 2950, 2631, 2951, 2952, 2953, 2954, 2955, 786, 1562, 2406, 2541, 2542, 243, 2997, 2998, 2999, 632, 2620, 2621, 2622, 2623] start node= 9 start time= 47 capacity type= 2
(9,0)->(9,1)->(9,2)->(9,3)->(9,4)->(9,5)->(9,6)->(6,12)->(2,20)->(2,21)->(2,22)->(2,23)->(2,24)->(2,25)->(2,26)->(2,27)->(2,28)->(2,29)->(2,30)->(2,31)->(2,32)->(3,36)->(0,41)->(0,42)->(0,43)->(9,47)->(9,48)->(9,49)->(9,0):1

artificial: false set: [2688, 2500, 2501, 2502, 2503, 2504, 2505, 1545, 2506, 2507, 2508, 2509, 2510, 2511, 2512, 2513, 2514, 2515, 2516, 2517, 2518, 2326, 2519, 2520, 2521, 2844, 989, 222, 633, 2687] start node= 9 start time= 26 capacity type= 2
(0,0)->(0,1)->(0,2)->(0,3)->(0,4)->(0,5)->(0,6)->(0,7)->(0,8)->(0,9)->(0,10)->(0,11)->(0,12)->(0,13)->(0,14)->(0,15)->(0,16)->(0,17)->(0,18)->(0,19)->(0,20)->(0,21)->(0,22)->(9,26)->(2,33)->(3,37)->(3,38)->(3,39)->(6,44)->(6,45)->(0,0):1

artificial: false set: [643, 900, 2630, 2631, 2632, 2697, 2633, 2698, 2634, 2699, 2635, 2636, 2637, 2638, 2639, 2640, 2641, 2705, 2642, 2706, 2707, 2708, 2709, 2710, 2711, 2712, 2713, 2714, 2715, 2716, 2717, 2718, 2719, 2720, 2721, 2722, 2723, 2724, 2725, 1076] start node= 4 start time= 5 capacity type= 1
(3,0)->(4,5)->(4,6)->(4,7)->(4,8)->(4,9)->(4,10)->(4,11)->(4,12)->(4,13)->(4,14)->(4,15)->(4,16)->(4,17)->(4,18)->(4,19)->(4,20)->(4,21)->(4,22)->(4,23)->(4,24)->(4,25)->(4,26)->(2,30)->(2,31)->(2,32)->(2,33)->(2,34)->(2,35)->(2,36)->(2,37)->(2,38)->(2,39)->(2,40)->(2,41)->(2,42)->(2,43)->(3,47)->(3,48)->(3,49)->(3,0):4

artificial: false set: [2500, 2501, 2502, 2503, 2504, 2505, 2506, 2507, 2508, 2509, 2510, 2511, 2512, 213, 2967, 2968, 792, 2969, 2970, 2971, 2331, 2972, 2973, 2974, 2975, 2976, 2977, 2978, 2979, 2980, 2547, 2548, 2549, 638] start node= 9 start time= 30 capacity type= 2
(0,0)->(0,1)->(0,2)->(0,3)->(0,4)->(0,5)->(0,6)->(0,7)->(0,8)->(0,9)->(0,10)->(0,11)->(0,12)->(0,13)->(9,17)->(9,18)->(9,19)->(9,20)->(9,21)->(9,22)->(9,23)->(9,24)->(9,25)->(9,26)->(9,27)->(9,28)->(9,29)->(9,30)->(9,31)->(2,38)->(3,42)->(0,47)->(0,48)->(0,49)->(0,0):1

artificial: false set: [256, 161, 1251, 2629, 934, 1771, 1039, 145, 2867, 2868, 2869, 630, 2870] start node= 4 start time= 39 capacity type= 1
(5,1)->(1,6)->(0,11)->(7,17)->(7,18)->(7,19)->(7,20)->(7,21)->(2,29)->(2,30)->(3,34)->(4,39)->(0,45)->(5,1):1

artificial: false set: [1742, 2900, 2901, 2902, 2071, 2903, 2904, 2840, 2905, 2841, 2906, 2778, 2907, 2779, 2908, 2780, 2909, 2781, 2910, 2782, 2911, 2912, 2913, 2914, 2915, 2916, 2917, 2918, 2919, 1383, 2920] start node= 5 start time= 28 capacity type= 2
(8,0)->(8,1)->(8,2)->(8,3)->(8,4)->(8,5)->(8,6)->(8,7)->(8,8)->(8,9)->(8,10)->(8,11)->(8,12)->(8,13)->(8,14)->(8,15)->(8,16)->(8,17)->(8,18)->(8,19)->(8,20)->(8,21)->(5,28)->(5,29)->(5,30)->(5,31)->(5,32)->(5,33)->(6,40)->(6,41)->(6,42)->(8,0):1

artificial: false set: [2944, 2945, 2946, 2115, 2947, 2948, 2821, 2949, 2822, 2823, 2824, 2825, 2826, 2900, 2901, 1238, 2902, 2903, 2904, 2905, 2906, 1627, 2907, 2908, 2909, 2910, 2911, 2912, 2913, 2914, 2731, 2732, 2733, 2734, 2735, 2736, 2737] start node= 8 start time= 45 capacity type= 2
(8,0)->(8,1)->(8,2)->(8,3)->(8,4)->(8,5)->(8,6)->(8,7)->(8,8)->(8,9)->(8,10)->(8,11)->(8,12)->(8,13)->(8,14)->(8,15)->(6,21)->(6,22)->(6,23)->(6,24)->(6,25)->(6,26)->(6,27)->(4,31)->(4,32)->(4,33)->(4,34)->(4,35)->(4,36)->(4,37)->(4,38)->(8,44)->(8,45)->(8,46)->(8,47)->(8,48)->(8,49)->(8,0):1

artificial: false set: [2624, 2560, 2625, 2626, 2627, 2628, 2629, 2630, 2631, 2632, 2633, 2634, 2635, 2636, 589, 2637, 2638, 2594, 2595, 2596, 2597, 2598, 2599, 2550, 311, 2551, 2552, 2617, 2553, 2618, 2554, 2619, 2555, 2620, 2556, 2621, 2557, 2622, 2558, 2623, 2559] start node= 1 start time= 0 capacity type= 2
(1,0)->(1,1)->(1,2)->(1,3)->(1,4)->(1,5)->(1,6)->(1,7)->(1,8)->(1,9)->(1,10)->(1,11)->(2,17)->(2,18)->(2,19)->(2,20)->(2,21)->(2,22)->(2,23)->(2,24)->(2,25)->(2,26)->(2,27)->(2,28)->(2,29)->(2,30)->(2,31)->(2,32)->(2,33)->(2,34)->(2,35)->(2,36)->(2,37)->(2,38)->(2,39)->(1,44)->(1,45)->(1,46)->(1,47)->(1,48)->(1,49)->(1,0):1

artificial: false set: [1730, 674, 2343, 2600, 2601, 2602, 2603, 2604, 2605, 2606, 2607, 2608, 2609, 2610, 2611, 2612, 2613, 2614, 2615, 2616, 2617, 2618, 2619, 2620, 2621, 2238, 2622, 2623] start node= 9 start time= 43 capacity type= 2
(2,0)->(2,1)->(2,2)->(2,3)->(2,4)->(2,5)->(2,6)->(2,7)->(2,8)->(2,9)->(2,10)->(2,11)->(2,12)->(2,13)->(2,14)->(2,15)->(2,16)->(2,17)->(2,18)->(2,19)->(2,20)->(2,21)->(2,22)->(2,23)->(2,24)->(6,30)->(8,38)->(9,43)->(2,0):1

artificial: false set: [2752, 2881, 2753, 2882, 2754, 2883, 2755, 2884, 2756, 2885, 2757, 2886, 2758, 2759, 2760, 2761, 2762, 2763, 2764, 2765, 2766, 2767, 1424, 2768, 1937, 2769, 2770, 2771, 2772, 2773, 2094, 2751] start node= 8 start time= 44 capacity type= 2
(5,1)->(5,2)->(5,3)->(5,4)->(5,5)->(5,6)->(5,7)->(5,8)->(5,9)->(5,10)->(5,11)->(5,12)->(5,13)->(5,14)->(5,15)->(5,16)->(5,17)->(5,18)->(5,19)->(5,20)->(5,21)->(5,22)->(5,23)->(5,24)->(7,31)->(7,32)->(7,33)->(7,34)->(7,35)->(7,36)->(7,37)->(8,44)->(5,1):1

artificial: false set: [2688, 2689, 2690, 2691, 2630, 2631, 2632, 2700, 2701, 2702, 2703, 2704, 2705, 2706, 2707, 2708, 2709, 2710, 2711, 2712, 2713, 2714, 2715, 2716, 2717, 2718, 2719, 2720, 2721, 2722, 2723, 2724, 2725, 942, 1076, 633, 2747, 2748, 2749, 2687] start node= 4 start time= 0 capacity type= 1
(4,0)->(4,1)->(4,2)->(4,3)->(4,4)->(4,5)->(4,6)->(4,7)->(4,8)->(4,9)->(4,10)->(4,11)->(4,12)->(4,13)->(4,14)->(4,15)->(4,16)->(4,17)->(4,18)->(4,19)->(4,20)->(4,21)->(4,22)->(4,23)->(4,24)->(4,25)->(4,26)->(2,30)->(2,31)->(2,32)->(2,33)->(3,37)->(3,38)->(3,39)->(3,40)->(3,41)->(3,42)->(4,47)->(4,48)->(4,49)->(4,0):6

artificial: false set: [2695, 2696, 2697, 2698, 2699, 2515, 2772, 2773, 2774, 2775, 2776, 2777, 2650, 2778, 2651, 2779, 2652, 2780, 2653, 2781, 2654, 2782, 2655, 2783, 2656, 2784, 2657, 2785, 2658, 2786, 2659, 116, 760, 1337] start node= 5 start time= 22 capacity type= 2
(3,0)->(3,1)->(3,2)->(3,3)->(3,4)->(3,5)->(3,6)->(3,7)->(3,8)->(3,9)->(3,10)->(0,15)->(0,16)->(5,22)->(5,23)->(5,24)->(5,25)->(5,26)->(5,27)->(5,28)->(5,29)->(5,30)->(5,31)->(5,32)->(5,33)->(5,34)->(5,35)->(5,36)->(5,37)->(3,45)->(3,46)->(3,47)->(3,48)->(3,49)->(3,0):1

artificial: false set: [2688, 2700, 2701, 2702, 2703, 2704, 2705, 2706, 2707, 2708, 2844, 989, 2015, 1645, 2670, 2671, 2672, 2673, 2674, 2675, 2676, 2677, 2678, 2679, 2680, 2681, 1209, 2682, 2683, 2684, 2685, 2749, 2686, 2687] start node= 4 start time= 49 capacity type= 0
(4,0)->(4,1)->(4,2)->(4,3)->(4,4)->(4,5)->(4,6)->(4,7)->(4,8)->(4,9)->(8,15)->(3,20)->(3,21)->(3,22)->(3,23)->(3,24)->(3,25)->(3,26)->(3,27)->(3,28)->(3,29)->(3,30)->(3,31)->(3,32)->(3,33)->(3,34)->(3,35)->(3,36)->(3,37)->(3,38)->(3,39)->(6,44)->(6,45)->(4,49)->(4,0):1

artificial: false set: [1615, 2847, 2719, 2848, 2720, 2849, 2721, 2722, 2723, 2724, 2725, 2726, 2727, 2728, 2729, 2730, 2731, 2732, 2733, 2734, 2735, 2800, 2736, 2801, 2802, 2803, 691, 2804, 2805, 2806, 2807, 2808, 2809, 2810, 2811, 2812, 2813, 2814, 1087] start node= 4 start time= 19 capacity type= 0
(6,0)->(6,1)->(6,2)->(6,3)->(6,4)->(6,5)->(6,6)->(6,7)->(6,8)->(6,9)->(6,10)->(6,11)->(6,12)->(6,13)->(6,14)->(6,15)->(4,19)->(4,20)->(4,21)->(4,22)->(4,23)->(4,24)->(4,25)->(4,26)->(4,27)->(4,28)->(4,29)->(4,30)->(4,31)->(4,32)->(4,33)->(4,34)->(4,35)->(4,36)->(4,37)->(2,41)->(6,47)->(6,48)->(6,49)->(6,0):2

artificial: false set: [1032, 1615, 88, 2719, 2720, 2848, 2721, 2849, 993, 2722, 2723, 2724, 2725, 2726, 2727, 2728, 2729, 2730, 2731, 2800, 2801, 2802, 2803, 2804, 2805, 2806, 2807, 2808, 2809, 2810, 2811, 2812, 2813, 2814] start node= 4 start time= 31 capacity type= 2
(6,0)->(6,1)->(6,2)->(6,3)->(6,4)->(6,5)->(6,6)->(6,7)->(6,8)->(6,9)->(6,10)->(6,11)->(6,12)->(6,13)->(6,14)->(6,15)->(4,19)->(4,20)->(4,21)->(4,22)->(4,23)->(4,24)->(4,25)->(4,26)->(4,27)->(4,28)->(4,29)->(4,30)->(4,31)->(4,32)->(0,38)->(3,43)->(6,48)->(6,49)->(6,0):2

artificial: false set: [2816, 2817, 1538, 2818, 2819, 2820, 2821, 2822, 2823, 2824, 2825, 2826, 2827, 2828, 2829, 2830, 2831, 2832, 2833, 2834, 2835, 2836, 2837, 2400, 243, 2997, 2806, 2998, 2807, 2999, 2808, 2809, 2810, 2811, 2812, 2813, 2814, 2815] start node= 9 start time= 47 capacity type= 2
(9,0)->(6,6)->(6,7)->(6,8)->(6,9)->(6,10)->(6,11)->(6,12)->(6,13)->(6,14)->(6,15)->(6,16)->(6,17)->(6,18)->(6,19)->(6,20)->(6,21)->(6,22)->(6,23)->(6,24)->(6,25)->(6,26)->(6,27)->(6,28)->(6,29)->(6,30)->(6,31)->(6,32)->(6,33)->(6,34)->(6,35)->(6,36)->(6,37)->(6,38)->(0,43)->(9,47)->(9,48)->(9,49)->(9,0):1

artificial: false set: [2903, 2904, 2905, 2906, 2907, 2908, 2909, 2910, 2911, 1247, 2912, 2913, 2914, 2915, 2916, 2917, 2918, 2919, 2920, 2921, 2922, 2923, 2924, 2925, 942, 2926, 2927, 2928, 2929, 2930, 2931, 2932, 2037, 2933, 2934, 2935, 2936] start node= 8 start time= 24 capacity type= 2
(8,3)->(8,4)->(8,5)->(8,6)->(8,7)->(8,8)->(8,9)->(8,10)->(8,11)->(8,12)->(8,13)->(8,14)->(8,15)->(8,16)->(8,17)->(8,18)->(8,19)->(8,20)->(8,21)->(8,22)->(8,23)->(8,24)->(8,25)->(8,26)->(8,27)->(8,28)->(8,29)->(8,30)->(8,31)->(8,32)->(8,33)->(8,34)->(8,35)->(8,36)->(8,37)->(3,42)->(4,47)->(8,3):1

artificial: false set: [1031, 2700, 2701, 2702, 2703, 2704, 2705, 2706, 2707, 2708, 2709, 2710, 2711, 2712, 2713, 2714, 2715, 2716, 2717, 2718, 2719, 2720, 2721, 2722, 2723, 2724, 2725, 2726, 2727, 2728, 2729, 2730, 1843, 187] start node= 4 start time= 0 capacity type= 0
(4,0)->(4,1)->(4,2)->(4,3)->(4,4)->(4,5)->(4,6)->(4,7)->(4,8)->(4,9)->(4,10)->(4,11)->(4,12)->(4,13)->(4,14)->(4,15)->(4,16)->(4,17)->(4,18)->(4,19)->(4,20)->(4,21)->(4,22)->(4,23)->(4,24)->(4,25)->(4,26)->(4,27)->(4,28)->(4,29)->(4,30)->(4,31)->(0,37)->(7,43)->(4,0):1

artificial: false set: [1031, 2700, 2701, 2702, 2703, 2704, 2705, 2706, 2707, 2708, 2709, 2710, 2711, 2712, 2713, 2714, 2715, 2716, 2717, 2718, 2719, 2720, 2721, 2722, 2723, 2724, 2725, 2726, 2727, 2728, 2729, 2730, 1843, 187] start node= 4 start time= 10 capacity type= 2
(4,0)->(4,1)->(4,2)->(4,3)->(4,4)->(4,5)->(4,6)->(4,7)->(4,8)->(4,9)->(4,10)->(4,11)->(4,12)->(4,13)->(4,14)->(4,15)->(4,16)->(4,17)->(4,18)->(4,19)->(4,20)->(4,21)->(4,22)->(4,23)->(4,24)->(4,25)->(4,26)->(4,27)->(4,28)->(4,29)->(4,30)->(4,31)->(0,37)->(7,43)->(4,0):1

artificial: false set: [2752, 2753, 2754, 2755, 2756, 2757, 2758, 2759, 1480, 2760, 2761, 2762, 2763, 2764, 2765, 2766, 2767, 2768, 2769, 2770, 2771, 2772, 2773, 2389, 2774, 2775, 2776, 2777, 2778, 2779, 2795, 2796, 2988, 2797, 2798, 2799, 2750, 2751] start node= 9 start time= 38 capacity type= 2
(5,0)->(5,1)->(5,2)->(5,3)->(5,4)->(5,5)->(5,6)->(5,7)->(5,8)->(5,9)->(5,10)->(5,11)->(5,12)->(5,13)->(5,14)->(5,15)->(5,16)->(5,17)->(5,18)->(5,19)->(5,20)->(5,21)->(5,22)->(5,23)->(5,24)->(5,25)->(5,26)->(5,27)->(5,28)->(5,29)->(5,30)->(9,38)->(9,39)->(5,45)->(5,46)->(5,47)->(5,48)->(5,49)->(5,0):1

artificial: false set: [2950, 2951, 2952, 2953, 2954, 2955, 2956, 2957, 2958, 2959, 2960, 2461, 2923, 2924, 2925, 2926, 2927, 2928, 2993, 2929, 2994, 2930, 2995, 2931, 2996, 2932, 2997, 2933, 2998, 2934, 2999, 2935, 2936, 2937, 1916, 2238] start node= 8 start time= 23 capacity type= 1
(9,0)->(9,1)->(9,2)->(9,3)->(9,4)->(9,5)->(9,6)->(9,7)->(9,8)->(9,9)->(9,10)->(9,11)->(7,16)->(8,23)->(8,24)->(8,25)->(8,26)->(8,27)->(8,28)->(8,29)->(8,30)->(8,31)->(8,32)->(8,33)->(8,34)->(8,35)->(8,36)->(8,37)->(8,38)->(9,43)->(9,44)->(9,45)->(9,46)->(9,47)->(9,48)->(9,49)->(9,0):1

artificial: false set: [1287, 2953, 2954, 2955, 2956, 2381, 2957, 2958, 2959, 2960, 2961, 2962, 2963, 2964, 2965, 342, 2966, 2967, 2968, 2969, 2970, 2971, 2972, 2973, 2974, 2975, 2976, 2977, 2978, 2979, 2980, 748] start node= 9 start time= 3 capacity type= 2
(9,3)->(9,4)->(9,5)->(9,6)->(9,7)->(9,8)->(9,9)->(9,10)->(9,11)->(9,12)->(9,13)->(9,14)->(9,15)->(9,16)->(9,17)->(9,18)->(9,19)->(9,20)->(9,21)->(9,22)->(9,23)->(9,24)->(9,25)->(9,26)->(9,27)->(9,28)->(9,29)->(9,30)->(9,31)->(5,37)->(1,42)->(2,48)->(9,3):1

artificial: false set: [2560, 2561, 2562, 2563, 2564, 2884, 2565, 2566, 2567, 2568, 2569, 2570, 2571, 2572, 2573, 2574, 2575, 2576, 2577, 593, 2578, 2579, 2598, 2599, 430, 2550, 2551, 2552, 2553, 1785, 2554, 2555, 2556, 2557, 2558, 2559] start node= 7 start time= 34 capacity type= 1
(1,0)->(1,1)->(1,2)->(1,3)->(1,4)->(1,5)->(1,6)->(1,7)->(1,8)->(1,9)->(1,10)->(1,11)->(1,12)->(1,13)->(1,14)->(1,15)->(1,16)->(1,17)->(1,18)->(1,19)->(1,20)->(1,21)->(1,22)->(1,23)->(1,24)->(1,25)->(1,26)->(1,27)->(1,28)->(1,29)->(1,30)->(7,34)->(7,35)->(2,43)->(1,48)->(1,49)->(1,0):1

artificial: false set: [2816, 2817, 2818, 2819, 2820, 2821, 2822, 2823, 2824, 2825, 2826, 2827, 2828, 2829, 1630, 2847, 2848, 2849, 2734, 2735, 2800, 2736, 2801, 2802, 2803, 691, 2804, 2805, 2806, 2807, 2808, 2809, 2810, 2811, 2812, 2813, 2814, 2815, 1087] start node= 4 start time= 34 capacity type= 1
(6,0)->(6,1)->(6,2)->(6,3)->(6,4)->(6,5)->(6,6)->(6,7)->(6,8)->(6,9)->(6,10)->(6,11)->(6,12)->(6,13)->(6,14)->(6,15)->(6,16)->(6,17)->(6,18)->(6,19)->(6,20)->(6,21)->(6,22)->(6,23)->(6,24)->(6,25)->(6,26)->(6,27)->(6,28)->(6,29)->(6,30)->(4,34)->(4,35)->(4,36)->(4,37)->(2,41)->(6,47)->(6,48)->(6,49)->(6,0):1

artificial: false set: [2624, 2625, 2626, 2627, 2628, 2647, 2648, 729, 2649, 2600, 2601, 2602, 2603, 2604, 2605, 2606, 2607, 2608, 2609, 2610, 2611, 2612, 2484, 2613, 2614, 2615, 2616, 2617, 2618, 2619, 2620, 2621, 1789, 2622, 2623] start node= 9 start time= 34 capacity type= 2
(2,0)->(2,1)->(2,2)->(2,3)->(2,4)->(2,5)->(2,6)->(2,7)->(2,8)->(2,9)->(2,10)->(2,11)->(2,12)->(2,13)->(2,14)->(2,15)->(2,16)->(2,17)->(2,18)->(2,19)->(2,20)->(2,21)->(2,22)->(2,23)->(2,24)->(2,25)->(2,26)->(2,27)->(2,28)->(2,29)->(9,34)->(7,39)->(2,47)->(2,48)->(2,49)->(2,0):1

artificial: false set: [2895, 1808, 2896, 2897, 2898, 2899, 2715, 2716, 2717, 2718, 2719, 2720, 2721, 2850, 2722, 2851, 2723, 2852, 2724, 2853, 1189, 2725, 2854, 2726, 2855, 2727, 2856, 2728, 2857, 2729, 2730, 2731, 2732, 2733, 2734, 2735, 2736, 2737, 2738] start node= 4 start time= 15 capacity type= 1
(7,0)->(7,1)->(7,2)->(7,3)->(7,4)->(7,5)->(7,6)->(7,7)->(7,8)->(4,15)->(4,16)->(4,17)->(4,18)->(4,19)->(4,20)->(4,21)->(4,22)->(4,23)->(4,24)->(4,25)->(4,26)->(4,27)->(4,28)->(4,29)->(4,30)->(4,31)->(4,32)->(4,33)->(4,34)->(4,35)->(4,36)->(4,37)->(4,38)->(4,39)->(7,45)->(7,46)->(7,47)->(7,48)->(7,49)->(7,0):2

artificial: false set: [589, 2898, 2899, 1825, 2850, 2851, 2852, 2853, 2854, 2855, 2856, 2857, 2858, 2859, 2860, 2732, 2861, 2733, 2862, 2734, 2863, 2864, 2865, 2866, 2867, 2868, 2869, 2870, 2871, 2872, 2873, 2874, 444, 1085] start node= 4 start time= 32 capacity type= 2
(7,0)->(7,1)->(7,2)->(7,3)->(7,4)->(7,5)->(7,6)->(7,7)->(7,8)->(7,9)->(7,10)->(7,11)->(7,12)->(7,13)->(7,14)->(7,15)->(7,16)->(7,17)->(7,18)->(7,19)->(7,20)->(7,21)->(7,22)->(7,23)->(7,24)->(7,25)->(4,32)->(4,33)->(4,34)->(4,35)->(2,39)->(1,44)->(7,48)->(7,49)->(7,0):1

artificial: false set: [2752, 2753, 1282, 2754, 2755, 2756, 2757, 2758, 2759, 2760, 2761, 2762, 2763, 2764, 2765, 2766, 2767, 2768, 2769, 2770, 2771, 2772, 2773, 2774, 2775, 2776, 2777, 2778, 2779, 2780, 2781, 487, 2094, 2751] start node= 8 start time= 44 capacity type= 1
(5,1)->(5,2)->(5,3)->(5,4)->(5,5)->(5,6)->(5,7)->(5,8)->(5,9)->(5,10)->(5,11)->(5,12)->(5,13)->(5,14)->(5,15)->(5,16)->(5,17)->(5,18)->(5,19)->(5,20)->(5,21)->(5,22)->(5,23)->(5,24)->(5,25)->(5,26)->(5,27)->(5,28)->(5,29)->(5,30)->(5,31)->(5,32)->(1,37)->(8,44)->(5,1):1

artificial: false set: [2880, 2881, 2882, 2883, 2884, 2885, 2886, 2887, 2888, 2889, 2890, 2891, 2700, 2892, 2701, 2702, 2703, 2704, 1169, 2705, 2706, 2707, 2708, 2709, 2710, 2711, 2712, 2713, 2714, 2715, 2716, 2717, 2718, 1843, 2875, 2876, 2877, 2878, 2879] start node= 7 start time= 42 capacity type= 1
(4,0)->(4,1)->(4,2)->(4,3)->(4,4)->(4,5)->(4,6)->(4,7)->(4,8)->(4,9)->(4,10)->(4,11)->(4,12)->(4,13)->(4,14)->(4,15)->(4,16)->(4,17)->(4,18)->(4,19)->(7,25)->(7,26)->(7,27)->(7,28)->(7,29)->(7,30)->(7,31)->(7,32)->(7,33)->(7,34)->(7,35)->(7,36)->(7,37)->(7,38)->(7,39)->(7,40)->(7,41)->(7,42)->(7,43)->(4,0):1

artificial: false set: [2752, 2753, 2754, 1305, 934, 2663, 2664, 2665, 2794, 2666, 2795, 2667, 2796, 2668, 2669, 2797, 2670, 2798, 2671, 2799, 2672, 2673, 2674, 1139, 2675, 2676, 2677, 2678, 2679, 2680, 2681, 2682, 2683, 2750, 2751] start node= 5 start time= 47 capacity type= 2
(5,0)->(5,1)->(5,2)->(5,3)->(5,4)->(5,5)->(3,13)->(3,14)->(3,15)->(3,16)->(3,17)->(3,18)->(3,19)->(3,20)->(3,21)->(3,22)->(3,23)->(3,24)->(3,25)->(3,26)->(3,27)->(3,28)->(3,29)->(3,30)->(3,31)->(3,32)->(3,33)->(3,34)->(4,39)->(5,44)->(5,45)->(5,46)->(5,47)->(5,48)->(5,49)->(5,0):1

artificial: false set: [2624, 2625, 2626, 2437, 2700, 2701, 2702, 2703, 2704, 2705, 2706, 2707, 2708, 2709, 2710, 727, 2711, 2712, 2713, 2714, 2982, 2983, 2984, 1065, 2985, 2986, 1643, 2619, 2747, 2620, 2748, 2621, 2749, 2622, 2623] start node= 9 start time= 32 capacity type= 2
(4,0)->(4,1)->(4,2)->(4,3)->(4,4)->(4,5)->(4,6)->(4,7)->(4,8)->(4,9)->(4,10)->(4,11)->(4,12)->(4,13)->(4,14)->(4,15)->(2,19)->(2,20)->(2,21)->(2,22)->(2,23)->(2,24)->(2,25)->(2,26)->(2,27)->(9,32)->(9,33)->(9,34)->(9,35)->(9,36)->(9,37)->(6,43)->(4,47)->(4,48)->(4,49)->(4,0):1

artificial: false set: [723, 2648, 2649, 2978, 2979, 2980, 2341, 2981, 2982, 2983, 2600, 2984, 2601, 2985, 2602, 2986, 2603, 2987, 2604, 2988, 2605, 2989, 2606, 2990, 2607, 2608, 2609, 2610, 2611, 2612, 2613, 2614, 2615, 2616, 2617, 2618, 2619, 2620, 2621, 2622] start node= 9 start time= 28 capacity type= 1
(2,0)->(2,1)->(2,2)->(2,3)->(2,4)->(2,5)->(2,6)->(2,7)->(2,8)->(2,9)->(2,10)->(2,11)->(2,12)->(2,13)->(2,14)->(2,15)->(2,16)->(2,17)->(2,18)->(2,19)->(2,20)->(2,21)->(2,22)->(2,23)->(9,28)->(9,29)->(9,30)->(9,31)->(9,32)->(9,33)->(9,34)->(9,35)->(9,36)->(9,37)->(9,38)->(9,39)->(9,40)->(9,41)->(2,48)->(2,49)->(2,0):1

artificial: false set: [2816, 2817, 2818, 2819, 2500, 2820, 2821, 2822, 2823, 2824, 201, 2825, 2826, 2827, 2955, 2828, 2829, 2830, 2831, 87, 792, 2406, 2547, 2548, 2549, 1532, 2812, 2813, 2814, 2815] start node= 9 start time= 5 capacity type= 2
(0,0)->(0,1)->(9,5)->(9,6)->(6,12)->(6,13)->(6,14)->(6,15)->(6,16)->(6,17)->(6,18)->(6,19)->(6,20)->(6,21)->(6,22)->(6,23)->(6,24)->(6,25)->(6,26)->(6,27)->(6,28)->(6,29)->(6,30)->(6,31)->(6,32)->(0,37)->(3,42)->(0,47)->(0,48)->(0,49)->(0,0):1

artificial: false set: [2880, 2881, 2903, 2839, 2904, 2840, 2905, 2841, 2906, 2842, 1882, 2907, 2908, 2909, 2910, 2911, 1247, 2912, 2913, 2914, 2915, 2916, 2917, 2918, 2919, 2920, 2921, 2922, 1643, 2877, 2173, 2878, 2879] start node= 8 start time= 22 capacity type= 2
(8,3)->(8,4)->(8,5)->(8,6)->(8,7)->(8,8)->(8,9)->(8,10)->(8,11)->(8,12)->(8,13)->(8,14)->(8,15)->(8,16)->(8,17)->(8,18)->(8,19)->(8,20)->(8,21)->(8,22)->(8,23)->(7,27)->(7,28)->(7,29)->(7,30)->(7,31)->(7,32)->(6,39)->(6,40)->(6,41)->(6,42)->(6,43)->(4,47)->(8,3):1

artificial: false set: [2894, 2895, 2896, 2897, 2898, 2899, 2850, 2979, 2851, 2980, 2852, 2981, 2853, 2854, 2855, 2856, 2857, 2858, 2282, 2859, 2860, 2861, 2862, 2863, 2864, 2865, 2866, 1971, 2867, 2868, 2869, 2870, 440] start node= 9 start time= 32 capacity type= 2
(7,0)->(7,1)->(7,2)->(7,3)->(7,4)->(7,5)->(7,6)->(7,7)->(7,8)->(7,9)->(7,10)->(7,11)->(7,12)->(7,13)->(7,14)->(7,15)->(7,16)->(7,17)->(7,18)->(7,19)->(7,20)->(7,21)->(9,29)->(9,30)->(9,31)->(9,32)->(1,40)->(7,44)->(7,45)->(7,46)->(7,47)->(7,48)->(7,49)->(7,0):1

artificial: false set: [2560, 2561, 2562, 2563, 2564, 2565, 2566, 2567, 2568, 2569, 2570, 2571, 2572, 844, 2573, 2574, 2575, 2576, 2577, 478, 2598, 2599, 2550, 2551, 2039, 2935, 2552, 2936, 2553, 2937, 2554, 2938, 2555, 2556, 2557, 2558, 2559] start node= 8 start time= 35 capacity type= 2
(1,0)->(1,1)->(1,2)->(1,3)->(1,4)->(1,5)->(1,6)->(1,7)->(1,8)->(1,9)->(1,10)->(1,11)->(1,12)->(1,13)->(1,14)->(1,15)->(1,16)->(1,17)->(1,18)->(1,19)->(1,20)->(1,21)->(1,22)->(1,23)->(1,24)->(1,25)->(1,26)->(1,27)->(1,28)->(8,35)->(8,36)->(8,37)->(8,38)->(8,39)->(3,44)->(1,48)->(1,49)->(1,0):2

artificial: false set: [719, 2648, 2649, 2974, 2975, 2976, 2977, 2978, 2979, 2980, 2981, 2341, 2982, 2983, 2984, 2600, 2985, 2601, 2986, 2602, 2987, 2603, 2988, 2604, 2989, 2605, 2606, 2990, 2607, 2608, 2609, 2610, 2611, 2612, 2613, 2614, 2615, 2616, 2617, 2618] start node= 9 start time= 40 capacity type= 2
(2,0)->(2,1)->(2,2)->(2,3)->(2,4)->(2,5)->(2,6)->(2,7)->(2,8)->(2,9)->(2,10)->(2,11)->(2,12)->(2,13)->(2,14)->(2,15)->(2,16)->(2,17)->(2,18)->(2,19)->(9,24)->(9,25)->(9,26)->(9,27)->(9,28)->(9,29)->(9,30)->(9,31)->(9,32)->(9,33)->(9,34)->(9,35)->(9,36)->(9,37)->(9,38)->(9,39)->(9,40)->(9,41)->(2,48)->(2,49)->(2,0):1

artificial: false set: [2950, 2631, 2951, 2632, 2952, 2633, 2953, 2634, 2954, 2635, 2955, 2636, 2956, 2637, 2957, 2958, 2959, 2960, 2961, 2962, 2963, 2324, 2964, 2965, 2966, 2967, 2968, 2969, 538, 2970, 2971, 2972, 2973, 246] start node= 9 start time= 0 capacity type= 2
(9,0)->(9,1)->(9,2)->(9,3)->(9,4)->(9,5)->(9,6)->(9,7)->(9,8)->(9,9)->(9,10)->(9,11)->(9,12)->(9,13)->(9,14)->(9,15)->(9,16)->(9,17)->(9,18)->(9,19)->(9,20)->(9,21)->(9,22)->(9,23)->(9,24)->(2,31)->(2,32)->(2,33)->(2,34)->(2,35)->(2,36)->(2,37)->(2,38)->(0,46)->(9,0):1

artificial: false set: [2560, 2561, 2693, 262, 844, 2517, 2518, 2519, 88, 2520, 2521, 2522, 2523, 2524, 2525, 2526, 2527, 2528, 2529, 2530, 2531, 2532, 2533, 2598, 2534, 2599, 2535, 2536, 2537, 2550, 2551, 2552, 2553, 2554, 2555, 2556, 2557, 2558, 2559] start node= 1 start time= 0 capacity type= 2
(1,0)->(1,1)->(1,2)->(1,3)->(1,4)->(1,5)->(1,6)->(1,7)->(1,8)->(1,9)->(1,10)->(1,11)->(1,12)->(0,17)->(0,18)->(0,19)->(0,20)->(0,21)->(0,22)->(0,23)->(0,24)->(0,25)->(0,26)->(0,27)->(0,28)->(0,29)->(0,30)->(0,31)->(0,32)->(0,33)->(0,34)->(0,35)->(0,36)->(0,37)->(0,38)->(3,43)->(3,44)->(1,48)->(1,49)->(1,0):1

artificial: false set: [2624, 2625, 2626, 2627, 2628, 2500, 2629, 2501, 2630, 2502, 2631, 2503, 2632, 2504, 2633, 2505, 2634, 2506, 2635, 2507, 2636, 2508, 589, 2637, 2509, 2638, 2510, 2511, 2512, 2513, 2514, 19, 2515, 2516, 2517, 2518, 294, 2549, 2623] start node= 1 start time= 44 capacity type= 2
(0,0)->(0,1)->(0,2)->(0,3)->(0,4)->(0,5)->(0,6)->(0,7)->(0,8)->(0,9)->(0,10)->(0,11)->(0,12)->(0,13)->(0,14)->(0,15)->(0,16)->(0,17)->(0,18)->(0,19)->(2,23)->(2,24)->(2,25)->(2,26)->(2,27)->(2,28)->(2,29)->(2,30)->(2,31)->(2,32)->(2,33)->(2,34)->(2,35)->(2,36)->(2,37)->(2,38)->(2,39)->(1,44)->(0,49)->(0,0):1

artificial: false set: [2500, 2501, 2502, 2503, 2439, 2504, 2505, 1545, 2506, 2507, 2508, 2509, 2510, 2511, 2512, 2513, 2514, 2515, 2516, 2517, 2518, 2519, 2520, 2521, 2522, 2523, 2524, 2525, 2526, 2527, 2528, 2529, 2530, 2531, 2532, 233, 2987, 2988] start node= 9 start time= 38 capacity type= 2
(0,0)->(0,1)->(0,2)->(0,3)->(0,4)->(0,5)->(0,6)->(0,7)->(0,8)->(0,9)->(0,10)->(0,11)->(0,12)->(0,13)->(0,14)->(0,15)->(0,16)->(0,17)->(0,18)->(0,19)->(0,20)->(0,21)->(0,22)->(0,23)->(0,24)->(0,25)->(0,26)->(0,27)->(0,28)->(0,29)->(0,30)->(0,31)->(0,32)->(0,33)->(9,37)->(9,38)->(9,39)->(6,45)->(0,0):3

artificial: false set: [2564, 2500, 2501, 2565, 2502, 2566, 2503, 2567, 2568, 2569, 2570, 2571, 2572, 2573, 2574, 2575, 2576, 2577, 2578, 2579, 2580, 2581, 2582, 2583, 2584, 2585, 2586, 2587, 2588, 2589, 2590, 2659, 291, 810, 2546, 2547, 2548, 2549, 54] start node= 1 start time= 15 capacity type= 2
(0,0)->(0,1)->(0,2)->(0,3)->(0,4)->(3,9)->(3,10)->(1,14)->(1,15)->(1,16)->(1,17)->(1,18)->(1,19)->(1,20)->(1,21)->(1,22)->(1,23)->(1,24)->(1,25)->(1,26)->(1,27)->(1,28)->(1,29)->(1,30)->(1,31)->(1,32)->(1,33)->(1,34)->(1,35)->(1,36)->(1,37)->(1,38)->(1,39)->(1,40)->(1,41)->(0,46)->(0,47)->(0,48)->(0,49)->(0,0):1

artificial: false set: [2949, 1287, 2900, 2901, 2902, 2903, 2904, 2905, 2906, 2907, 2076, 2908, 2909, 2910, 2783, 2911, 2784, 2912, 2785, 2913, 2786, 2914, 2915, 2916, 2917, 2918, 2919, 2920, 2921, 2922, 2923, 492, 2924, 2925] start node= 8 start time= 0 capacity type= 1
(8,0)->(8,1)->(8,2)->(8,3)->(8,4)->(8,5)->(8,6)->(8,7)->(8,8)->(8,9)->(8,10)->(8,11)->(8,12)->(8,13)->(8,14)->(8,15)->(8,16)->(8,17)->(8,18)->(8,19)->(8,20)->(8,21)->(8,22)->(8,23)->(8,24)->(8,25)->(8,26)->(5,33)->(5,34)->(5,35)->(5,36)->(5,37)->(1,42)->(8,49)->(8,0):1

artificial: false set: [2688, 2624, 2625, 2626, 2627, 2628, 2629, 1606, 2630, 2710, 2711, 2712, 2713, 2714, 2844, 2845, 989, 2846, 2847, 2848, 2849, 1065, 2800, 2801, 2802, 2803, 2804, 2805, 631, 2619, 2620, 2685, 2621, 2686, 2622, 2687, 2623] start node= 4 start time= 10 capacity type= 1
(6,0)->(6,1)->(6,2)->(6,3)->(6,4)->(6,5)->(6,6)->(4,10)->(4,11)->(4,12)->(4,13)->(4,14)->(4,15)->(2,19)->(2,20)->(2,21)->(2,22)->(2,23)->(2,24)->(2,25)->(2,26)->(2,27)->(2,28)->(2,29)->(2,30)->(2,31)->(3,35)->(3,36)->(3,37)->(3,38)->(3,39)->(6,44)->(6,45)->(6,46)->(6,47)->(6,48)->(6,49)->(6,0):1

artificial: false set: [2816, 1667, 1283, 2775, 2776, 2777, 2778, 2779, 2588, 2780, 2781, 2782, 1893, 2800, 2801, 2802, 2803, 2804, 2805, 2806, 2807, 439, 2808, 2809, 2810, 2811, 2812, 2813, 2814, 2815] start node= 5 start time= 25 capacity type= 2
(6,0)->(6,1)->(6,2)->(6,3)->(6,4)->(6,5)->(6,6)->(6,7)->(6,8)->(6,9)->(6,10)->(6,11)->(6,12)->(6,13)->(6,14)->(6,15)->(6,16)->(6,17)->(5,25)->(5,26)->(5,27)->(5,28)->(5,29)->(5,30)->(5,31)->(5,32)->(5,33)->(1,38)->(1,39)->(7,43)->(6,0):1

artificial: false set: [2624, 2625, 2626, 2627, 2628, 2629, 2630, 2950, 2631, 2951, 2632, 2952, 2633, 2953, 2634, 2954, 2635, 2955, 2636, 2956, 2637, 2317, 2957, 2638, 2958, 2959, 2960, 2961, 2962, 2963, 2964, 2965, 2966, 739, 2994, 2995, 2996, 2997, 2998, 2999] start node= 9 start time= 0 capacity type= 1
(9,0)->(9,1)->(9,2)->(9,3)->(9,4)->(9,5)->(9,6)->(9,7)->(9,8)->(9,9)->(9,10)->(9,11)->(9,12)->(9,13)->(9,14)->(9,15)->(9,16)->(9,17)->(2,24)->(2,25)->(2,26)->(2,27)->(2,28)->(2,29)->(2,30)->(2,31)->(2,32)->(2,33)->(2,34)->(2,35)->(2,36)->(2,37)->(2,38)->(2,39)->(9,44)->(9,45)->(9,46)->(9,47)->(9,48)->(9,49)->(9,0):1

artificial: false set: [2880, 2881, 2500, 2501, 2502, 2503, 2504, 2505, 2506, 2507, 1932, 2508, 2509, 2510, 794, 161, 2867, 2868, 2869, 2549, 2870, 2871, 2039, 2872, 2873, 2874, 2875, 2876, 2877, 2878, 2879] start node= 8 start time= 39 capacity type= 2
(0,0)->(0,1)->(0,2)->(0,3)->(0,4)->(0,5)->(0,6)->(0,7)->(0,8)->(0,9)->(0,10)->(0,11)->(7,17)->(7,18)->(7,19)->(7,20)->(7,21)->(7,22)->(7,23)->(7,24)->(7,25)->(7,26)->(7,27)->(7,28)->(7,29)->(7,30)->(7,31)->(7,32)->(8,39)->(3,44)->(0,49)->(0,0):1

artificial: false set: [1667, 1860, 1287, 2897, 2898, 2899, 2775, 2776, 2777, 2778, 2779, 2780, 2781, 2782, 2783, 2592, 2784, 2785, 2786, 2850, 2851, 2852, 2853, 2854, 2855, 2856, 2857, 2858, 2859, 443] start node= 7 start time= 47 capacity type= 1
(7,0)->(7,1)->(7,2)->(7,3)->(7,4)->(7,5)->(7,6)->(7,7)->(7,8)->(7,9)->(7,10)->(6,17)->(5,25)->(5,26)->(5,27)->(5,28)->(5,29)->(5,30)->(5,31)->(5,32)->(5,33)->(5,34)->(5,35)->(5,36)->(5,37)->(1,42)->(1,43)->(7,47)->(7,48)->(7,49)->(7,0):1

artificial: false set: [2950, 2951, 2952, 2953, 2954, 2955, 2956, 2957, 2958, 2959, 2960, 2961, 2962, 2963, 339, 2964, 2965, 2966, 2967, 2968, 2969, 2970, 2971, 2972, 2973, 2974, 2975, 2976, 2977, 2978, 2979, 2980, 2281, 745] start node= 1 start time= 39 capacity type= 1
(9,0)->(9,1)->(9,2)->(9,3)->(9,4)->(9,5)->(9,6)->(9,7)->(9,8)->(9,9)->(9,10)->(9,11)->(9,12)->(9,13)->(9,14)->(9,15)->(9,16)->(9,17)->(9,18)->(9,19)->(9,20)->(9,21)->(9,22)->(9,23)->(9,24)->(9,25)->(9,26)->(9,27)->(9,28)->(9,29)->(9,30)->(9,31)->(1,39)->(2,45)->(9,0):2

artificial: false set: [2952, 1577, 2953, 2954, 747, 2955, 2956, 2957, 2958, 2959, 2960, 2961, 2962, 2963, 2964, 2421, 2965, 2966, 2967, 2968, 889, 2969, 2970, 635] start node= 9 start time= 2 capacity type= 1
(9,2)->(9,3)->(9,4)->(9,5)->(9,6)->(9,7)->(9,8)->(9,9)->(9,10)->(9,11)->(9,12)->(9,13)->(9,14)->(9,15)->(9,16)->(9,17)->(9,18)->(9,19)->(9,20)->(9,21)->(6,27)->(2,35)->(3,39)->(2,47)->(9,2):1

artificial: false set: [1287, 392, 2700, 2701, 2702, 2703, 2704, 2705, 2706, 2707, 2708, 2709, 2710, 2711, 2712, 2713, 2714, 2779, 2715, 2780, 2716, 2781, 2717, 2782, 2718, 2783, 2719, 2784, 2720, 2785, 2721, 2786, 2722, 2723, 1124, 2748, 2749] start node= 4 start time= 48 capacity type= 1
(4,0)->(4,1)->(4,2)->(4,3)->(4,4)->(4,5)->(4,6)->(4,7)->(4,8)->(4,9)->(4,10)->(4,11)->(4,12)->(4,13)->(4,14)->(4,15)->(4,16)->(4,17)->(4,18)->(4,19)->(4,20)->(4,21)->(4,22)->(4,23)->(4,24)->(5,29)->(5,30)->(5,31)->(5,32)->(5,33)->(5,34)->(5,35)->(5,36)->(5,37)->(1,42)->(4,48)->(4,49)->(4,0):1

artificial: false set: [2880, 2881, 2882, 2883, 2884, 2885, 2950, 1990, 2886, 2951, 2887, 2952, 2888, 2953, 2889, 2954, 2955, 2956, 2957, 2958, 2959, 2960, 2961, 2462, 2867, 2868, 2869, 2998, 2870, 2999, 2871, 2872, 2873, 2874, 2875, 2876, 2877, 2878, 2879] start node= 7 start time= 17 capacity type= 1
(9,0)->(9,1)->(9,2)->(9,3)->(9,4)->(9,5)->(9,6)->(9,7)->(9,8)->(9,9)->(9,10)->(9,11)->(9,12)->(7,17)->(7,18)->(7,19)->(7,20)->(7,21)->(7,22)->(7,23)->(7,24)->(7,25)->(7,26)->(7,27)->(7,28)->(7,29)->(7,30)->(7,31)->(7,32)->(7,33)->(7,34)->(7,35)->(7,36)->(7,37)->(7,38)->(7,39)->(7,40)->(9,48)->(9,49)->(9,0):1

artificial: false set: [2752, 2753, 2754, 2755, 2756, 2757, 2758, 1286, 2759, 2760, 2761, 2762, 2763, 2764, 2765, 2766, 2767, 2768, 2769, 2770, 146, 2771, 2772, 2773, 2774, 2775, 2776, 2777, 2778, 2779, 2780, 2781, 2782, 2783, 2784, 2785, 291] start node= 5 start time= 36 capacity type= 2
(5,2)->(5,3)->(5,4)->(5,5)->(5,6)->(5,7)->(5,8)->(5,9)->(5,10)->(5,11)->(5,12)->(5,13)->(5,14)->(5,15)->(5,16)->(5,17)->(5,18)->(5,19)->(5,20)->(5,21)->(5,22)->(5,23)->(5,24)->(5,25)->(5,26)->(5,27)->(5,28)->(5,29)->(5,30)->(5,31)->(5,32)->(5,33)->(5,34)->(5,35)->(5,36)->(1,41)->(0,46)->(5,2):1

artificial: false set: [2752, 2753, 2754, 2755, 2717, 2718, 2719, 2720, 2721, 2722, 2723, 2724, 2725, 2726, 2727, 2728, 1256, 2729, 361, 2794, 2730, 2795, 2731, 2796, 2732, 2797, 2733, 2798, 2734, 2799, 2735, 2736, 2737, 2738, 1139, 2750, 2751] start node= 5 start time= 0 capacity type= 2
(5,0)->(5,1)->(5,2)->(5,3)->(5,4)->(5,5)->(5,6)->(1,11)->(4,17)->(4,18)->(4,19)->(4,20)->(4,21)->(4,22)->(4,23)->(4,24)->(4,25)->(4,26)->(4,27)->(4,28)->(4,29)->(4,30)->(4,31)->(4,32)->(4,33)->(4,34)->(4,35)->(4,36)->(4,37)->(4,38)->(4,39)->(5,44)->(5,45)->(5,46)->(5,47)->(5,48)->(5,49)->(5,0):2

artificial: false set: [2752, 2753, 1282, 2754, 387, 2755, 2756, 2757, 2758, 2759, 2760, 2761, 2762, 2763, 2764, 2765, 2766, 2767, 2768, 2769, 2770, 2771, 2772, 2773, 2774, 2775, 2776, 2777, 2778, 2779, 2780, 2781, 2799, 2743, 1144, 2750, 2751] start node= 5 start time= 0 capacity type= 2
(5,0)->(5,1)->(5,2)->(5,3)->(5,4)->(5,5)->(5,6)->(5,7)->(5,8)->(5,9)->(5,10)->(5,11)->(5,12)->(5,13)->(5,14)->(5,15)->(5,16)->(5,17)->(5,18)->(5,19)->(5,20)->(5,21)->(5,22)->(5,23)->(5,24)->(5,25)->(5,26)->(5,27)->(5,28)->(5,29)->(5,30)->(5,31)->(5,32)->(1,37)->(4,43)->(4,44)->(5,49)->(5,0):1

artificial: false set: [2752, 2753, 1282, 2754, 387, 2755, 2756, 2757, 2758, 2759, 2760, 2761, 2762, 2763, 2764, 2765, 2766, 2767, 2768, 2769, 2770, 2771, 2772, 2773, 2774, 2775, 2776, 2777, 2778, 2779, 2780, 2781, 2798, 2799, 1143, 2750, 2751] start node= 5 start time= 48 capacity type= 2
(5,0)->(5,1)->(5,2)->(5,3)->(5,4)->(5,5)->(5,6)->(5,7)->(5,8)->(5,9)->(5,10)->(5,11)->(5,12)->(5,13)->(5,14)->(5,15)->(5,16)->(5,17)->(5,18)->(5,19)->(5,20)->(5,21)->(5,22)->(5,23)->(5,24)->(5,25)->(5,26)->(5,27)->(5,28)->(5,29)->(5,30)->(5,31)->(5,32)->(1,37)->(4,43)->(5,48)->(5,49)->(5,0):1

artificial: false set: [196, 2629, 2630, 2631, 2632, 2633, 2634, 2635, 2636, 2637, 538, 2852, 2853, 2854, 2855, 2856, 2857, 2858, 2859, 1771, 2860, 2861, 2862, 2863, 2864, 2865, 2866, 2867, 2868, 2869, 2870] start node= 7 start time= 13 capacity type= 1
(7,2)->(7,3)->(7,4)->(7,5)->(7,6)->(7,7)->(7,8)->(7,9)->(7,10)->(7,11)->(7,12)->(7,13)->(7,14)->(7,15)->(7,16)->(7,17)->(7,18)->(7,19)->(7,20)->(7,21)->(2,29)->(2,30)->(2,31)->(2,32)->(2,33)->(2,34)->(2,35)->(2,36)->(2,37)->(2,38)->(0,46)->(7,2):1

artificial: false set: [2437, 1743, 2901, 2902, 2903, 2904, 2905, 2906, 2907, 2908, 2909, 2910, 2911, 2912, 2913, 2914, 2978, 2915, 2979, 2916, 2980, 2917, 2981, 2918, 2982, 2919, 2983, 2920, 2984, 2921, 2985, 2922, 2986, 2223] start node= 9 start time= 28 capacity type= 1
(8,1)->(8,2)->(8,3)->(8,4)->(8,5)->(8,6)->(8,7)->(8,8)->(8,9)->(8,10)->(8,11)->(8,12)->(8,13)->(8,14)->(8,15)->(8,16)->(8,17)->(8,18)->(8,19)->(8,20)->(8,21)->(8,22)->(8,23)->(9,28)->(9,29)->(9,30)->(9,31)->(9,32)->(9,33)->(9,34)->(9,35)->(9,36)->(9,37)->(6,43)->(8,1):1

artificial: false set: [2951, 2513, 2514, 2515, 2516, 2517, 2518, 2519, 2520, 2521, 2522, 2523, 2524, 2525, 2526, 2527, 2528, 2529, 2530, 2402, 2531, 2532, 1508, 2533, 2534, 2535, 2536, 2537, 746, 42, 2538, 2539, 2540, 2541] start node= 9 start time= 1 capacity type= 2
(9,1)->(9,2)->(6,8)->(0,13)->(0,14)->(0,15)->(0,16)->(0,17)->(0,18)->(0,19)->(0,20)->(0,21)->(0,22)->(0,23)->(0,24)->(0,25)->(0,26)->(0,27)->(0,28)->(0,29)->(0,30)->(0,31)->(0,32)->(0,33)->(0,34)->(0,35)->(0,36)->(0,37)->(0,38)->(0,39)->(0,40)->(0,41)->(0,42)->(2,46)->(9,1):1

artificial: false set: [2752, 2753, 2754, 2755, 2756, 1039, 145, 2965, 2966, 2967, 2968, 2969, 2970, 2971, 2972, 2973, 2974, 2975, 2976, 2977, 2978, 1635, 1457, 2429, 2751] start node= 9 start time= 23 capacity type= 2
(5,1)->(5,2)->(5,3)->(5,4)->(5,5)->(5,6)->(5,7)->(9,15)->(9,16)->(9,17)->(9,18)->(9,19)->(9,20)->(9,21)->(9,22)->(9,23)->(9,24)->(9,25)->(9,26)->(9,27)->(9,28)->(9,29)->(6,35)->(4,39)->(0,45)->(5,1):1

artificial: false set: [2688, 839, 2900, 2901, 2902, 2903, 2904, 2905, 2906, 2907, 2908, 2909, 2910, 2015, 2911, 2912, 2913, 2914, 493, 2670, 2671, 2672, 2673, 2674, 2675, 2676, 2677, 2678, 2679, 2680, 2681, 2682, 2683, 2684, 2685, 2686, 2687] start node= 8 start time= 0 capacity type= 2
(8,0)->(8,1)->(8,2)->(8,3)->(8,4)->(8,5)->(8,6)->(8,7)->(8,8)->(8,9)->(8,10)->(8,11)->(8,12)->(8,13)->(8,14)->(8,15)->(3,20)->(3,21)->(3,22)->(3,23)->(3,24)->(3,25)->(3,26)->(3,27)->(3,28)->(3,29)->(3,30)->(3,31)->(3,32)->(3,33)->(3,34)->(3,35)->(3,36)->(3,37)->(3,38)->(3,39)->(1,43)->(8,0):1

artificial: false set: [2752, 2753, 2754, 2755, 2756, 2757, 2758, 2759, 2760, 2761, 2762, 2763, 2764, 2765, 2766, 2767, 2768, 2769, 2770, 2771, 2772, 2773, 2394, 479, 2993, 2936, 2937, 1274, 2238, 2750, 2751] start node= 9 start time= 43 capacity type= 2
(5,0)->(5,1)->(5,2)->(5,3)->(5,4)->(5,5)->(5,6)->(5,7)->(5,8)->(5,9)->(5,10)->(5,11)->(5,12)->(5,13)->(5,14)->(5,15)->(5,16)->(5,17)->(5,18)->(5,19)->(5,20)->(5,21)->(5,22)->(5,23)->(5,24)->(1,29)->(8,36)->(8,37)->(8,38)->(9,43)->(9,44)->(5,0):1

artificial: false set: [2760, 2761, 2762, 2763, 2764, 2700, 2765, 2701, 2766, 2702, 2767, 2703, 2768, 2704, 2769, 1105, 2770, 2771, 2772, 2773, 2774, 2775, 2840, 2776, 2841, 2777, 2842, 2778, 2779, 2780, 2781, 2782, 1383, 1643, 2747, 2748, 2749] start node= 4 start time= 47 capacity type= 2
(4,0)->(4,1)->(4,2)->(4,3)->(4,4)->(4,5)->(5,10)->(5,11)->(5,12)->(5,13)->(5,14)->(5,15)->(5,16)->(5,17)->(5,18)->(5,19)->(5,20)->(5,21)->(5,22)->(5,23)->(5,24)->(5,25)->(5,26)->(5,27)->(5,28)->(5,29)->(5,30)->(5,31)->(5,32)->(5,33)->(6,40)->(6,41)->(6,42)->(6,43)->(4,47)->(4,48)->(4,49)->(4,0):1

===========================new round 1=========================
-------------Start to solve SolveVehicleCoverCGHeuristic()---------------
Time of first LP solve= 21142
There are 9799 columns added to the model.
Tried aggregator 1 time.
MIP Presolve eliminated 2378 rows and 6971 columns.
MIP Presolve modified 8163 coefficients.
Reduced MIP has 152 rows, 2858 columns, and 12521 nonzeros.
Reduced MIP has 486 binaries, 2372 generals, 0 SOSs, and 0 indicators.
Presolve time = 0.02 sec. (20.50 ticks)
Found incumbent of value 74811.000000 after 0.03 sec. (24.35 ticks)
Tried aggregator 1 time.
Reduced MIP has 152 rows, 2858 columns, and 12521 nonzeros.
Reduced MIP has 486 binaries, 2372 generals, 0 SOSs, and 0 indicators.
Presolve time = 0.01 sec. (4.69 ticks)
Probing time = 0.07 sec. (0.48 ticks)
Clique table members: 1.
MIP emphasis: balance optimality and feasibility.
MIP search method: dynamic search.
Parallel mode: deterministic, using up to 4 threads.
Root relaxation solution time = 0.02 sec. (11.97 ticks)

        Nodes                                         Cuts/
   Node  Left     Objective  IInf  Best Integer    Best Bound    ItCnt     Gap

*     0+    0                        74811.0000        0.0000           100.00%
*     0+    0                        30579.0000        0.0000           100.00%
*     0+    0                        29353.0000        0.0000           100.00%
      0     0    22576.8419    95    29353.0000    22576.8419      352   23.09%
      0     0    23192.2379   106    29353.0000      Cuts: 55      563   20.99%
      0     0    23298.5030   108    29353.0000      Cuts: 13      616   20.63%
      0     0    23333.4834   104    29353.0000       Cuts: 5      647   20.51%
      0     0    23343.6210   103    29353.0000      Cuts: 13      684   20.47%
      0     0    23350.2414   100    29353.0000       Cuts: 7      713   20.45%
*     0+    0                        24900.0000    23350.2414             6.22%
      0     0    23370.3381    99    24900.0000       Cuts: 9      762    6.14%
      0     0    23373.7805    98    24900.0000       Cuts: 3      785    6.13%
      0     0    23375.6639    98    24900.0000       Cuts: 2      797    6.12%
      0     0    23380.4745    94    24900.0000       Cuts: 3      818    6.10%
*     0+    0                        24181.0000    23380.4745             3.31%
*     0+    0                        24127.0000    23389.0394             3.06%
*     0+    0                        23742.0000    23389.0394             1.49%
*     0+    0                        23727.0000    23389.0394             1.42%
*     0+    0                        23656.0000    23389.0394             1.13%
*     0+    0                        23562.0000    23389.0394             0.73%

Mixed integer rounding cuts applied:  35
Zero-half cuts applied:  29
Gomory fractional cuts applied:  6

Root node processing (before b&c):
  Real time             =    1.24 sec. (434.53 ticks)
Parallel b&c, 4 threads:
  Real time             =    0.00 sec. (0.00 ticks)
  Sync time (average)   =    0.00 sec.
  Wait time (average)   =    0.00 sec.
                          ------------
Total (root+branch&cut) =    1.24 sec. (434.53 ticks)
optimal objective= 23562.0+65354.0=88916.0

Step 4-AdjustFlow
After adjust, flowCost=63869.0
A new better solution has been found. obj=87431.0
Tried aggregator 2 times.
MIP Presolve eliminated 104637 rows and 70164 columns.
Aggregator did 67985 substitutions.
Reduced MIP has 29908 rows, 70931 columns, and 196709 nonzeros.
Reduced MIP has 0 binaries, 135 generals, 0 SOSs, and 0 indicators.
Presolve time = 0.56 sec. (266.30 ticks)
Tried aggregator 1 time.
MIP Presolve eliminated 216 rows and 515 columns.
Reduced MIP has 29692 rows, 70416 columns, and 195273 nonzeros.
Reduced MIP has 0 binaries, 135 generals, 0 SOSs, and 0 indicators.
Presolve time = 0.16 sec. (85.93 ticks)
MIP emphasis: balance optimality and feasibility.
MIP search method: dynamic search.
Parallel mode: deterministic, using up to 4 threads.
Root relaxation solution time = 5.06 sec. (1573.13 ticks)

        Nodes                                         Cuts/
   Node  Left     Objective  IInf  Best Integer    Best Bound    ItCnt     Gap

      0     0    77662.3125    52                  77662.3125       27         
      0     0    77917.8006    56                   Cuts: 504     1824         
      0     0    77963.9108    54                   Cuts: 457     2868         
      0     0    77967.9859    56                MIRcuts: 459     3814         
      0     0    77993.4784    55                   Cuts: 459     5285         
      0     0    77996.9273    54                MIRcuts: 517     5944         
      0     0    78016.0527    56                   Cuts: 417     6596         
      0     0    78017.7786    58                MIRcuts: 515     7052         
*     0+    0                        96112.0000    78017.7786            18.83%
      0     2    78017.7786    58    96112.0000    78017.7786     7052   18.83%
Elapsed time = 62.73 sec. (23730.73 ticks, tree = 0.00 MB, solutions = 1)
      2     4    78019.1479    54    96112.0000    78017.7786     7617   18.83%
*     4+    4                        81209.0000    78018.6089             3.93%
      4     6    78018.7963    59    81209.0000    78018.6089     7737    3.93%
      5     7    78022.2562    59    81209.0000    78018.6089     8215    3.93%
      8    10    78019.5257    52    81209.0000    78018.7963     8431    3.93%
      9    11    78023.0827    52    81209.0000    78018.7963     8944    3.93%
     12    14    78029.6727    49    81209.0000    78018.7963    11267    3.93%
     16    18    78022.4125    55    81209.0000    78018.7963    18117    3.93%
     17    19    78045.0883    49    81209.0000    78018.7963    21637    3.93%
     20    22    78061.4810    43    81209.0000    78018.7963    28901    3.93%
     24    26    78062.4342    49    81209.0000    78018.7963    31814    3.93%
Elapsed time = 86.51 sec. (31799.89 ticks, tree = 0.00 MB, solutions = 2)
     32    34    78069.2705    44    81209.0000    78018.7963    36500    3.93%
     35    37    78118.6370    43    81209.0000    78018.7963    38730    3.93%
     39    41    78091.0805    49    81209.0000    78018.7963    42488    3.93%
     46    48    78126.3235    39    81209.0000    78018.7963    49908    3.93%
     47    49    78097.0125    48    81209.0000    78018.7963    51344    3.93%
     63    65    78237.3595    37    81209.0000    78018.7963    65308    3.93%
     71    73    78180.9134    39    81209.0000    78018.7963    68769    3.93%
     75    77    78163.2853    41    81209.0000    78018.7963    71781    3.93%
     79    81    78218.4578    46    81209.0000    78018.7963    75565    3.93%
     86    88    78203.3672    34    81209.0000    78018.7963    78448    3.93%
Elapsed time = 146.60 sec. (47408.89 ticks, tree = 0.00 MB, solutions = 2)
     91    93    78250.0267    37    81209.0000    78018.7963    81690    3.93%
     97    99    78390.7498    32    81209.0000    78018.7963    85373    3.93%
    100   102    78249.2721    32    81209.0000    78018.7963    86376    3.93%
    103   105    78290.1497    33    81209.0000    78018.7963    90216    3.93%
    112   114    78262.3923    33    81209.0000    78018.7963    94287    3.93%

Mixed integer rounding cuts applied:  352
Gomory fractional cuts applied:  9

Root node processing (before b&c):
  Real time             =   62.67 sec. (23712.22 ticks)
Parallel b&c, 4 threads:
  Real time             =  117.38 sec. (31551.01 ticks)
  Sync time (average)   =    6.74 sec.
  Wait time (average)   =    6.81 sec.
                          ------------
Total (root+branch&cut) =  180.05 sec. (55263.23 ticks)
Intensification optimal objective= 81209.0
# columns in columnManager=142
A new better solution has been found. obj=81209.0
# columns in columnManager=142
===========================new round 2=========================
-------------Start to solve SolveVehicleCoverCGHeuristic()---------------
Time of first LP solve= 2224002
There are 30687 columns added to the model.
Tried aggregator 1 time.
MIP Presolve eliminated 2349 rows and 24007 columns.
MIP Presolve modified 20804 coefficients.
Reduced MIP has 181 rows, 6710 columns, and 28230 nonzeros.
Reduced MIP has 1445 binaries, 5265 generals, 0 SOSs, and 0 indicators.
Presolve time = 0.08 sec. (69.69 ticks)
Found incumbent of value 79199.000000 after 0.10 sec. (82.05 ticks)
Tried aggregator 1 time.
Reduced MIP has 181 rows, 6710 columns, and 28230 nonzeros.
Reduced MIP has 1445 binaries, 5265 generals, 0 SOSs, and 0 indicators.
Presolve time = 0.01 sec. (10.02 ticks)
Probing time = 0.08 sec. (2.39 ticks)
Clique table members: 1.
MIP emphasis: balance optimality and feasibility.
MIP search method: dynamic search.
Parallel mode: deterministic, using up to 4 threads.
Root relaxation solution time = 0.05 sec. (65.93 ticks)

        Nodes                                         Cuts/
   Node  Left     Objective  IInf  Best Integer    Best Bound    ItCnt     Gap

*     0+    0                        79199.0000        0.0000           100.00%
*     0+    0                        26150.0000        0.0000           100.00%
*     0+    0                        24294.0000        0.0000           100.00%
      0     0    15875.2247   124    24294.0000    15875.2247      703   34.65%
      0     0    16623.2770   123    24294.0000      Cuts: 53     1024   31.57%
      0     0    16774.8549   122    24294.0000      Cuts: 17     1130   30.95%
*     0+    0                        18710.0000    16774.8549            10.34%
      0     0    16778.7937   126    18710.0000       Cuts: 6     1165   10.32%
      0     0    16796.2484   138    18710.0000       Cuts: 6     1222   10.23%
      0     0    16807.2231   147    18710.0000       Cuts: 9     1306   10.17%
      0     0    16814.0545   145    18710.0000   ZeroHalf: 4     1382   10.13%
*     0+    0                        18064.0000    16814.0545             6.92%
*     0+    0                        17848.0000    16814.0545             5.79%
*     0+    0                        17280.0000    16814.0545             2.70%
      0     0    16814.8964   149    17280.0000       Cuts: 3     1398    2.69%
      0     0    16818.2034   136    17280.0000       Cuts: 4     1453    2.67%
      0     0    16824.6859   128    17280.0000       Cuts: 6     1519    2.63%
      0     0    16825.9021   152    17280.0000       Cuts: 4     1551    2.63%
      0     2    16825.9021   152    17280.0000    16825.9021     1551    2.63%
Elapsed time = 2.44 sec. (1438.23 ticks, tree = 0.00 MB, solutions = 7)
     58    60    16841.1962   138    17280.0000    16829.3861     4985    2.61%
    147   149    16911.9044   107    17280.0000    16829.3861    10083    2.61%
    299   256    16947.0838    97    17280.0000    16831.0526    16921    2.60%
*   428   381      integral     0    17118.0000    16831.0526    23465    1.68%
    429   382    17068.4823    85    17118.0000    16831.0526    23479    1.68%
    587   413    17011.4649    92    17118.0000    16834.7673    29499    1.65%
    725   536    16893.6589   130    17118.0000    16834.7673    34962    1.65%
    876   665    16878.9618   132    17118.0000    16837.9147    40700    1.64%
   1016   792    16920.1376   139    17118.0000    16837.9147    45685    1.64%
   1168   930    17039.1309   127    17118.0000    16839.5383    51667    1.63%
   1193   951    16845.7589   139    17118.0000    16845.7589    53875    1.59%
Elapsed time = 11.90 sec. (7063.08 ticks, tree = 7.69 MB, solutions = 8)
   1200   955    16859.4503   146    17118.0000    16848.6972    54544    1.57%
   1212   960    16864.1314   137    17118.0000    16848.7130    55365    1.57%
   1324  1024    16925.8381   138    17118.0000    16848.7130    62174    1.57%
   1681  1148    17043.0014    88    17118.0000    16851.6671    81815    1.56%
*  1820   972      integral     0    17108.0000    16851.6671    88655    1.50%
*  1839   833      integral     0    17038.0000    16851.6671    89615    1.09%
*  1839   743      integral     0    17038.0000    16851.6671    89615    1.09%

Mixed integer rounding cuts applied:  96
Zero-half cuts applied:  36
Lift and project cuts applied:  1
Gomory fractional cuts applied:  1

Root node processing (before b&c):
  Real time             =    2.42 sec. (1436.03 ticks)
Parallel b&c, 4 threads:
  Real time             =   14.69 sec. (10346.51 ticks)
  Sync time (average)   =    1.38 sec.
  Wait time (average)   =    1.57 sec.
                          ------------
Total (root+branch&cut) =   17.11 sec. (11782.54 ticks)
optimal objective= 17037.999999999993+64768.0=81806.0

Step 4-AdjustFlow
After adjust, flowCost=64115.0
A new better solution has been found. obj=81153.0
Tried aggregator 2 times.
MIP Presolve eliminated 95252 rows and 59265 columns.
Aggregator did 66713 substitutions.
Reduced MIP has 40565 rows, 95133 columns, and 258976 nonzeros.
Reduced MIP has 0 binaries, 185 generals, 0 SOSs, and 0 indicators.
Presolve time = 0.64 sec. (285.98 ticks)
Tried aggregator 1 time.
MIP Presolve eliminated 117 rows and 277 columns.
Reduced MIP has 40448 rows, 94856 columns, and 258232 nonzeros.
Reduced MIP has 0 binaries, 185 generals, 0 SOSs, and 0 indicators.
Presolve time = 0.24 sec. (114.06 ticks)
MIP emphasis: balance optimality and feasibility.
MIP search method: dynamic search.
Parallel mode: deterministic, using up to 4 threads.
Root relaxation solution time = 9.07 sec. (2538.39 ticks)

        Nodes                                         Cuts/
   Node  Left     Objective  IInf  Best Integer    Best Bound    ItCnt     Gap

      0     0    74546.4000    36                  74546.4000       27         
      0     0    74745.6934    34                   Cuts: 493     2492         
*     0+    0                        97033.0000    74745.6934            22.97%
      0     0    74778.6553    40    97033.0000  MIRcuts: 497     3806   22.93%
      0     0    74805.5803    36    97033.0000  MIRcuts: 483     4818   22.91%
*     0+    0                        77454.0000    74805.5803             3.42%
*     0+    0                        77041.0000    74805.5803             2.90%
*     0+    0                        76891.0000    74805.5803             2.71%
*     0+    0                        76741.0000    74805.5803             2.52%
*     0+    0                        76740.0000    74805.5803             2.52%
      0     0    74811.6358    38    76740.0000     Cuts: 485     6285    2.51%
      0     0    74816.2112    37    76740.0000  MIRcuts: 374     6801    2.51%
      0     0    74835.6230    37    76740.0000     Cuts: 449     8143    2.48%
      0     0    74838.0784    38    76740.0000  MIRcuts: 452     8673    2.48%
      0     0    74838.6133    37    76740.0000  MIRcuts: 366     9164    2.48%
Heuristic still looking.
      0     2    74838.6133    37    76740.0000    74838.6133     9164    2.48%
Elapsed time = 96.90 sec. (37942.16 ticks, tree = 0.00 MB, solutions = 6)
      1     3    74841.3827    36    76740.0000    74838.6133     9593    2.48%
      2     4    74849.5042    36    76740.0000    74838.6133    10604    2.48%
      3     5    74846.8177    34    76740.0000    74841.5784    11870    2.47%
      4     6    74849.8036    34    76740.0000    74841.5784    12201    2.47%
      5     7    74991.2049    31    76740.0000    74841.5784    15162    2.47%
      7     9    74999.3681    30    76740.0000    74841.5784    16488    2.47%
      9    11    74851.9023    34    76740.0000    74841.5784    29222    2.47%
     10    12    74902.4646    36    76740.0000    74841.5784    38673    2.47%
     13    15    74884.8533    39    76740.0000    74841.5784    61472    2.47%
     20    22    74864.4087    34    76740.0000    74841.5784    76258    2.47%
Elapsed time = 172.11 sec. (60661.53 ticks, tree = 0.00 MB, solutions = 6)
     23    25    74863.7468    30    76740.0000    74841.5784    78667    2.47%

Mixed integer rounding cuts applied:  489
Gomory fractional cuts applied:  7

Root node processing (before b&c):
  Real time             =   96.82 sec. (37921.35 ticks)
Parallel b&c, 4 threads:
  Real time             =   83.25 sec. (24528.58 ticks)
  Sync time (average)   =   13.71 sec.
  Wait time (average)   =   13.76 sec.
                          ------------
Total (root+branch&cut) =  180.07 sec. (62449.93 ticks)
Intensification optimal objective= 76740.0
# columns in columnManager=196
A new better solution has been found. obj=76740.0
# columns in columnManager=196
===========================new round 3=========================
-------------Start to solve SolveVehicleCoverCGHeuristic()---------------
Time of first LP solve= 2041673
There are 32812 columns added to the model.
Tried aggregator 1 time.
MIP Presolve eliminated 2330 rows and 23068 columns.
MIP Presolve modified 32087 coefficients.
Reduced MIP has 200 rows, 9774 columns, and 42184 nonzeros.
Reduced MIP has 2411 binaries, 7363 generals, 0 SOSs, and 0 indicators.
Presolve time = 0.11 sec. (93.68 ticks)
Found incumbent of value 57809.000000 after 0.17 sec. (152.35 ticks)
Tried aggregator 1 time.
Reduced MIP has 200 rows, 9774 columns, and 42184 nonzeros.
Reduced MIP has 2411 binaries, 7363 generals, 0 SOSs, and 0 indicators.
Presolve time = 0.02 sec. (14.52 ticks)
Probing time = 0.06 sec. (1.88 ticks)
Clique table members: 1.
MIP emphasis: balance optimality and feasibility.
MIP search method: dynamic search.
Parallel mode: deterministic, using up to 4 threads.
Root relaxation solution time = 0.13 sec. (172.59 ticks)

        Nodes                                         Cuts/
   Node  Left     Objective  IInf  Best Integer    Best Bound    ItCnt     Gap

*     0+    0                        57809.0000        0.0000           100.00%
*     0+    0                        25043.0000        0.0000           100.00%
*     0+    0                        23313.0000        0.0000           100.00%
*     0+    0                        23165.0000        0.0000           100.00%
      0     0    15022.3804   152    23165.0000    15022.3804     1039   35.15%
      0     0    15595.7802   172    23165.0000      Cuts: 49     1489   32.68%
      0     0    15847.3516   170    23165.0000      Cuts: 29     1809   31.59%
      0     0    15892.6423   168    23165.0000      Cuts: 14     1995   31.39%
*     0+    0                        17913.0000    15892.6423            11.28%
      0     0    15904.6657   170    17913.0000       Cuts: 8     2055   11.21%
      0     0    15919.6379   174    17913.0000      Cuts: 14     2159   11.13%
      0     0    15926.8378   171    17913.0000       Cuts: 6     2220   11.09%
      0     0    15927.3996   174    17913.0000    MIRcuts: 2     2246   11.08%
*     0+    0                        17691.0000    15927.3996             9.97%
      0     2    15927.3996   174    17691.0000    15927.3996     2246    9.97%
Elapsed time = 4.37 sec. (2889.71 ticks, tree = 0.00 MB, solutions = 6)
     13    15    16002.9785   151    17691.0000    15934.3560     3343    9.93%
     51    53    16170.3176   128    17691.0000    15934.3560     6774    9.93%
     97    99    16213.1015   130    17691.0000    15934.3560     9763    9.93%
    132   134    16280.2693   100    17691.0000    15934.3560    11721    9.93%
    256   258    16499.7430   111    17691.0000    15934.3560    17777    9.93%
*   277+  277                        17185.0000    15934.3560             7.28%
*   317+  313                        17077.0000    15934.3560             6.69%
    344   328    16044.3820   144    17077.0000    15951.1693    21345    6.59%
    445   421    16123.2954   153    17077.0000    15951.1693    26417    6.59%
    505   464    16198.4528   128    17077.0000    15951.1693    29532    6.59%
    577   536    16232.5917   130    17077.0000    15951.1693    34204    6.59%
*   642+  599                        17067.0000    15951.1693             6.54%
    874   812    16063.3824   149    17067.0000    15975.0102    48355    6.40%
Elapsed time = 8.96 sec. (6128.49 ticks, tree = 6.23 MB, solutions = 9)
   1207  1135    16330.8519   158    17067.0000    15975.0102    60659    6.40%
*  1238+  776                        17035.0000    16093.0476             5.53%
   1238   777    16110.6999   202    17035.0000    16112.6027    64023    5.41%
   1244   782    16123.0708   198    17035.0000    16113.5518    64723    5.41%
   1261   790    16196.3612   174    17035.0000    16115.9299    66403    5.40%
   1288   803    16159.2440   174    17035.0000    16115.9299    69173    5.40%
   1369   839    16426.2420   122    17035.0000    16115.9299    75649    5.40%
   1475   901    16398.3528   154    17035.0000    16115.9299    82772    5.40%
   1636   997    16511.2834   134    17035.0000    16115.9299    91349    5.40%
   1862  1123    16690.8086   109    17035.0000    16115.9299   101374    5.40%
*  2005+ 1047                        17003.0000    16122.4616             5.18%
*  2005+  950                        16991.0000    16122.4616             5.11%
   2005   951    16736.6091   114    16991.0000    16122.4616   108690    5.11%
Elapsed time = 37.78 sec. (24431.35 ticks, tree = 8.45 MB, solutions = 10)
   2278  1053    16222.2831   169    16991.0000    16122.4616   122112    5.11%
   2419  1136    16278.8071   173    16991.0000    16122.4616   132066    5.11%
   2566  1283    16441.8065   117    16991.0000    16122.4616   141581    5.11%
   2781  1488    16152.1695   189    16991.0000    16123.2638   153657    5.11%
   2964  1671    16311.4987   175    16991.0000    16127.7477   163096    5.08%
   3184  1879    16227.3836   175    16991.0000    16127.7477   173817    5.08%
   3414  2101    16272.7643   176    16991.0000    16127.7477   184740    5.08%
*  3578+ 2261                        16937.0000    16127.7477             4.78%
   3584  2269    16182.3058   183    16937.0000    16127.7477   191617    4.78%
*  3662+ 2290                        16887.0000    16131.8279             4.47%
   3777  2353    16182.8407   183    16887.0000    16131.8279   200783    4.47%
   3980  2556    16352.8985   160    16887.0000    16131.8279   209861    4.47%
Elapsed time = 52.64 sec. (34121.12 ticks, tree = 24.46 MB, solutions = 14)
   4202  2778    16265.7730   153    16887.0000    16131.8279   218320    4.47%
   4483  3059    16182.1718   179    16887.0000    16140.0054   228825    4.42%
   4684  3259    16414.0034   129    16887.0000    16140.0054   244000    4.42%
   4813  3371    16268.5286   177    16887.0000    16142.6870   252059    4.41%
   4988  3546    16760.7438   119    16887.0000    16142.6870   262269    4.41%
   5230  3750    16291.8713   175    16887.0000    16142.6870   272029    4.41%
   5505  4013    16400.9592   150    16887.0000    16145.2618   281747    4.39%
   6053  4547    16242.5771   179    16887.0000    16145.2618   300077    4.39%
   6324  4797    16632.6829   121    16887.0000    16151.8956   309835    4.35%
   6644  5082    16323.5535   157    16887.0000    16151.8956   321526    4.35%
Elapsed time = 69.27 sec. (44932.74 ticks, tree = 49.94 MB, solutions = 14)
   6940  5361    16561.0572   150    16887.0000    16151.8956   332945    4.35%
   7277  5698    16334.1835   173    16887.0000    16153.6549   344779    4.34%
   7583  5995    16380.6252   138    16887.0000    16155.6952   357610    4.33%
   7967  6349    16304.7240   164    16887.0000    16155.6952   374276    4.33%
   8091  6473    16425.6108   157    16887.0000    16155.6952   381775    4.33%
   8388  6734    16217.0458   157    16887.0000    16159.3406   394272    4.31%
   8480  6813    16349.9103   145    16887.0000    16159.3406   399287    4.31%
   8788  7104    16800.4613   123    16887.0000    16159.3406   415360    4.31%
   9072  7363    16371.4006   150    16887.0000    16159.3406   428263    4.31%
   9436  7711    16561.8947   161    16887.0000    16159.9319   442793    4.31%
Elapsed time = 85.58 sec. (55061.21 ticks, tree = 74.90 MB, solutions = 14)
   9745  7998    16176.1964   189    16887.0000    16159.9319   454201    4.31%
  10052  8282    16337.1408   166    16887.0000    16161.0931   467492    4.30%
  10304  8534    16597.3323   159    16887.0000    16161.0931   476963    4.30%
  10607  8790    16359.2814   174    16887.0000    16161.8504   488328    4.29%
  10819  8987    16567.3597   150    16887.0000    16161.8504   497014    4.29%
  11238  9395    16341.7777   169    16887.0000    16161.8504   513591    4.29%
  11499  9614    16390.3872   145    16887.0000    16161.8504   524409    4.29%
  11817  9921    16251.0400   168    16887.0000    16163.8610   541527    4.28%
  11953 10035    16346.5580   140    16887.0000    16163.8610   549241    4.28%
  12129 10211    16557.5269   108    16887.0000    16163.8610   557629    4.28%
Elapsed time = 101.09 sec. (64702.85 ticks, tree = 100.55 MB, solutions = 14)
  12572 10619    16222.0301   181    16887.0000    16163.8635   578581    4.28%
  12774 10812    16471.0372   153    16887.0000    16163.8635   587002    4.28%
  13014 11052    16698.9935   135    16887.0000    16165.1888   595635    4.27%
  13414 11403    16768.0984   103    16887.0000    16165.1888   608964    4.27%
  13737 11700    16376.6153   172    16887.0000    16166.2214   622716    4.27%
  14003 11966    16650.0803   142    16887.0000    16166.2214   631934    4.27%
  14317 12221    16351.8632   158    16887.0000    16167.0413   643824    4.26%
  14469 12350    16513.5194   134    16887.0000    16167.0413   652131    4.26%
  14729 12601    16734.3862   104    16887.0000    16167.0413   665990    4.26%
  15113 12941    16401.4678   165    16887.0000    16167.0413   682566    4.26%
Elapsed time = 117.38 sec. (74509.48 ticks, tree = 132.54 MB, solutions = 14)
  15284 13112    16555.6098   120    16887.0000    16167.0413   691782    4.26%
  15649 13427    16257.6477   171    16887.0000    16168.1514   705480    4.26%
  15921 13695    16470.3168   158    16887.0000    16168.1514   716673    4.26%
  16336 14096    16489.7354   174    16887.0000    16169.5899   734206    4.25%
  16681 14411    16421.6630   168    16887.0000    16169.5899   747637    4.25%
  16992 14709    16362.9471   186    16887.0000    16170.5207   760540    4.24%
  17312 15009    16615.7632   158    16887.0000    16170.5207   772413    4.24%
  17645 15319    16346.1584   152    16887.0000    16171.4666   786367    4.24%
  17797 15465    16641.5696   141    16887.0000    16171.4666   794758    4.24%
  18003 15654    16509.8413   137    16887.0000    16171.4666   807027    4.24%
Elapsed time = 133.29 sec. (84187.78 ticks, tree = 160.71 MB, solutions = 14)
  18288 15917    16462.7006   142    16887.0000    16172.5453   822433    4.23%
  18536 16143    16189.8511   176    16887.0000    16172.5453   832654    4.23%
  18887 16479    16617.7298   130    16887.0000    16173.7051   851615    4.22%
* 19007+16576                        16805.0000    16173.7051             3.76%
  19135 16703    16473.1310   167    16805.0000    16173.7051   862207    3.76%
  19450 15829    16244.3741   174    16805.0000    16174.9118   874573    3.75%
  19618 15981    16408.3739   164    16805.0000    16174.9118   881776    3.75%
  20015 16365    16562.4387   152    16805.0000    16175.2320   899784    3.75%
  20227 16542    16329.7160   149    16805.0000    16175.2320   908819    3.75%
  20571 16867    16573.2015   138    16805.0000    16176.0689   925137    3.74%
  20837 17085    16424.8151   157    16805.0000    16176.0689   939178    3.74%
Elapsed time = 150.27 sec. (94549.40 ticks, tree = 177.05 MB, solutions = 15)
  21180 17414    16285.5576   179    16805.0000    16177.2948   954000    3.74%
  21225 17454    16769.0422   134    16805.0000    16177.2948   956414    3.74%
  21270 17499    16361.5279   176    16805.0000    16177.2948   959089    3.74%
  21509 17723    16603.6228   145    16805.0000    16177.4908   971159    3.73%
  21768 17959    16700.5063   122    16805.0000    16177.4908   985932    3.73%
  22180 18332    16459.9391   176    16805.0000    16178.3048  1003936    3.73%
  22468 18598    16231.4502   178    16805.0000    16178.3048  1015189    3.73%
  22762 18886    16634.3328   155    16805.0000    16178.9334  1027043    3.73%
  23081 19183    16576.5675   129    16805.0000    16178.9334  1039799    3.73%
  23574 19649    16739.1579   132    16805.0000    16179.7412  1060964    3.72%
Elapsed time = 171.00 sec. (108812.75 ticks, tree = 207.10 MB, solutions = 15)
* 24296+20307                        16749.0000    16180.4097             3.39%

Mixed integer rounding cuts applied:  132
Zero-half cuts applied:  32

Root node processing (before b&c):
  Real time             =    4.36 sec. (2888.17 ticks)
Parallel b&c, 4 threads:
  Real time             =  175.66 sec. (111677.17 ticks)
  Sync time (average)   =    5.30 sec.
  Wait time (average)   =    5.70 sec.
                          ------------
Total (root+branch&cut) =  180.02 sec. (114565.34 ticks)
optimal objective= 16749.0+65074.0=81823.0

Step 4-AdjustFlow
After adjust, flowCost=64059.0
Tried aggregator 2 times.
MIP Presolve eliminated 89159 rows and 52951 columns.
Aggregator did 63236 substitutions.
Reduced MIP has 50135 rows, 119896 columns, and 324372 nonzeros.
Reduced MIP has 0 binaries, 235 generals, 0 SOSs, and 0 indicators.
Presolve time = 0.69 sec. (310.68 ticks)
Tried aggregator 1 time.
MIP Presolve eliminated 137 rows and 330 columns.
Reduced MIP has 49998 rows, 119566 columns, and 323480 nonzeros.
Reduced MIP has 0 binaries, 235 generals, 0 SOSs, and 0 indicators.
Presolve time = 0.31 sec. (142.75 ticks)
MIP emphasis: balance optimality and feasibility.
MIP search method: dynamic search.
Parallel mode: deterministic, using up to 4 threads.
Root relaxation solution time = 12.20 sec. (3564.83 ticks)

        Nodes                                         Cuts/
   Node  Left     Objective  IInf  Best Integer    Best Bound    ItCnt     Gap

      0     0    73433.2067    40                  73433.2067       26         
      0     0    73670.2202    44                   Cuts: 663     3767         
      0     0    73699.8071    47                MIRcuts: 717     6103         
      0     0    73712.1626    42                MIRcuts: 635     7549         
      0     0    73727.0919    44                MIRcuts: 648     9539         
      0     0    73733.7811    44                MIRcuts: 622    11002         
      0     0    73738.1648    44                MIRcuts: 709    11826         
      0     0    73754.8192    52                MIRcuts: 725    13112         
      0     0    73772.1985    48                MIRcuts: 636    15192         
*     0+    0                        94900.0000    73772.1985            22.26%
      0     0    73781.5201    51    94900.0000  MIRcuts: 655    16654   22.25%
*     0+    0                        79292.0000    73781.5201             6.95%
*     0+    0                        77867.0000    73781.5201             5.25%
*     0+    0                        77457.0000    73781.5201             4.75%
*     0+    0                        77454.0000    73781.5201             4.74%
*     0+    0                        77196.0000    73781.5201             4.42%
*     0+    0                        77189.0000    73781.5201             4.41%
      0     0    73782.5763    48    77189.0000  MIRcuts: 705    17247    4.41%

Mixed integer rounding cuts applied:  698
Gomory fractional cuts applied:  3

Root node processing (before b&c):
  Real time             =  180.08 sec. (59487.71 ticks)
Parallel b&c, 4 threads:
  Real time             =    0.00 sec. (0.00 ticks)
  Sync time (average)   =    0.00 sec.
  Wait time (average)   =    0.00 sec.
                          ------------
Total (root+branch&cut) =  180.08 sec. (59487.71 ticks)
Intensification optimal objective= 77189.0
# columns in columnManager=248
===========================new round 4=========================
-------------Start to solve SolveVehicleCoverCGHeuristic()---------------
Time of first LP solve= 2047925
There are 33452 columns added to the model.
Tried aggregator 1 time.
MIP Presolve eliminated 2320 rows and 22594 columns.
MIP Presolve modified 38559 coefficients.
Reduced MIP has 210 rows, 10888 columns, and 49007 nonzeros.
Reduced MIP has 3096 binaries, 7792 generals, 0 SOSs, and 0 indicators.
Presolve time = 0.28 sec. (111.04 ticks)
Found incumbent of value 75027.000000 after 0.41 sec. (134.55 ticks)
Tried aggregator 1 time.
Reduced MIP has 210 rows, 10888 columns, and 49007 nonzeros.
Reduced MIP has 3096 binaries, 7792 generals, 0 SOSs, and 0 indicators.
Presolve time = 0.02 sec. (16.42 ticks)
Probing time = 0.09 sec. (2.28 ticks)
Clique table members: 1.
MIP emphasis: balance optimality and feasibility.
MIP search method: dynamic search.
Parallel mode: deterministic, using up to 4 threads.
Root relaxation solution time = 0.18 sec. (200.21 ticks)

        Nodes                                         Cuts/
   Node  Left     Objective  IInf  Best Integer    Best Bound    ItCnt     Gap

*     0+    0                        75027.0000        0.0000           100.00%
*     0+    0                        28546.0000        0.0000           100.00%
*     0+    0                        25104.0000        0.0000           100.00%
      0     0    14119.6764   162    25104.0000    14119.6764     1022   43.76%
      0     0    14855.8143   171    25104.0000      Cuts: 60     1638   40.82%
      0     0    15038.8523   184    25104.0000      Cuts: 26     1944   40.09%
      0     0    15090.3156   183    25104.0000      Cuts: 13     2108   39.89%
*     0+    0                        17603.0000    15090.3156            14.27%
      0     0    15146.1062   195    17603.0000      Cuts: 11     2298   13.96%
      0     0    15151.3893   191    17603.0000       Cuts: 6     2366   13.93%
      0     0    15152.0191   193    17603.0000    MIRcuts: 1     2390   13.92%
      0     2    15152.0191   193    17603.0000    15152.0191     2390   13.92%
Elapsed time = 5.20 sec. (3128.85 ticks, tree = 0.00 MB, solutions = 4)
     11    13    15163.9563   189    17603.0000    15160.9348     3609   13.87%
     35    37    15222.6718   177    17603.0000    15164.0126     6087   13.86%
     67    69    15337.0194   164    17603.0000    15164.0126     9132   13.86%
     89    91    15312.6705   163    17603.0000    15164.0126    10824   13.86%
    154   156    15467.3132   143    17603.0000    15164.0126    15304   13.86%
*   187+  187                        17361.0000    15164.0126            12.65%
    187   189    15412.7877   133    17361.0000    15164.0126    17485   12.65%
    263   265    15484.1265   131    17361.0000    15164.0126    22825   12.65%
    341   343    15576.0889   124    17361.0000    15164.0126    27055   12.65%
    420   422    15642.3152   108    17361.0000    15164.0126    31052   12.65%
*   630+  590                        16927.0000    15164.0126            10.42%
    708   580    15387.8879   145    16927.0000    15164.0521    43995   10.42%
Elapsed time = 9.94 sec. (6531.87 ticks, tree = 4.28 MB, solutions = 7)
    881   747    15342.6222   158    16927.0000    15164.0521    55002   10.42%
   1190  1036    15799.4814   113    16927.0000    15164.0521    70150   10.42%
*  1266+  729                        16463.0000    15223.4155             7.53%
*  1266+  485                        16429.0000    15281.2552             6.99%
   1266   486    15286.7410   214    16429.0000    15286.7410    75751    6.95%
   1270   488    15297.0418   211    16429.0000    15295.0088    76219    6.90%
   1274   490    15407.8632   200    16429.0000    15295.0088    76765    6.90%
   1287   494    15388.3968   190    16429.0000    15297.4662    78454    6.89%
   1310   504    15432.0730   165    16429.0000    15297.4662    81273    6.89%
   1369   538    15493.1461   161    16429.0000    15297.4662    87751    6.89%
   1431   578    15538.4120   163    16429.0000    15297.4662    93478    6.89%
   1550   651    15623.0151   158    16429.0000    15297.4662   102957    6.89%
Elapsed time = 47.21 sec. (28555.81 ticks, tree = 5.60 MB, solutions = 9)
   1695   704    15849.8331   142    16429.0000    15297.4662   112370    6.89%
   1840   792    15587.3359   145    16429.0000    15297.4662   120983    6.89%
   2011   896    15710.1177   138    16429.0000    15297.4662   130784    6.89%
   2153   978    15814.8021   136    16429.0000    15297.4662   137980    6.89%
   2386  1066    15452.4236   176    16429.0000    15297.4662   149934    6.89%
   2564  1234    15601.3324   166    16429.0000    15297.4662   161338    6.89%
   2728  1396    15809.7490   121    16429.0000    15297.4662   170797    6.89%
   2859  1523    15522.4906   166    16429.0000    15297.4662   178201    6.89%
   3098  1745    16106.1245   113    16429.0000    15317.5221   190166    6.77%
   3209  1847    15411.4481   194    16429.0000    15317.5221   197405    6.77%
Elapsed time = 62.92 sec. (38958.34 ticks, tree = 18.92 MB, solutions = 9)
   3376  2014    15865.7036   154    16429.0000    15317.5221   207079    6.77%
   3568  2200    16069.9874   121    16429.0000    15317.5221   215823    6.77%
   3765  2349    15512.6260   166    16429.0000    15317.5221   225490    6.77%
   3941  2500    15660.7781   159    16429.0000    15328.9395   232802    6.70%
   4114  2673    15548.9610   179    16429.0000    15328.9395   241194    6.70%
   4336  2895    15566.6051   168    16429.0000    15328.9395   252603    6.70%
   4533  3092    15799.4259   145    16429.0000    15328.9395   263551    6.70%
   4668  3227    15631.4287   183    16429.0000    15347.6750   273199    6.58%
   4811  3370    15639.3820   168    16429.0000    15347.6750   284433    6.58%
   4931  3490    15683.1855   169    16429.0000    15347.6750   293255    6.58%
Elapsed time = 78.97 sec. (49644.43 ticks, tree = 35.17 MB, solutions = 9)
   5084  3638    15802.2171   164    16429.0000    15347.6750   304061    6.58%
   5253  3779    15567.3701   156    16429.0000    15350.6374   312606    6.56%
   5550  4069    15410.0039   204    16429.0000    15350.6374   325476    6.56%
   5851  4370    15581.9494   177    16429.0000    15350.6374   336308    6.56%
   6257  4776    15768.1321   167    16429.0000    15353.8091   353221    6.54%
   6504  5023    15398.6295   193    16429.0000    15353.8091   361455    6.54%
   6683  5202    15703.8682   168    16429.0000    15353.8091   368536    6.54%
   7011  5530    15621.6903   182    16429.0000    15356.6497   382160    6.53%
   7199  5718    15848.2447   155    16429.0000    15356.6497   388616    6.53%
   7475  5992    15509.8225   173    16429.0000    15356.6497   399873    6.53%
Elapsed time = 97.62 sec. (61512.84 ticks, tree = 63.06 MB, solutions = 9)
   7699  6216    15734.1290   169    16429.0000    15356.6497   409611    6.53%
   7940  6457    15774.6210   161    16429.0000    15357.8212   419403    6.52%
   8103  6620    15539.8138   188    16429.0000    15357.8212   426410    6.52%
   8341  6858    15407.9321   194    16429.0000    15359.8440   437973    6.51%
   8382  6899    15511.6717   192    16429.0000    15359.8440   441804    6.51%
   8526  7041    15551.0410   174    16429.0000    15359.8440   453605    6.51%
   8630  7139    15792.4820   158    16429.0000    15359.8440   461034    6.51%
   8754  7263    16147.3392   132    16429.0000    15359.8440   468060    6.51%
   9049  7533    15742.6627   149    16429.0000    15359.8440   483897    6.51%
   9173  7649    15954.0958   117    16429.0000    15359.8440   491445    6.51%
Elapsed time = 113.14 sec. (71432.94 ticks, tree = 79.90 MB, solutions = 9)
   9634  8086    15460.6916   179    16429.0000    15362.6497   508606    6.49%
   9746  8198    15627.5702   182    16429.0000    15362.6497   514433    6.49%
   9902  8353    15802.5082   150    16429.0000    15362.6497   521088    6.49%
  10182  8624    15684.0066   162    16429.0000    15362.8838   531771    6.49%
  10391  8827    15531.1907   198    16429.0000    15362.8838   539626    6.49%
  10603  9033    15745.2696   178    16429.0000    15362.8838   547762    6.49%
  10982  9372    15716.3129   169    16429.0000    15366.4152   563619    6.47%
  11182  9572    15961.7311   163    16429.0000    15366.4152   571484    6.47%
  11484  9869    15625.9611   164    16429.0000    15366.4152   583059    6.47%
  11743 10124    15794.8458   148    16429.0000    15366.4152   594276    6.47%
Elapsed time = 129.13 sec. (81308.79 ticks, tree = 107.40 MB, solutions = 9)
  11984 10365    15800.4707   154    16429.0000    15366.4152   603665    6.47%
  12222 10599    15613.6373   163    16429.0000    15366.4152   612106    6.47%
  12395 10772    16003.2763   133    16429.0000    15369.0622   623105    6.45%
  12522 10899    15730.0885   143    16429.0000    15369.0622   632509    6.45%
  12621 10994    15633.9580   186    16429.0000    15369.0622   640956    6.45%
  12865 11238    15613.4801   165    16429.0000    15369.4320   656410    6.45%
  12973 11346    15797.0702   133    16429.0000    15369.4320   664186    6.45%
  13122 11483    15405.9669   197    16429.0000    15369.4320   672997    6.45%
  13368 11720    15554.2935   178    16429.0000    15369.4320   683466    6.45%
  13488 11814    15719.2835   181    16429.0000    15369.4320   688672    6.45%
Elapsed time = 144.45 sec. (91118.70 ticks, tree = 126.27 MB, solutions = 9)
  13740 12064    15919.9145   168    16429.0000    15369.4320   699532    6.45%
  14064 12388    16080.8746   149    16429.0000    15370.4664   710603    6.44%
  14195 12519    15456.5176   192    16429.0000    15370.4664   715256    6.44%
  14342 12649    15537.9758   191    16429.0000    15370.4664   722190    6.44%
  14631 12932    15748.0557   165    16429.0000    15372.4787   736028    6.43%
  14859 13160    16002.3596   161    16429.0000    15372.4787   744889    6.43%
  15179 13476    16166.2142   111    16429.0000    15372.4787   758292    6.43%
  15334 13625    15947.1060   130    16429.0000    15374.2502   764773    6.42%
  15586 13860    15511.9319   183    16429.0000    15374.2502   774895    6.42%
  15826 14088    15463.8565   165    16429.0000    15375.3651   787305    6.41%
Elapsed time = 160.74 sec. (100808.36 ticks, tree = 155.18 MB, solutions = 9)
  15914 14176    15709.3017   130    16429.0000    15375.3651   792465    6.41%
  16014 14276    16100.9337   132    16429.0000    15375.3651   797551    6.41%
  16379 14622    15499.4104   164    16429.0000    15375.3651   813742    6.41%
  16467 14707    15747.0280   150    16429.0000    15375.3651   820053    6.41%
  16870 15080    16053.0012   138    16429.0000    15375.7761   846473    6.41%
  16885 15095    15695.1844   160    16429.0000    15375.7761   847251    6.41%
* 17060+15238                        16319.0000    15375.7761             5.78%
  17344 14917    15940.5995   135    16319.0000    15378.1579   867273    5.77%

Mixed integer rounding cuts applied:  164
Zero-half cuts applied:  14
Lift and project cuts applied:  1

Root node processing (before b&c):
  Real time             =    5.20 sec. (3124.86 ticks)
Parallel b&c, 4 threads:
  Real time             =  174.83 sec. (111665.56 ticks)
  Sync time (average)   =    6.26 sec.
  Wait time (average)   =    6.59 sec.
                          ------------
Total (root+branch&cut) =  180.02 sec. (114790.42 ticks)
optimal objective= 16318.999999999935+64626.0=80944.99999999994

Step 4-AdjustFlow
After adjust, flowCost=64089.0
Tried aggregator 2 times.
MIP Presolve eliminated 84916 rows and 48371 columns.
Aggregator did 58373 substitutions.
Reduced MIP has 59241 rows, 141161 columns, and 379348 nonzeros.
Reduced MIP has 0 binaries, 284 generals, 0 SOSs, and 0 indicators.
Presolve time = 0.70 sec. (328.51 ticks)
Tried aggregator 1 time.
MIP Presolve eliminated 180 rows and 422 columns.
Reduced MIP has 59061 rows, 140739 columns, and 378212 nonzeros.
Reduced MIP has 0 binaries, 284 generals, 0 SOSs, and 0 indicators.
Presolve time = 0.39 sec. (168.05 ticks)
MIP emphasis: balance optimality and feasibility.
MIP search method: dynamic search.
Parallel mode: deterministic, using up to 4 threads.
Root relaxation solution time = 16.99 sec. (4839.46 ticks)

        Nodes                                         Cuts/
   Node  Left     Objective  IInf  Best Integer    Best Bound    ItCnt     Gap

      0     0    72896.1306    39                  72896.1306       27         
      0     0    73108.0787    45                   Cuts: 601     4925         
      0     0    73137.2927    42                   Cuts: 793     7324         
      0     0    73186.6948    48                   Cuts: 707    10080         
*     0+    0                        97705.0000    73186.6948            25.09%
      0     0    73216.0146    45    97705.0000  MIRcuts: 850    12516   25.06%
*     0+    0                        78108.0000    73216.0146             6.26%
*     0+    0                        77896.0000    73216.0146             6.01%
*     0+    0                        77687.0000    73216.0146             5.76%
*     0+    0                        77635.0000    73216.0146             5.69%
*     0+    0                        77336.0000    73216.0146             5.33%
      0     0    73232.2118    49    77336.0000  MIRcuts: 740    14644    5.31%
      0     0    73252.1803    45    77336.0000  MIRcuts: 887    16503    5.28%

Mixed integer rounding cuts applied:  1386
Gomory fractional cuts applied:  4

Root node processing (before b&c):
  Real time             =  180.03 sec. (55393.46 ticks)
Parallel b&c, 4 threads:
  Real time             =    0.00 sec. (0.00 ticks)
  Sync time (average)   =    0.00 sec.
  Wait time (average)   =    0.00 sec.
                          ------------
Total (root+branch&cut) =  180.03 sec. (55393.46 ticks)
Intensification optimal objective= 77336.0
# columns in columnManager=297
===========================new round 5=========================
-------------Start to solve SolveVehicleCoverCGHeuristic()---------------
Time of first LP solve= 1902478
There are 35730 columns added to the model.
Tried aggregator 1 time.
MIP Presolve eliminated 2326 rows and 25166 columns.
MIP Presolve modified 33665 coefficients.
Reduced MIP has 204 rows, 10594 columns, and 45738 nonzeros.
Reduced MIP has 2658 binaries, 7936 generals, 0 SOSs, and 0 indicators.
Presolve time = 0.12 sec. (103.99 ticks)
Found incumbent of value 69667.000000 after 0.17 sec. (125.26 ticks)
Tried aggregator 1 time.
Reduced MIP has 204 rows, 10594 columns, and 45738 nonzeros.
Reduced MIP has 2658 binaries, 7936 generals, 0 SOSs, and 0 indicators.
Presolve time = 0.02 sec. (15.58 ticks)
Probing time = 0.07 sec. (2.28 ticks)
Clique table members: 1.
MIP emphasis: balance optimality and feasibility.
MIP search method: dynamic search.
Parallel mode: deterministic, using up to 4 threads.
Root relaxation solution time = 0.14 sec. (178.74 ticks)

        Nodes                                         Cuts/
   Node  Left     Objective  IInf  Best Integer    Best Bound    ItCnt     Gap

*     0+    0                        69667.0000        0.0000           100.00%
*     0+    0                        28036.0000        0.0000           100.00%
*     0+    0                        25689.0000        0.0000           100.00%
*     0+    0                        25543.0000        0.0000           100.00%
      0     0    14164.0344   157    25543.0000    14164.0344      967   44.55%
      0     0    14776.2814   166    25543.0000      Cuts: 46     1509   42.15%
      0     0    14918.9499   169    25543.0000      Cuts: 17     1740   41.59%
      0     0    14953.7062   169    25543.0000       Cuts: 9     1834   41.46%
*     0+    0                        17778.0000    14953.7062            15.89%
*     0+    0                        17100.0000    14953.7062            12.55%
      0     0    14983.9008   170    17100.0000      Cuts: 16     1987   12.37%
      0     0    15008.7223   170    17100.0000      Cuts: 15     2115   12.23%
      0     0    15018.8763   176    17100.0000       Cuts: 6     2188   12.17%
      0     0    15019.1006   175    17100.0000    MIRcuts: 1     2205   12.17%
      0     0    15027.4026   176    17100.0000   ZeroHalf: 3     2268   12.12%
      0     0    15035.4300   178    17100.0000       Cuts: 6     2324   12.07%
      0     0    15039.3998   180    17100.0000       Cuts: 5     2364   12.05%
      0     0    15039.5891   180    17100.0000    MIRcuts: 2     2375   12.05%
      0     2    15039.5891   180    17100.0000    15039.5891     2375   12.05%
Elapsed time = 4.13 sec. (2572.92 ticks, tree = 0.00 MB, solutions = 6)
      8    10    15100.3924   167    17100.0000    15047.3689     3091   12.00%
     31    33    15118.0617   166    17100.0000    15050.1283     5231   11.99%
     57    59    15153.7003   161    17100.0000    15050.1283     7512   11.99%
*    98+   98                        16550.0000    15050.1283             9.06%
     98   100    15207.6504   144    16550.0000    15050.1283    10654    9.06%
    171   173    15403.5632   118    16550.0000    15050.1283    15350    9.06%
    244   246    15888.7848    91    16550.0000    15050.1283    19283    9.06%
    307   309    15695.5241    71    16550.0000    15050.1283    22545    9.06%
    385   385    16101.1748    92    16550.0000    15050.1283    26569    9.06%
    442   432    15288.6702   139    16550.0000    15063.8812    29406    8.98%
*   507+  477                        16520.0000    15063.8812             8.81%
    744   653    15173.8497   155    16520.0000    15063.8812    43369    8.81%
Elapsed time = 8.92 sec. (6135.21 ticks, tree = 5.19 MB, solutions = 8)
    978   879    15230.4995   187    16520.0000    15069.5966    56205    8.78%
   1200  1086    15115.4588   199    16520.0000    15115.4588    68151    8.50%
   1205  1089    15173.3473   176    16520.0000    15115.6302    68928    8.50%
   1210  1092    15199.3503   182    16520.0000    15130.3746    69491    8.41%
   1227  1100    15183.2039   176    16520.0000    15130.3746    71335    8.41%
   1246  1113    15284.0067   163    16520.0000    15130.3746    73615    8.41%
   1303  1148    15245.1971   179    16520.0000    15130.3746    79241    8.41%
   1416  1220    15387.7232   150    16520.0000    15130.3746    89207    8.41%
   1544  1285    15703.4372   117    16520.0000    15130.3746    97997    8.41%
   1701  1370    15598.3596   131    16520.0000    15130.3746   108537    8.41%
Elapsed time = 38.09 sec. (24202.02 ticks, tree = 11.72 MB, solutions = 8)
   1873  1467    15572.2742   141    16520.0000    15130.3746   118516    8.41%
   2045  1564    15733.1215   106    16520.0000    15130.3746   127549    8.41%
   2111  1603    15724.9572   127    16520.0000    15130.3746   130663    8.41%
   2373  1737    15238.9674   162    16520.0000    15130.3746   142706    8.41%
   2632  1873    15482.2679   141    16520.0000    15130.3746   154950    8.41%
   2801  1947    15258.8318   172    16520.0000    15136.5710   163889    8.37%
   3004  2065    15569.8517   135    16520.0000    15136.5710   174994    8.37%
   3189  2143    15746.8442   135    16520.0000    15136.5710   183948    8.37%
   3316  2210    15772.1665   124    16520.0000    15136.5710   192552    8.37%
   3478  2302    15570.4057   123    16520.0000    15136.5710   204396    8.37%
Elapsed time = 52.83 sec. (34117.93 ticks, tree = 21.03 MB, solutions = 8)
   3677  2431    15664.8186   117    16520.0000    15136.5710   216251    8.37%
   3884  2638    16392.0534    80    16520.0000    15136.5710   226270    8.37%
   4076  2815    16078.1438    99    16520.0000    15136.5710   234714    8.37%
   4252  2983    15295.8993   174    16520.0000    15151.7099   243938    8.28%
   4464  3195    15360.3355   157    16520.0000    15164.4065   253598    8.21%
   4658  3389    15456.9370   143    16520.0000    15164.4065   263796    8.21%
   4913  3621    15243.6699   184    16520.0000    15164.4065   274965    8.21%
*  4947+ 3646                        16468.0000    15164.4065             7.92%
   5080  3758    15409.2403   170    16468.0000    15164.4065   287007    7.92%
   5194  3872    15480.0941   169    16468.0000    15164.4065   293704    7.92%
   5375  4037    15339.7168   181    16468.0000    15175.0245   302968    7.85%
Elapsed time = 69.11 sec. (44777.18 ticks, tree = 39.10 MB, solutions = 9)
   5751  4413    15517.3117   175    16468.0000    15175.0245   317258    7.85%
   5942  4604    15239.1288   171    16468.0000    15175.0245   324448    7.85%
   6134  4796    15388.8153   176    16468.0000    15179.7754   333199    7.82%
   6304  4966    15630.8760   154    16468.0000    15179.7754   339928    7.82%
   6557  5219    15727.8033   154    16468.0000    15179.7754   348705    7.82%
   6872  5534    15409.4887   173    16468.0000    15183.3110   361953    7.80%
   7080  5742    15602.6081   163    16468.0000    15183.3110   370354    7.80%
   7269  5931    15732.1628   152    16468.0000    15183.3110   378312    7.80%
   7597  6259    15369.1729   170    16468.0000    15183.3110   391223    7.80%
   7797  6459    15629.5494   157    16468.0000    15183.3110   399862    7.80%
Elapsed time = 85.43 sec. (55417.00 ticks, tree = 61.22 MB, solutions = 9)
   8043  6705    15388.0931   159    16468.0000    15187.7978   410518    7.77%
   8238  6900    15387.1311   144    16468.0000    15187.7978   418664    7.77%
   8454  7116    15356.2226   161    16468.0000    15189.3220   430429    7.76%
   8511  7173    15450.2962   158    16468.0000    15189.3220   435285    7.76%
   8607  7269    15831.3443   123    16468.0000    15189.3220   442668    7.76%
   8762  7424    15883.4943   124    16468.0000    15189.3220   456720    7.76%
   8893  7555    15750.7424   129    16468.0000    15189.3220   467004    7.76%
   9138  7776    16044.8615   105    16468.0000    15189.3220   480844    7.76%
*  9156+ 7790                        16088.0000    15189.3220             5.59%
   9156  7792    15333.2737   162    16088.0000    15189.3220   481876    5.59%
   9246  7878    16350.2283    94    16088.0000    15189.3220   486238    5.59%
Elapsed time = 101.23 sec. (66272.67 ticks, tree = 75.88 MB, solutions = 9)
*  9484+ 6801                        16044.0000    15190.3403             5.32%
   9610  6929    15437.9358   160    16044.0000    15190.3403   502909    5.32%
   9816  7135    15583.3858   163    16044.0000    15190.3403   512118    5.32%
  10141  7220    15347.7327   160    16044.0000    15191.5386   523979    5.31%
  10331  7396    15570.8775   168    16044.0000    15191.5386   531350    5.31%
  10587  7652    15753.4009   152    16044.0000    15191.5386   542150    5.31%
  10942  7998    15825.8670   158    16044.0000    15191.5386   555327    5.31%
  11161  8217    15464.1965   162    16044.0000    15191.5386   564978    5.31%
  11388  8444    15652.5946   143    16044.0000    15191.5386   574960    5.31%
  11738  8794    15358.1176   162    16044.0000    15194.7344   588132    5.29%
  11954  8994    15670.8728   142    16044.0000    15194.7344   597825    5.29%
Elapsed time = 116.89 sec. (75939.93 ticks, tree = 84.11 MB, solutions = 11)
  12285  9325    15647.3531   135    16044.0000    15196.4484   612401    5.28%
  12433  9472    15793.0917   124    16044.0000    15196.4484   620228    5.28%
  12641  9677    15441.1124   160    16044.0000    15196.4484   632797    5.28%
  12902  9918    15289.0012   165    16044.0000    15197.6837   649056    5.27%
  13031 10036    15762.8674   139    16044.0000    15197.6837   655055    5.27%
  13345 10348    15567.2235   168    16044.0000    15197.6837   666303    5.27%
  13661 10625    15415.2848   167    16044.0000    15197.6837   676719    5.27%
  13890 10836    15588.1267   167    16044.0000    15197.6837   685392    5.27%
  14158 11101    15780.7421   161    16044.0000    15197.6837   694716    5.27%
  14472 11373    15480.1441   140    16044.0000    15199.2522   706641    5.27%
Elapsed time = 132.91 sec. (85596.70 ticks, tree = 116.11 MB, solutions = 11)
  14652 11527    15278.7440   174    16044.0000    15199.2522   713452    5.27%
  14860 11726    15549.9980   160    16044.0000    15199.2522   721616    5.27%
  15267 12112    15555.2276   146    16044.0000    15200.5664   738171    5.26%
  15543 12378    15324.6691   157    16044.0000    15200.5664   749578    5.26%
  15839 12650    15478.2014   120    16044.0000    15201.2200   762148    5.25%
  16023 12821    15260.5165   166    16044.0000    15201.2200   769825    5.25%
  16303 13042    15453.1523   173    16044.0000    15201.2200   781002    5.25%
  16492 13222    15748.0254   126    16044.0000    15202.4897   796245    5.25%
  16749 13451    15411.0824   164    16044.0000    15202.4897   807666    5.25%
  17005 13691    15688.9463   151    16044.0000    15202.4897   817990    5.25%
Elapsed time = 148.97 sec. (95280.12 ticks, tree = 137.52 MB, solutions = 11)
  17157 13843    15721.1227   143    16044.0000    15204.0567   823540    5.24%
* 17389+14071                        16018.0000    15204.0567             5.08%
  18016 14409    15659.5978   163    16018.0000    15204.1210   852409    5.08%
  18380 14745    15256.5888   178    16018.0000    15204.1210   863454    5.08%
  18820 15123    15467.4366   168    16018.0000    15206.5902   878405    5.07%
  19165 15460    15843.0349   131    16018.0000    15206.5902   890276    5.07%
  19382 15660    15543.9295   134    16018.0000    15206.5902   899578    5.07%
  19656 15907    15736.9600   112    16018.0000    15208.2296   909900    5.06%
  19884 16116    15346.9430   166    16018.0000    15208.2296   918861    5.06%
* 19894+16124                        15881.0000    15208.2296             4.24%
  20286 14466    15272.7828   172    15881.0000    15209.6622   933035    4.23%
  21010 15125    15468.7297   157    15881.0000    15209.6622   974662    4.23%
Elapsed time = 173.61 sec. (110350.10 ticks, tree = 158.26 MB, solutions = 14)
  21499 15597    15690.9455   152    15881.0000    15210.3305   992264    4.22%

Mixed integer rounding cuts applied:  131
Zero-half cuts applied:  32
Lift and project cuts applied:  6
Gomory fractional cuts applied:  1

Root node processing (before b&c):
  Real time             =    4.12 sec. (2570.48 ticks)
Parallel b&c, 4 threads:
  Real time             =  175.90 sec. (112334.98 ticks)
  Sync time (average)   =    6.45 sec.
  Wait time (average)   =    6.81 sec.
                          ------------
Total (root+branch&cut) =  180.03 sec. (114905.47 ticks)
optimal objective= 15881.0+64614.0=80495.0

Step 4-AdjustFlow
After adjust, flowCost=64115.0
Tried aggregator 2 times.
MIP Presolve eliminated 83348 rows and 46435 columns.
Aggregator did 57510 substitutions.
Reduced MIP has 61672 rows, 146645 columns, and 393140 nonzeros.
Reduced MIP has 0 binaries, 288 generals, 0 SOSs, and 0 indicators.
Presolve time = 0.68 sec. (332.36 ticks)
Tried aggregator 1 time.
MIP Presolve eliminated 183 rows and 435 columns.
Reduced MIP has 61489 rows, 146210 columns, and 391969 nonzeros.
Reduced MIP has 0 binaries, 288 generals, 0 SOSs, and 0 indicators.
Presolve time = 0.39 sec. (174.67 ticks)
MIP emphasis: balance optimality and feasibility.
MIP search method: dynamic search.
Parallel mode: deterministic, using up to 4 threads.
Root relaxation solution time = 19.99 sec. (5609.74 ticks)

        Nodes                                         Cuts/
   Node  Left     Objective  IInf  Best Integer    Best Bound    ItCnt     Gap

      0     0    72542.1009    36                  72542.1009       30         
      0     0    72692.3901    39                   Cuts: 584     3075         
      0     0    72742.0756    37                   Cuts: 691     5216         
      0     0    72791.1404    40                MIRcuts: 688     8011         
      0     0    72803.7218    42                MIRcuts: 653    10869         
      0     0    72812.3223    44                MIRcuts: 715    12722         
      0     0    72817.2430    45                MIRcuts: 774    13969         

Mixed integer rounding cuts applied:  1224
Gomory fractional cuts applied:  4

Root node processing (before b&c):
  Real time             =  180.09 sec. (47269.90 ticks)
Parallel b&c, 4 threads:
  Real time             =    0.00 sec. (0.00 ticks)
  Sync time (average)   =    0.00 sec.
  Wait time (average)   =    0.00 sec.
                          ------------
Total (root+branch&cut) =  180.09 sec. (47269.90 ticks)
Exception in thread "main" ilog.cplex.CpxException: CPLEX Error  1217: No solution exists.

	at ilog.cplex.CplexI.CALL(CplexI.java:4714)
	at ilog.cplex.CplexI._getObjValue(CplexI.java:5983)
	at ilog.cplex.CplexI.getObjValue(CplexI.java:3114)
	at ilog.cplex.IloCplex.getObjValue(IloCplex.java:5309)
	at LocalSearchHeuristicSolver.Intensification(LocalSearchHeuristicSolver.java:1230)
	at LocalSearchHeuristicSolver.TabuSearch(LocalSearchHeuristicSolver.java:695)
	at LocalSearchHeuristicSolver.main(LocalSearchHeuristicSolver.java:2591)









LocalSearchHeuristicSolver solver = new LocalSearchHeuristicSolver("./data/testset/test15_10_50_50_400.txt", 2,5,3,5,150);
solver.TabuSearch(solutionList.get(0),10,500);
Intensification
        cplex.setParam(IloCplex.DoubleParam.EpGap, 0.02);
		cplex.setParam(IloCplex.DoubleParam.TiLim, 900); //15 mins

number of service arcs=2500
number of holding arcs=500

Time of first LP solve= 18475

There are 9513 columns added to the model.

Tried aggregator 2 times.
MIP Presolve eliminated 191736 rows and 140390 columns.
MIP Presolve modified 5580 coefficients.
Aggregator did 10580 substitutions.
Reduced MIP has 214 rows, 2833 columns, and 12266 nonzeros.
Reduced MIP has 202 binaries, 2492 generals, 0 SOSs, and 0 indicators.
Presolve time = 0.18 sec. (152.41 ticks)
Found incumbent of value 146454.000000 after 0.22 sec. (180.09 ticks)
Tried aggregator 1 time.
Reduced MIP has 214 rows, 2833 columns, and 12266 nonzeros.
Reduced MIP has 202 binaries, 2492 generals, 0 SOSs, and 0 indicators.
Presolve time = 0.01 sec. (5.46 ticks)
Probing time = 0.08 sec. (0.79 ticks)
Clique table members: 1.
MIP emphasis: balance optimality and feasibility.
MIP search method: dynamic search.
Parallel mode: deterministic, using up to 4 threads.
Root relaxation solution time = 0.03 sec. (7.16 ticks)

        Nodes                                         Cuts/
   Node  Left     Objective  IInf  Best Integer    Best Bound    ItCnt     Gap

*     0+    0                       146454.0000    63787.0000            56.45%
*     0+    0                       111293.0000    63787.0000            42.69%
*     0+    0                       109504.0000    63787.0000            41.75%
      0     0    92090.1915    87   109504.0000    92090.1915      269   15.90%
      0     0    92904.2432    95   109504.0000     Cuts: 109      455   15.16%
      0     0    93186.7141    94   109504.0000      Cuts: 50      554   14.90%
      0     0    93319.0753   106   109504.0000   MIRcuts: 39      662   14.78%
      0     0    93365.5306   107   109504.0000   MIRcuts: 33      726   14.74%
      0     0    93428.8261    99   109504.0000   MIRcuts: 20      805   14.68%
      0     0    93440.8092    95   109504.0000   MIRcuts: 19      848   14.67%
      0     0    93461.7981    96   109504.0000      Cuts: 15      871   14.65%
      0     0    93464.2224   100   109504.0000    MIRcuts: 4      907   14.65%
      0     0    93464.9530    97   109504.0000    MIRcuts: 2      926   14.65%
*     0+    0                        94717.0000    93464.9530             1.32%
*     0+    0                        94238.0000    93471.3304             0.81%

Mixed integer rounding cuts applied:  105
Zero-half cuts applied:  1
Gomory fractional cuts applied:  11

Root node processing (before b&c):
  Real time             =    1.00 sec. (599.00 ticks)
Parallel b&c, 4 threads:
  Real time             =    0.00 sec. (0.00 ticks)
  Sync time (average)   =    0.00 sec.
  Wait time (average)   =    0.00 sec.
                          ------------
Total (root+branch&cut) =    1.00 sec. (599.00 ticks)
optimal objective= 94238.0

artificial: false set: [2944, 2945, 2946, 2947, 2948, 2949, 2886, 775, 1937, 2900, 2901, 2902, 2903, 2904, 2905, 2906, 2907, 2908, 2909, 2910, 2015, 2911, 2912, 2913, 2914, 2670, 2671, 2672, 2673, 2674, 180] start node= 8 start time= 45 capacity type= 2
(8,0)->(8,1)->(8,2)->(8,3)->(8,4)->(8,5)->(8,6)->(8,7)->(8,8)->(8,9)->(8,10)->(8,11)->(8,12)->(8,13)->(8,14)->(8,15)->(3,20)->(3,21)->(3,22)->(3,23)->(3,24)->(3,25)->(0,30)->(7,36)->(7,37)->(8,44)->(8,45)->(8,46)->(8,47)->(8,48)->(8,49)->(8,0):1

artificial: false set: [2520, 2521, 2522, 2523, 2524, 2525, 2526, 2527, 2528, 2529, 2849, 2530, 2531, 2532, 1892, 233, 1515, 2800, 2801, 2802, 2803, 2804, 2805, 2806, 2807, 2487, 2808, 2809, 2810, 2811, 2812, 2813, 2814] start node= 9 start time= 37 capacity type= 1
(6,0)->(6,1)->(6,2)->(6,3)->(6,4)->(6,5)->(6,6)->(6,7)->(6,8)->(6,9)->(6,10)->(6,11)->(6,12)->(6,13)->(6,14)->(6,15)->(0,20)->(0,21)->(0,22)->(0,23)->(0,24)->(0,25)->(0,26)->(0,27)->(0,28)->(0,29)->(0,30)->(0,31)->(0,32)->(0,33)->(9,37)->(7,42)->(6,49)->(6,0):1

artificial: false set: [2891, 2520, 2521, 2522, 2523, 2524, 2525, 2526, 2527, 2528, 2529, 2849, 2530, 2531, 1892, 232, 1515, 2800, 2801, 2802, 2803, 2804, 2805, 2486, 2806, 2807, 2808, 2809, 2810, 2811, 2812, 2813, 2814] start node= 7 start time= 41 capacity type= 0
(6,0)->(6,1)->(6,2)->(6,3)->(6,4)->(6,5)->(6,6)->(6,7)->(6,8)->(6,9)->(6,10)->(6,11)->(6,12)->(6,13)->(6,14)->(6,15)->(0,20)->(0,21)->(0,22)->(0,23)->(0,24)->(0,25)->(0,26)->(0,27)->(0,28)->(0,29)->(0,30)->(0,31)->(0,32)->(9,36)->(7,41)->(7,42)->(6,49)->(6,0):1

artificial: false set: [2561, 2562, 2563, 2564, 2565, 2566, 2950, 2567, 2951, 2568, 2952, 2569, 2570, 2571, 2572, 2573, 2253, 2574, 2575, 2576, 2577, 2578, 339, 2579, 2580, 2581, 2582, 2583, 2584, 2585, 2586, 2587, 2588, 745] start node= 9 start time= 0 capacity type= 2
(9,0)->(9,1)->(9,2)->(9,3)->(1,11)->(1,12)->(1,13)->(1,14)->(1,15)->(1,16)->(1,17)->(1,18)->(1,19)->(1,20)->(1,21)->(1,22)->(1,23)->(1,24)->(1,25)->(1,26)->(1,27)->(1,28)->(1,29)->(1,30)->(1,31)->(1,32)->(1,33)->(1,34)->(1,35)->(1,36)->(1,37)->(1,38)->(1,39)->(2,45)->(9,0):1

artificial: false set: [2753, 2754, 2755, 2756, 2757, 2758, 2759, 2760, 2761, 2762, 2763, 2764, 2765, 2766, 2767, 2768, 147, 2590, 2977, 2978, 291, 2979, 2980, 2981, 2282, 2546, 1469] start node= 5 start time= 11 capacity type= 2
(5,3)->(5,4)->(5,5)->(5,6)->(5,7)->(5,8)->(5,9)->(5,10)->(5,11)->(5,12)->(5,13)->(5,14)->(5,15)->(5,16)->(5,17)->(5,18)->(5,19)->(9,27)->(9,28)->(9,29)->(9,30)->(9,31)->(9,32)->(1,40)->(1,41)->(0,46)->(0,47)->(5,3):1

artificial: false set: [2944, 2880, 2945, 2881, 2946, 2882, 2947, 2883, 2948, 2884, 2949, 2885, 2886, 1937, 2900, 2901, 2902, 2903, 2904, 2905, 2906, 2907, 2908, 2909, 2910, 2911, 2912, 2913, 2914, 2915, 2916, 2917, 2918, 2919, 2920, 2921, 2922, 2877, 2173, 2878, 2879] start node= 8 start time= 0 capacity type= 1
(8,0)->(8,1)->(8,2)->(8,3)->(8,4)->(8,5)->(8,6)->(8,7)->(8,8)->(8,9)->(8,10)->(8,11)->(8,12)->(8,13)->(8,14)->(8,15)->(8,16)->(8,17)->(8,18)->(8,19)->(8,20)->(8,21)->(8,22)->(8,23)->(7,27)->(7,28)->(7,29)->(7,30)->(7,31)->(7,32)->(7,33)->(7,34)->(7,35)->(7,36)->(7,37)->(8,44)->(8,45)->(8,46)->(8,47)->(8,48)->(8,49)->(8,0):2

artificial: false set: [2560, 2561, 2562, 2563, 2564, 2565, 2566, 2567, 2568, 2569, 2570, 2571, 2572, 589, 333, 2573, 2574, 2575, 2576, 2577, 2578, 2579, 2580, 2581, 2582, 2594, 2595, 2596, 2597, 2598, 2599, 2550, 2551, 2552, 2553, 2554, 2555, 2556, 2557, 2558, 2559] start node= 1 start time= 19 capacity type= 2
(1,0)->(1,1)->(1,2)->(1,3)->(1,4)->(1,5)->(1,6)->(1,7)->(1,8)->(1,9)->(1,10)->(1,11)->(1,12)->(1,13)->(1,14)->(1,15)->(1,16)->(1,17)->(1,18)->(1,19)->(1,20)->(1,21)->(1,22)->(1,23)->(1,24)->(1,25)->(1,26)->(1,27)->(1,28)->(1,29)->(1,30)->(1,31)->(1,32)->(1,33)->(2,39)->(1,44)->(1,45)->(1,46)->(1,47)->(1,48)->(1,49)->(1,0):1

artificial: false set: [1089, 643, 2697, 2698, 2699, 2650, 2651, 2652, 2653, 2654, 2655, 2656, 2657, 2658, 2659, 2660, 2661, 934, 2662, 2663, 2664, 2665, 2666, 2667, 2668, 2669, 2670, 2671, 2672, 2673, 2674, 2675, 2676, 2677, 2678, 2679, 2680, 2681, 2682, 2683] start node= 4 start time= 39 capacity type= 1
(3,0)->(3,1)->(3,2)->(3,3)->(3,4)->(3,5)->(3,6)->(3,7)->(3,8)->(3,9)->(3,10)->(3,11)->(3,12)->(3,13)->(3,14)->(3,15)->(3,16)->(3,17)->(3,18)->(3,19)->(3,20)->(3,21)->(3,22)->(3,23)->(3,24)->(3,25)->(3,26)->(3,27)->(3,28)->(3,29)->(3,30)->(3,31)->(3,32)->(3,33)->(3,34)->(4,39)->(2,43)->(3,47)->(3,48)->(3,49)->(3,0):1

artificial: false set: [1605, 2634, 2635, 2636, 2637, 2638, 2639, 2640, 2709, 2710, 2711, 2712, 2713, 2714, 2715, 2716, 2717, 2718, 2847, 2719, 2848, 2720, 2849, 2721, 2722, 2723, 2724, 2725, 2726, 2727, 2728, 2729, 2800, 2801, 2802, 2803, 691, 2804, 1080] start node= 4 start time= 9 capacity type= 1
(6,0)->(6,1)->(6,2)->(6,3)->(6,4)->(6,5)->(4,9)->(4,10)->(4,11)->(4,12)->(4,13)->(4,14)->(4,15)->(4,16)->(4,17)->(4,18)->(4,19)->(4,20)->(4,21)->(4,22)->(4,23)->(4,24)->(4,25)->(4,26)->(4,27)->(4,28)->(4,29)->(4,30)->(2,34)->(2,35)->(2,36)->(2,37)->(2,38)->(2,39)->(2,40)->(2,41)->(6,47)->(6,48)->(6,49)->(6,0):1

artificial: false set: [2624, 2625, 2626, 2627, 2628, 2629, 2630, 2950, 2631, 2951, 2952, 2953, 2954, 2955, 786, 1562, 2406, 2541, 2542, 243, 2997, 2998, 2999, 632, 2620, 2621, 2622, 2623] start node= 9 start time= 47 capacity type= 2
(9,0)->(9,1)->(9,2)->(9,3)->(9,4)->(9,5)->(9,6)->(6,12)->(2,20)->(2,21)->(2,22)->(2,23)->(2,24)->(2,25)->(2,26)->(2,27)->(2,28)->(2,29)->(2,30)->(2,31)->(2,32)->(3,36)->(0,41)->(0,42)->(0,43)->(9,47)->(9,48)->(9,49)->(9,0):1

artificial: false set: [2688, 2500, 2501, 2502, 2503, 2504, 2505, 1545, 2506, 2507, 2508, 2509, 2510, 2511, 2512, 2513, 2514, 2515, 2516, 2517, 2518, 2326, 2519, 2520, 2521, 2844, 989, 222, 633, 2687] start node= 9 start time= 26 capacity type= 2
(0,0)->(0,1)->(0,2)->(0,3)->(0,4)->(0,5)->(0,6)->(0,7)->(0,8)->(0,9)->(0,10)->(0,11)->(0,12)->(0,13)->(0,14)->(0,15)->(0,16)->(0,17)->(0,18)->(0,19)->(0,20)->(0,21)->(0,22)->(9,26)->(2,33)->(3,37)->(3,38)->(3,39)->(6,44)->(6,45)->(0,0):1

artificial: false set: [643, 900, 2630, 2631, 2632, 2697, 2633, 2698, 2634, 2699, 2635, 2636, 2637, 2638, 2639, 2640, 2641, 2705, 2642, 2706, 2707, 2708, 2709, 2710, 2711, 2712, 2713, 2714, 2715, 2716, 2717, 2718, 2719, 2720, 2721, 2722, 2723, 2724, 2725, 1076] start node= 4 start time= 5 capacity type= 1
(3,0)->(4,5)->(4,6)->(4,7)->(4,8)->(4,9)->(4,10)->(4,11)->(4,12)->(4,13)->(4,14)->(4,15)->(4,16)->(4,17)->(4,18)->(4,19)->(4,20)->(4,21)->(4,22)->(4,23)->(4,24)->(4,25)->(4,26)->(2,30)->(2,31)->(2,32)->(2,33)->(2,34)->(2,35)->(2,36)->(2,37)->(2,38)->(2,39)->(2,40)->(2,41)->(2,42)->(2,43)->(3,47)->(3,48)->(3,49)->(3,0):4

artificial: false set: [2500, 2501, 2502, 2503, 2504, 2505, 2506, 2507, 2508, 2509, 2510, 2511, 2512, 213, 2967, 2968, 792, 2969, 2970, 2971, 2331, 2972, 2973, 2974, 2975, 2976, 2977, 2978, 2979, 2980, 2547, 2548, 2549, 638] start node= 9 start time= 30 capacity type= 2
(0,0)->(0,1)->(0,2)->(0,3)->(0,4)->(0,5)->(0,6)->(0,7)->(0,8)->(0,9)->(0,10)->(0,11)->(0,12)->(0,13)->(9,17)->(9,18)->(9,19)->(9,20)->(9,21)->(9,22)->(9,23)->(9,24)->(9,25)->(9,26)->(9,27)->(9,28)->(9,29)->(9,30)->(9,31)->(2,38)->(3,42)->(0,47)->(0,48)->(0,49)->(0,0):1

artificial: false set: [256, 161, 1251, 2629, 934, 1771, 1039, 145, 2867, 2868, 2869, 630, 2870] start node= 4 start time= 39 capacity type= 1
(5,1)->(1,6)->(0,11)->(7,17)->(7,18)->(7,19)->(7,20)->(7,21)->(2,29)->(2,30)->(3,34)->(4,39)->(0,45)->(5,1):1

artificial: false set: [1742, 2900, 2901, 2902, 2071, 2903, 2904, 2840, 2905, 2841, 2906, 2778, 2907, 2779, 2908, 2780, 2909, 2781, 2910, 2782, 2911, 2912, 2913, 2914, 2915, 2916, 2917, 2918, 2919, 1383, 2920] start node= 5 start time= 28 capacity type= 2
(8,0)->(8,1)->(8,2)->(8,3)->(8,4)->(8,5)->(8,6)->(8,7)->(8,8)->(8,9)->(8,10)->(8,11)->(8,12)->(8,13)->(8,14)->(8,15)->(8,16)->(8,17)->(8,18)->(8,19)->(8,20)->(8,21)->(5,28)->(5,29)->(5,30)->(5,31)->(5,32)->(5,33)->(6,40)->(6,41)->(6,42)->(8,0):1

artificial: false set: [2944, 2945, 2946, 2115, 2947, 2948, 2821, 2949, 2822, 2823, 2824, 2825, 2826, 2900, 2901, 1238, 2902, 2903, 2904, 2905, 2906, 1627, 2907, 2908, 2909, 2910, 2911, 2912, 2913, 2914, 2731, 2732, 2733, 2734, 2735, 2736, 2737] start node= 8 start time= 45 capacity type= 2
(8,0)->(8,1)->(8,2)->(8,3)->(8,4)->(8,5)->(8,6)->(8,7)->(8,8)->(8,9)->(8,10)->(8,11)->(8,12)->(8,13)->(8,14)->(8,15)->(6,21)->(6,22)->(6,23)->(6,24)->(6,25)->(6,26)->(6,27)->(4,31)->(4,32)->(4,33)->(4,34)->(4,35)->(4,36)->(4,37)->(4,38)->(8,44)->(8,45)->(8,46)->(8,47)->(8,48)->(8,49)->(8,0):1

artificial: false set: [2624, 2560, 2625, 2626, 2627, 2628, 2629, 2630, 2631, 2632, 2633, 2634, 2635, 2636, 589, 2637, 2638, 2594, 2595, 2596, 2597, 2598, 2599, 2550, 311, 2551, 2552, 2617, 2553, 2618, 2554, 2619, 2555, 2620, 2556, 2621, 2557, 2622, 2558, 2623, 2559] start node= 1 start time= 0 capacity type= 2
(1,0)->(1,1)->(1,2)->(1,3)->(1,4)->(1,5)->(1,6)->(1,7)->(1,8)->(1,9)->(1,10)->(1,11)->(2,17)->(2,18)->(2,19)->(2,20)->(2,21)->(2,22)->(2,23)->(2,24)->(2,25)->(2,26)->(2,27)->(2,28)->(2,29)->(2,30)->(2,31)->(2,32)->(2,33)->(2,34)->(2,35)->(2,36)->(2,37)->(2,38)->(2,39)->(1,44)->(1,45)->(1,46)->(1,47)->(1,48)->(1,49)->(1,0):1

artificial: false set: [1730, 674, 2343, 2600, 2601, 2602, 2603, 2604, 2605, 2606, 2607, 2608, 2609, 2610, 2611, 2612, 2613, 2614, 2615, 2616, 2617, 2618, 2619, 2620, 2621, 2238, 2622, 2623] start node= 9 start time= 43 capacity type= 2
(2,0)->(2,1)->(2,2)->(2,3)->(2,4)->(2,5)->(2,6)->(2,7)->(2,8)->(2,9)->(2,10)->(2,11)->(2,12)->(2,13)->(2,14)->(2,15)->(2,16)->(2,17)->(2,18)->(2,19)->(2,20)->(2,21)->(2,22)->(2,23)->(2,24)->(6,30)->(8,38)->(9,43)->(2,0):1

artificial: false set: [2752, 2881, 2753, 2882, 2754, 2883, 2755, 2884, 2756, 2885, 2757, 2886, 2758, 2759, 2760, 2761, 2762, 2763, 2764, 2765, 2766, 2767, 1424, 2768, 1937, 2769, 2770, 2771, 2772, 2773, 2094, 2751] start node= 8 start time= 44 capacity type= 2
(5,1)->(5,2)->(5,3)->(5,4)->(5,5)->(5,6)->(5,7)->(5,8)->(5,9)->(5,10)->(5,11)->(5,12)->(5,13)->(5,14)->(5,15)->(5,16)->(5,17)->(5,18)->(5,19)->(5,20)->(5,21)->(5,22)->(5,23)->(5,24)->(7,31)->(7,32)->(7,33)->(7,34)->(7,35)->(7,36)->(7,37)->(8,44)->(5,1):1

artificial: false set: [2688, 2689, 2690, 2691, 2630, 2631, 2632, 2700, 2701, 2702, 2703, 2704, 2705, 2706, 2707, 2708, 2709, 2710, 2711, 2712, 2713, 2714, 2715, 2716, 2717, 2718, 2719, 2720, 2721, 2722, 2723, 2724, 2725, 942, 1076, 633, 2747, 2748, 2749, 2687] start node= 4 start time= 0 capacity type= 1
(4,0)->(4,1)->(4,2)->(4,3)->(4,4)->(4,5)->(4,6)->(4,7)->(4,8)->(4,9)->(4,10)->(4,11)->(4,12)->(4,13)->(4,14)->(4,15)->(4,16)->(4,17)->(4,18)->(4,19)->(4,20)->(4,21)->(4,22)->(4,23)->(4,24)->(4,25)->(4,26)->(2,30)->(2,31)->(2,32)->(2,33)->(3,37)->(3,38)->(3,39)->(3,40)->(3,41)->(3,42)->(4,47)->(4,48)->(4,49)->(4,0):6

artificial: false set: [2695, 2696, 2697, 2698, 2699, 2515, 2772, 2773, 2774, 2775, 2776, 2777, 2650, 2778, 2651, 2779, 2652, 2780, 2653, 2781, 2654, 2782, 2655, 2783, 2656, 2784, 2657, 2785, 2658, 2786, 2659, 116, 760, 1337] start node= 5 start time= 22 capacity type= 2
(3,0)->(3,1)->(3,2)->(3,3)->(3,4)->(3,5)->(3,6)->(3,7)->(3,8)->(3,9)->(3,10)->(0,15)->(0,16)->(5,22)->(5,23)->(5,24)->(5,25)->(5,26)->(5,27)->(5,28)->(5,29)->(5,30)->(5,31)->(5,32)->(5,33)->(5,34)->(5,35)->(5,36)->(5,37)->(3,45)->(3,46)->(3,47)->(3,48)->(3,49)->(3,0):1

artificial: false set: [2688, 2700, 2701, 2702, 2703, 2704, 2705, 2706, 2707, 2708, 2844, 989, 2015, 1645, 2670, 2671, 2672, 2673, 2674, 2675, 2676, 2677, 2678, 2679, 2680, 2681, 1209, 2682, 2683, 2684, 2685, 2749, 2686, 2687] start node= 4 start time= 49 capacity type= 0
(4,0)->(4,1)->(4,2)->(4,3)->(4,4)->(4,5)->(4,6)->(4,7)->(4,8)->(4,9)->(8,15)->(3,20)->(3,21)->(3,22)->(3,23)->(3,24)->(3,25)->(3,26)->(3,27)->(3,28)->(3,29)->(3,30)->(3,31)->(3,32)->(3,33)->(3,34)->(3,35)->(3,36)->(3,37)->(3,38)->(3,39)->(6,44)->(6,45)->(4,49)->(4,0):1

artificial: false set: [1615, 2847, 2719, 2848, 2720, 2849, 2721, 2722, 2723, 2724, 2725, 2726, 2727, 2728, 2729, 2730, 2731, 2732, 2733, 2734, 2735, 2800, 2736, 2801, 2802, 2803, 691, 2804, 2805, 2806, 2807, 2808, 2809, 2810, 2811, 2812, 2813, 2814, 1087] start node= 4 start time= 19 capacity type= 0
(6,0)->(6,1)->(6,2)->(6,3)->(6,4)->(6,5)->(6,6)->(6,7)->(6,8)->(6,9)->(6,10)->(6,11)->(6,12)->(6,13)->(6,14)->(6,15)->(4,19)->(4,20)->(4,21)->(4,22)->(4,23)->(4,24)->(4,25)->(4,26)->(4,27)->(4,28)->(4,29)->(4,30)->(4,31)->(4,32)->(4,33)->(4,34)->(4,35)->(4,36)->(4,37)->(2,41)->(6,47)->(6,48)->(6,49)->(6,0):2

artificial: false set: [1032, 1615, 88, 2719, 2720, 2848, 2721, 2849, 993, 2722, 2723, 2724, 2725, 2726, 2727, 2728, 2729, 2730, 2731, 2800, 2801, 2802, 2803, 2804, 2805, 2806, 2807, 2808, 2809, 2810, 2811, 2812, 2813, 2814] start node= 4 start time= 31 capacity type= 2
(6,0)->(6,1)->(6,2)->(6,3)->(6,4)->(6,5)->(6,6)->(6,7)->(6,8)->(6,9)->(6,10)->(6,11)->(6,12)->(6,13)->(6,14)->(6,15)->(4,19)->(4,20)->(4,21)->(4,22)->(4,23)->(4,24)->(4,25)->(4,26)->(4,27)->(4,28)->(4,29)->(4,30)->(4,31)->(4,32)->(0,38)->(3,43)->(6,48)->(6,49)->(6,0):2

artificial: false set: [2816, 2817, 1538, 2818, 2819, 2820, 2821, 2822, 2823, 2824, 2825, 2826, 2827, 2828, 2829, 2830, 2831, 2832, 2833, 2834, 2835, 2836, 2837, 2400, 243, 2997, 2806, 2998, 2807, 2999, 2808, 2809, 2810, 2811, 2812, 2813, 2814, 2815] start node= 9 start time= 47 capacity type= 2
(9,0)->(6,6)->(6,7)->(6,8)->(6,9)->(6,10)->(6,11)->(6,12)->(6,13)->(6,14)->(6,15)->(6,16)->(6,17)->(6,18)->(6,19)->(6,20)->(6,21)->(6,22)->(6,23)->(6,24)->(6,25)->(6,26)->(6,27)->(6,28)->(6,29)->(6,30)->(6,31)->(6,32)->(6,33)->(6,34)->(6,35)->(6,36)->(6,37)->(6,38)->(0,43)->(9,47)->(9,48)->(9,49)->(9,0):1

artificial: false set: [2903, 2904, 2905, 2906, 2907, 2908, 2909, 2910, 2911, 1247, 2912, 2913, 2914, 2915, 2916, 2917, 2918, 2919, 2920, 2921, 2922, 2923, 2924, 2925, 942, 2926, 2927, 2928, 2929, 2930, 2931, 2932, 2037, 2933, 2934, 2935, 2936] start node= 8 start time= 24 capacity type= 2
(8,3)->(8,4)->(8,5)->(8,6)->(8,7)->(8,8)->(8,9)->(8,10)->(8,11)->(8,12)->(8,13)->(8,14)->(8,15)->(8,16)->(8,17)->(8,18)->(8,19)->(8,20)->(8,21)->(8,22)->(8,23)->(8,24)->(8,25)->(8,26)->(8,27)->(8,28)->(8,29)->(8,30)->(8,31)->(8,32)->(8,33)->(8,34)->(8,35)->(8,36)->(8,37)->(3,42)->(4,47)->(8,3):1

artificial: false set: [1031, 2700, 2701, 2702, 2703, 2704, 2705, 2706, 2707, 2708, 2709, 2710, 2711, 2712, 2713, 2714, 2715, 2716, 2717, 2718, 2719, 2720, 2721, 2722, 2723, 2724, 2725, 2726, 2727, 2728, 2729, 2730, 1843, 187] start node= 4 start time= 0 capacity type= 0
(4,0)->(4,1)->(4,2)->(4,3)->(4,4)->(4,5)->(4,6)->(4,7)->(4,8)->(4,9)->(4,10)->(4,11)->(4,12)->(4,13)->(4,14)->(4,15)->(4,16)->(4,17)->(4,18)->(4,19)->(4,20)->(4,21)->(4,22)->(4,23)->(4,24)->(4,25)->(4,26)->(4,27)->(4,28)->(4,29)->(4,30)->(4,31)->(0,37)->(7,43)->(4,0):1

artificial: false set: [1031, 2700, 2701, 2702, 2703, 2704, 2705, 2706, 2707, 2708, 2709, 2710, 2711, 2712, 2713, 2714, 2715, 2716, 2717, 2718, 2719, 2720, 2721, 2722, 2723, 2724, 2725, 2726, 2727, 2728, 2729, 2730, 1843, 187] start node= 4 start time= 10 capacity type= 2
(4,0)->(4,1)->(4,2)->(4,3)->(4,4)->(4,5)->(4,6)->(4,7)->(4,8)->(4,9)->(4,10)->(4,11)->(4,12)->(4,13)->(4,14)->(4,15)->(4,16)->(4,17)->(4,18)->(4,19)->(4,20)->(4,21)->(4,22)->(4,23)->(4,24)->(4,25)->(4,26)->(4,27)->(4,28)->(4,29)->(4,30)->(4,31)->(0,37)->(7,43)->(4,0):1

artificial: false set: [2752, 2753, 2754, 2755, 2756, 2757, 2758, 2759, 1480, 2760, 2761, 2762, 2763, 2764, 2765, 2766, 2767, 2768, 2769, 2770, 2771, 2772, 2773, 2389, 2774, 2775, 2776, 2777, 2778, 2779, 2795, 2796, 2988, 2797, 2798, 2799, 2750, 2751] start node= 9 start time= 38 capacity type= 2
(5,0)->(5,1)->(5,2)->(5,3)->(5,4)->(5,5)->(5,6)->(5,7)->(5,8)->(5,9)->(5,10)->(5,11)->(5,12)->(5,13)->(5,14)->(5,15)->(5,16)->(5,17)->(5,18)->(5,19)->(5,20)->(5,21)->(5,22)->(5,23)->(5,24)->(5,25)->(5,26)->(5,27)->(5,28)->(5,29)->(5,30)->(9,38)->(9,39)->(5,45)->(5,46)->(5,47)->(5,48)->(5,49)->(5,0):1

artificial: false set: [2950, 2951, 2952, 2953, 2954, 2955, 2956, 2957, 2958, 2959, 2960, 2461, 2923, 2924, 2925, 2926, 2927, 2928, 2993, 2929, 2994, 2930, 2995, 2931, 2996, 2932, 2997, 2933, 2998, 2934, 2999, 2935, 2936, 2937, 1916, 2238] start node= 8 start time= 23 capacity type= 1
(9,0)->(9,1)->(9,2)->(9,3)->(9,4)->(9,5)->(9,6)->(9,7)->(9,8)->(9,9)->(9,10)->(9,11)->(7,16)->(8,23)->(8,24)->(8,25)->(8,26)->(8,27)->(8,28)->(8,29)->(8,30)->(8,31)->(8,32)->(8,33)->(8,34)->(8,35)->(8,36)->(8,37)->(8,38)->(9,43)->(9,44)->(9,45)->(9,46)->(9,47)->(9,48)->(9,49)->(9,0):1

artificial: false set: [1287, 2953, 2954, 2955, 2956, 2381, 2957, 2958, 2959, 2960, 2961, 2962, 2963, 2964, 2965, 342, 2966, 2967, 2968, 2969, 2970, 2971, 2972, 2973, 2974, 2975, 2976, 2977, 2978, 2979, 2980, 748] start node= 9 start time= 3 capacity type= 2
(9,3)->(9,4)->(9,5)->(9,6)->(9,7)->(9,8)->(9,9)->(9,10)->(9,11)->(9,12)->(9,13)->(9,14)->(9,15)->(9,16)->(9,17)->(9,18)->(9,19)->(9,20)->(9,21)->(9,22)->(9,23)->(9,24)->(9,25)->(9,26)->(9,27)->(9,28)->(9,29)->(9,30)->(9,31)->(5,37)->(1,42)->(2,48)->(9,3):1

artificial: false set: [2560, 2561, 2562, 2563, 2564, 2884, 2565, 2566, 2567, 2568, 2569, 2570, 2571, 2572, 2573, 2574, 2575, 2576, 2577, 593, 2578, 2579, 2598, 2599, 430, 2550, 2551, 2552, 2553, 1785, 2554, 2555, 2556, 2557, 2558, 2559] start node= 7 start time= 34 capacity type= 1
(1,0)->(1,1)->(1,2)->(1,3)->(1,4)->(1,5)->(1,6)->(1,7)->(1,8)->(1,9)->(1,10)->(1,11)->(1,12)->(1,13)->(1,14)->(1,15)->(1,16)->(1,17)->(1,18)->(1,19)->(1,20)->(1,21)->(1,22)->(1,23)->(1,24)->(1,25)->(1,26)->(1,27)->(1,28)->(1,29)->(1,30)->(7,34)->(7,35)->(2,43)->(1,48)->(1,49)->(1,0):1

artificial: false set: [2816, 2817, 2818, 2819, 2820, 2821, 2822, 2823, 2824, 2825, 2826, 2827, 2828, 2829, 1630, 2847, 2848, 2849, 2734, 2735, 2800, 2736, 2801, 2802, 2803, 691, 2804, 2805, 2806, 2807, 2808, 2809, 2810, 2811, 2812, 2813, 2814, 2815, 1087] start node= 4 start time= 34 capacity type= 1
(6,0)->(6,1)->(6,2)->(6,3)->(6,4)->(6,5)->(6,6)->(6,7)->(6,8)->(6,9)->(6,10)->(6,11)->(6,12)->(6,13)->(6,14)->(6,15)->(6,16)->(6,17)->(6,18)->(6,19)->(6,20)->(6,21)->(6,22)->(6,23)->(6,24)->(6,25)->(6,26)->(6,27)->(6,28)->(6,29)->(6,30)->(4,34)->(4,35)->(4,36)->(4,37)->(2,41)->(6,47)->(6,48)->(6,49)->(6,0):1

artificial: false set: [2624, 2625, 2626, 2627, 2628, 2647, 2648, 729, 2649, 2600, 2601, 2602, 2603, 2604, 2605, 2606, 2607, 2608, 2609, 2610, 2611, 2612, 2484, 2613, 2614, 2615, 2616, 2617, 2618, 2619, 2620, 2621, 1789, 2622, 2623] start node= 9 start time= 34 capacity type= 2
(2,0)->(2,1)->(2,2)->(2,3)->(2,4)->(2,5)->(2,6)->(2,7)->(2,8)->(2,9)->(2,10)->(2,11)->(2,12)->(2,13)->(2,14)->(2,15)->(2,16)->(2,17)->(2,18)->(2,19)->(2,20)->(2,21)->(2,22)->(2,23)->(2,24)->(2,25)->(2,26)->(2,27)->(2,28)->(2,29)->(9,34)->(7,39)->(2,47)->(2,48)->(2,49)->(2,0):1

artificial: false set: [2895, 1808, 2896, 2897, 2898, 2899, 2715, 2716, 2717, 2718, 2719, 2720, 2721, 2850, 2722, 2851, 2723, 2852, 2724, 2853, 1189, 2725, 2854, 2726, 2855, 2727, 2856, 2728, 2857, 2729, 2730, 2731, 2732, 2733, 2734, 2735, 2736, 2737, 2738] start node= 4 start time= 15 capacity type= 1
(7,0)->(7,1)->(7,2)->(7,3)->(7,4)->(7,5)->(7,6)->(7,7)->(7,8)->(4,15)->(4,16)->(4,17)->(4,18)->(4,19)->(4,20)->(4,21)->(4,22)->(4,23)->(4,24)->(4,25)->(4,26)->(4,27)->(4,28)->(4,29)->(4,30)->(4,31)->(4,32)->(4,33)->(4,34)->(4,35)->(4,36)->(4,37)->(4,38)->(4,39)->(7,45)->(7,46)->(7,47)->(7,48)->(7,49)->(7,0):2

artificial: false set: [589, 2898, 2899, 1825, 2850, 2851, 2852, 2853, 2854, 2855, 2856, 2857, 2858, 2859, 2860, 2732, 2861, 2733, 2862, 2734, 2863, 2864, 2865, 2866, 2867, 2868, 2869, 2870, 2871, 2872, 2873, 2874, 444, 1085] start node= 4 start time= 32 capacity type= 2
(7,0)->(7,1)->(7,2)->(7,3)->(7,4)->(7,5)->(7,6)->(7,7)->(7,8)->(7,9)->(7,10)->(7,11)->(7,12)->(7,13)->(7,14)->(7,15)->(7,16)->(7,17)->(7,18)->(7,19)->(7,20)->(7,21)->(7,22)->(7,23)->(7,24)->(7,25)->(4,32)->(4,33)->(4,34)->(4,35)->(2,39)->(1,44)->(7,48)->(7,49)->(7,0):1

artificial: false set: [2752, 2753, 1282, 2754, 2755, 2756, 2757, 2758, 2759, 2760, 2761, 2762, 2763, 2764, 2765, 2766, 2767, 2768, 2769, 2770, 2771, 2772, 2773, 2774, 2775, 2776, 2777, 2778, 2779, 2780, 2781, 487, 2094, 2751] start node= 8 start time= 44 capacity type= 1
(5,1)->(5,2)->(5,3)->(5,4)->(5,5)->(5,6)->(5,7)->(5,8)->(5,9)->(5,10)->(5,11)->(5,12)->(5,13)->(5,14)->(5,15)->(5,16)->(5,17)->(5,18)->(5,19)->(5,20)->(5,21)->(5,22)->(5,23)->(5,24)->(5,25)->(5,26)->(5,27)->(5,28)->(5,29)->(5,30)->(5,31)->(5,32)->(1,37)->(8,44)->(5,1):1

artificial: false set: [2880, 2881, 2882, 2883, 2884, 2885, 2886, 2887, 2888, 2889, 2890, 2891, 2700, 2892, 2701, 2702, 2703, 2704, 1169, 2705, 2706, 2707, 2708, 2709, 2710, 2711, 2712, 2713, 2714, 2715, 2716, 2717, 2718, 1843, 2875, 2876, 2877, 2878, 2879] start node= 7 start time= 42 capacity type= 1
(4,0)->(4,1)->(4,2)->(4,3)->(4,4)->(4,5)->(4,6)->(4,7)->(4,8)->(4,9)->(4,10)->(4,11)->(4,12)->(4,13)->(4,14)->(4,15)->(4,16)->(4,17)->(4,18)->(4,19)->(7,25)->(7,26)->(7,27)->(7,28)->(7,29)->(7,30)->(7,31)->(7,32)->(7,33)->(7,34)->(7,35)->(7,36)->(7,37)->(7,38)->(7,39)->(7,40)->(7,41)->(7,42)->(7,43)->(4,0):1

artificial: false set: [2752, 2753, 2754, 1305, 934, 2663, 2664, 2665, 2794, 2666, 2795, 2667, 2796, 2668, 2669, 2797, 2670, 2798, 2671, 2799, 2672, 2673, 2674, 1139, 2675, 2676, 2677, 2678, 2679, 2680, 2681, 2682, 2683, 2750, 2751] start node= 5 start time= 47 capacity type= 2
(5,0)->(5,1)->(5,2)->(5,3)->(5,4)->(5,5)->(3,13)->(3,14)->(3,15)->(3,16)->(3,17)->(3,18)->(3,19)->(3,20)->(3,21)->(3,22)->(3,23)->(3,24)->(3,25)->(3,26)->(3,27)->(3,28)->(3,29)->(3,30)->(3,31)->(3,32)->(3,33)->(3,34)->(4,39)->(5,44)->(5,45)->(5,46)->(5,47)->(5,48)->(5,49)->(5,0):1

artificial: false set: [2624, 2625, 2626, 2437, 2700, 2701, 2702, 2703, 2704, 2705, 2706, 2707, 2708, 2709, 2710, 727, 2711, 2712, 2713, 2714, 2982, 2983, 2984, 1065, 2985, 2986, 1643, 2619, 2747, 2620, 2748, 2621, 2749, 2622, 2623] start node= 9 start time= 32 capacity type= 2
(4,0)->(4,1)->(4,2)->(4,3)->(4,4)->(4,5)->(4,6)->(4,7)->(4,8)->(4,9)->(4,10)->(4,11)->(4,12)->(4,13)->(4,14)->(4,15)->(2,19)->(2,20)->(2,21)->(2,22)->(2,23)->(2,24)->(2,25)->(2,26)->(2,27)->(9,32)->(9,33)->(9,34)->(9,35)->(9,36)->(9,37)->(6,43)->(4,47)->(4,48)->(4,49)->(4,0):1

artificial: false set: [723, 2648, 2649, 2978, 2979, 2980, 2341, 2981, 2982, 2983, 2600, 2984, 2601, 2985, 2602, 2986, 2603, 2987, 2604, 2988, 2605, 2989, 2606, 2990, 2607, 2608, 2609, 2610, 2611, 2612, 2613, 2614, 2615, 2616, 2617, 2618, 2619, 2620, 2621, 2622] start node= 9 start time= 28 capacity type= 1
(2,0)->(2,1)->(2,2)->(2,3)->(2,4)->(2,5)->(2,6)->(2,7)->(2,8)->(2,9)->(2,10)->(2,11)->(2,12)->(2,13)->(2,14)->(2,15)->(2,16)->(2,17)->(2,18)->(2,19)->(2,20)->(2,21)->(2,22)->(2,23)->(9,28)->(9,29)->(9,30)->(9,31)->(9,32)->(9,33)->(9,34)->(9,35)->(9,36)->(9,37)->(9,38)->(9,39)->(9,40)->(9,41)->(2,48)->(2,49)->(2,0):1

artificial: false set: [2816, 2817, 2818, 2819, 2500, 2820, 2821, 2822, 2823, 2824, 201, 2825, 2826, 2827, 2955, 2828, 2829, 2830, 2831, 87, 792, 2406, 2547, 2548, 2549, 1532, 2812, 2813, 2814, 2815] start node= 9 start time= 5 capacity type= 2
(0,0)->(0,1)->(9,5)->(9,6)->(6,12)->(6,13)->(6,14)->(6,15)->(6,16)->(6,17)->(6,18)->(6,19)->(6,20)->(6,21)->(6,22)->(6,23)->(6,24)->(6,25)->(6,26)->(6,27)->(6,28)->(6,29)->(6,30)->(6,31)->(6,32)->(0,37)->(3,42)->(0,47)->(0,48)->(0,49)->(0,0):1

artificial: false set: [2880, 2881, 2903, 2839, 2904, 2840, 2905, 2841, 2906, 2842, 1882, 2907, 2908, 2909, 2910, 2911, 1247, 2912, 2913, 2914, 2915, 2916, 2917, 2918, 2919, 2920, 2921, 2922, 1643, 2877, 2173, 2878, 2879] start node= 8 start time= 22 capacity type= 2
(8,3)->(8,4)->(8,5)->(8,6)->(8,7)->(8,8)->(8,9)->(8,10)->(8,11)->(8,12)->(8,13)->(8,14)->(8,15)->(8,16)->(8,17)->(8,18)->(8,19)->(8,20)->(8,21)->(8,22)->(8,23)->(7,27)->(7,28)->(7,29)->(7,30)->(7,31)->(7,32)->(6,39)->(6,40)->(6,41)->(6,42)->(6,43)->(4,47)->(8,3):1

artificial: false set: [2894, 2895, 2896, 2897, 2898, 2899, 2850, 2979, 2851, 2980, 2852, 2981, 2853, 2854, 2855, 2856, 2857, 2858, 2282, 2859, 2860, 2861, 2862, 2863, 2864, 2865, 2866, 1971, 2867, 2868, 2869, 2870, 440] start node= 9 start time= 32 capacity type= 2
(7,0)->(7,1)->(7,2)->(7,3)->(7,4)->(7,5)->(7,6)->(7,7)->(7,8)->(7,9)->(7,10)->(7,11)->(7,12)->(7,13)->(7,14)->(7,15)->(7,16)->(7,17)->(7,18)->(7,19)->(7,20)->(7,21)->(9,29)->(9,30)->(9,31)->(9,32)->(1,40)->(7,44)->(7,45)->(7,46)->(7,47)->(7,48)->(7,49)->(7,0):1

artificial: false set: [2560, 2561, 2562, 2563, 2564, 2565, 2566, 2567, 2568, 2569, 2570, 2571, 2572, 844, 2573, 2574, 2575, 2576, 2577, 478, 2598, 2599, 2550, 2551, 2039, 2935, 2552, 2936, 2553, 2937, 2554, 2938, 2555, 2556, 2557, 2558, 2559] start node= 8 start time= 35 capacity type= 2
(1,0)->(1,1)->(1,2)->(1,3)->(1,4)->(1,5)->(1,6)->(1,7)->(1,8)->(1,9)->(1,10)->(1,11)->(1,12)->(1,13)->(1,14)->(1,15)->(1,16)->(1,17)->(1,18)->(1,19)->(1,20)->(1,21)->(1,22)->(1,23)->(1,24)->(1,25)->(1,26)->(1,27)->(1,28)->(8,35)->(8,36)->(8,37)->(8,38)->(8,39)->(3,44)->(1,48)->(1,49)->(1,0):2

artificial: false set: [719, 2648, 2649, 2974, 2975, 2976, 2977, 2978, 2979, 2980, 2981, 2341, 2982, 2983, 2984, 2600, 2985, 2601, 2986, 2602, 2987, 2603, 2988, 2604, 2989, 2605, 2606, 2990, 2607, 2608, 2609, 2610, 2611, 2612, 2613, 2614, 2615, 2616, 2617, 2618] start node= 9 start time= 40 capacity type= 2
(2,0)->(2,1)->(2,2)->(2,3)->(2,4)->(2,5)->(2,6)->(2,7)->(2,8)->(2,9)->(2,10)->(2,11)->(2,12)->(2,13)->(2,14)->(2,15)->(2,16)->(2,17)->(2,18)->(2,19)->(9,24)->(9,25)->(9,26)->(9,27)->(9,28)->(9,29)->(9,30)->(9,31)->(9,32)->(9,33)->(9,34)->(9,35)->(9,36)->(9,37)->(9,38)->(9,39)->(9,40)->(9,41)->(2,48)->(2,49)->(2,0):1

artificial: false set: [2950, 2631, 2951, 2632, 2952, 2633, 2953, 2634, 2954, 2635, 2955, 2636, 2956, 2637, 2957, 2958, 2959, 2960, 2961, 2962, 2963, 2324, 2964, 2965, 2966, 2967, 2968, 2969, 538, 2970, 2971, 2972, 2973, 246] start node= 9 start time= 0 capacity type= 2
(9,0)->(9,1)->(9,2)->(9,3)->(9,4)->(9,5)->(9,6)->(9,7)->(9,8)->(9,9)->(9,10)->(9,11)->(9,12)->(9,13)->(9,14)->(9,15)->(9,16)->(9,17)->(9,18)->(9,19)->(9,20)->(9,21)->(9,22)->(9,23)->(9,24)->(2,31)->(2,32)->(2,33)->(2,34)->(2,35)->(2,36)->(2,37)->(2,38)->(0,46)->(9,0):1

artificial: false set: [2560, 2561, 2693, 262, 844, 2517, 2518, 2519, 88, 2520, 2521, 2522, 2523, 2524, 2525, 2526, 2527, 2528, 2529, 2530, 2531, 2532, 2533, 2598, 2534, 2599, 2535, 2536, 2537, 2550, 2551, 2552, 2553, 2554, 2555, 2556, 2557, 2558, 2559] start node= 1 start time= 0 capacity type= 2
(1,0)->(1,1)->(1,2)->(1,3)->(1,4)->(1,5)->(1,6)->(1,7)->(1,8)->(1,9)->(1,10)->(1,11)->(1,12)->(0,17)->(0,18)->(0,19)->(0,20)->(0,21)->(0,22)->(0,23)->(0,24)->(0,25)->(0,26)->(0,27)->(0,28)->(0,29)->(0,30)->(0,31)->(0,32)->(0,33)->(0,34)->(0,35)->(0,36)->(0,37)->(0,38)->(3,43)->(3,44)->(1,48)->(1,49)->(1,0):1

artificial: false set: [2624, 2625, 2626, 2627, 2628, 2500, 2629, 2501, 2630, 2502, 2631, 2503, 2632, 2504, 2633, 2505, 2634, 2506, 2635, 2507, 2636, 2508, 589, 2637, 2509, 2638, 2510, 2511, 2512, 2513, 2514, 19, 2515, 2516, 2517, 2518, 294, 2549, 2623] start node= 1 start time= 44 capacity type= 2
(0,0)->(0,1)->(0,2)->(0,3)->(0,4)->(0,5)->(0,6)->(0,7)->(0,8)->(0,9)->(0,10)->(0,11)->(0,12)->(0,13)->(0,14)->(0,15)->(0,16)->(0,17)->(0,18)->(0,19)->(2,23)->(2,24)->(2,25)->(2,26)->(2,27)->(2,28)->(2,29)->(2,30)->(2,31)->(2,32)->(2,33)->(2,34)->(2,35)->(2,36)->(2,37)->(2,38)->(2,39)->(1,44)->(0,49)->(0,0):1

artificial: false set: [2500, 2501, 2502, 2503, 2439, 2504, 2505, 1545, 2506, 2507, 2508, 2509, 2510, 2511, 2512, 2513, 2514, 2515, 2516, 2517, 2518, 2519, 2520, 2521, 2522, 2523, 2524, 2525, 2526, 2527, 2528, 2529, 2530, 2531, 2532, 233, 2987, 2988] start node= 9 start time= 38 capacity type= 2
(0,0)->(0,1)->(0,2)->(0,3)->(0,4)->(0,5)->(0,6)->(0,7)->(0,8)->(0,9)->(0,10)->(0,11)->(0,12)->(0,13)->(0,14)->(0,15)->(0,16)->(0,17)->(0,18)->(0,19)->(0,20)->(0,21)->(0,22)->(0,23)->(0,24)->(0,25)->(0,26)->(0,27)->(0,28)->(0,29)->(0,30)->(0,31)->(0,32)->(0,33)->(9,37)->(9,38)->(9,39)->(6,45)->(0,0):3

artificial: false set: [2564, 2500, 2501, 2565, 2502, 2566, 2503, 2567, 2568, 2569, 2570, 2571, 2572, 2573, 2574, 2575, 2576, 2577, 2578, 2579, 2580, 2581, 2582, 2583, 2584, 2585, 2586, 2587, 2588, 2589, 2590, 2659, 291, 810, 2546, 2547, 2548, 2549, 54] start node= 1 start time= 15 capacity type= 2
(0,0)->(0,1)->(0,2)->(0,3)->(0,4)->(3,9)->(3,10)->(1,14)->(1,15)->(1,16)->(1,17)->(1,18)->(1,19)->(1,20)->(1,21)->(1,22)->(1,23)->(1,24)->(1,25)->(1,26)->(1,27)->(1,28)->(1,29)->(1,30)->(1,31)->(1,32)->(1,33)->(1,34)->(1,35)->(1,36)->(1,37)->(1,38)->(1,39)->(1,40)->(1,41)->(0,46)->(0,47)->(0,48)->(0,49)->(0,0):1

artificial: false set: [2949, 1287, 2900, 2901, 2902, 2903, 2904, 2905, 2906, 2907, 2076, 2908, 2909, 2910, 2783, 2911, 2784, 2912, 2785, 2913, 2786, 2914, 2915, 2916, 2917, 2918, 2919, 2920, 2921, 2922, 2923, 492, 2924, 2925] start node= 8 start time= 0 capacity type= 1
(8,0)->(8,1)->(8,2)->(8,3)->(8,4)->(8,5)->(8,6)->(8,7)->(8,8)->(8,9)->(8,10)->(8,11)->(8,12)->(8,13)->(8,14)->(8,15)->(8,16)->(8,17)->(8,18)->(8,19)->(8,20)->(8,21)->(8,22)->(8,23)->(8,24)->(8,25)->(8,26)->(5,33)->(5,34)->(5,35)->(5,36)->(5,37)->(1,42)->(8,49)->(8,0):1

artificial: false set: [2688, 2624, 2625, 2626, 2627, 2628, 2629, 1606, 2630, 2710, 2711, 2712, 2713, 2714, 2844, 2845, 989, 2846, 2847, 2848, 2849, 1065, 2800, 2801, 2802, 2803, 2804, 2805, 631, 2619, 2620, 2685, 2621, 2686, 2622, 2687, 2623] start node= 4 start time= 10 capacity type= 1
(6,0)->(6,1)->(6,2)->(6,3)->(6,4)->(6,5)->(6,6)->(4,10)->(4,11)->(4,12)->(4,13)->(4,14)->(4,15)->(2,19)->(2,20)->(2,21)->(2,22)->(2,23)->(2,24)->(2,25)->(2,26)->(2,27)->(2,28)->(2,29)->(2,30)->(2,31)->(3,35)->(3,36)->(3,37)->(3,38)->(3,39)->(6,44)->(6,45)->(6,46)->(6,47)->(6,48)->(6,49)->(6,0):1

artificial: false set: [2816, 1667, 1283, 2775, 2776, 2777, 2778, 2779, 2588, 2780, 2781, 2782, 1893, 2800, 2801, 2802, 2803, 2804, 2805, 2806, 2807, 439, 2808, 2809, 2810, 2811, 2812, 2813, 2814, 2815] start node= 5 start time= 25 capacity type= 2
(6,0)->(6,1)->(6,2)->(6,3)->(6,4)->(6,5)->(6,6)->(6,7)->(6,8)->(6,9)->(6,10)->(6,11)->(6,12)->(6,13)->(6,14)->(6,15)->(6,16)->(6,17)->(5,25)->(5,26)->(5,27)->(5,28)->(5,29)->(5,30)->(5,31)->(5,32)->(5,33)->(1,38)->(1,39)->(7,43)->(6,0):1

artificial: false set: [2624, 2625, 2626, 2627, 2628, 2629, 2630, 2950, 2631, 2951, 2632, 2952, 2633, 2953, 2634, 2954, 2635, 2955, 2636, 2956, 2637, 2317, 2957, 2638, 2958, 2959, 2960, 2961, 2962, 2963, 2964, 2965, 2966, 739, 2994, 2995, 2996, 2997, 2998, 2999] start node= 9 start time= 0 capacity type= 1
(9,0)->(9,1)->(9,2)->(9,3)->(9,4)->(9,5)->(9,6)->(9,7)->(9,8)->(9,9)->(9,10)->(9,11)->(9,12)->(9,13)->(9,14)->(9,15)->(9,16)->(9,17)->(2,24)->(2,25)->(2,26)->(2,27)->(2,28)->(2,29)->(2,30)->(2,31)->(2,32)->(2,33)->(2,34)->(2,35)->(2,36)->(2,37)->(2,38)->(2,39)->(9,44)->(9,45)->(9,46)->(9,47)->(9,48)->(9,49)->(9,0):1

artificial: false set: [2880, 2881, 2500, 2501, 2502, 2503, 2504, 2505, 2506, 2507, 1932, 2508, 2509, 2510, 794, 161, 2867, 2868, 2869, 2549, 2870, 2871, 2039, 2872, 2873, 2874, 2875, 2876, 2877, 2878, 2879] start node= 8 start time= 39 capacity type= 2
(0,0)->(0,1)->(0,2)->(0,3)->(0,4)->(0,5)->(0,6)->(0,7)->(0,8)->(0,9)->(0,10)->(0,11)->(7,17)->(7,18)->(7,19)->(7,20)->(7,21)->(7,22)->(7,23)->(7,24)->(7,25)->(7,26)->(7,27)->(7,28)->(7,29)->(7,30)->(7,31)->(7,32)->(8,39)->(3,44)->(0,49)->(0,0):1

artificial: false set: [1667, 1860, 1287, 2897, 2898, 2899, 2775, 2776, 2777, 2778, 2779, 2780, 2781, 2782, 2783, 2592, 2784, 2785, 2786, 2850, 2851, 2852, 2853, 2854, 2855, 2856, 2857, 2858, 2859, 443] start node= 7 start time= 47 capacity type= 1
(7,0)->(7,1)->(7,2)->(7,3)->(7,4)->(7,5)->(7,6)->(7,7)->(7,8)->(7,9)->(7,10)->(6,17)->(5,25)->(5,26)->(5,27)->(5,28)->(5,29)->(5,30)->(5,31)->(5,32)->(5,33)->(5,34)->(5,35)->(5,36)->(5,37)->(1,42)->(1,43)->(7,47)->(7,48)->(7,49)->(7,0):1

artificial: false set: [2950, 2951, 2952, 2953, 2954, 2955, 2956, 2957, 2958, 2959, 2960, 2961, 2962, 2963, 339, 2964, 2965, 2966, 2967, 2968, 2969, 2970, 2971, 2972, 2973, 2974, 2975, 2976, 2977, 2978, 2979, 2980, 2281, 745] start node= 1 start time= 39 capacity type= 1
(9,0)->(9,1)->(9,2)->(9,3)->(9,4)->(9,5)->(9,6)->(9,7)->(9,8)->(9,9)->(9,10)->(9,11)->(9,12)->(9,13)->(9,14)->(9,15)->(9,16)->(9,17)->(9,18)->(9,19)->(9,20)->(9,21)->(9,22)->(9,23)->(9,24)->(9,25)->(9,26)->(9,27)->(9,28)->(9,29)->(9,30)->(9,31)->(1,39)->(2,45)->(9,0):2

artificial: false set: [2952, 1577, 2953, 2954, 747, 2955, 2956, 2957, 2958, 2959, 2960, 2961, 2962, 2963, 2964, 2421, 2965, 2966, 2967, 2968, 889, 2969, 2970, 635] start node= 9 start time= 2 capacity type= 1
(9,2)->(9,3)->(9,4)->(9,5)->(9,6)->(9,7)->(9,8)->(9,9)->(9,10)->(9,11)->(9,12)->(9,13)->(9,14)->(9,15)->(9,16)->(9,17)->(9,18)->(9,19)->(9,20)->(9,21)->(6,27)->(2,35)->(3,39)->(2,47)->(9,2):1

artificial: false set: [1287, 392, 2700, 2701, 2702, 2703, 2704, 2705, 2706, 2707, 2708, 2709, 2710, 2711, 2712, 2713, 2714, 2779, 2715, 2780, 2716, 2781, 2717, 2782, 2718, 2783, 2719, 2784, 2720, 2785, 2721, 2786, 2722, 2723, 1124, 2748, 2749] start node= 4 start time= 48 capacity type= 1
(4,0)->(4,1)->(4,2)->(4,3)->(4,4)->(4,5)->(4,6)->(4,7)->(4,8)->(4,9)->(4,10)->(4,11)->(4,12)->(4,13)->(4,14)->(4,15)->(4,16)->(4,17)->(4,18)->(4,19)->(4,20)->(4,21)->(4,22)->(4,23)->(4,24)->(5,29)->(5,30)->(5,31)->(5,32)->(5,33)->(5,34)->(5,35)->(5,36)->(5,37)->(1,42)->(4,48)->(4,49)->(4,0):1

artificial: false set: [2880, 2881, 2882, 2883, 2884, 2885, 2950, 1990, 2886, 2951, 2887, 2952, 2888, 2953, 2889, 2954, 2955, 2956, 2957, 2958, 2959, 2960, 2961, 2462, 2867, 2868, 2869, 2998, 2870, 2999, 2871, 2872, 2873, 2874, 2875, 2876, 2877, 2878, 2879] start node= 7 start time= 17 capacity type= 1
(9,0)->(9,1)->(9,2)->(9,3)->(9,4)->(9,5)->(9,6)->(9,7)->(9,8)->(9,9)->(9,10)->(9,11)->(9,12)->(7,17)->(7,18)->(7,19)->(7,20)->(7,21)->(7,22)->(7,23)->(7,24)->(7,25)->(7,26)->(7,27)->(7,28)->(7,29)->(7,30)->(7,31)->(7,32)->(7,33)->(7,34)->(7,35)->(7,36)->(7,37)->(7,38)->(7,39)->(7,40)->(9,48)->(9,49)->(9,0):1

artificial: false set: [2752, 2753, 2754, 2755, 2756, 2757, 2758, 1286, 2759, 2760, 2761, 2762, 2763, 2764, 2765, 2766, 2767, 2768, 2769, 2770, 146, 2771, 2772, 2773, 2774, 2775, 2776, 2777, 2778, 2779, 2780, 2781, 2782, 2783, 2784, 2785, 291] start node= 5 start time= 36 capacity type= 2
(5,2)->(5,3)->(5,4)->(5,5)->(5,6)->(5,7)->(5,8)->(5,9)->(5,10)->(5,11)->(5,12)->(5,13)->(5,14)->(5,15)->(5,16)->(5,17)->(5,18)->(5,19)->(5,20)->(5,21)->(5,22)->(5,23)->(5,24)->(5,25)->(5,26)->(5,27)->(5,28)->(5,29)->(5,30)->(5,31)->(5,32)->(5,33)->(5,34)->(5,35)->(5,36)->(1,41)->(0,46)->(5,2):1

artificial: false set: [2752, 2753, 2754, 2755, 2717, 2718, 2719, 2720, 2721, 2722, 2723, 2724, 2725, 2726, 2727, 2728, 1256, 2729, 361, 2794, 2730, 2795, 2731, 2796, 2732, 2797, 2733, 2798, 2734, 2799, 2735, 2736, 2737, 2738, 1139, 2750, 2751] start node= 5 start time= 0 capacity type= 2
(5,0)->(5,1)->(5,2)->(5,3)->(5,4)->(5,5)->(5,6)->(1,11)->(4,17)->(4,18)->(4,19)->(4,20)->(4,21)->(4,22)->(4,23)->(4,24)->(4,25)->(4,26)->(4,27)->(4,28)->(4,29)->(4,30)->(4,31)->(4,32)->(4,33)->(4,34)->(4,35)->(4,36)->(4,37)->(4,38)->(4,39)->(5,44)->(5,45)->(5,46)->(5,47)->(5,48)->(5,49)->(5,0):2

artificial: false set: [2752, 2753, 1282, 2754, 387, 2755, 2756, 2757, 2758, 2759, 2760, 2761, 2762, 2763, 2764, 2765, 2766, 2767, 2768, 2769, 2770, 2771, 2772, 2773, 2774, 2775, 2776, 2777, 2778, 2779, 2780, 2781, 2799, 2743, 1144, 2750, 2751] start node= 5 start time= 0 capacity type= 2
(5,0)->(5,1)->(5,2)->(5,3)->(5,4)->(5,5)->(5,6)->(5,7)->(5,8)->(5,9)->(5,10)->(5,11)->(5,12)->(5,13)->(5,14)->(5,15)->(5,16)->(5,17)->(5,18)->(5,19)->(5,20)->(5,21)->(5,22)->(5,23)->(5,24)->(5,25)->(5,26)->(5,27)->(5,28)->(5,29)->(5,30)->(5,31)->(5,32)->(1,37)->(4,43)->(4,44)->(5,49)->(5,0):1

artificial: false set: [2752, 2753, 1282, 2754, 387, 2755, 2756, 2757, 2758, 2759, 2760, 2761, 2762, 2763, 2764, 2765, 2766, 2767, 2768, 2769, 2770, 2771, 2772, 2773, 2774, 2775, 2776, 2777, 2778, 2779, 2780, 2781, 2798, 2799, 1143, 2750, 2751] start node= 5 start time= 48 capacity type= 2
(5,0)->(5,1)->(5,2)->(5,3)->(5,4)->(5,5)->(5,6)->(5,7)->(5,8)->(5,9)->(5,10)->(5,11)->(5,12)->(5,13)->(5,14)->(5,15)->(5,16)->(5,17)->(5,18)->(5,19)->(5,20)->(5,21)->(5,22)->(5,23)->(5,24)->(5,25)->(5,26)->(5,27)->(5,28)->(5,29)->(5,30)->(5,31)->(5,32)->(1,37)->(4,43)->(5,48)->(5,49)->(5,0):1

artificial: false set: [196, 2629, 2630, 2631, 2632, 2633, 2634, 2635, 2636, 2637, 538, 2852, 2853, 2854, 2855, 2856, 2857, 2858, 2859, 1771, 2860, 2861, 2862, 2863, 2864, 2865, 2866, 2867, 2868, 2869, 2870] start node= 7 start time= 13 capacity type= 1
(7,2)->(7,3)->(7,4)->(7,5)->(7,6)->(7,7)->(7,8)->(7,9)->(7,10)->(7,11)->(7,12)->(7,13)->(7,14)->(7,15)->(7,16)->(7,17)->(7,18)->(7,19)->(7,20)->(7,21)->(2,29)->(2,30)->(2,31)->(2,32)->(2,33)->(2,34)->(2,35)->(2,36)->(2,37)->(2,38)->(0,46)->(7,2):1

artificial: false set: [2437, 1743, 2901, 2902, 2903, 2904, 2905, 2906, 2907, 2908, 2909, 2910, 2911, 2912, 2913, 2914, 2978, 2915, 2979, 2916, 2980, 2917, 2981, 2918, 2982, 2919, 2983, 2920, 2984, 2921, 2985, 2922, 2986, 2223] start node= 9 start time= 28 capacity type= 1
(8,1)->(8,2)->(8,3)->(8,4)->(8,5)->(8,6)->(8,7)->(8,8)->(8,9)->(8,10)->(8,11)->(8,12)->(8,13)->(8,14)->(8,15)->(8,16)->(8,17)->(8,18)->(8,19)->(8,20)->(8,21)->(8,22)->(8,23)->(9,28)->(9,29)->(9,30)->(9,31)->(9,32)->(9,33)->(9,34)->(9,35)->(9,36)->(9,37)->(6,43)->(8,1):1

artificial: false set: [2951, 2513, 2514, 2515, 2516, 2517, 2518, 2519, 2520, 2521, 2522, 2523, 2524, 2525, 2526, 2527, 2528, 2529, 2530, 2402, 2531, 2532, 1508, 2533, 2534, 2535, 2536, 2537, 746, 42, 2538, 2539, 2540, 2541] start node= 9 start time= 1 capacity type= 2
(9,1)->(9,2)->(6,8)->(0,13)->(0,14)->(0,15)->(0,16)->(0,17)->(0,18)->(0,19)->(0,20)->(0,21)->(0,22)->(0,23)->(0,24)->(0,25)->(0,26)->(0,27)->(0,28)->(0,29)->(0,30)->(0,31)->(0,32)->(0,33)->(0,34)->(0,35)->(0,36)->(0,37)->(0,38)->(0,39)->(0,40)->(0,41)->(0,42)->(2,46)->(9,1):1

artificial: false set: [2752, 2753, 2754, 2755, 2756, 1039, 145, 2965, 2966, 2967, 2968, 2969, 2970, 2971, 2972, 2973, 2974, 2975, 2976, 2977, 2978, 1635, 1457, 2429, 2751] start node= 9 start time= 23 capacity type= 2
(5,1)->(5,2)->(5,3)->(5,4)->(5,5)->(5,6)->(5,7)->(9,15)->(9,16)->(9,17)->(9,18)->(9,19)->(9,20)->(9,21)->(9,22)->(9,23)->(9,24)->(9,25)->(9,26)->(9,27)->(9,28)->(9,29)->(6,35)->(4,39)->(0,45)->(5,1):1

artificial: false set: [2688, 839, 2900, 2901, 2902, 2903, 2904, 2905, 2906, 2907, 2908, 2909, 2910, 2015, 2911, 2912, 2913, 2914, 493, 2670, 2671, 2672, 2673, 2674, 2675, 2676, 2677, 2678, 2679, 2680, 2681, 2682, 2683, 2684, 2685, 2686, 2687] start node= 8 start time= 0 capacity type= 2
(8,0)->(8,1)->(8,2)->(8,3)->(8,4)->(8,5)->(8,6)->(8,7)->(8,8)->(8,9)->(8,10)->(8,11)->(8,12)->(8,13)->(8,14)->(8,15)->(3,20)->(3,21)->(3,22)->(3,23)->(3,24)->(3,25)->(3,26)->(3,27)->(3,28)->(3,29)->(3,30)->(3,31)->(3,32)->(3,33)->(3,34)->(3,35)->(3,36)->(3,37)->(3,38)->(3,39)->(1,43)->(8,0):1

artificial: false set: [2752, 2753, 2754, 2755, 2756, 2757, 2758, 2759, 2760, 2761, 2762, 2763, 2764, 2765, 2766, 2767, 2768, 2769, 2770, 2771, 2772, 2773, 2394, 479, 2993, 2936, 2937, 1274, 2238, 2750, 2751] start node= 9 start time= 43 capacity type= 2
(5,0)->(5,1)->(5,2)->(5,3)->(5,4)->(5,5)->(5,6)->(5,7)->(5,8)->(5,9)->(5,10)->(5,11)->(5,12)->(5,13)->(5,14)->(5,15)->(5,16)->(5,17)->(5,18)->(5,19)->(5,20)->(5,21)->(5,22)->(5,23)->(5,24)->(1,29)->(8,36)->(8,37)->(8,38)->(9,43)->(9,44)->(5,0):1

artificial: false set: [2760, 2761, 2762, 2763, 2764, 2700, 2765, 2701, 2766, 2702, 2767, 2703, 2768, 2704, 2769, 1105, 2770, 2771, 2772, 2773, 2774, 2775, 2840, 2776, 2841, 2777, 2842, 2778, 2779, 2780, 2781, 2782, 1383, 1643, 2747, 2748, 2749] start node= 4 start time= 47 capacity type= 2
(4,0)->(4,1)->(4,2)->(4,3)->(4,4)->(4,5)->(5,10)->(5,11)->(5,12)->(5,13)->(5,14)->(5,15)->(5,16)->(5,17)->(5,18)->(5,19)->(5,20)->(5,21)->(5,22)->(5,23)->(5,24)->(5,25)->(5,26)->(5,27)->(5,28)->(5,29)->(5,30)->(5,31)->(5,32)->(5,33)->(6,40)->(6,41)->(6,42)->(6,43)->(4,47)->(4,48)->(4,49)->(4,0):1

===========================new round 1=========================
-------------Start to solve SolveVehicleCoverCGHeuristic()---------------
flowCoverCount=112
Time of first LP solve= 19575
There are 9095 columns added to the model.
Tried aggregator 1 time.
MIP Presolve eliminated 2388 rows and 6590 columns.
MIP Presolve modified 6925 coefficients.
Reduced MIP has 142 rows, 2535 columns, and 11150 nonzeros.
Reduced MIP has 315 binaries, 2220 generals, 0 SOSs, and 0 indicators.
Presolve time = 0.02 sec. (18.98 ticks)
Found incumbent of value 74475.000000 after 0.03 sec. (22.27 ticks)
Tried aggregator 1 time.
Reduced MIP has 142 rows, 2535 columns, and 11150 nonzeros.
Reduced MIP has 315 binaries, 2220 generals, 0 SOSs, and 0 indicators.
Presolve time = 0.00 sec. (4.02 ticks)
Probing time = 0.06 sec. (0.37 ticks)
Clique table members: 1.
MIP emphasis: balance optimality and feasibility.
MIP search method: dynamic search.
Parallel mode: deterministic, using up to 4 threads.
Root relaxation solution time = 0.02 sec. (8.52 ticks)

        Nodes                                         Cuts/
   Node  Left     Objective  IInf  Best Integer    Best Bound    ItCnt     Gap

*     0+    0                        74475.0000        0.0000           100.00%
*     0+    0                        31554.0000        0.0000           100.00%
*     0+    0                        29210.0000        0.0000           100.00%
*     0+    0                        29098.0000        0.0000           100.00%
      0     0    22080.8142    88    29098.0000    22080.8142      283   24.12%
      0     0    22602.6001    91    29098.0000      Cuts: 53      434   22.32%
*     0+    0                        23540.0000    22602.6001             3.98%
      0     0    22725.2061    85    23540.0000      Cuts: 17      478    3.46%
      0     0    22777.8761    90    23540.0000      Cuts: 12      512    3.24%
      0     0    22783.3340    85    23540.0000       Cuts: 9      536    3.21%
      0     0    22796.9060    89    23540.0000      Cuts: 10      569    3.16%
      0     0    22798.8212    93    23540.0000   ZeroHalf: 1      582    3.15%
*     0+    0                        22920.0000    22798.8212             0.53%

Mixed integer rounding cuts applied:  42
Zero-half cuts applied:  29
Gomory fractional cuts applied:  6

Root node processing (before b&c):
  Real time             =    0.68 sec. (376.82 ticks)
Parallel b&c, 4 threads:
  Real time             =    0.00 sec. (0.00 ticks)
  Sync time (average)   =    0.00 sec.
  Wait time (average)   =    0.00 sec.
                          ------------
Total (root+branch&cut) =    0.68 sec. (376.82 ticks)
optimal objective= 22920.0+65260.0=88180.0

Step 4-AdjustFlow
After adjust, flowCost=63903.0
A new better solution has been found. obj=86823.0
Tried aggregator 2 times.
MIP Presolve eliminated 108688 rows and 75755 columns.
Aggregator did 66032 substitutions.
Reduced MIP has 27810 rows, 66469 columns, and 186179 nonzeros.
Reduced MIP has 0 binaries, 131 generals, 0 SOSs, and 0 indicators.
Presolve time = 0.61 sec. (265.79 ticks)
Tried aggregator 1 time.
MIP Presolve eliminated 215 rows and 539 columns.
Reduced MIP has 27595 rows, 65930 columns, and 184599 nonzeros.
Reduced MIP has 0 binaries, 131 generals, 0 SOSs, and 0 indicators.
Presolve time = 0.15 sec. (80.79 ticks)
MIP emphasis: balance optimality and feasibility.
MIP search method: dynamic search.
Parallel mode: deterministic, using up to 4 threads.
Root relaxation solution time = 4.87 sec. (1445.16 ticks)

        Nodes                                         Cuts/
   Node  Left     Objective  IInf  Best Integer    Best Bound    ItCnt     Gap

      0     0    76864.8400    49                  76864.8400       27         
      0     0    77184.8663    58                   Cuts: 496     2416         
      0     0    77212.2740    54                   Cuts: 501     3070         
      0     0    77221.9976    53                MIRcuts: 427     3785         
      0     0    77239.4678    56                   Cuts: 409     4603         
      0     0    77266.1450    54                MIRcuts: 480     5247         
      0     0    77278.0780    50                   Cuts: 433     5715         
      0     0    77285.2157    56                   Cuts: 494     6548         
      0     0    77290.1657    55                MIRcuts: 515     7103         
*     0+    0                        95274.0000    77290.1657            18.88%
      0     0    77292.1576    55    95274.0000     Cuts: 403     7554   18.87%
*     0+    0                        80405.0000    77292.1576             3.87%
*     0+    0                        80073.0000    77292.1576             3.47%
*     0+    0                        79537.0000    77292.1576             2.82%
*     0+    0                        79522.0000    77292.1576             2.80%
*     0+    0                        79477.0000    77292.1576             2.75%
      0     2    77292.1576    55    79477.0000    77292.1576     7554    2.75%
Elapsed time = 67.88 sec. (25055.79 ticks, tree = 0.00 MB, solutions = 6)
      2     4    77300.9739    55    79477.0000    77292.1576     8178    2.75%
      3     5    77300.3815    54    79477.0000    77292.1576     8873    2.75%
      6     8    77361.8321    51    79477.0000    77292.1576     9782    2.75%
      7     9    77302.1860    53    79477.0000    77294.3636    10066    2.75%
      8    10    77323.9138    56    79477.0000    77294.3636    11128    2.75%
      9    11    77373.8383    52    79477.0000    77294.3636    12243    2.75%
     10    12    77390.3254    50    79477.0000    77294.3636    13500    2.75%
     12    14    77319.4110    55    79477.0000    77300.6047    14882    2.74%
     14    16    77406.5997    53    79477.0000    77300.6047    17337    2.74%
     16    18    77312.1976    51    79477.0000    77300.9883    21553    2.74%
Elapsed time = 92.72 sec. (33154.74 ticks, tree = 0.00 MB, solutions = 6)
     21    23    77369.1101    47    79477.0000    77300.9883    50979    2.74%
     23    25    77328.9001    55    79477.0000    77300.9883    63863    2.74%
     27    29    77371.2186    46    79477.0000    77300.9883    76330    2.74%
     31    33    77440.8209    44    79477.0000    77300.9883    85248    2.74%
     35    37    77413.0577    49    79477.0000    77300.9883    90846    2.74%
     42    44    77557.3016    50    79477.0000    77300.9883   100583    2.74%
     46    48    77509.0062    44    79477.0000    77300.9883   107382    2.74%
     48    50    77581.1034    47    79477.0000    77300.9883   110134    2.74%
     63    65    77624.5536    42    79477.0000    77300.9883   126679    2.74%
     67    69    77694.0335    40    79477.0000    77300.9883   130873    2.74%
Elapsed time = 194.81 sec. (58555.04 ticks, tree = 0.00 MB, solutions = 6)
     71    73    77639.0070    40    79477.0000    77300.9883   134031    2.74%
     76    78    77564.4859    47    79477.0000    77300.9883   139491    2.74%
     80    82    77630.4764    46    79477.0000    77300.9883   144506    2.74%
     84    86    77612.3600    44    79477.0000    77300.9883   148270    2.74%
     98   100    77755.4627    35    79477.0000    77300.9883   156842    2.74%
    103   105    77645.9717    46    79477.0000    77300.9883   160351    2.74%
    106   108    77851.3944    28    79477.0000    77300.9883   162332    2.74%
    112   114    77895.2056    37    79477.0000    77300.9883   166062    2.74%
    122   124    77895.2384    31    79477.0000    77300.9883   173770    2.74%
    123   125    77981.5067    36    79477.0000    77300.9883   175025    2.74%
Elapsed time = 281.23 sec. (78383.54 ticks, tree = 1.16 MB, solutions = 6)
*   125+  125                        79228.0000    77300.9883             2.43%
    147   149    78284.9537    25    79228.0000    77300.9883   193408    2.43%
    156   158    78018.0816    36    79228.0000    77300.9883   199555    2.43%
    165   167    78148.3215    28    79228.0000    77300.9883   205896    2.43%
    171   173    78063.0496    24    79228.0000    77300.9883   211257    2.43%
    179   181    78244.2836    24    79228.0000    77300.9883   218206    2.43%
    187   189    78318.4650    26    79228.0000    77300.9883   224088    2.43%
    195   197    78114.7093    25    79228.0000    77300.9883   229168    2.43%
    207   209    78489.7590    24    79228.0000    77300.9883   234407    2.43%
*   219+  219                        79072.0000    77300.9883             2.24%
*   232+  228                        78606.0000    77300.9883             1.66%

Mixed integer rounding cuts applied:  496
Lift and project cuts applied:  2
Gomory fractional cuts applied:  6

Root node processing (before b&c):
  Real time             =   67.83 sec. (25048.37 ticks)
Parallel b&c, 4 threads:
  Real time             =  270.64 sec. (65572.58 ticks)
  Sync time (average)   =   19.37 sec.
  Wait time (average)   =   19.44 sec.
                          ------------
Total (root+branch&cut) =  338.47 sec. (90620.95 ticks)
Intensification optimal objective= 78606.0
# columns in columnManager=137
A new better solution has been found. obj=78606.0
# columns in columnManager=137
===========================new round 2=========================
-------------Start to solve SolveVehicleCoverCGHeuristic()---------------
flowCoverCount=157
Time of first LP solve= 190852
There are 16758 columns added to the model.
Tried aggregator 1 time.
MIP Presolve eliminated 2343 rows and 11997 columns.
MIP Presolve modified 11762 coefficients.
Reduced MIP has 187 rows, 4791 columns, and 20042 nonzeros.
Reduced MIP has 987 binaries, 3804 generals, 0 SOSs, and 0 indicators.
Presolve time = 0.05 sec. (39.86 ticks)
Found incumbent of value 82653.000000 after 0.06 sec. (46.99 ticks)
Tried aggregator 1 time.
Reduced MIP has 187 rows, 4791 columns, and 20042 nonzeros.
Reduced MIP has 987 binaries, 3804 generals, 0 SOSs, and 0 indicators.
Presolve time = 0.01 sec. (7.51 ticks)
Probing time = 0.06 sec. (1.21 ticks)
Clique table members: 1.
MIP emphasis: balance optimality and feasibility.
MIP search method: dynamic search.
Parallel mode: deterministic, using up to 4 threads.
Root relaxation solution time = 0.03 sec. (29.19 ticks)

        Nodes                                         Cuts/
   Node  Left     Objective  IInf  Best Integer    Best Bound    ItCnt     Gap

*     0+    0                        82653.0000        0.0000           100.00%
*     0+    0                        30148.0000        0.0000           100.00%
*     0+    0                        28801.0000        0.0000           100.00%
      0     0    19358.4459   108    28801.0000    19358.4459      417   32.79%
      0     0    20239.6359   116    28801.0000      Cuts: 56      604   29.73%
      0     0    20497.7797   133    28801.0000      Cuts: 30      723   28.83%
*     0+    0                        23598.0000    20497.7797            13.14%
      0     0    20568.6789   125    23598.0000      Cuts: 20      855   12.84%
      0     0    20618.1076   128    23598.0000      Cuts: 13      957   12.63%
      0     0    20625.8365   133    23598.0000       Cuts: 7     1002   12.59%
      0     0    20633.4918   135    23598.0000       Cuts: 5     1045   12.56%
      0     0    20643.8588   145    23598.0000       Cuts: 7     1082   12.52%
*     0+    0                        22174.0000    20643.8588             6.90%
      0     0    20655.1948   138    22174.0000       Cuts: 7     1141    6.85%
      0     0    20674.1410   141    22174.0000       Cuts: 8     1196    6.76%
*     0+    0                        21814.0000    20674.1410             5.23%
      0     0    20688.2069   150    21814.0000       Cuts: 8     1244    5.16%
      0     0    20690.4395   154    21814.0000       Cuts: 3     1260    5.15%
      0     0    20692.7649   149    21814.0000       Cuts: 3     1280    5.14%
*     0+    0                        21714.0000    20692.7649             4.70%
      0     2    20692.7649   149    21714.0000    20692.7649     1280    4.70%
Elapsed time = 2.02 sec. (1135.03 ticks, tree = 0.00 MB, solutions = 7)
     95    97    20834.4219   129    21714.0000    20716.6227     5572    4.59%
    240   242    21138.4390    95    21714.0000    20716.6227    10732    4.59%
    403   395    20926.8810    85    21714.0000    20724.6502    16519    4.56%
    616   560    20955.3357   100    21714.0000    20724.6502    23172    4.56%
*   836+  753                        21534.0000    20732.0848             3.72%
    874   649    20857.2633   114    21534.0000    20732.0848    30396    3.72%
   1121   876    20813.3137   131    21534.0000    20736.8250    37944    3.70%
*  1196+  629                        21506.0000    20744.5042             3.54%
*  1196+  418                        21326.0000    20813.0726             2.41%
   1196   419    20817.5692   173    21326.0000    20817.5692    41414    2.38%
   1200   421    20910.6271   145    21326.0000    20817.7367    41687    2.38%
   1207   426    20982.6680   135    21326.0000    20832.3179    42237    2.31%
   1358   512    21134.6251    75    21326.0000    20832.3179    49707    2.31%
Elapsed time = 16.45 sec. (9654.78 ticks, tree = 2.82 MB, solutions = 10)
   1917   719    20919.2057   141    21326.0000    20870.1205    70299    2.14%
   2639  1225    21165.4271    96    21326.0000    20905.2765    92258    1.97%
*  2869+ 1391                        21202.0000    20905.2765             1.40%
   3430  1510    21027.1470    84    21202.0000    20919.6025   117747    1.33%
   4228  2085    21138.2928   107    21202.0000    20928.2903   144135    1.29%
*  4968  2608      integral     0    21142.0000    20933.7215   171148    0.99%
*  4968  2608      integral     0    21142.0000    20933.7215   171148    0.99%

Mixed integer rounding cuts applied:  122
Zero-half cuts applied:  28
Lift and project cuts applied:  2
Gomory fractional cuts applied:  1

Root node processing (before b&c):
  Real time             =    2.02 sec. (1135.29 ticks)
Parallel b&c, 4 threads:
  Real time             =   21.78 sec. (13215.68 ticks)
  Sync time (average)   =    0.89 sec.
  Wait time (average)   =    1.11 sec.
                          ------------
Total (root+branch&cut) =   23.80 sec. (14350.97 ticks)
optimal objective= 21142.000000000004+65277.0=86419.0

Step 4-AdjustFlow
After adjust, flowCost=64247.0
Tried aggregator 2 times.
MIP Presolve eliminated 84868 rows and 47315 columns.
Aggregator did 62915 substitutions.
Reduced MIP has 54747 rows, 129634 columns, and 348951 nonzeros.
Reduced MIP has 0 binaries, 188 generals, 0 SOSs, and 0 indicators.
Presolve time = 0.70 sec. (314.51 ticks)
Tried aggregator 1 time.
MIP Presolve eliminated 208 rows and 509 columns.
Reduced MIP has 54539 rows, 129125 columns, and 347544 nonzeros.
Reduced MIP has 0 binaries, 188 generals, 0 SOSs, and 0 indicators.
Presolve time = 0.36 sec. (154.35 ticks)
MIP emphasis: balance optimality and feasibility.
MIP search method: dynamic search.
Parallel mode: deterministic, using up to 4 threads.
Root relaxation solution time = 16.51 sec. (4569.12 ticks)

        Nodes                                         Cuts/
   Node  Left     Objective  IInf  Best Integer    Best Bound    ItCnt     Gap

      0     0    73853.6650    34                  73853.6650       30         
*     0+    0                       103305.0000    73853.6650            28.51%
      0     0    73937.1975    33   103305.0000     Cuts: 656     3505   28.43%
      0     0    73984.1236    34   103305.0000     Cuts: 704     6896   28.38%
      0     0    73987.2242    34   103305.0000  MIRcuts: 740     8102   28.38%
*     0+    0                        76582.0000    73987.2242             3.39%
*     0+    0                        76449.0000    73987.2242             3.22%
*     0+    0                        76258.0000    73987.2242             2.98%
*     0+    0                        76156.0000    73987.2242             2.85%
      0     0    73992.0302    34    76156.0000  MIRcuts: 631     9127    2.84%
      0     0    73997.0605    35    76156.0000     Cuts: 649     9820    2.83%
      0     0    73997.7581    33    76156.0000  MIRcuts: 621    10271    2.83%
      0     0    74009.1023    30    76156.0000  MIRcuts: 583    12305    2.82%
      0     0    74015.4039    34    76156.0000  MIRcuts: 872    14262    2.81%
      0     0    74045.2016    36    76156.0000  MIRcuts: 874    16853    2.77%
*     0+    0                        76129.0000    74045.2016             2.74%
      0     0    74046.4902    36    76129.0000  MIRcuts: 898    17750    2.74%
*     0+    0                        75501.0000    74046.4902             1.93%

Mixed integer rounding cuts applied:  799
Gomory fractional cuts applied:  1

Root node processing (before b&c):
  Real time             =  175.43 sec. (60205.53 ticks)
Parallel b&c, 4 threads:
  Real time             =    0.00 sec. (0.00 ticks)
  Sync time (average)   =    0.00 sec.
  Wait time (average)   =    0.00 sec.
                          ------------
Total (root+branch&cut) =  175.43 sec. (60205.53 ticks)
Intensification optimal objective= 75501.0
# columns in columnManager=194
A new better solution has been found. obj=75501.0
# columns in columnManager=194
===========================new round 3=========================
-------------Start to solve SolveVehicleCoverCGHeuristic()---------------
flowCoverCount=207
Time of first LP solve= 207843
There are 16497 columns added to the model.
Tried aggregator 1 time.
MIP Presolve eliminated 2293 rows and 11849 columns.
MIP Presolve modified 13011 coefficients.
Reduced MIP has 237 rows, 4678 columns, and 20584 nonzeros.
Reduced MIP has 1282 binaries, 3396 generals, 0 SOSs, and 0 indicators.
Presolve time = 0.04 sec. (39.69 ticks)
Found incumbent of value 94767.000000 after 0.05 sec. (47.67 ticks)
Tried aggregator 1 time.
Reduced MIP has 237 rows, 4678 columns, and 20584 nonzeros.
Reduced MIP has 1282 binaries, 3396 generals, 0 SOSs, and 0 indicators.
Presolve time = 0.01 sec. (7.68 ticks)
Probing time = 0.09 sec. (1.67 ticks)
Clique table members: 1.
MIP emphasis: balance optimality and feasibility.
MIP search method: dynamic search.
Parallel mode: deterministic, using up to 4 threads.
Root relaxation solution time = 0.04 sec. (40.85 ticks)

        Nodes                                         Cuts/
   Node  Left     Objective  IInf  Best Integer    Best Bound    ItCnt     Gap

*     0+    0                        94767.0000        0.0000           100.00%
*     0+    0                        30049.0000        0.0000           100.00%
*     0+    0                        29401.0000        0.0000           100.00%
*     0+    0                        29381.0000        0.0000           100.00%
      0     0    18924.9496   138    29381.0000    18924.9496      531   35.59%
      0     0    19578.7812   145    29381.0000      Cuts: 53      773   33.36%
*     0+    0                        22549.0000    19578.7812            13.17%
      0     0    19821.6740   158    22549.0000      Cuts: 34      972   12.10%
      0     0    19911.6914   169    22549.0000      Cuts: 21     1091   11.70%
      0     0    19932.8041   152    22549.0000      Cuts: 14     1165   11.60%
      0     0    19945.8887   150    22549.0000   ZeroHalf: 5     1236   11.54%
*     0+    0                        21578.0000    19945.8887             7.56%
      0     0    19954.9604   156    21578.0000       Cuts: 5     1294    7.52%
      0     0    19956.8309   138    21578.0000    MIRcuts: 2     1307    7.51%
*     0+    0                        20851.0000    19956.8309             4.29%
      0     0    19956.8617   140    20851.0000    MIRcuts: 1     1311    4.27%
      0     0    19968.3614   141    20851.0000   ZeroHalf: 2     1363    4.23%
      0     0    19977.2764   155    20851.0000       Cuts: 8     1412    4.19%
      0     0    19978.2233   156    20851.0000   ZeroHalf: 2     1436    4.19%
      0     2    19978.2233   156    20851.0000    19978.2233     1436    4.19%
Elapsed time = 2.13 sec. (1187.69 ticks, tree = 0.00 MB, solutions = 7)
      8    10    20011.2487   167    20851.0000    19983.3970     1794    4.16%
    111   113    20346.7423   111    20851.0000    19983.3970     7248    4.16%
    268   238    20044.1040   130    20851.0000    19987.3111    13836    4.14%
*   368+  328                        20801.0000    20007.9764             3.81%
    431   363    20107.1055   141    20801.0000    20007.9764    21408    3.81%
    667   570    20140.8782   141    20801.0000    20028.7916    30756    3.71%
    817   709    20261.3253   130    20801.0000    20028.7916    37437    3.71%
   1035   905    20301.0648   112    20801.0000    20029.5625    45600    3.71%
*  1179+  670                        20620.0000    20067.4711             2.68%
*  1179+  446                        20500.0000    20111.7600             1.89%
   1179   447    20111.7600   186    20500.0000    20113.8538    53019    1.88%
   1181   449    20259.9254   160    20500.0000    20113.8538    53237    1.88%
   1210   465    20315.9968   153    20500.0000    20163.8573    55733    1.64%
Elapsed time = 13.12 sec. (7810.30 ticks, tree = 3.16 MB, solutions = 10)
*  1484+  381                        20477.0000    20204.5329             1.33%
   1590   377    20356.2243   147    20477.0000    20226.4721    76157    1.22%
*  1939+  517                        20460.0000    20246.7933             1.04%

Mixed integer rounding cuts applied:  135
Zero-half cuts applied:  22
Lift and project cuts applied:  1
Gomory fractional cuts applied:  3

Root node processing (before b&c):
  Real time             =    2.12 sec. (1187.95 ticks)
Parallel b&c, 4 threads:
  Real time             =   13.49 sec. (8309.07 ticks)
  Sync time (average)   =    0.97 sec.
  Wait time (average)   =    1.12 sec.
                          ------------
Total (root+branch&cut) =   15.62 sec. (9497.02 ticks)
optimal objective= 20460.00000000003+65325.0=85785.00000000003

Step 4-AdjustFlow
After adjust, flowCost=64154.0
Tried aggregator 2 times.
MIP Presolve eliminated 78897 rows and 42063 columns.
Aggregator did 53432 substitutions.
Reduced MIP has 70201 rows, 169876 columns, and 454610 nonzeros.
Reduced MIP has 0 binaries, 244 generals, 0 SOSs, and 0 indicators.
Presolve time = 0.76 sec. (352.81 ticks)
Tried aggregator 1 time.
MIP Presolve eliminated 311 rows and 749 columns.
Reduced MIP has 69890 rows, 169127 columns, and 452581 nonzeros.
Reduced MIP has 0 binaries, 244 generals, 0 SOSs, and 0 indicators.
Presolve time = 0.49 sec. (201.11 ticks)
MIP emphasis: balance optimality and feasibility.
MIP search method: dynamic search.
Parallel mode: deterministic, using up to 4 threads.
Root relaxation solution time = 29.50 sec. (7580.17 ticks)

        Nodes                                         Cuts/
   Node  Left     Objective  IInf  Best Integer    Best Bound    ItCnt     Gap

      0     0    72958.6024    36                  72958.6024       30         
      0     0    73103.9277    39                   Cuts: 729     4001         
      0     0    73144.3231    40                   Cuts: 873     6311         
      0     0    73150.6191    43                MIRcuts: 931     7954         
      0     0    73170.5701    43                MIRcuts: 913     9969         
      0     0    73187.2996    42                MIRcuts: 960    11662         
      0     0    73212.4887    44                MIRcuts: 769    14489         
      0     0    73215.9298    43               MIRcuts: 1015    16307         
*     0+    0                       108341.0000    73215.9298            32.42%
      0     0    73218.6822    44   108341.0000  MIRcuts: 885    17847   32.42%
*     0+    0                        78408.0000    73218.6822             6.62%
*     0+    0                        78351.0000    73218.6822             6.55%
*     0+    0                        77377.0000    73218.6822             5.37%
*     0+    0                        77047.0000    73218.6822             4.97%
Heuristic still looking.
Heuristic still looking.
      0     2    73218.6822    44    77047.0000    73218.6822    17847    4.97%
Elapsed time = 379.55 sec. (109662.08 ticks, tree = 0.00 MB, solutions = 5)
      1     3    73220.1600    44    77047.0000    73218.6822    19893    4.97%
      2     4    73233.1784    42    77047.0000    73218.6822    22900    4.97%
      3     5    73223.0511    41    77047.0000    73220.7113    24691    4.97%
      4     6    73235.6677    42    77047.0000    73220.7113    25703    4.97%
      5     7    73337.0271    40    77047.0000    73220.7113    29233    4.97%
      6     8    73246.0499    38    77047.0000    73220.7113    32059    4.97%
      7     9    73360.1817    36    77047.0000    73220.7113    34697    4.97%
      8    10    73245.5985    41    77047.0000    73220.8945    53978    4.97%
     11    13    73360.9731    41    77047.0000    73220.8945   115821    4.97%
     12    14    73237.6627    36    77047.0000    73220.8945   159120    4.97%
Elapsed time = 647.51 sec. (172959.74 ticks, tree = 0.00 MB, solutions = 5)
     14    16    73439.6510    31    77047.0000    73220.8945   260068    4.97%
     16    18    73276.0479    39    77047.0000    73220.8945   322629    4.97%
     20    22    73259.3102    44    77047.0000    73220.8945   357186    4.97%
     22    24    73554.5376    27    77047.0000    73220.8945   372208    4.97%
     24    26    73296.9473    32    77047.0000    73220.8945   381433    4.97%
     25    27    73373.2407    32    77047.0000    73220.8945   386928    4.97%
     26    28    73562.9293    25    77047.0000    73220.8945   388483    4.97%

Mixed integer rounding cuts applied:  773
Gomory fractional cuts applied:  3

Root node processing (before b&c):
  Real time             =  379.37 sec. (109617.21 ticks)
Parallel b&c, 4 threads:
  Real time             =  520.72 sec. (113223.67 ticks)
  Sync time (average)   =   69.57 sec.
  Wait time (average)   =   69.64 sec.
                          ------------
Total (root+branch&cut) =  900.09 sec. (222840.88 ticks)
Intensification optimal objective= 77047.0
# columns in columnManager=250
===========================new round 4=========================
-------------Start to solve SolveVehicleCoverCGHeuristic()---------------
flowCoverCount=210
Time of first LP solve= 182662
There are 16103 columns added to the model.
Tried aggregator 1 time.
MIP Presolve eliminated 2290 rows and 10692 columns.
MIP Presolve modified 15260 coefficients.
Reduced MIP has 240 rows, 5441 columns, and 23845 nonzeros.
Reduced MIP has 1766 binaries, 3675 generals, 0 SOSs, and 0 indicators.
Presolve time = 0.06 sec. (44.52 ticks)
Found incumbent of value 82677.000000 after 0.06 sec. (52.85 ticks)
Tried aggregator 1 time.
Reduced MIP has 240 rows, 5441 columns, and 23845 nonzeros.
Reduced MIP has 1766 binaries, 3675 generals, 0 SOSs, and 0 indicators.
Presolve time = 0.01 sec. (8.61 ticks)
Probing time = 0.08 sec. (1.83 ticks)
Clique table members: 1.
MIP emphasis: balance optimality and feasibility.
MIP search method: dynamic search.
Parallel mode: deterministic, using up to 4 threads.
Root relaxation solution time = 0.05 sec. (55.75 ticks)

        Nodes                                         Cuts/
   Node  Left     Objective  IInf  Best Integer    Best Bound    ItCnt     Gap

*     0+    0                        82677.0000        0.0000           100.00%
*     0+    0                        27359.0000        0.0000           100.00%
*     0+    0                        26979.0000        0.0000           100.00%
      0     0    18452.0561   141    26979.0000    18452.0561      629   31.61%
*     0+    0                        22795.0000    18452.0561            19.05%
      0     0    19046.4774   163    22795.0000      Cuts: 54      921   16.44%
      0     0    19198.3815   160    22795.0000      Cuts: 17     1077   15.78%
      0     0    19228.8226   165    22795.0000      Cuts: 12     1126   15.64%
      0     0    19238.9721   162    22795.0000       Cuts: 4     1159   15.60%
      0     0    19252.0538   158    22795.0000       Cuts: 8     1201   15.54%
      0     0    19260.1991   163    22795.0000       Cuts: 7     1222   15.51%
      0     0    19269.3162   166    22795.0000       Cuts: 3     1256   15.47%
*     0+    0                        21547.0000    19269.3162            10.57%
*     0+    0                        21525.0000    19269.3162            10.48%
      0     0    19293.6661   166    21525.0000       Cuts: 9     1310   10.37%
      0     0    19321.0712   169    21525.0000      Cuts: 10     1378   10.24%
      0     0    19338.0530   167    21525.0000       Cuts: 5     1440   10.16%
      0     0    19340.0557   170    21525.0000       Cuts: 2     1465   10.15%
      0     0    19340.1661   169    21525.0000    MIRcuts: 1     1477   10.15%
*     0+    0                        21369.0000    19340.1661             9.49%
      0     2    19340.1661   169    21369.0000    19340.1661     1477    9.49%
Elapsed time = 2.57 sec. (1466.02 ticks, tree = 0.00 MB, solutions = 7)
      5     7    19410.9184   160    21369.0000    19346.1463     1809    9.47%
     66    68    19528.9946   128    21369.0000    19346.1463     5678    9.47%
    111   113    19817.4479   118    21369.0000    19346.1463     7971    9.47%
    232   234    19987.5304   108    21369.0000    19346.1463    13910    9.47%
    434   436    20671.4787    53    21369.0000    19346.1463    21861    9.47%
*   556+  544                        20787.0000    19346.1463             6.93%
    722   457    19582.0924   151    20787.0000    19358.0093    29662    6.87%
    829   564    20042.4787   137    20787.0000    19367.9640    36462    6.83%
    996   715    20288.1459    88    20787.0000    19367.9640    44024    6.83%
   1182   850    19605.6046   140    20787.0000    19391.9925    50953    6.71%
   1862  1501    19607.9097   143    20787.0000    19416.6318    76305    6.59%
Elapsed time = 7.36 sec. (4736.75 ticks, tree = 9.02 MB, solutions = 9)
*  2381+ 1332                        20541.0000    19453.8715             5.29%
*  2381+  888                        20483.0000    19598.3861             4.32%
   2381   889    19598.9223   203    20483.0000    19598.9223    97492    4.32%
   2395   893    19664.4696   184    20483.0000    19627.9907    98982    4.17%
   2455   927    19757.7708   161    20483.0000    19627.9907   103811    4.17%
   2667  1020    20057.7353   160    20483.0000    19634.0026   117972    4.14%
*  2694+  787                        20241.0000    19634.0026             3.00%
   3036   817    19791.3219   179    20241.0000    19672.4016   138379    2.81%
   3470  1008    20101.9097   156    20241.0000    19692.1388   155121    2.71%
   3948  1308    19897.0074   133    20241.0000    19701.7540   178375    2.66%
   4465  1746    19797.2875   157    20241.0000    19714.6797   198856    2.60%
   4830  2045    20025.1603   133    20241.0000    19722.1597   217221    2.56%
   5380  2494    20059.5319   129    20241.0000    19731.8686   241262    2.52%
Elapsed time = 32.47 sec. (20008.89 ticks, tree = 18.22 MB, solutions = 12)
   5848  2873    19955.0378   163    20241.0000    19738.8494   263399    2.48%
   6262  3204    19956.4523   160    20241.0000    19742.3749   284940    2.46%
   6789  3654    20049.3327   133    20241.0000    19745.0778   309577    2.45%
   7289  4059    19973.5774   157    20241.0000    19750.9706   331394    2.42%
   7865  4521    19989.8468   153    20241.0000    19754.2293   357045    2.40%
   8378  4944    19900.5623   142    20241.0000    19758.5180   379015    2.38%
   8934  5405    19990.2378   167    20241.0000    19761.7330   405817    2.37%
   9438  5819    19980.2644   170    20241.0000    19766.7644   425995    2.34%
   9987  6244    20017.9879   140    20241.0000    19769.7683   451624    2.33%
  10590  6716    20249.3281   150    20241.0000    19772.4506   479831    2.31%
Elapsed time = 48.94 sec. (30058.95 ticks, tree = 48.53 MB, solutions = 12)
* 10702+ 6798                        20135.0000    19775.0628             1.79%
  10982  7029    19852.0710   166    20135.0000    19775.0628   496997    1.79%
  11691  5895    20024.2638   137    20135.0000    19778.3778   529764    1.77%
  12342  6361    19885.5251   176    20135.0000    19785.2689   563212    1.74%
  12884  6775    20067.9103   137    20135.0000    19791.6137   589322    1.71%
  13474  7211    20021.9815   126    20135.0000    19797.7588   618382    1.67%
  14061  7642    20081.8070   163    20135.0000    19801.7852   646850    1.65%
  14848  8213    19930.1582   122    20135.0000    19803.4668   686245    1.65%
  15507  8693    19957.5399   170    20135.0000    19807.0312   717599    1.63%
  16155  9151        cutoff          20135.0000    19811.2064   748541    1.61%
  16630  9489    20056.2217   171    20135.0000    19814.6628   773881    1.59%
Elapsed time = 65.53 sec. (40139.32 ticks, tree = 74.73 MB, solutions = 13)
  17148  9843    20111.9269   152    20135.0000    19819.0712   802216    1.57%
  17811 10294    19947.3907   160    20135.0000    19821.7337   834279    1.56%
  18438 10735    20056.8974   161    20135.0000    19825.8728   865226    1.54%
  18966 11118        cutoff          20135.0000    19825.8728   892739    1.54%
  19671 11589    20041.5082   159    20135.0000    19828.1818   928738    1.52%
  20291 12005    20007.9773   169    20135.0000    19831.6465   962236    1.51%
  20928 12446    20006.0674   173    20135.0000    19834.8444   994090    1.49%
  21395 12766    19981.2570   168    20135.0000    19837.3183  1016937    1.48%
  21956 13137    19885.2877   142    20135.0000    19839.0123  1046982    1.47%
  22526 13531    20008.1300   143    20135.0000    19840.7869  1076465    1.46%
Elapsed time = 81.46 sec. (49733.29 ticks, tree = 109.30 MB, solutions = 13)
  23191 13978    20008.3400   138    20135.0000    19843.7670  1109038    1.45%
  23826 14427    20101.0987   127    20135.0000    19847.0410  1141287    1.43%
  24518 14913    20042.5651   176    20135.0000    19849.4420  1175651    1.42%
  25181 15357    20117.2334   155    20135.0000    19851.6821  1207939    1.41%
  25810 15799    20027.1486   131    20135.0000    19851.6821  1239260    1.41%
* 25913+15871                        20103.0000    19853.6395             1.24%
* 25913+15871                        20051.0000    19853.6395             0.98%
* 25913+15869                        20051.0000    19853.6395             0.98%
  25913 15870    20116.9984   113    20051.0000    19853.6395  1243996    0.98%

Mixed integer rounding cuts applied:  160
Zero-half cuts applied:  27
Lift and project cuts applied:  3
Gomory fractional cuts applied:  1

Root node processing (before b&c):
  Real time             =    2.56 sec. (1463.98 ticks)
Parallel b&c, 4 threads:
  Real time             =  101.94 sec. (67464.36 ticks)
  Sync time (average)   =    9.38 sec.
  Wait time (average)   =    9.81 sec.
                          ------------
Total (root+branch&cut) =  104.49 sec. (68928.35 ticks)
optimal objective= 20051.000000000004+64895.0=84946.0

Step 4-AdjustFlow
After adjust, flowCost=63961.0
Tried aggregator 2 times.
MIP Presolve eliminated 74506 rows and 37320 columns.
Aggregator did 45301 substitutions.
Reduced MIP has 82723 rows, 207743 columns, and 555945 nonzeros.
Reduced MIP has 0 binaries, 301 generals, 0 SOSs, and 0 indicators.
Presolve time = 0.79 sec. (384.52 ticks)
Tried aggregator 1 time.
MIP Presolve eliminated 368 rows and 928 columns.
Reduced MIP has 82355 rows, 206815 columns, and 553424 nonzeros.
Reduced MIP has 0 binaries, 301 generals, 0 SOSs, and 0 indicators.
Presolve time = 0.59 sec. (244.25 ticks)
MIP emphasis: balance optimality and feasibility.
MIP search method: dynamic search.
Parallel mode: deterministic, using up to 4 threads.
Root relaxation solution time = 54.72 sec. (13080.40 ticks)

        Nodes                                         Cuts/
   Node  Left     Objective  IInf  Best Integer    Best Bound    ItCnt     Gap

      0     0    72649.1294    42                  72649.1294       28         
*     0+    0                       110166.0000    72649.1294            34.05%
      0     0    72722.6589    41   110166.0000    Cuts: 1055     5153   33.99%
      0     0    72752.5219    40   110166.0000    Cuts: 1172    10636   33.96%
      0     0    72776.1371    39   110166.0000 MIRcuts: 1009    14400   33.94%
*     0+    0                        78829.0000    72776.1371             7.68%
*     0+    0                        78786.0000    72776.1371             7.63%
*     0+    0                        78446.0000    72776.1371             7.23%
*     0+    0                        78365.0000    72776.1371             7.13%
      0     0    72784.8818    41    78365.0000 MIRcuts: 1049    17941    7.12%
      0     0    72792.1355    41    78365.0000 MIRcuts: 1124    20200    7.11%
      0     0    72792.4320    44    78365.0000 MIRcuts: 1031    21549    7.11%
      0     0    72796.0101    40    78365.0000 MIRcuts: 1058    23646    7.11%
Heuristic still looking.
Heuristic still looking.
      0     2    72796.0101    40    78365.0000    72796.0101    23646    7.11%
Elapsed time = 557.26 sec. (169753.64 ticks, tree = 0.00 MB, solutions = 5)
      1     3    72805.6451    42    78365.0000    72796.0101    27489    7.11%
      2     4    72821.8531    42    78365.0000    72796.0101    32033    7.11%
      3     5    72812.4400    42    78365.0000    72805.7240    34228    7.09%
      4     6    72830.5214    47    78365.0000    72805.7240    39025    7.09%
      7     9    72844.9364    47    78365.0000    72805.7240    51504    7.09%
      8    10    72861.8888    41    78365.0000    72805.7240    55400    7.09%
      9    11    72834.5946    45    78365.0000    72805.7240    72832    7.09%
     10    12    72858.9475    47    78365.0000    72805.7240   104551    7.09%

Mixed integer rounding cuts applied:  1167
Gomory fractional cuts applied:  2

Root node processing (before b&c):
  Real time             =  557.08 sec. (169697.86 ticks)
Parallel b&c, 4 threads:
  Real time             =  343.06 sec. (89392.50 ticks)
  Sync time (average)   =  113.42 sec.
  Wait time (average)   =  113.46 sec.
                          ------------
Total (root+branch&cut) =  900.14 sec. (259090.36 ticks)
Intensification optimal objective= 78365.0
# columns in columnManager=307
===========================new round 5=========================
-------------Start to solve SolveVehicleCoverCGHeuristic()---------------
flowCoverCount=244
Time of first LP solve= 186873
There are 16191 columns added to the model.
Tried aggregator 1 time.
MIP Presolve eliminated 2256 rows and 10262 columns.
MIP Presolve modified 17949 coefficients.
Reduced MIP has 274 rows, 5959 columns, and 27013 nonzeros.
Reduced MIP has 2232 binaries, 3727 generals, 0 SOSs, and 0 indicators.
Presolve time = 0.05 sec. (46.27 ticks)
Found incumbent of value 1.0007028e+08 after 0.11 sec. (78.77 ticks)
Tried aggregator 1 time.
Reduced MIP has 274 rows, 5959 columns, and 27013 nonzeros.
Reduced MIP has 2232 binaries, 3727 generals, 0 SOSs, and 0 indicators.
Presolve time = 0.01 sec. (9.82 ticks)
Probing time = 0.07 sec. (2.77 ticks)
Clique table members: 1.
MIP emphasis: balance optimality and feasibility.
MIP search method: dynamic search.
Parallel mode: deterministic, using up to 4 threads.
Root relaxation solution time = 0.12 sec. (78.22 ticks)

        Nodes                                         Cuts/
   Node  Left     Objective  IInf  Best Integer    Best Bound    ItCnt     Gap

*     0+    0                       1.00070e+08        0.0000           100.00%
*     0+    0                        33835.0000        0.0000           100.00%
*     0+    0                        31497.0000        0.0000           100.00%
      0     0    20486.2068   168    31497.0000    20486.2068      765   34.96%
      0     0    20943.3038   182    31497.0000      Cuts: 56     1058   33.51%
      0     0    21068.8634   183    31497.0000      Cuts: 26     1215   33.11%
*     0+    0                        25022.0000    21068.8634            15.80%
      0     0    21131.9942   185    25022.0000      Cuts: 16     1315   15.55%
      0     0    21148.4538   186    25022.0000      Cuts: 12     1377   15.48%
      0     0    21170.7742   188    25022.0000       Cuts: 7     1442   15.39%
      0     0    21186.3060   188    25022.0000       Cuts: 9     1491   15.33%
      0     0    21197.9176   193    25022.0000       Cuts: 6     1563   15.28%
      0     0    21198.0681   195    25022.0000    MIRcuts: 2     1576   15.28%
      0     0    21204.0768   190    25022.0000   ZeroHalf: 3     1639   15.26%
      0     0    21223.7565   193    25022.0000       Cuts: 9     1731   15.18%
      0     0    21228.2328   189    25022.0000       Cuts: 5     1777   15.16%
*     0+    0                        23857.0000    21228.2328            11.02%
      0     2    21228.2328   189    23857.0000    21228.2328     1777   11.02%
Elapsed time = 2.98 sec. (1544.33 ticks, tree = 0.00 MB, solutions = 5)
     18    20    21346.2406   187    23857.0000    21268.0713     3080   10.85%
     95    97    21414.7260   181    23857.0000    21268.0713     8425   10.85%
    186   188    21741.0850   140    23857.0000    21268.0713    14348   10.85%
    274   276    22388.4692    90    23857.0000    21268.0713    19371   10.85%
*   347+  345                        23373.0000    21268.0713             9.01%
    437   426    21702.3602   183    23373.0000    21268.0713    26346    9.01%
    589   552    21976.2093   150    23373.0000    21289.4797    33856    8.91%
    666   629    22050.6717   132    23373.0000    21289.4797    38816    8.91%
*   769+  723                        23321.0000    21289.4797             8.71%
    802   749    21527.7366   168    23321.0000    21289.4797    45736    8.71%
    938   859    21637.5607   164    23321.0000    21289.4797    51267    8.71%
*  1222+  758                        22950.0000    21341.3595             7.01%
   1222   759    21525.5952   233    22950.0000    21525.5952    64779    6.21%
Elapsed time = 19.69 sec. (10650.43 ticks, tree = 5.43 MB, solutions = 8)
   1229   765    21655.5945   198    22950.0000    21575.5140    65695    5.99%
   1248   777    21734.4695   203    22950.0000    21575.5140    67821    5.99%
   1312   806    22079.9359   173    22950.0000    21575.5140    74205    5.99%
   1474   881    22207.2219   164    22950.0000    21600.1241    87530    5.88%
*  1489+  678                        22941.0000    21600.1241             5.84%
   1729   772    22045.4256   177    22941.0000    21601.8139   106319    5.84%
   1953   895    22503.0392   118    22941.0000    21601.8139   122636    5.84%
   2153   973    21923.7985   194    22941.0000    21630.8627   134171    5.71%
   2589  1235    21961.7206   171    22941.0000    21633.9767   153368    5.70%
   3060  1661    21866.8931   194    22941.0000    21640.0971   172455    5.67%
   3440  2023    22632.6715   143    22941.0000    21640.0971   190477    5.67%
Elapsed time = 33.14 sec. (20700.52 ticks, tree = 15.77 MB, solutions = 9)
   3820  2363    22149.3815   148    22941.0000    21659.4533   211263    5.59%
   4080  2601    21865.9958   170    22941.0000    21659.4533   228196    5.59%
   4429  2914    21785.0138   190    22941.0000    21671.1951   244224    5.54%
   4905  3358    21902.2609   200    22941.0000    21684.9407   262976    5.48%
*  5022+ 3453                        22909.0000    21684.9407             5.34%
*  5136+ 3518                        22868.0000    21684.9407             5.17%
*  5136+ 3518                        22803.0000    21684.9407             4.90%
   5136  3520    22413.6281   122    22803.0000    21684.9407   273910    4.90%
*  5164+ 3546                        22782.0000    21684.9407             4.82%
*  5387+ 3368                        22754.0000    21684.9407             4.70%
   5387  3370    22355.0738   115    22754.0000    21684.9407   283836    4.70%
*  5818+ 3653                        22738.0000    21688.0861             4.62%
   5876  3626    21967.0978   195    22738.0000    21697.7308   309455    4.58%
   6150  3872    21853.2088   181    22738.0000    21698.7472   327609    4.57%
   6518  4217    22640.4226    88    22738.0000    21698.7472   345766    4.57%
   6877  4534    22226.7015   168    22738.0000    21702.8797   365717    4.55%
Elapsed time = 48.19 sec. (30703.55 ticks, tree = 36.35 MB, solutions = 15)
   7179  4817    22176.2365   162    22738.0000    21703.5787   382221    4.55%
   7617  5201    22176.1574   157    22738.0000    21708.3424   403501    4.53%
   7933  5492    22400.8374   133    22738.0000    21711.8319   425152    4.51%
*  8099+ 5629                        22564.0000    21711.8319             3.78%
   8339  4575    22137.2659   163    22564.0000    21713.8152   447403    3.77%
   8488  4711    22003.5937   187    22564.0000    21713.8152   457384    3.77%
   8830  5007    21964.7031   190    22564.0000    21722.6248   477481    3.73%
   9089  5251    22130.0906   177    22564.0000    21725.5559   490718    3.72%
   9520  5625    22074.1119   169    22564.0000    21727.7853   517912    3.71%
   9632  5725    22411.8857   112    22564.0000    21727.7853   524451    3.71%
  10238  6264    22281.8381   156    22564.0000    21727.7956   558255    3.71%
Elapsed time = 64.05 sec. (40655.02 ticks, tree = 49.93 MB, solutions = 16)
  10632  6622    22090.9287   169    22564.0000    21735.6886   583146    3.67%
  10979  6925    22429.2743   150    22564.0000    21735.6886   603448    3.67%
  11396  7299    21987.4399   171    22564.0000    21742.1340   628608    3.64%
  11838  7676    22083.9177   182    22564.0000    21743.3477   653493    3.64%
  12141  7936    22308.4783   151    22564.0000    21743.3477   672866    3.64%
  12534  8282    22055.5334   174    22564.0000    21745.7626   693078    3.63%
  12813  8538    22362.9457   137    22564.0000    21745.7626   706049    3.63%
  13254  8921    22072.8179   186    22564.0000    21748.8867   730862    3.61%
  13506  9145    22039.5452   136    22564.0000    21748.8867   748825    3.61%
  13761  9368    22087.3440   186    22564.0000    21753.2146   762768    3.59%
Elapsed time = 80.59 sec. (51019.13 ticks, tree = 81.48 MB, solutions = 16)
  14447  9986    21906.0294   193    22564.0000    21756.4690   803030    3.58%
  14881 10363    22016.6027   175    22564.0000    21759.0642   829074    3.57%
  15291 10725    21895.8158   175    22564.0000    21759.0642   850525    3.57%
  15643 11040    22371.9894   160    22564.0000    21762.4493   873247    3.55%
  16034 11402    22334.1572   123    22564.0000    21762.4493   895276    3.55%
  16310 11655    22415.3143   144    22564.0000    21763.8345   911892    3.55%
* 16483+11801                        22466.0000    21763.8345             3.13%
  16703 10370    21951.1551   190    22466.0000    21768.9754   934703    3.10%
  16972 10615    22328.0503   145    22466.0000    21768.9754   952834    3.10%
  17280 10885    21807.6533   205    22466.0000    21772.4180   972046    3.09%
  17916 11433    22105.8440   167    22466.0000    21773.6074  1010032    3.08%
Elapsed time = 98.85 sec. (62894.92 ticks, tree = 100.59 MB, solutions = 17)
  18321 11784    22150.1770   179    22466.0000    21775.0946  1034219    3.08%
  18614 12041    22112.3117   164    22466.0000    21775.0946  1054612    3.08%
  18988 12365    22060.6050   192    22466.0000    21779.0095  1079648    3.06%
  19287 12620    22081.9970   179    22466.0000    21779.0095  1097632    3.06%
  19786 13064    22020.8748   174    22466.0000    21781.6045  1127039    3.05%
  20190 13410    22024.5133   181    22466.0000    21785.6783  1152423    3.03%
  20241 13454    22054.5323   165    22466.0000    21785.6783  1156990    3.03%
  20943 14054    22167.6331   166    22466.0000    21785.6783  1193911    3.03%
  21270 14340    22345.6483   179    22466.0000    21789.8866  1216813    3.01%
* 21476+14513                        22410.0000    21789.8866             2.77%
  21482 14521    22437.5525   126    22410.0000    21789.8866  1230201    2.77%
Elapsed time = 115.51 sec. (73036.82 ticks, tree = 131.14 MB, solutions = 17)
  22046 13620    21988.3187   186    22410.0000    21791.2923  1262099    2.76%
  22343 13876    21860.5712   205    22410.0000    21791.2923  1284545    2.76%
* 22353+13866                        22325.0000    21791.2923             2.39%
  22767 11868    22221.3896   146    22325.0000    21794.7329  1310534    2.38%
  23075 12127    22184.2787   145    22325.0000    21794.7329  1332649    2.38%
  23541 12520    22153.9166   159    22325.0000    21797.8199  1359288    2.36%
  23939 12848    21949.3970   187    22325.0000    21800.1925  1387037    2.35%
  24333 13186    22139.7056   161    22325.0000    21800.1925  1412487    2.35%
* 24551 13355      integral     0    22299.0000    21800.1925  1424723    2.24%
* 24551 13355      integral     0    22299.0000    21800.1925  1424723    2.24%
* 24564+12484                        22291.0000    21803.5522             2.19%
* 24564+12484                        22263.0000    21803.5522             2.06%
* 24564+12484                        22249.0000    21803.5522             2.00%
* 24564+12484                        22243.0000    21803.5522             1.98%
* 24564+12484                        22235.0000    21803.5522             1.94%
* 24564+12484                        22227.0000    21803.5522             1.91%
* 24564+12484                        22207.0000    21803.5522             1.82%
  24564 12486    21961.2412   201    22207.0000    21803.5522  1425787    1.82%
* 24566+12486                        22173.0000    21803.5522             1.67%
  24566 12488    21992.8442   192    22173.0000    21803.5522  1426018    1.67%
Elapsed time = 146.73 sec. (93307.95 ticks, tree = 121.54 MB, solutions = 20)
  24568  8470    21547.4608   242    22173.0000    21803.5522  1427924    1.67%
  24574  8472    21639.7826   232    22173.0000    21803.5522  1428744    1.67%
  24594  8485    21716.1600   200    22173.0000    21803.5522  1430969    1.67%
  24623  8505    21681.0470   203    22173.0000    21803.5522  1434702    1.67%
  24680  8545    21942.1671   150    22173.0000    21803.5522  1440495    1.67%
  24744  8524    21659.5328   205    22173.0000    21803.5522  1445307    1.67%
  24815  8221    21978.9657   192    22173.0000    21803.5522  1451810    1.67%
  24923  8209    21936.1296   183    22173.0000    21803.5522  1461241    1.67%
  25118  7962    21723.9499   196    22173.0000    21803.5522  1473312    1.67%
  25356  7885    21901.2928   187    22173.0000    21803.5522  1487334    1.67%
Elapsed time = 168.73 sec. (108116.08 ticks, tree = 74.70 MB, solutions = 31)
  25437  7826    21769.7078   202    22173.0000    21803.5522  1491213    1.67%
  25662  7709    21808.7751   225    22173.0000    21803.5522  1508147    1.67%
  25751  7702    22079.5609   159    22173.0000    21803.5522  1514740    1.67%
  26032  7686    21988.3502   172    22173.0000    21803.5522  1531641    1.67%
  26331  7667    22007.3253   143    22173.0000    21803.5522  1551871    1.67%
  26654  7655        cutoff          22173.0000    21803.5522  1571555    1.67%
  26968  7710    22058.8138   154    22173.0000    21803.5522  1591031    1.67%

Mixed integer rounding cuts applied:  151
Zero-half cuts applied:  20
Lift and project cuts applied:  8

Root node processing (before b&c):
  Real time             =    2.98 sec. (1542.67 ticks)
Parallel b&c, 4 threads:
  Real time             =  177.04 sec. (114351.80 ticks)
  Sync time (average)   =    8.73 sec.
  Wait time (average)   =    9.30 sec.
                          ------------
Total (root+branch&cut) =  180.02 sec. (115894.47 ticks)
optimal objective= 22173.000000000808+64707.0=86880.00000000081

Step 4-AdjustFlow
After adjust, flowCost=63883.0
Tried aggregator 2 times.
MIP Presolve eliminated 71485 rows and 34104 columns.
Aggregator did 39213 substitutions.
Reduced MIP has 91832 rows, 239185 columns, and 641879 nonzeros.
Reduced MIP has 0 binaries, 366 generals, 0 SOSs, and 0 indicators.
Presolve time = 0.83 sec. (413.48 ticks)
Tried aggregator 1 time.
MIP Presolve eliminated 399 rows and 1049 columns.
Reduced MIP has 91433 rows, 238136 columns, and 639042 nonzeros.
Reduced MIP has 0 binaries, 366 generals, 0 SOSs, and 0 indicators.
Presolve time = 0.70 sec. (279.62 ticks)
MIP emphasis: balance optimality and feasibility.
MIP search method: dynamic search.
Parallel mode: deterministic, using up to 4 threads.
Root relaxation solution time = 90.77 sec. (20334.32 ticks)

        Nodes                                         Cuts/
   Node  Left     Objective  IInf  Best Integer    Best Bound    ItCnt     Gap

      0     0    72363.6899    35                  72363.6899       31         
      0     0    72497.9617    41                   Cuts: 841     5862         
      0     0    72528.5257    45                   Cuts: 991    12290         
      0     0    72532.8059    45               MIRcuts: 1081    15841         
      0     0    72542.2624    46               MIRcuts: 1063    17892         
*     0+    0                       111586.0000    72542.2624            34.99%
      0     0    72554.6214    47   111586.0000 MIRcuts: 1069    23005   34.98%
*     0+    0                        77909.0000    72554.6214             6.87%
*     0+    0                        77047.0000    72554.6214             5.83%
*     0+    0                        76782.0000    72554.6214             5.51%
      0     0    72559.1449    45    76782.0000  MIRcuts: 999    25911    5.50%
      0     0    72560.6070    45    76782.0000  MIRcuts: 933    28173    5.50%
      0     0    72561.6331    48    76782.0000  MIRcuts: 943    29626    5.50%
Heuristic still looking.
Heuristic still looking.

Mixed integer rounding cuts applied:  1241
Gomory fractional cuts applied:  2

Root node processing (before b&c):
  Real time             =  900.16 sec. (218346.06 ticks)
Parallel b&c, 4 threads:
  Real time             =    0.00 sec. (0.00 ticks)
  Sync time (average)   =    0.00 sec.
  Wait time (average)   =    0.00 sec.
                          ------------
Total (root+branch&cut) =  900.16 sec. (218346.06 ticks)
Intensification optimal objective= 76782.0
# columns in columnManager=372
===========================new round 6=========================
-------------Start to solve SolveVehicleCoverCGHeuristic()---------------
flowCoverCount=266
Time of first LP solve= 202488
There are 15732 columns added to the model.
Tried aggregator 1 time.
MIP Presolve eliminated 2234 rows and 10697 columns.
MIP Presolve modified 17715 coefficients.
Reduced MIP has 296 rows, 5065 columns, and 23975 nonzeros.
Reduced MIP has 1983 binaries, 3082 generals, 0 SOSs, and 0 indicators.
Presolve time = 0.04 sec. (41.51 ticks)
Found incumbent of value 88307.000000 after 0.05 sec. (49.71 ticks)
Tried aggregator 1 time.
MIP Presolve eliminated 1 rows and 0 columns.
Reduced MIP has 295 rows, 5065 columns, and 23953 nonzeros.
Reduced MIP has 1983 binaries, 3082 generals, 0 SOSs, and 0 indicators.
Presolve time = 0.01 sec. (9.06 ticks)
Probing time = 0.07 sec. (2.82 ticks)
Clique table members: 1.
MIP emphasis: balance optimality and feasibility.
MIP search method: dynamic search.
Parallel mode: deterministic, using up to 4 threads.
Root relaxation solution time = 0.06 sec. (67.18 ticks)

        Nodes                                         Cuts/
   Node  Left     Objective  IInf  Best Integer    Best Bound    ItCnt     Gap

*     0+    0                        88307.0000        0.0000           100.00%
*     0+    0                        31126.0000        0.0000           100.00%
*     0+    0                        31116.0000        0.0000           100.00%
      0     0    21673.1303   161    31116.0000    21673.1303      793   30.35%
      0     0    22273.4483   182    31116.0000      Cuts: 60     1090   28.42%
      0     0    22402.4291   179    31116.0000      Cuts: 30     1256   28.00%
      0     0    22454.1146   189    31116.0000      Cuts: 14     1372   27.84%
*     0+    0                        25026.0000    22454.1146            10.28%
      0     0    22474.2677   188    25026.0000       Cuts: 9     1440   10.20%
      0     0    22502.4927   193    25026.0000       Cuts: 7     1491   10.08%
      0     0    22510.8961   195    25026.0000       Cuts: 7     1523   10.05%
      0     0    22522.1002   188    25026.0000       Cuts: 4     1560   10.01%
      0     0    22528.6113   183    25026.0000       Cuts: 2     1585    9.98%
      0     0    22536.6093   193    25026.0000   ZeroHalf: 2     1632    9.95%
      0     0    22557.0925   198    25026.0000      Cuts: 10     1691    9.87%
      0     0    22562.6683   192    25026.0000       Cuts: 3     1723    9.84%
*     0+    0                        24235.0000    22562.6683             6.90%
      0     0    22566.7585   199    24235.0000       Cuts: 3     1756    6.88%
      0     0    22567.6011   199    24235.0000    MIRcuts: 4     1771    6.88%
      0     0    22568.1024   198    24235.0000    MIRcuts: 1     1786    6.88%
      0     2    22568.1024   198    24235.0000    22568.1024     1786    6.88%
Elapsed time = 6.48 sec. (1387.54 ticks, tree = 0.00 MB, solutions = 5)
      5     7    22607.6807   194    24235.0000    22586.8769     2124    6.80%
     44    46    22832.0971   160    24235.0000    22608.3370     4732    6.71%
    164   166    23274.4578   130    24235.0000    22608.3370    11335    6.71%
    300   294    22824.8157   144    24235.0000    22608.3370    17904    6.71%
*   386+  364                        23951.0000    22638.4378             5.48%
    468   366    22851.5872   159    23951.0000    22638.4378    23463    5.48%
    573   471    23365.9014   113    23951.0000    22638.4378    29391    5.48%
*   757+  630                        23877.0000    22653.5553             5.12%
    786   659    22865.9533   190    23877.0000    22653.5553    37644    5.12%
    914   736    23028.7955   128    23877.0000    22653.5553    42906    5.12%
*  1148+  636                        23838.0000    22774.9187             4.46%
   1148   637    22837.1248   203    23838.0000    22837.1248    54119    4.20%
   1161   641    22943.3955   181    23838.0000    22863.2115    55516    4.09%
Elapsed time = 19.86 sec. (9635.61 ticks, tree = 4.79 MB, solutions = 8)
   1231   681    23112.7805   174    23838.0000    22863.2115    61479    4.09%
*  1351+  563                        23485.0000    22863.2115             2.65%
   1464   571    23216.4978   180    23485.0000    22863.2933    76781    2.65%
*  1676+  584                        23467.0000    22863.2933             2.57%
   1856   652    23150.0637   163    23467.0000    22890.6482    98997    2.46%
*  1866+  636                        23419.0000    22890.6482             2.26%
   2305   904    23058.1474   194    23419.0000    22940.6725   123527    2.04%
   2774  1279    23244.1404   179    23419.0000    22959.9520   149451    1.96%
   3285  1692    23273.8810   205    23419.0000    22977.1765   174676    1.89%
   3750  2053    23272.7469   167    23419.0000    22983.7275   198914    1.86%
   4236  2448    23123.3778   167    23419.0000    22996.4545   226806    1.80%
   4632  2763    23261.5632   195    23419.0000    23005.8409   250924    1.76%
*  4852+ 2922                        23391.0000    23009.4168             1.63%
*  4872  2934      integral     0    23330.0000    23009.4168   264141    1.37%
   5068  2318    23235.5012   180    23330.0000    23017.1815   274448    1.34%
Elapsed time = 34.76 sec. (19336.01 ticks, tree = 17.24 MB, solutions = 13)
   5601  2677    23167.9238   127    23330.0000    23023.9610   305312    1.31%
   6235  3096    23230.0499   164    23330.0000    23032.5380   338164    1.28%
   6724  3430    23186.7807   158    23330.0000    23038.6725   366711    1.25%
   7254  3762    23193.0755   182    23330.0000    23049.2858   395578    1.20%
   7850  4154    23124.7300   148    23330.0000    23054.2892   428545    1.18%
   8457  4556    23297.8275   152    23330.0000    23060.4504   462768    1.16%
   9014  4923    23323.6924   160    23330.0000    23067.8652   494025    1.12%
   9577  5279    23181.7142   161    23330.0000    23072.4961   521391    1.10%
  10255  5697    23172.9748   157    23330.0000    23076.5877   559263    1.09%
  10915  6116    23292.3722   197    23330.0000    23085.1034   595947    1.05%
Elapsed time = 50.70 sec. (28917.64 ticks, tree = 44.81 MB, solutions = 13)
  11574  6514    23161.4555   181    23330.0000    23090.5407   630985    1.03%

Mixed integer rounding cuts applied:  178
Zero-half cuts applied:  26

Root node processing (before b&c):
  Real time             =    6.47 sec. (1384.21 ticks)
Parallel b&c, 4 threads:
  Real time             =   46.78 sec. (29182.78 ticks)
  Sync time (average)   =    1.64 sec.
  Wait time (average)   =    1.91 sec.
                          ------------
Total (root+branch&cut) =   53.24 sec. (30566.99 ticks)
optimal objective= 23330.000000000367+64711.0=88041.00000000036

Step 4-AdjustFlow
After adjust, flowCost=63841.0
Tried aggregator 2 times.
MIP Presolve eliminated 69237 rows and 30592 columns.
Aggregator did 36997 substitutions.
Reduced MIP has 96296 rows, 259648 columns, and 699300 nonzeros.
Reduced MIP has 0 binaries, 431 generals, 0 SOSs, and 0 indicators.
Presolve time = 0.83 sec. (432.48 ticks)
Tried aggregator 1 time.
MIP Presolve eliminated 243 rows and 667 columns.
Reduced MIP has 96053 rows, 258981 columns, and 697498 nonzeros.
Reduced MIP has 0 binaries, 431 generals, 0 SOSs, and 0 indicators.
Presolve time = 0.78 sec. (301.98 ticks)
MIP emphasis: balance optimality and feasibility.
MIP search method: dynamic search.
Parallel mode: deterministic, using up to 4 threads.
Root relaxation solution time = 88.74 sec. (22631.43 ticks)

        Nodes                                         Cuts/
   Node  Left     Objective  IInf  Best Integer    Best Bound    ItCnt     Gap

*     0+    0                       104367.0000   -66675.0000           163.89%
*     0+    0                        94936.0000   -66675.0000           170.23%
*     0+    0                        90257.0000   -66675.0000           173.87%
*     0+    0                        89271.0000   -66675.0000           174.69%
*     0+    0                        89263.0000   -66675.0000           174.70%
*     0+    0                        88677.0000   -66675.0000           175.19%
*     0+    0                        88397.0000   -66675.0000           175.43%
*     0+    0                        87588.0000   -66675.0000           176.12%
      0     0    72266.0952    38    87588.0000    72266.0952       28   17.49%
*     0+    0                        76279.0000    72266.0952             5.26%
      0     0    72362.3431    40    76279.0000    Cuts: 1004     7267    5.13%
      0     0    72366.7767    40    76279.0000 MIRcuts: 1052    10291    5.13%
      0     0    72371.9999    40    76279.0000 MIRcuts: 1177    14211    5.12%
*     0+    0                        75348.0000    72371.9999             3.95%
*     0+    0                        75347.0000    72371.9999             3.95%
*     0+    0                        75320.0000    72371.9999             3.91%
*     0+    0                        74991.0000    72371.9999             3.49%
      0     0    72385.7691    40    74991.0000 MIRcuts: 1298    17322    3.47%
      0     0    72416.4539    40    74991.0000 MIRcuts: 1226    22318    3.43%
      0     0    72422.3947    42    74991.0000 MIRcuts: 1286    25967    3.43%
      0     0    72444.4517    42    74991.0000 MIRcuts: 1249    29492    3.40%
      0     0    72447.0433    43    74991.0000 MIRcuts: 1339    31712    3.39%
      0     0    72461.5615    46    74991.0000 MIRcuts: 1203    35411    3.37%
      0     0    72461.6287    46    74991.0000 MIRcuts: 1234    37032    3.37%
Heuristic still looking.

Mixed integer rounding cuts applied:  1144
Gomory fractional cuts applied:  1

Root node processing (before b&c):
  Real time             =  900.19 sec. (274915.68 ticks)
Parallel b&c, 4 threads:
  Real time             =    0.00 sec. (0.00 ticks)
  Sync time (average)   =    0.00 sec.
  Wait time (average)   =    0.00 sec.
                          ------------
Total (root+branch&cut) =  900.19 sec. (274915.68 ticks)
Intensification optimal objective= 74991.0
# columns in columnManager=437
A new better solution has been found. obj=74991.0
# columns in columnManager=437
===========================new round 7=========================
-------------Start to solve SolveVehicleCoverCGHeuristic()---------------
flowCoverCount=271
Exception in thread "main" java.lang.OutOfMemoryError: GC overhead limit exceeded
	at ilog.cplex.CpxQExpr.<init>(CpxQExpr.java:38)
	at ilog.cplex.CpxQuadNumExpr.<init>(CpxQuadNumExpr.java:31)
	at ilog.cplex.CpxQLNumExpr.<init>(CpxQLNumExpr.java:34)
	at ilog.cplex.CpxQextractor.<init>(CpxQextractor.java:31)
	at ilog.cplex.CpxRange.<init>(CpxRange.java:1341)
	at ilog.cplex.IloCplexModeler.addRange(IloCplexModeler.java:4329)
	at ilog.cplex.IloCplexModeler.addLe(IloCplexModeler.java:4778)
	at cg.master.MasterForVehicleCover.buildModel(MasterForVehicleCover.java:120)
	at cg.master.Master.buildModel(Master.java:1)
	at org.jorlib.frameworks.columnGeneration.master.AbstractMaster.<init>(AbstractMaster.java:121)
	at cg.master.Master.<init>(Master.java:83)
	at cg.master.MasterForVehicleCover.<init>(MasterForVehicleCover.java:38)
	at LocalSearchHeuristicSolver.SolveVehicleCoverCGHeuristic(LocalSearchHeuristicSolver.java:1304)
	at LocalSearchHeuristicSolver.Neighbourhood(LocalSearchHeuristicSolver.java:931)
	at LocalSearchHeuristicSolver.TabuSearch(LocalSearchHeuristicSolver.java:660)
	at LocalSearchHeuristicSolver.main(LocalSearchHeuristicSolver.java:2534)
