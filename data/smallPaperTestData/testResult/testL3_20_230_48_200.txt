LocalSearchHeuristicSolver solver = new LocalSearchHeuristicSolver("./data/testset/testL3_20_230_48_200.txt", 2,5,3,5,300);
solver.TabuSearch(solutionList.get(0),10,300);

错误：cg 没办法跳出来
number of service arcs=11040
number of holding arcs=960

Time of first LP solve= 279026

There are 48592 columns added to the model.

Tried aggregator 2 times.
MIP Presolve eliminated 196844 rows and 178510 columns.
MIP Presolve modified 139418 coefficients.
Aggregator did 5810 substitutions.
Reduced MIP has 446 rows, 26905 columns, and 299527 nonzeros.
Reduced MIP has 56 binaries, 26645 generals, 0 SOSs, and 0 indicators.
Presolve time = 0.57 sec. (492.10 ticks)
Found incumbent of value 136962.000000 after 0.77 sec. (660.20 ticks)
Tried aggregator 1 time.
Reduced MIP has 446 rows, 26905 columns, and 299527 nonzeros.
Reduced MIP has 56 binaries, 26647 generals, 0 SOSs, and 0 indicators.
Presolve time = 0.07 sec. (53.90 ticks)
Probing time = 0.12 sec. (2.26 ticks)
MIP emphasis: balance optimality and feasibility.
MIP search method: dynamic search.
Parallel mode: deterministic, using up to 4 threads.
Root relaxation solution time = 2.75 sec. (1248.67 ticks)

        Nodes                                         Cuts/
   Node  Left     Objective  IInf  Best Integer    Best Bound    ItCnt     Gap

*     0+    0                       136962.0000    35376.0000            74.17%
*     0+    0                        55527.0000    35376.0000            36.29%
*     0+    0                        45073.0000    35376.0000            21.51%
*     0+    0                        44275.0000    35376.0000            20.10%
*     0+    0                        44132.0000    35376.0000            19.84%
      0     0    39756.6910   186    44132.0000    39756.6910     1489    9.91%
*     0+    0                        42517.0000    39756.6910             6.49%
      0     0    40258.3066   182    42517.0000      Cuts: 78     2296    5.31%
*     0+    0                        41966.0000    40258.3066             4.07%
      0     0    40305.0128   183    41966.0000   MIRcuts: 28     2674    3.96%
      0     0    40344.7461   184    41966.0000   MIRcuts: 34     2999    3.86%
      0     0    40354.8378   181    41966.0000    MIRcuts: 9     3132    3.84%
      0     0    40355.1258   184    41966.0000    MIRcuts: 2     3176    3.84%
      0     0    40356.0818   183    41966.0000    MIRcuts: 3     3231    3.84%
      0     2    40356.0818   183    41966.0000    40356.0818     3231    3.84%
Elapsed time = 14.13 sec. (10482.28 ticks, tree = 0.00 MB, solutions = 7)
      2     4    40394.1606   182    41966.0000    40356.0818     3605    3.84%
      4     6    40394.4031   186    41966.0000    40356.0819     3695    3.84%
      5     7    40439.4953   166    41966.0000    40356.0819     4079    3.84%
     11    13    40371.0128   185    41966.0000    40356.8557     4991    3.83%
     14    16    40443.2062   178    41966.0000    40356.8557     5771    3.83%
     15    17    40431.1525   180    41966.0000    40356.8557     6304    3.83%
     22    24    40386.6559   182    41966.0000    40371.2266     7784    3.80%
     27    29    40520.7904   152    41966.0000    40371.2266     8666    3.80%
     30    32    40386.0719   170    41966.0000    40373.9030     9538    3.79%
     54    56    40427.3513   155    41966.0000    40373.9030    13397    3.79%
Elapsed time = 22.45 sec. (14802.97 ticks, tree = 0.00 MB, solutions = 7)
     78    80    40478.5003   137    41966.0000    40373.9030    17171    3.79%
*    79+   79                        41619.0000    40373.9030             2.99%
    103   105    40541.0535   128    41619.0000    40373.9030    20661    2.99%
*   121+  121                        41384.0000    40373.9030             2.44%
    142   144    40572.6463   120    41384.0000    40373.9030    25607    2.44%
    156   158    40913.3571    75    41384.0000    40373.9030    27250    2.44%
*   179+  179                        41249.0000    40373.9030             2.12%
*   210   210      integral     0    41199.0000    40373.9030    32678    2.00%
    212   210    40398.6139   183    41199.0000    40373.9030    32982    2.00%
    213   211    40645.2683   105    41199.0000    40373.9372    33060    2.00%
    339   274    40393.5014   191    41199.0000    40373.9372    41540    2.00%
    380   315    40864.0282    66    41199.0000    40373.9372    47038    2.00%
    396   331    40927.0100    50    41199.0000    40373.9372    49142    2.00%
    466   364    40432.4800   163    41199.0000    40373.9372    54104    2.00%
Elapsed time = 47.99 sec. (26802.24 ticks, tree = 9.15 MB, solutions = 11)
    486   384    40484.1212   152    41199.0000    40373.9372    57329    2.00%
    539   435    40520.9487   140    41199.0000    40373.9372    63073    2.00%
    563   453    40634.2814   118    41199.0000    40373.9372    65681    2.00%
*   772+  470                        41175.0000    40373.9372             1.95%
*   772+  470                        41152.0000    40373.9372             1.89%
*   772+  470                        41144.0000    40373.9372             1.87%
    791   469    40698.2397   104    41144.0000    40373.9372    74282    1.87%
    808   486    40478.0219   154    41144.0000    40373.9372    76144    1.87%
    877   543    40496.3951   149    41144.0000    40381.3180    82213    1.85%
*   955+  613                        41138.0000    40381.3180             1.84%
    955   615    40909.6275    54    41138.0000    40381.3180    89126    1.84%
    957   617    40463.6417   164    41138.0000    40381.3180    89199    1.84%
   1035   695    40652.7410   120    41138.0000    40381.3180    95844    1.84%
   1067   719    40684.8249   112    41138.0000    40381.3180    98176    1.84%
Elapsed time = 75.67 sec. (40677.46 ticks, tree = 19.22 MB, solutions = 15)
   1128   776    40814.7596    94    41138.0000    40381.3180   102867    1.84%
   1179   827    40462.4440   175    41138.0000    40381.3180   106416    1.84%
   1180   828    40396.2053   191    41138.0000    40396.2053   109114    1.80%
   1182   830    40397.3748   192    41138.0000    40396.4322   109194    1.80%
   1183   831    40479.6714   195    41138.0000    40396.4322   109623    1.80%
   1186   834    40519.4731   185    41138.0000    40396.4322   110331    1.80%
   1188   834    40486.3139   191    41138.0000    40397.3762   110609    1.80%
   1192   838    40496.6399   184    41138.0000    40397.4037   111440    1.80%
   1199   841    40402.4291   188    41138.0000    40397.4037   112049    1.80%
   1203   844    40427.3252   186    41138.0000    40397.4037   113329    1.80%
Elapsed time = 122.12 sec. (72924.10 ticks, tree = 31.39 MB, solutions = 15)
   1208   847    40431.6532   181    41138.0000    40397.4037   114034    1.80%
   1213   849    40435.1943   178    41138.0000    40397.4037   115193    1.80%
   1222   852    40532.4700   177    41138.0000    40397.4037   116283    1.80%
   1230   857    40620.4829   170    41138.0000    40397.4037   117657    1.80%
   1240   864    40438.1201   186    41138.0000    40397.4037   118493    1.80%
   1261   876    40458.8738   178    41138.0000    40397.4037   121393    1.80%
   1283   887    40442.6229   183    41138.0000    40397.4037   124313    1.80%
   1295   895    40590.3431   170    41138.0000    40397.4037   126388    1.80%
   1312   905    40556.9128   150    41138.0000    40397.4037   129296    1.80%
   1322   910    40509.3852   162    41138.0000    40397.4037   131064    1.80%
Elapsed time = 151.96 sec. (88170.11 ticks, tree = 30.49 MB, solutions = 15)
   1334   915    40496.0263   167    41138.0000    40397.4037   132938    1.80%
   1358   927    40503.9103   175    41138.0000    40397.4037   136015    1.80%
   1375   938    40474.6368   163    41138.0000    40397.4037   138637    1.80%
   1383   942    40505.7837   165    41138.0000    40397.4037   140094    1.80%
   1403   958    40495.1944   166    41138.0000    40397.4037   142801    1.80%
   1429   974    40467.7643   168    41138.0000    40397.4037   145759    1.80%
   1445   984    40484.2443   167    41138.0000    40397.4037   148024    1.80%
   1474  1001    40548.6500   145    41138.0000    40397.4037   151419    1.80%
   1479  1005    40634.1695   156    41138.0000    40397.4037   152659    1.80%

Mixed integer rounding cuts applied:  168
Zero-half cuts applied:  1

Root node processing (before b&c):
  Real time             =   14.13 sec. (10492.28 ticks)
Parallel b&c, 4 threads:
  Real time             =  165.91 sec. (90327.20 ticks)
  Sync time (average)   =   13.15 sec.
  Wait time (average)   =   13.34 sec.
                          ------------
Total (root+branch&cut) =  180.04 sec. (100819.48 ticks)
optimal objective= 41138.0

artificial: false set: [11200, 10561, 1985, 10308, 8073, 4501, 6678, 86, 11994, 11995, 11996, 11997, 11998, 11358, 11999, 11359, 4641, 4394, 7467, 11952, 3632, 10295, 11767, 11448, 11768, 11449, 5050, 11198, 11199] start node= 15 start time= 7 capacity type= 2
(19,0)->(19,1)->(12,6)->(15,7)->(15,8)->(15,9)->(9,10)->(3,14)->(3,15)->(3,16)->(3,17)->(18,23)->(8,24)->(8,25)->(8,26)->(14,27)->(6,30)->(6,31)->(6,32)->(8,33)->(18,36)->(8,37)->(0,38)->(19,42)->(19,43)->(19,44)->(19,45)->(19,46)->(19,47)->(19,0):1

artificial: false set: [11072, 11073, 5321, 11660, 11661, 11662, 274, 8022, 11555, 11556, 11557, 11558, 11559, 11560, 11050, 11051, 11052, 11053, 11054, 11055, 11760, 11056, 11761, 11057, 11762, 11058, 11763, 11059, 11764, 11060, 11765, 11061, 11062, 11063, 11064, 4473, 11065, 11066, 11067, 11068, 11069, 11070, 6719, 11071] start node= 0 start time= 10 capacity type= 1
(15,0)->(15,1)->(15,2)->(15,3)->(15,4)->(15,5)->(15,6)->(8,9)->(0,10)->(0,11)->(0,12)->(0,13)->(0,14)->(0,15)->(0,16)->(0,17)->(0,18)->(0,19)->(0,20)->(0,21)->(0,22)->(0,23)->(0,24)->(0,25)->(0,26)->(0,27)->(0,28)->(0,29)->(0,30)->(0,31)->(0,32)->(0,33)->(0,34)->(10,35)->(10,36)->(10,37)->(10,38)->(10,39)->(10,40)->(10,41)->(12,44)->(12,45)->(12,46)->(12,47)->(15,0):1

artificial: false set: [11392, 5321, 11660, 11661, 11662, 11663, 11730, 11731, 11732, 11616, 5025, 4001, 11617, 11618, 11619, 11620, 11621, 6630, 11304, 8680, 11305, 11306, 11307, 11308, 11309, 2862, 11504, 11698, 11699, 11700, 7797, 7285, 9783, 8506, 11387, 11388, 11389, 11390, 11391] start node= 13 start time= 34 capacity type= 2
(12,0)->(12,1)->(12,2)->(12,3)->(12,4)->(12,5)->(12,6)->(16,10)->(7,11)->(7,12)->(7,13)->(7,14)->(7,15)->(7,16)->(7,17)->(14,18)->(14,19)->(14,20)->(14,21)->(5,24)->(5,25)->(5,26)->(5,27)->(5,28)->(5,29)->(5,30)->(9,32)->(9,33)->(13,34)->(13,35)->(13,36)->(13,37)->(18,39)->(16,40)->(10,41)->(12,44)->(12,45)->(12,46)->(12,47)->(12,0):1

artificial: false set: [4038, 6278, 1227, 1612, 6797, 2065, 2773, 11289, 11225, 11290, 11226, 11227, 11228, 11229, 11230, 11231, 11105, 11106, 11107, 11108, 11109, 11110, 11111, 11112, 11113, 11114, 6060, 11310, 11311, 11184, 11312, 11313, 11314, 11315, 11316, 2747] start node= 1 start time= 20 capacity type= 2
(3,0)->(3,1)->(7,6)->(5,9)->(5,10)->(5,11)->(11,12)->(1,17)->(1,18)->(1,19)->(1,20)->(1,21)->(1,22)->(1,23)->(1,24)->(1,25)->(1,26)->(1,27)->(2,28)->(13,29)->(5,30)->(5,31)->(5,32)->(5,33)->(5,34)->(5,35)->(5,36)->(5,37)->(11,38)->(3,41)->(3,42)->(3,43)->(3,44)->(3,45)->(3,46)->(3,47)->(3,0):1

artificial: false set: [5504, 9226, 5902, 9938, 6804, 11861, 2773, 11862, 11606, 11863, 11607, 11864, 11608, 11865, 11609, 8665, 11610, 11546, 11611, 11547, 11612, 11548, 11613, 11549, 11550, 11551, 8098, 5027, 355, 11052, 11053, 11054, 11055, 11056, 8881, 11057, 11058, 11830, 11831, 11832] start node= 0 start time= 17 capacity type= 2
(16,1)->(18,2)->(17,5)->(17,6)->(17,7)->(17,8)->(17,9)->(17,10)->(0,12)->(0,13)->(0,14)->(0,15)->(0,16)->(0,17)->(0,18)->(0,19)->(16,22)->(16,23)->(16,24)->(16,25)->(10,26)->(10,27)->(10,28)->(10,29)->(10,30)->(10,31)->(10,32)->(15,34)->(9,35)->(13,36)->(5,37)->(11,38)->(11,39)->(11,40)->(11,41)->(11,42)->(11,43)->(11,44)->(11,45)->(11,46)->(16,1):1

artificial: false set: [11392, 8064, 7554, 11844, 4999, 5511, 11976, 11977, 11978, 11979, 11980, 11981, 11982, 11473, 11474, 11475, 11476, 11477, 11478, 7256, 11801, 11802, 11803, 11804, 5149, 11805, 11806, 10783, 11807, 4001, 11169, 8677, 11558, 10282, 1522, 11253, 11254, 2615, 4475, 252, 11390, 11391] start node= 2 start time= 33 capacity type= 2
(15,0)->(9,1)->(9,2)->(9,3)->(9,4)->(9,5)->(9,6)->(9,7)->(13,8)->(18,10)->(8,11)->(0,12)->(10,13)->(7,14)->(7,15)->(7,16)->(7,17)->(14,18)->(4,21)->(4,22)->(4,23)->(19,24)->(19,25)->(19,26)->(19,27)->(19,28)->(19,29)->(19,30)->(19,31)->(2,33)->(2,34)->(16,36)->(16,37)->(10,38)->(10,39)->(15,41)->(15,42)->(15,43)->(15,44)->(15,45)->(15,46)->(15,47)->(15,0):1

artificial: false set: [10307, 7813, 9286, 2375, 5191, 6797, 2766, 8914, 3162, 5020, 11041, 11042, 11043, 11044, 11045, 11497, 11498, 11499, 1837, 4464, 4404, 246, 11320, 11321, 7484, 11196, 3647, 5887] start node= 0 start time= 1 capacity type= 2
(8,0)->(0,1)->(0,2)->(0,3)->(0,4)->(0,5)->(0,6)->(10,7)->(3,12)->(3,13)->(17,22)->(4,23)->(9,25)->(9,26)->(9,27)->(9,28)->(13,29)->(5,30)->(11,31)->(16,34)->(18,35)->(8,36)->(14,37)->(5,40)->(5,41)->(5,42)->(14,44)->(6,47)->(8,0):1

artificial: false set: [11392, 11078, 8070, 11079, 4999, 11080, 11081, 11082, 8523, 11147, 11083, 11404, 2894, 2769, 6226, 11730, 11090, 1299, 4501, 3286, 2135, 11160, 284, 4061, 5663, 4001, 7459, 7208, 1513, 11565, 11566, 11312, 3636, 10612, 1210, 1596, 6781, 11391] start node= 0 start time= 42 capacity type= 2
(1,2)->(1,3)->(19,4)->(15,6)->(9,7)->(13,8)->(1,10)->(2,11)->(2,12)->(13,13)->(5,14)->(7,15)->(7,16)->(7,17)->(14,18)->(14,19)->(6,22)->(4,23)->(2,24)->(2,25)->(16,27)->(7,28)->(7,29)->(5,32)->(5,33)->(11,34)->(6,36)->(8,37)->(0,38)->(0,39)->(0,40)->(0,41)->(0,42)->(0,43)->(0,44)->(10,45)->(10,46)->(10,47)->(1,2):1

artificial: false set: [11072, 11073, 11716, 11717, 11718, 11719, 11720, 11721, 274, 3987, 11417, 7450, 11418, 11419, 11420, 3613, 11421, 11422, 11423, 11555, 11556, 11557, 11558, 11559, 11055, 11376, 11056, 11377, 11057, 11378, 11058, 11059, 11060, 11061, 11062, 11063, 5176, 11064, 11065, 11066, 11067, 11068, 11069, 4478, 11070, 11071] start node= 0 start time= 15 capacity type= 1
(7,0)->(7,1)->(7,2)->(7,3)->(14,4)->(14,5)->(14,6)->(14,7)->(14,8)->(14,9)->(14,10)->(6,13)->(8,14)->(0,15)->(0,16)->(0,17)->(0,18)->(0,19)->(0,20)->(0,21)->(0,22)->(0,23)->(0,24)->(0,25)->(0,26)->(0,27)->(0,28)->(0,29)->(0,30)->(0,31)->(0,32)->(0,33)->(0,34)->(10,35)->(10,36)->(10,37)->(10,38)->(10,39)->(10,40)->(7,41)->(7,42)->(7,43)->(7,44)->(7,45)->(7,46)->(7,47)->(7,0):1

artificial: false set: [6784, 2754, 10309, 11462, 7558, 4999, 4551, 2521, 11098, 11099, 11547, 11548, 11100, 11549, 11101, 11550, 7583, 5407, 11297, 11234, 11235, 6115, 11236, 7208, 11754, 11755, 11756, 11757, 11758, 2357, 4025, 1214, 1599] start node= 1 start time= 12 capacity type= 2
(4,2)->(4,3)->(4,4)->(4,5)->(9,7)->(13,8)->(1,10)->(1,11)->(1,12)->(1,13)->(1,14)->(2,15)->(13,16)->(5,17)->(5,18)->(11,19)->(14,22)->(4,25)->(10,27)->(10,28)->(10,29)->(10,30)->(10,31)->(18,37)->(8,38)->(8,39)->(7,41)->(14,42)->(14,43)->(14,44)->(14,45)->(14,46)->(14,47)->(4,2):1

artificial: false set: [1024, 3018, 6797, 11407, 11408, 7570, 8084, 8022, 1622, 6807, 11803, 5019, 11804, 11805, 11806, 2910, 11807, 6691, 2149, 11493, 11494, 11495, 11496, 11497, 11498, 11050, 11051, 11692, 11760, 11761, 4017, 11762, 11763, 11764, 11765, 11320, 4473, 11321, 252, 5629] start node= 0 start time= 10 capacity type= 2
(15,0)->(15,1)->(15,2)->(15,3)->(15,4)->(15,5)->(15,6)->(8,9)->(0,10)->(0,11)->(0,12)->(10,13)->(1,16)->(12,19)->(15,20)->(9,21)->(9,22)->(9,23)->(9,24)->(9,25)->(9,26)->(9,27)->(13,28)->(13,29)->(5,30)->(7,31)->(7,32)->(7,33)->(14,34)->(4,37)->(2,38)->(13,39)->(5,40)->(5,41)->(5,42)->(15,43)->(15,44)->(15,45)->(15,46)->(15,47)->(15,0):1

artificial: false set: [11073, 11911, 6087, 8910, 4496, 274, 11291, 11292, 7583, 2594, 10659, 812, 5870, 11758, 11825, 11826, 11827, 5555, 11828, 11829, 11830, 11831, 11832, 9848, 11833, 11834, 11835, 11836, 11837, 2749, 10303] start node= 0 start time= 33 capacity type= 2
(4,2)->(19,3)->(18,7)->(18,8)->(5,11)->(5,12)->(5,13)->(11,14)->(16,17)->(16,18)->(16,19)->(16,20)->(16,21)->(16,22)->(16,23)->(16,24)->(16,25)->(16,26)->(16,27)->(16,28)->(16,29)->(16,30)->(18,31)->(8,32)->(0,33)->(0,34)->(10,35)->(11,39)->(1,44)->(14,46)->(14,47)->(4,2):1

artificial: false set: [11200, 11201, 11202, 11203, 11204, 11205, 11206, 11207, 11208, 11209, 11210, 11211, 11212, 11213, 11214, 11215, 11216, 11861, 11862, 9367, 4507, 284, 5663, 674, 11368, 11369, 11565, 11566, 1905, 3642, 11194, 11195, 11196, 11197, 11198, 11199] start node= 1 start time= 2 capacity type= 2
(1,2)->(17,5)->(17,6)->(17,7)->(3,10)->(3,11)->(3,12)->(3,13)->(3,14)->(3,15)->(3,16)->(3,17)->(3,18)->(3,19)->(3,20)->(3,21)->(3,22)->(3,23)->(3,24)->(3,25)->(3,26)->(3,27)->(3,28)->(3,29)->(3,30)->(3,31)->(3,32)->(3,33)->(6,40)->(6,41)->(6,42)->(8,43)->(0,44)->(10,45)->(10,46)->(10,47)->(1,2):1

artificial: false set: [2306, 4999, 1229, 718, 1614, 1235, 8534, 11415, 8473, 11098, 2971, 11870, 11871, 7208, 4072, 683, 9328, 9265, 11121, 11122, 11827, 9268, 1524, 11828, 2357, 11829, 11830, 11831, 11832, 7231] start node= 1 start time= 11 capacity type= 2
(17,1)->(4,2)->(17,4)->(4,5)->(9,7)->(13,8)->(1,10)->(1,11)->(17,14)->(17,15)->(17,16)->(16,19)->(16,20)->(16,21)->(16,22)->(16,23)->(16,24)->(16,25)->(1,29)->(2,30)->(13,31)->(1,33)->(1,34)->(1,35)->(2,36)->(16,38)->(7,39)->(7,40)->(5,43)->(1,46)->(17,1):1

artificial: false set: [11456, 11776, 11457, 11777, 11458, 11778, 11459, 11779, 11460, 11780, 11078, 11079, 11527, 11080, 11528, 11081, 11082, 11083, 11084, 11085, 11086, 11087, 4501, 11040, 11041, 11042, 11043, 11044, 8037, 11045, 5481, 246, 11448, 11449, 11450, 11451, 11771, 11452, 11772, 11453, 11773, 11454, 11774, 11455, 11775] start node= 0 start time= 0 capacity type= 0
(0,0)->(0,1)->(0,2)->(0,3)->(0,4)->(0,5)->(0,6)->(10,7)->(10,8)->(10,9)->(15,11)->(15,12)->(15,13)->(15,14)->(15,15)->(15,16)->(15,17)->(15,18)->(15,19)->(15,20)->(15,21)->(8,24)->(8,25)->(8,26)->(8,27)->(8,28)->(8,29)->(8,30)->(8,31)->(8,32)->(8,33)->(8,34)->(8,35)->(8,36)->(8,37)->(0,38)->(0,39)->(0,40)->(0,41)->(0,42)->(0,43)->(0,44)->(0,45)->(0,46)->(0,47)->(0,0):1

artificial: false set: [11398, 11399, 11911, 11400, 11912, 11913, 11914, 8910, 4496, 11664, 81, 11989, 7253, 11030, 9947, 9374, 1631, 2081, 7201, 3306, 2155, 11180, 11181, 11182, 1203, 1588, 3769, 10303] start node= 13 start time= 0 capacity type= 2
(13,0)->(13,1)->(1,3)->(2,4)->(13,5)->(18,7)->(18,8)->(18,9)->(18,10)->(18,11)->(17,14)->(3,17)->(7,22)->(7,23)->(7,24)->(7,25)->(16,30)->(18,31)->(8,32)->(0,33)->(19,37)->(19,38)->(6,42)->(4,43)->(2,44)->(2,45)->(2,46)->(2,47)->(13,0):1

artificial: false set: [768, 11716, 11717, 11718, 9286, 11719, 11720, 2633, 2124, 7246, 3987, 2327, 9304, 1629, 11104, 11105, 11106, 11881, 10794, 11882, 11883, 11180, 11884, 11885, 11886, 7214, 11887, 11888, 11889, 7730, 11890, 11891, 691, 11892, 11893, 11894, 11895, 7545, 1597] start node= 13 start time= 14 capacity type= 2
(1,0)->(14,2)->(7,3)->(14,4)->(14,5)->(14,6)->(14,7)->(14,8)->(14,9)->(4,12)->(2,13)->(13,14)->(1,16)->(1,17)->(1,18)->(1,19)->(17,22)->(4,23)->(17,25)->(17,26)->(17,27)->(17,28)->(17,29)->(17,30)->(17,31)->(17,32)->(17,33)->(17,34)->(17,35)->(17,36)->(17,37)->(17,38)->(17,39)->(17,40)->(4,41)->(19,42)->(2,44)->(2,45)->(13,46)->(1,0):1

artificial: false set: [11968, 11904, 11969, 11905, 11970, 11971, 11972, 11973, 11974, 11975, 11976, 11977, 11978, 11979, 11980, 11981, 11982, 11983, 11984, 10641, 9938, 8099, 5028, 11238, 11239, 11943, 11240, 11944, 11241, 11945, 11242, 11946, 11243, 11947, 2604, 11948, 11949, 11950, 11951, 9269, 7285, 11965, 11966, 11967] start node= 13 start time= 37 capacity type= 1
(18,0)->(18,1)->(18,2)->(17,5)->(4,6)->(4,7)->(4,8)->(4,9)->(4,10)->(4,11)->(4,12)->(19,13)->(19,14)->(19,15)->(19,16)->(19,17)->(19,18)->(19,19)->(19,20)->(19,21)->(19,22)->(19,23)->(19,24)->(19,25)->(19,26)->(19,27)->(19,28)->(19,29)->(19,30)->(19,31)->(19,32)->(19,33)->(15,35)->(9,36)->(13,37)->(18,39)->(18,40)->(18,41)->(18,42)->(18,43)->(18,44)->(18,45)->(18,46)->(18,47)->(18,0):1

artificial: false set: [11776, 11777, 6465, 11778, 11779, 11780, 10758, 4488, 8650, 269, 5716, 2773, 11606, 11607, 1496, 11608, 11609, 11610, 11611, 11612, 11613, 11614, 11615, 8037, 5483, 11568, 11569, 11570, 11571, 11065, 11066, 11067, 11068, 11773, 11774, 5310, 11775] start node= 0 start time= 28 capacity type= 2
(11,0)->(11,1)->(11,2)->(11,3)->(11,4)->(19,6)->(2,8)->(16,10)->(10,11)->(15,13)->(15,14)->(15,15)->(15,16)->(15,17)->(15,18)->(15,19)->(15,20)->(15,21)->(8,24)->(0,25)->(0,26)->(0,27)->(0,28)->(0,29)->(10,30)->(12,33)->(5,37)->(11,38)->(11,39)->(11,40)->(11,41)->(11,42)->(11,43)->(11,44)->(11,45)->(11,46)->(11,47)->(11,0):1

artificial: false set: [7555, 326, 11470, 11471, 3794, 4501, 11801, 11802, 11740, 11741, 11742, 11743, 4512, 11744, 4386, 10287, 11440, 11441, 7473, 3636, 11254, 11255, 11256, 11192, 2425, 1977, 8059] start node= 14 start time= 28 capacity type= 2
(8,0)->(7,2)->(3,8)->(3,9)->(18,15)->(8,16)->(8,17)->(8,18)->(14,19)->(4,22)->(4,23)->(4,24)->(4,25)->(14,28)->(14,29)->(14,30)->(14,31)->(14,32)->(14,33)->(6,36)->(8,37)->(0,38)->(15,41)->(15,42)->(15,43)->(8,46)->(8,47)->(8,0):1

artificial: false set: [2754, 6211, 1347, 11652, 11653, 11654, 11655, 11466, 1612, 11726, 1041, 11090, 11349, 3286, 2135, 6424, 11160, 11161, 11162, 4507, 11163, 6107, 284, 5663, 11693, 11565, 11694, 11566, 7791, 11574, 11575, 11576, 11577, 11578, 7231] start node= 0 start time= 44 capacity type= 2
(1,2)->(1,3)->(11,6)->(11,7)->(11,8)->(11,9)->(11,10)->(11,11)->(14,14)->(14,15)->(5,18)->(11,19)->(6,21)->(6,22)->(4,23)->(2,24)->(2,25)->(2,26)->(2,27)->(2,28)->(13,29)->(13,30)->(13,31)->(1,33)->(12,36)->(12,37)->(12,38)->(12,39)->(12,40)->(8,42)->(8,43)->(0,44)->(10,45)->(10,46)->(10,47)->(1,2):1

artificial: false set: [3009, 9861, 8646, 11527, 2952, 11528, 11273, 11274, 8075, 1227, 5004, 1612, 9744, 6800, 4626, 1492, 6804, 2773, 6230, 2395, 3617, 9698, 8098, 5027, 3304, 5481, 5037, 11693, 11694, 11695, 8881, 6781, 2750, 7294, 6207] start node= 1 start time= 27 capacity type= 2
(18,0)->(16,1)->(18,2)->(2,4)->(16,6)->(10,7)->(10,8)->(10,9)->(15,11)->(9,12)->(13,13)->(5,14)->(11,15)->(6,17)->(8,18)->(18,21)->(5,24)->(1,27)->(2,28)->(13,29)->(13,30)->(13,31)->(13,32)->(5,33)->(15,34)->(9,35)->(13,36)->(5,37)->(11,38)->(6,40)->(4,41)->(4,42)->(4,43)->(9,45)->(13,46)->(18,0):1

artificial: false set: [11776, 3009, 3274, 6797, 8081, 1875, 5019, 8098, 11490, 11491, 11492, 11493, 11494, 2535, 11495, 11496, 11561, 11497, 11562, 11498, 2603, 11563, 11564, 11692, 5229, 11310, 11311, 11312, 11186, 4787, 10620, 11774, 11775] start node= 15 start time= 17 capacity type= 2
(3,2)->(3,3)->(6,10)->(4,11)->(19,12)->(15,14)->(15,15)->(15,16)->(15,17)->(9,18)->(9,19)->(9,20)->(9,21)->(9,22)->(9,23)->(9,24)->(9,25)->(9,26)->(9,27)->(13,28)->(13,29)->(5,30)->(5,31)->(5,32)->(5,33)->(15,34)->(9,35)->(4,39)->(10,41)->(10,42)->(10,43)->(10,44)->(10,45)->(3,2):1

artificial: false set: [5504, 2306, 4999, 11274, 10763, 11275, 11276, 11277, 11278, 11279, 8665, 1306, 11546, 11547, 11548, 11549, 11678, 11550, 11679, 11551, 11680, 11232, 11681, 11233, 8098, 11682, 11683, 11684, 11685, 7270, 7208, 9768, 11507, 9268, 11508, 2357, 11509, 4790, 1597] start node= 13 start time= 18 capacity type= 2
(4,0)->(4,1)->(4,2)->(17,4)->(4,5)->(9,7)->(13,8)->(1,10)->(19,11)->(2,13)->(13,14)->(13,15)->(13,16)->(13,17)->(13,18)->(13,19)->(13,20)->(13,21)->(13,22)->(18,24)->(16,25)->(10,26)->(10,27)->(10,28)->(10,29)->(10,30)->(10,31)->(10,32)->(15,34)->(9,35)->(9,36)->(9,37)->(9,38)->(4,42)->(4,43)->(4,44)->(4,45)->(4,46)->(4,47)->(4,0):1

artificial: false set: [11072, 11073, 6403, 5317, 7750, 11399, 11400, 11466, 11467, 11468, 11469, 4494, 9937, 274, 9364, 6424, 11555, 11556, 4389, 4009, 7466, 3629, 4654, 10095, 11634, 11191, 11192, 1977, 11071] start node= 0 start time= 31 capacity type= 2
(18,1)->(17,4)->(3,7)->(3,8)->(3,9)->(18,15)->(12,18)->(12,19)->(8,21)->(14,22)->(7,23)->(7,24)->(7,25)->(14,26)->(6,29)->(8,30)->(0,31)->(0,32)->(0,33)->(0,34)->(10,35)->(10,36)->(10,37)->(12,40)->(8,42)->(8,43)->(8,44)->(8,45)->(8,46)->(18,1):1

artificial: false set: [11456, 11457, 11458, 11459, 11716, 11460, 11717, 11461, 11718, 11462, 454, 11719, 4551, 11720, 2316, 3987, 9236, 11417, 11418, 11419, 11420, 11421, 11870, 11422, 11871, 11423, 11872, 11873, 11874, 11875, 11376, 11377, 11378, 11448, 7545, 11449, 11450, 11451, 11452, 11453, 11454, 11455] start node= 0 start time= 22 capacity type= 2
(7,0)->(7,1)->(7,2)->(7,3)->(14,4)->(14,5)->(14,6)->(14,7)->(14,8)->(14,9)->(4,12)->(17,14)->(17,15)->(17,16)->(17,17)->(17,18)->(17,19)->(17,20)->(0,22)->(8,24)->(8,25)->(8,26)->(8,27)->(8,28)->(8,29)->(8,30)->(8,31)->(8,32)->(8,33)->(8,34)->(8,35)->(8,36)->(8,37)->(8,38)->(8,39)->(7,41)->(7,42)->(7,43)->(7,44)->(7,45)->(7,46)->(7,47)->(7,0):1

artificial: false set: [11648, 6465, 3271, 3018, 2124, 8016, 4371, 7444, 11803, 11804, 1501, 11805, 11806, 11807, 11240, 11241, 11242, 11243, 11823, 11824, 11825, 11826, 11827, 11828, 11317, 11829, 11318, 11830, 11319, 8759, 11320, 11321, 2810] start node= 15 start time= 43 capacity type= 2
(15,0)->(8,3)->(14,4)->(6,7)->(4,8)->(4,9)->(4,10)->(4,11)->(4,12)->(2,13)->(16,15)->(16,16)->(16,17)->(16,18)->(16,19)->(16,20)->(16,21)->(16,22)->(16,23)->(5,26)->(12,32)->(12,33)->(5,37)->(5,38)->(5,39)->(5,40)->(5,41)->(5,42)->(15,43)->(15,44)->(15,45)->(15,46)->(15,47)->(15,0):1

artificial: false set: [11456, 11457, 11458, 11459, 11460, 11078, 11079, 11911, 11080, 11912, 11081, 11082, 11083, 11084, 11085, 4626, 4501, 9813, 7253, 9698, 11688, 11689, 10281, 11690, 11434, 11691, 11435, 11692, 11436, 11437, 11438, 11439, 11440, 11441, 8881, 1588, 6845, 382] start node= 0 start time= 45 capacity type= 2
(16,1)->(18,2)->(2,4)->(13,5)->(18,7)->(18,8)->(18,9)->(8,10)->(8,11)->(8,12)->(8,13)->(8,14)->(8,15)->(8,16)->(8,17)->(8,18)->(18,21)->(13,24)->(13,25)->(13,26)->(13,27)->(13,28)->(13,29)->(8,32)->(8,33)->(8,34)->(8,35)->(8,36)->(8,37)->(0,38)->(0,39)->(0,40)->(0,41)->(0,42)->(0,43)->(0,44)->(0,45)->(0,46)->(16,1):1

artificial: false set: [11968, 11969, 10305, 11970, 11458, 10627, 11459, 11460, 11781, 8073, 5002, 6863, 8912, 4371, 7828, 4501, 278, 8086, 5655, 5015, 6680, 11995, 5725, 1630, 11426, 10796, 7224, 1338, 698, 6779, 2748, 9341, 11967] start node= 15 start time= 22 capacity type= 2
(8,2)->(8,3)->(14,4)->(12,8)->(15,9)->(9,10)->(13,11)->(5,12)->(11,13)->(19,15)->(19,16)->(19,17)->(19,18)->(19,19)->(15,21)->(15,22)->(9,23)->(13,24)->(1,26)->(17,29)->(16,32)->(18,33)->(8,34)->(8,35)->(8,36)->(8,37)->(0,38)->(10,39)->(1,42)->(19,43)->(19,44)->(2,46)->(13,47)->(8,2):1

artificial: false set: [11456, 11457, 11458, 11459, 11460, 11078, 11079, 11080, 4616, 11081, 11082, 11083, 11915, 11084, 11916, 11085, 11917, 11086, 8910, 11918, 11087, 11919, 11920, 11921, 11922, 11923, 11924, 4501, 11925, 11926, 11927, 11040, 11041, 5283, 9768, 242, 6390, 11833, 11834, 11835, 11836, 11837, 10303] start node= 0 start time= 0 capacity type= 2
(0,0)->(0,1)->(0,2)->(10,3)->(12,6)->(8,8)->(18,11)->(18,12)->(18,13)->(18,14)->(18,15)->(18,16)->(18,17)->(18,18)->(18,19)->(18,20)->(18,21)->(18,22)->(18,23)->(18,24)->(16,25)->(16,26)->(16,27)->(16,28)->(16,29)->(16,30)->(18,31)->(8,32)->(8,33)->(8,34)->(8,35)->(8,36)->(8,37)->(0,38)->(0,39)->(0,40)->(0,41)->(0,42)->(0,43)->(0,44)->(0,45)->(0,46)->(0,47)->(0,0):1

artificial: false set: [2944, 11460, 11078, 4999, 10763, 8910, 11472, 11473, 11474, 6418, 11475, 11476, 11477, 4501, 9238, 11478, 279, 1306, 11295, 7208, 4073, 363, 691, 5176, 11064, 11065, 11066, 11324, 1597, 2877, 6782, 11519, 10111] start node= 0 start time= 24 capacity type= 2
(9,0)->(9,1)->(9,2)->(9,3)->(9,4)->(9,5)->(9,6)->(9,7)->(13,8)->(1,10)->(19,11)->(2,13)->(13,14)->(5,15)->(5,16)->(1,19)->(17,22)->(0,24)->(0,25)->(0,26)->(0,27)->(16,30)->(18,31)->(12,34)->(8,36)->(8,37)->(0,38)->(0,39)->(10,40)->(7,41)->(5,44)->(5,45)->(9,47)->(9,0):1

artificial: false set: [8064, 3013, 4999, 11914, 11915, 11916, 11917, 6797, 11473, 11474, 11475, 11731, 11476, 11732, 11477, 11478, 11798, 11799, 7256, 11800, 11801, 11802, 8090, 11803, 5019, 11804, 11805, 11806, 11807, 4386, 7845, 6697, 11692, 10286, 11310, 11439, 11311, 11440, 11312, 11441, 11313, 11314, 11315, 11316] start node= 14 start time= 19 capacity type= 2
(15,0)->(9,1)->(9,2)->(9,3)->(9,4)->(9,5)->(9,6)->(9,7)->(13,8)->(18,10)->(18,11)->(18,12)->(18,13)->(18,14)->(8,15)->(8,16)->(8,17)->(8,18)->(14,19)->(14,20)->(14,21)->(12,25)->(15,26)->(9,27)->(13,28)->(13,29)->(5,30)->(5,31)->(5,32)->(5,33)->(5,34)->(5,35)->(5,36)->(5,37)->(15,38)->(15,39)->(15,40)->(15,41)->(15,42)->(15,43)->(15,44)->(15,45)->(15,46)->(15,47)->(15,0):1

artificial: false set: [8064, 11650, 11651, 6403, 11652, 11653, 11654, 7558, 4999, 11655, 11656, 11657, 11658, 11659, 11660, 11661, 11662, 11473, 11474, 11475, 11476, 11477, 11478, 2521, 11547, 11548, 11549, 11550, 4389, 7208, 11629, 11630, 11631, 11632, 11633, 11634, 1018, 6719, 5311] start node= 13 start time= 8 capacity type= 2
(15,0)->(9,1)->(9,2)->(9,3)->(9,4)->(9,5)->(9,6)->(9,7)->(13,8)->(1,10)->(12,13)->(12,14)->(12,15)->(12,16)->(12,17)->(12,18)->(12,19)->(8,21)->(14,22)->(4,25)->(10,27)->(10,28)->(10,29)->(10,30)->(10,31)->(12,34)->(12,35)->(12,36)->(12,37)->(12,38)->(12,39)->(12,40)->(12,41)->(12,42)->(12,43)->(12,44)->(12,45)->(12,46)->(12,47)->(15,0):1

artificial: false set: [9286, 4999, 11147, 1612, 6797, 2766, 11473, 11985, 11474, 11475, 11476, 1620, 11477, 11478, 2135, 11160, 11161, 11162, 11163, 9692, 2399, 10786, 11874, 11875, 11876, 11877, 11943, 7208, 11944, 11945, 11946, 11947, 7213, 5743, 687, 7285, 1210, 1596] start node= 13 start time= 13 capacity type= 2
(9,1)->(9,2)->(9,3)->(9,4)->(9,5)->(9,6)->(9,7)->(13,8)->(1,10)->(2,11)->(2,12)->(13,13)->(1,15)->(17,18)->(17,19)->(17,20)->(17,21)->(17,22)->(4,23)->(2,24)->(2,25)->(2,26)->(2,27)->(2,28)->(13,29)->(5,30)->(11,31)->(19,33)->(19,34)->(2,36)->(13,37)->(18,39)->(18,40)->(18,41)->(18,42)->(18,43)->(18,44)->(4,47)->(9,1):1

artificial: false set: [11078, 11079, 3271, 11080, 2312, 11081, 11082, 9226, 11083, 11084, 11085, 11407, 4371, 7444, 4501, 2910, 478, 11424, 11425, 11426, 355, 11306, 11307, 11308, 11052, 11309, 11053, 11054, 11055, 4016, 11056, 7473, 11057, 11058, 3636, 11830, 8759] start node= 0 start time= 45 capacity type= 2
(8,0)->(8,1)->(8,2)->(8,3)->(14,4)->(6,7)->(4,8)->(17,10)->(0,12)->(0,13)->(0,14)->(0,15)->(0,16)->(0,17)->(0,18)->(0,19)->(16,22)->(16,23)->(5,26)->(5,27)->(5,28)->(5,29)->(5,30)->(7,31)->(7,32)->(14,33)->(6,36)->(8,37)->(0,38)->(0,39)->(0,40)->(0,41)->(0,42)->(0,43)->(0,44)->(0,45)->(0,46)->(8,0):1

===========================new round 1=========================
-------------Start to solve SolveVehicleCoverCGHeuristic()---------------
Time of first LP solve= 154812
There are 43324 columns added to the model.
Tried aggregator 1 time.
MIP Presolve eliminated 10820 rows and 21012 columns.
MIP Presolve modified 178098 coefficients.
Reduced MIP has 280 rows, 22372 columns, and 266878 nonzeros.
Reduced MIP has 303 binaries, 22069 generals, 0 SOSs, and 0 indicators.
Presolve time = 0.32 sec. (346.75 ticks)
Found incumbent of value 124363.000000 after 0.37 sec. (395.80 ticks)
Tried aggregator 1 time.
Reduced MIP has 280 rows, 22372 columns, and 266878 nonzeros.
Reduced MIP has 303 binaries, 22069 generals, 0 SOSs, and 0 indicators.
Presolve time = 0.07 sec. (52.63 ticks)
Probing time = 0.05 sec. (1.83 ticks)
MIP emphasis: balance optimality and feasibility.
MIP search method: dynamic search.
Parallel mode: deterministic, using up to 4 threads.
Root relaxation solution time = 2.44 sec. (1247.44 ticks)

        Nodes                                         Cuts/
   Node  Left     Objective  IInf  Best Integer    Best Bound    ItCnt     Gap

*     0+    0                       124363.0000        0.0000           100.00%
*     0+    0                        21733.0000        0.0000           100.00%
*     0+    0                         8318.0000        0.0000           100.00%
*     0+    0                         7294.0000        0.0000           100.00%
*     0+    0                         7277.0000        0.0000           100.00%
      0     0     4579.4391   179     7277.0000     4579.4391       62   37.07%
*     0+    0                         6561.0000     4579.4391            30.20%
      0     0     4826.7728   172     6561.0000      Cuts: 26      590   26.43%
*     0+    0                         5782.0000     4826.7728            16.52%
      0     0     4836.3666   172     5782.0000       Cuts: 9      724   16.35%
      0     0     4854.5103   173     5782.0000    MIRcuts: 9      831   16.04%
      0     0     4855.1083   172     5782.0000    MIRcuts: 2      867   16.03%
      0     2     4855.1083   172     5782.0000     4855.1083      867   16.03%
Elapsed time = 8.89 sec. (7334.86 ticks, tree = 0.00 MB, solutions = 7)
      2     4     4899.7630   167     5782.0000     4855.1083     1195   16.03%
      6     8     4896.6722   174     5782.0000     4855.5428     1721   16.02%
     13    15     4938.0699   164     5782.0000     4855.6139     2600   16.02%
     22    24     4958.9795   153     5782.0000     4862.1940     3694   15.91%
     32    34     4903.8465   164     5782.0000     4862.1940     4725   15.91%
     33    35     4972.7697   153     5782.0000     4862.1940     4781   15.91%
     50    52     4948.5416   145     5782.0000     4862.1940     6722   15.91%
     66    68     5022.9493   124     5782.0000     4862.1940     8345   15.91%
     83    85     4987.9744   134     5782.0000     4862.1940    10249   15.91%
*   116+  116                         5502.0000     4862.1940            11.63%
    135   137     5193.2251    90     5502.0000     4862.1940    15124   11.63%
Elapsed time = 15.37 sec. (11062.54 ticks, tree = 0.75 MB, solutions = 8)
    206   208     5181.3313    82     5502.0000     4862.1940    20327   11.63%
    309   297     4884.6938   164     5502.0000     4865.3010    27016   11.57%
    339   327     4906.7972   154     5502.0000     4869.1140    29604   11.50%
*   611+  397                         5463.0000     4869.1140            10.87%
    616   402     4927.8370   155     5463.0000     4869.1140    38680   10.87%
    684   452     4983.8113   143     5463.0000     4869.1140    44009   10.87%
    744   512     4917.3254   178     5463.0000     4869.1140    48404   10.87%
    811   575     4929.0343   177     5463.0000     4869.1140    53340   10.87%
    869   633     5213.4068    80     5463.0000     4869.1140    57674   10.87%
    888   652     4949.6056   175     5463.0000     4869.1140    58692   10.87%
    973   737     4957.4077   176     5463.0000     4869.1140    64078   10.87%
Elapsed time = 38.24 sec. (25251.92 ticks, tree = 13.85 MB, solutions = 9)
*  1028+  772                         5457.0000     4869.1140            10.77%
   1121   849     4937.8540   166     5457.0000     4869.8342    71498   10.76%
   1171   899     4986.8969   171     5457.0000     4869.8342    73912   10.76%
   1289  1017     4945.1227   179     5457.0000     4869.8342    79107   10.76%
   1444  1172     4962.9476   181     5457.0000     4869.8342    86519   10.76%
   1539  1267     4975.9650   180     5457.0000     4869.8342    90402   10.76%
   1631  1359     4992.2796   180     5457.0000     4869.8342    94162   10.76%
   1719  1447     5072.2403   164     5457.0000     4869.8342    97343   10.76%
   1803  1531     4893.8271   174     5457.0000     4873.1630   101820   10.70%
   1875  1603     4922.9107   169     5457.0000     4873.1630   105643   10.70%
   1965  1693     4935.4004   173     5457.0000     4873.1630   110366   10.70%
Elapsed time = 63.02 sec. (38989.67 ticks, tree = 36.61 MB, solutions = 10)
   2047  1775     4973.6778   179     5457.0000     4873.1630   114303   10.70%
   2149  1877     4972.6530   167     5457.0000     4873.1630   118646   10.70%
   2201  1929     4984.5342   168     5457.0000     4873.1630   121166   10.70%
   2322  2050     4867.3823   175     5457.0000     4873.1630   127594   10.70%
   2324  2052     4869.7942   170     5457.0000     4873.1630   127746   10.70%
   2325  2053     4924.4391   172     5457.0000     4873.1630   128121   10.70%
   2328  2054     4892.9337   173     5457.0000     4873.1630   128530   10.70%
   2332  2057     4919.0990   166     5457.0000     4873.1630   129289   10.70%
   2340  2062     4929.4855   166     5457.0000     4873.1630   130221   10.70%
   2348  2066     4935.3408   175     5457.0000     4873.1630   131282   10.70%
Elapsed time = 93.89 sec. (59993.06 ticks, tree = 51.99 MB, solutions = 10)
   2355  2069     4952.2927   161     5457.0000     4873.1630   132433   10.70%
   2362  2073     4896.8796   172     5457.0000     4873.1630   133098   10.70%
   2373  2080     4931.8888   166     5457.0000     4873.1630   134491   10.70%
   2391  2091     4941.6265   159     5457.0000     4873.1630   136597   10.70%
   2406  2099     4947.9594   158     5457.0000     4873.1630   138486   10.70%
   2427  2112     4916.8108   163     5457.0000     4873.1630   141081   10.70%
   2447  2126     4963.5243   154     5457.0000     4873.1630   143754   10.70%
   2476  2143     4922.5373   178     5457.0000     4873.1630   146980   10.70%
   2496  2158     4945.8925   165     5457.0000     4873.1630   149456   10.70%
   2520  2172     4981.0620   150     5457.0000     4873.1630   152543   10.70%
Elapsed time = 114.43 sec. (70820.16 ticks, tree = 52.81 MB, solutions = 10)
   2552  2188     4978.7842   146     5457.0000     4873.1630   156061   10.70%
   2581  2204     5010.5698   161     5457.0000     4873.1630   159260   10.70%
   2611  2221     5035.2599   137     5457.0000     4873.1630   161938   10.70%
   2639  2237     5028.9386   148     5457.0000     4873.1630   164972   10.70%
   2678  2258     5057.0504   160     5457.0000     4873.1630   168604   10.70%
   2715  2276     5075.2141   146     5457.0000     4873.1630   172555   10.70%
   2751  2299     5123.2565   145     5457.0000     4873.1630   176719   10.70%
   2788  2319     5088.9079   139     5457.0000     4873.1630   180134   10.70%
   2838  2346     5098.3927   140     5457.0000     4873.1630   184971   10.70%
   2869  2363     5027.6090   146     5457.0000     4873.1630   188070   10.70%
Elapsed time = 136.10 sec. (81608.55 ticks, tree = 55.69 MB, solutions = 10)
   2910  2381     5086.8707   135     5457.0000     4873.1630   192095   10.70%
   2979  2423     5067.4373   142     5457.0000     4873.1630   198229   10.70%
   3007  2438     5084.5769   140     5457.0000     4873.1630   200945   10.70%
   3047  2458     5108.7268   148     5457.0000     4873.1630   204788   10.70%
   3116  2497     5128.5818   137     5457.0000     4873.1630   210204   10.70%
   3157  2521     5046.1032   144     5457.0000     4873.1630   213404   10.70%
   3207  2552     5139.8726   129     5457.0000     4873.1630   217451   10.70%
   3235  2568     5092.9130   137     5457.0000     4873.1630   220100   10.70%
   3306  2609     5163.1002   140     5457.0000     4873.1630   225560   10.70%
   3391  2656     5059.2785   147     5457.0000     4873.1630   232828   10.70%
Elapsed time = 163.15 sec. (95951.15 ticks, tree = 62.20 MB, solutions = 10)
   3430  2680     5143.9783   143     5457.0000     4873.1630   235543   10.70%
   3491  2716     5189.6530   139     5457.0000     4873.1630   240638   10.70%
   3580  2765     5093.6630   147     5457.0000     4873.1630   247404   10.70%
   3632  2795     5111.4224   145     5457.0000     4873.1630   250819   10.70%
   3743  2866     5102.0987   148     5457.0000     4873.1630   258182   10.70%
   3777  2888     5168.5290   127     5457.0000     4873.1630   260485   10.70%

Mixed integer rounding cuts applied:  47
Zero-half cuts applied:  3

Root node processing (before b&c):
  Real time             =    8.86 sec. (7328.53 ticks)
Parallel b&c, 4 threads:
  Real time             =  171.16 sec. (97856.53 ticks)
  Sync time (average)   =   11.30 sec.
  Wait time (average)   =   11.54 sec.
                          ------------
Total (root+branch&cut) =  180.02 sec. (105185.06 ticks)
optimal objective= 5457.0+35606.0=41063.0

Step 4-AdjustFlow
After adjust, flowCost=35376.0
A new better solution has been found. obj=40833.0
Tried aggregator 2 times.
MIP Presolve eliminated 77955 rows and 53636 columns.
Aggregator did 75645 substitutions.
Reduced MIP has 49500 rows, 105253 columns, and 276733 nonzeros.
Reduced MIP has 0 binaries, 67 generals, 0 SOSs, and 0 indicators.
Presolve time = 0.59 sec. (277.36 ticks)
Tried aggregator 1 time.
Reduced MIP has 49500 rows, 105253 columns, and 276733 nonzeros.
Reduced MIP has 0 binaries, 67 generals, 0 SOSs, and 0 indicators.
Presolve time = 0.28 sec. (118.60 ticks)
MIP emphasis: balance optimality and feasibility.
MIP search method: dynamic search.
Parallel mode: deterministic, using up to 4 threads.
Root relaxation solution time = 25.00 sec. (6412.94 ticks)

        Nodes                                         Cuts/
   Node  Left     Objective  IInf  Best Integer    Best Bound    ItCnt     Gap

*     0+    0                       144627.0000   -81876.0000           156.61%
*     0+    0                        49119.0000   -81876.0000           266.69%
*     0+    0                        45568.0000   -81876.0000           279.68%
      0     0    38017.3927    41    45568.0000    38017.3927       38   16.57%
*     0+    0                        39921.0000    38017.3927             4.77%
      0     0    38210.4431    39    39921.0000     Cuts: 891     7036    4.28%
      0     0    38316.0985    41    39921.0000  MIRcuts: 876    13988    4.02%
      0     0    38322.5408    40    39921.0000  MIRcuts: 831    18284    4.00%
*     0+    0                        39907.0000    38322.5408             3.97%
*     0+    0                        39614.0000    38322.5408             3.26%
*     0+    0                        39525.0000    38322.5408             3.04%
*     0+    0                        39518.0000    38322.5408             3.03%
*     0+    0                        39410.0000    38322.5408             2.76%
*     0+    0                        39370.0000    38322.5408             2.66%
      0     0    38326.1994    38    39370.0000  MIRcuts: 716    20650    2.65%
      0     0    38326.8273    37    39370.0000  MIRcuts: 805    22254    2.65%

Mixed integer rounding cuts applied:  1345
Gomory fractional cuts applied:  3

Root node processing (before b&c):
  Real time             =  180.07 sec. (63722.11 ticks)
Parallel b&c, 4 threads:
  Real time             =    0.00 sec. (0.00 ticks)
  Sync time (average)   =    0.00 sec.
  Wait time (average)   =    0.00 sec.
                          ------------
Total (root+branch&cut) =  180.07 sec. (63722.11 ticks)
Intensification optimal objective= 39370.0
# columns in columnManager=67
A new better solution has been found. obj=39370.0
# columns in columnManager=67
===========================new round 2=========================
-------------Start to solve SolveVehicleCoverCGHeuristic()---------------
Time of first LP solve= 26808473
There are 73067 columns added to the model.
Tried aggregator 1 time.
MIP Presolve eliminated 10795 rows and 38598 columns.
MIP Presolve modified 235773 coefficients.
Reduced MIP has 305 rows, 34529 columns, and 352663 nonzeros.
Reduced MIP has 2219 binaries, 32310 generals, 0 SOSs, and 0 indicators.
Presolve time = 0.55 sec. (544.92 ticks)
Found incumbent of value 136649.000000 after 0.64 sec. (657.02 ticks)
Tried aggregator 1 time.
Reduced MIP has 305 rows, 34529 columns, and 352663 nonzeros.
Reduced MIP has 2219 binaries, 32310 generals, 0 SOSs, and 0 indicators.
Presolve time = 0.11 sec. (72.97 ticks)
Probing time = 0.12 sec. (2.90 ticks)
MIP emphasis: balance optimality and feasibility.
MIP search method: dynamic search.
Parallel mode: deterministic, using up to 4 threads.
Root relaxation solution time = 3.64 sec. (1647.71 ticks)

        Nodes                                         Cuts/
   Node  Left     Objective  IInf  Best Integer    Best Bound    ItCnt     Gap

*     0+    0                       136649.0000        0.0000           100.00%
*     0+    0                        26297.0000        0.0000           100.00%
*     0+    0                        10193.0000        0.0000           100.00%
*     0+    0                         7925.0000        0.0000           100.00%
*     0+    0                         7899.0000        0.0000           100.00%
      0     0     4588.1055   189     7899.0000     4588.1055       60   41.92%
      0     0     4771.4145   181     7899.0000      Cuts: 24      580   39.59%
*     0+    0                         6050.0000     4771.4145            21.13%
*     0+    0                         5494.0000     4771.4145            13.15%
      0     0     4785.5369   188     5494.0000    MIRcuts: 8      736   12.90%
      0     0     4791.1952   188     5494.0000    MIRcuts: 2      773   12.79%
      0     0     4791.2908   190     5494.0000    MIRcuts: 1      793   12.79%
      0     2     4791.2908   190     5494.0000     4791.2908      793   12.79%
Elapsed time = 15.78 sec. (8810.78 ticks, tree = 0.00 MB, solutions = 7)
      2     4     4871.2731   182     5494.0000     4791.2908     1264   12.79%
      5     7     4886.7918   177     5494.0000     4791.3034     1602   12.79%
     10    12     4895.9569   177     5494.0000     4791.3034     1989   12.79%
     11    13     4906.7267   170     5494.0000     4791.3034     2227   12.79%
     18    20     4817.2951   179     5494.0000     4791.3034     3465   12.79%
     26    28     4911.2833   167     5494.0000     4791.3034     4384   12.79%
     33    35     4918.6272   161     5494.0000     4791.3034     5315   12.79%
     41    43     4937.4095   157     5494.0000     4791.3034     6145   12.79%
     48    50     4865.8855   166     5494.0000     4791.3034     7266   12.79%
     79    81     4899.3741   141     5494.0000     4791.3034    10824   12.79%
Elapsed time = 24.04 sec. (13524.22 ticks, tree = 0.00 MB, solutions = 7)
    120   122     5003.9985   116     5494.0000     4791.3034    15036   12.79%
    174   176     5010.5751   102     5494.0000     4791.3034    19779   12.79%
    224   226     5294.9748    77     5494.0000     4791.3034    23759   12.79%
*   304+  304                         5432.0000     4791.3034            11.79%
    334   310     5122.8038    57     5432.0000     4796.9403    30066   11.69%
    360   326     4812.0232   186     5432.0000     4796.9403    31970   11.69%
    405   371     4919.8499   145     5432.0000     4796.9403    36704   11.69%
*   414+  378                         5309.0000     4796.9403             9.65%
*   422   386      integral     0     5299.0000     4796.9403    38113    9.47%
*   424   384      integral     0     5293.0000     4796.9403    38173    9.37%
    451   327     4875.7147   158     5293.0000     4796.9403    40784    9.37%
    483   359     4884.4871   163     5293.0000     4796.9403    44924    9.37%
    507   383     4895.8817   166     5293.0000     4796.9403    48185    9.37%
    539   415     4965.2858   138     5293.0000     4796.9403    52187    9.37%
Elapsed time = 49.64 sec. (26081.92 ticks, tree = 9.55 MB, solutions = 12)
    547   423     4943.3647   144     5293.0000     4796.9403    52919    9.37%
    599   463     5050.8463   114     5293.0000     4800.7462    57728    9.30%
*   694+  534                         5285.0000     4800.7462             9.16%
    695   537     4831.3461   180     5285.0000     4800.7462    65537    9.16%
    706   548     4866.2726   188     5285.0000     4800.7462    66519    9.16%
    775   612     4864.4499   183     5285.0000     4800.7462    71988    9.16%
    803   634     4871.1153   184     5285.0000     4800.7462    73501    9.16%
    888   699     4861.9970   180     5285.0000     4800.7462    78317    9.16%
    932   743     4880.8595   179     5285.0000     4800.7462    80830    9.16%
    983   794     4886.3812   180     5285.0000     4800.7462    83537    9.16%
   1035   846     4906.4080   178     5285.0000     4800.7462    86310    9.16%
Elapsed time = 75.47 sec. (37545.26 ticks, tree = 21.41 MB, solutions = 13)
   1094   905     4930.3548   179     5285.0000     4800.7462    89877    9.16%
   1114   925     4934.4219   175     5285.0000     4800.7462    90829    9.16%
   1196  1007     4803.9694   197     5285.0000     4803.9694    96970    9.10%
   1197  1007     4806.7912   198     5285.0000     4803.9694    97054    9.10%
   1199  1009     4830.5015   187     5285.0000     4804.1379    97392    9.10%
   1202  1010     4848.5712   180     5285.0000     4804.1379    98138    9.10%
   1207  1012     4837.9219   184     5285.0000     4807.4488    98842    9.04%
   1215  1018     4812.6945   197     5285.0000     4810.5357    99888    8.98%
   1219  1021     4828.3424   185     5285.0000     4810.5357   100918    8.98%
   1228  1026     4818.5997   199     5285.0000     4810.5357   101951    8.98%
Elapsed time = 134.70 sec. (73600.22 ticks, tree = 34.23 MB, solutions = 13)
   1232  1029     4845.4164   184     5285.0000     4810.5357   103150    8.98%
   1233  1030     4837.8084   186     5285.0000     4810.5357   103184    8.98%
   1242  1034     4914.9651   177     5285.0000     4810.5357   104220    8.98%
   1253  1039     4853.4214   186     5285.0000     4810.5357   106055    8.98%
   1260  1044     4876.4630   182     5285.0000     4810.5357   107705    8.98%
   1268  1050     4855.8825   188     5285.0000     4810.5357   109013    8.98%
   1276  1056     4927.2570   184     5285.0000     4810.5357   110420    8.98%
   1299  1066     4904.6293   188     5285.0000     4810.5357   113674    8.98%
   1308  1072     4909.9051   177     5285.0000     4810.5357   115374    8.98%
   1327  1084     4898.4300   171     5285.0000     4810.5357   117844    8.98%
Elapsed time = 158.36 sec. (85887.61 ticks, tree = 33.66 MB, solutions = 13)
   1343  1092     4894.5664   176     5285.0000     4810.5357   119702    8.98%
   1366  1106     4969.0226   174     5285.0000     4810.5357   123203    8.98%
   1386  1117     4920.4871   169     5285.0000     4810.5357   125355    8.98%
   1408  1127     4857.0958   189     5285.0000     4810.5357   128052    8.98%
   1432  1142     4877.3883   171     5285.0000     4810.5357   130565    8.98%
   1467  1160     4930.2059   175     5285.0000     4810.5357   134653    8.98%
   1483  1171     5018.9985   159     5285.0000     4810.5357   136839    8.98%
   1499  1182     4993.2223   162     5285.0000     4810.5357   139216    8.98%

Mixed integer rounding cuts applied:  46
Zero-half cuts applied:  3

Root node processing (before b&c):
  Real time             =   15.75 sec. (8802.80 ticks)
Parallel b&c, 4 threads:
  Real time             =  164.28 sec. (86527.35 ticks)
  Sync time (average)   =   11.62 sec.
  Wait time (average)   =   11.76 sec.
                          ------------
Total (root+branch&cut) =  180.03 sec. (95330.16 ticks)
optimal objective= 5285.0+36121.0=41406.0

Step 4-AdjustFlow
After adjust, flowCost=35406.0
Tried aggregator 2 times.
MIP Presolve eliminated 74375 rows and 50612 columns.
Aggregator did 71997 substitutions.
Reduced MIP has 56728 rows, 122665 columns, and 322238 nonzeros.
Reduced MIP has 0 binaries, 100 generals, 0 SOSs, and 0 indicators.
Presolve time = 0.67 sec. (293.71 ticks)
Tried aggregator 1 time.
Reduced MIP has 56728 rows, 122665 columns, and 322238 nonzeros.
Reduced MIP has 0 binaries, 100 generals, 0 SOSs, and 0 indicators.
Presolve time = 0.34 sec. (137.78 ticks)
MIP emphasis: balance optimality and feasibility.
MIP search method: dynamic search.
Parallel mode: deterministic, using up to 4 threads.
Root relaxation solution time = 33.23 sec. (8584.71 ticks)

        Nodes                                         Cuts/
   Node  Left     Objective  IInf  Best Integer    Best Bound    ItCnt     Gap

*     0+    0                       156395.0000   -75179.0000           148.07%
*     0+    0                        50271.0000   -75179.0000           249.55%
*     0+    0                        46343.0000   -75179.0000           262.22%
      0     0    37940.4342    45    46343.0000    37940.4342       31   18.13%
*     0+    0                        40006.0000    37940.4342             5.16%
      0     0    38097.4686    49    40006.0000     Cuts: 843     7981    4.77%
      0     0    38175.4520    52    40006.0000    Cuts: 1147    14462    4.58%
      0     0    38189.2142    48    40006.0000  MIRcuts: 898    18829    4.54%
*     0+    0                        39905.0000    38189.2142             4.30%
*     0+    0                        39874.0000    38189.2142             4.23%
*     0+    0                        39817.0000    38189.2142             4.09%
*     0+    0                        39640.0000    38189.2142             3.66%

Mixed integer rounding cuts applied:  608
Gomory fractional cuts applied:  1

Root node processing (before b&c):
  Real time             =  180.22 sec. (58736.27 ticks)
Parallel b&c, 4 threads:
  Real time             =    0.00 sec. (0.00 ticks)
  Sync time (average)   =    0.00 sec.
  Wait time (average)   =    0.00 sec.
                          ------------
Total (root+branch&cut) =  180.22 sec. (58736.27 ticks)
Intensification optimal objective= 39640.0
# columns in columnManager=100
===========================new round 3=========================



LocalSearchHeuristicSolver solver = new LocalSearchHeuristicSolver("./data/testset/testL3_20_230_48_200.txt", 2,5,3,5,300);
solver.TabuSearch(solutionList.get(0),10,200);
Intensification
        cplex.setParam(IloCplex.DoubleParam.EpGap, 0.02);
		cplex.setParam(IloCplex.DoubleParam.TiLim, 600); //10 mins

number of service arcs=11040
number of holding arcs=960

Time of first LP solve= 280380

There are 48592 columns added to the model.

Tried aggregator 2 times.
MIP Presolve eliminated 196844 rows and 178510 columns.
MIP Presolve modified 139418 coefficients.
Aggregator did 5810 substitutions.
Reduced MIP has 446 rows, 26905 columns, and 299527 nonzeros.
Reduced MIP has 56 binaries, 26645 generals, 0 SOSs, and 0 indicators.
Presolve time = 0.57 sec. (492.10 ticks)
Found incumbent of value 136962.000000 after 0.72 sec. (660.20 ticks)
Tried aggregator 1 time.
Reduced MIP has 446 rows, 26905 columns, and 299527 nonzeros.
Reduced MIP has 56 binaries, 26647 generals, 0 SOSs, and 0 indicators.
Presolve time = 0.07 sec. (53.90 ticks)
Probing time = 0.05 sec. (2.26 ticks)
MIP emphasis: balance optimality and feasibility.
MIP search method: dynamic search.
Parallel mode: deterministic, using up to 4 threads.
Root relaxation solution time = 2.79 sec. (1248.67 ticks)

        Nodes                                         Cuts/
   Node  Left     Objective  IInf  Best Integer    Best Bound    ItCnt     Gap

*     0+    0                       136962.0000    35376.0000            74.17%
*     0+    0                        55527.0000    35376.0000            36.29%
*     0+    0                        45073.0000    35376.0000            21.51%
*     0+    0                        44275.0000    35376.0000            20.10%
*     0+    0                        44132.0000    35376.0000            19.84%
      0     0    39756.6910   186    44132.0000    39756.6910     1489    9.91%
*     0+    0                        42517.0000    39756.6910             6.49%
      0     0    40258.3066   182    42517.0000      Cuts: 78     2296    5.31%
*     0+    0                        41966.0000    40258.3066             4.07%
      0     0    40305.0128   183    41966.0000   MIRcuts: 28     2674    3.96%
      0     0    40344.7461   184    41966.0000   MIRcuts: 34     2999    3.86%
      0     0    40354.8378   181    41966.0000    MIRcuts: 9     3132    3.84%
      0     0    40355.1258   184    41966.0000    MIRcuts: 2     3176    3.84%
      0     0    40356.0818   183    41966.0000    MIRcuts: 3     3231    3.84%
      0     2    40356.0818   183    41966.0000    40356.0818     3231    3.84%
Elapsed time = 13.94 sec. (10482.28 ticks, tree = 0.00 MB, solutions = 7)
      2     4    40394.1606   182    41966.0000    40356.0818     3605    3.84%
      4     6    40394.4031   186    41966.0000    40356.0819     3695    3.84%
      5     7    40439.4953   166    41966.0000    40356.0819     4079    3.84%
     11    13    40371.0128   185    41966.0000    40356.8557     4991    3.83%
     14    16    40443.2062   178    41966.0000    40356.8557     5771    3.83%
     15    17    40431.1525   180    41966.0000    40356.8557     6304    3.83%
     22    24    40386.6559   182    41966.0000    40371.2266     7784    3.80%
     27    29    40520.7904   152    41966.0000    40371.2266     8666    3.80%
     30    32    40386.0719   170    41966.0000    40373.9030     9538    3.79%
     54    56    40427.3513   155    41966.0000    40373.9030    13397    3.79%
Elapsed time = 22.24 sec. (14802.97 ticks, tree = 0.00 MB, solutions = 7)
     78    80    40478.5003   137    41966.0000    40373.9030    17171    3.79%
*    79+   79                        41619.0000    40373.9030             2.99%
    103   105    40541.0535   128    41619.0000    40373.9030    20661    2.99%
*   121+  121                        41384.0000    40373.9030             2.44%
    142   144    40572.6463   120    41384.0000    40373.9030    25607    2.44%
    156   158    40913.3571    75    41384.0000    40373.9030    27250    2.44%
*   179+  179                        41249.0000    40373.9030             2.12%
*   210   210      integral     0    41199.0000    40373.9030    32678    2.00%
    212   210    40398.6139   183    41199.0000    40373.9030    32982    2.00%
    213   211    40645.2683   105    41199.0000    40373.9372    33060    2.00%
    339   274    40393.5014   191    41199.0000    40373.9372    41540    2.00%
    380   315    40864.0282    66    41199.0000    40373.9372    47038    2.00%
    396   331    40927.0100    50    41199.0000    40373.9372    49142    2.00%
    466   364    40432.4800   163    41199.0000    40373.9372    54104    2.00%
Elapsed time = 47.49 sec. (26802.24 ticks, tree = 9.15 MB, solutions = 11)
    486   384    40484.1212   152    41199.0000    40373.9372    57329    2.00%
    539   435    40520.9487   140    41199.0000    40373.9372    63073    2.00%
    563   453    40634.2814   118    41199.0000    40373.9372    65681    2.00%
*   772+  470                        41175.0000    40373.9372             1.95%
*   772+  470                        41152.0000    40373.9372             1.89%
*   772+  470                        41144.0000    40373.9372             1.87%
    791   469    40698.2397   104    41144.0000    40373.9372    74282    1.87%
    808   486    40478.0219   154    41144.0000    40373.9372    76144    1.87%
    877   543    40496.3951   149    41144.0000    40381.3180    82213    1.85%
*   955+  613                        41138.0000    40381.3180             1.84%
    955   615    40909.6275    54    41138.0000    40381.3180    89126    1.84%
    957   617    40463.6417   164    41138.0000    40381.3180    89199    1.84%
   1035   695    40652.7410   120    41138.0000    40381.3180    95844    1.84%
   1067   719    40684.8249   112    41138.0000    40381.3180    98176    1.84%
Elapsed time = 75.27 sec. (40677.46 ticks, tree = 19.22 MB, solutions = 15)
   1128   776    40814.7596    94    41138.0000    40381.3180   102867    1.84%
   1179   827    40462.4440   175    41138.0000    40381.3180   106416    1.84%
   1180   828    40396.2053   191    41138.0000    40396.2053   109114    1.80%
   1182   830    40397.3748   192    41138.0000    40396.4322   109194    1.80%
   1183   831    40479.6714   195    41138.0000    40396.4322   109623    1.80%
   1186   834    40519.4731   185    41138.0000    40396.4322   110331    1.80%
   1188   834    40486.3139   191    41138.0000    40397.3762   110609    1.80%
   1192   838    40496.6399   184    41138.0000    40397.4037   111440    1.80%
   1199   841    40402.4291   188    41138.0000    40397.4037   112049    1.80%
   1203   844    40427.3252   186    41138.0000    40397.4037   113329    1.80%
Elapsed time = 122.84 sec. (72924.10 ticks, tree = 31.39 MB, solutions = 15)
   1208   847    40431.6532   181    41138.0000    40397.4037   114034    1.80%
   1213   849    40435.1943   178    41138.0000    40397.4037   115193    1.80%
   1222   852    40532.4700   177    41138.0000    40397.4037   116283    1.80%
   1230   857    40620.4829   170    41138.0000    40397.4037   117657    1.80%
   1240   864    40438.1201   186    41138.0000    40397.4037   118493    1.80%
   1261   876    40458.8738   178    41138.0000    40397.4037   121393    1.80%
   1283   887    40442.6229   183    41138.0000    40397.4037   124313    1.80%
   1295   895    40590.3431   170    41138.0000    40397.4037   126388    1.80%
   1312   905    40556.9128   150    41138.0000    40397.4037   129296    1.80%
   1322   910    40509.3852   162    41138.0000    40397.4037   131064    1.80%
Elapsed time = 152.48 sec. (88170.11 ticks, tree = 30.49 MB, solutions = 15)
   1334   915    40496.0263   167    41138.0000    40397.4037   132938    1.80%
   1358   927    40503.9103   175    41138.0000    40397.4037   136015    1.80%
   1375   938    40474.6368   163    41138.0000    40397.4037   138637    1.80%
   1383   942    40505.7837   165    41138.0000    40397.4037   140094    1.80%
   1403   958    40495.1944   166    41138.0000    40397.4037   142801    1.80%
   1429   974    40467.7643   168    41138.0000    40397.4037   145759    1.80%
   1445   984    40484.2443   167    41138.0000    40397.4037   148024    1.80%
   1474  1001    40548.6500   145    41138.0000    40397.4037   151419    1.80%
   1479  1005    40634.1695   156    41138.0000    40397.4037   152659    1.80%

Mixed integer rounding cuts applied:  168
Zero-half cuts applied:  1

Root node processing (before b&c):
  Real time             =   13.94 sec. (10492.28 ticks)
Parallel b&c, 4 threads:
  Real time             =  166.12 sec. (90139.06 ticks)
  Sync time (average)   =   13.13 sec.
  Wait time (average)   =   13.34 sec.
                          ------------
Total (root+branch&cut) =  180.06 sec. (100631.34 ticks)
optimal objective= 41138.0

artificial: false set: [11200, 10561, 1985, 10308, 8073, 4501, 6678, 86, 11994, 11995, 11996, 11997, 11998, 11358, 11999, 11359, 4641, 4394, 7467, 11952, 3632, 10295, 11767, 11448, 11768, 11449, 5050, 11198, 11199] start node= 15 start time= 7 capacity type= 2
(19,0)->(19,1)->(12,6)->(15,7)->(15,8)->(15,9)->(9,10)->(3,14)->(3,15)->(3,16)->(3,17)->(18,23)->(8,24)->(8,25)->(8,26)->(14,27)->(6,30)->(6,31)->(6,32)->(8,33)->(18,36)->(8,37)->(0,38)->(19,42)->(19,43)->(19,44)->(19,45)->(19,46)->(19,47)->(19,0):1

artificial: false set: [11072, 11073, 5321, 11660, 11661, 11662, 274, 8022, 11555, 11556, 11557, 11558, 11559, 11560, 11050, 11051, 11052, 11053, 11054, 11055, 11760, 11056, 11761, 11057, 11762, 11058, 11763, 11059, 11764, 11060, 11765, 11061, 11062, 11063, 11064, 4473, 11065, 11066, 11067, 11068, 11069, 11070, 6719, 11071] start node= 0 start time= 10 capacity type= 1
(15,0)->(15,1)->(15,2)->(15,3)->(15,4)->(15,5)->(15,6)->(8,9)->(0,10)->(0,11)->(0,12)->(0,13)->(0,14)->(0,15)->(0,16)->(0,17)->(0,18)->(0,19)->(0,20)->(0,21)->(0,22)->(0,23)->(0,24)->(0,25)->(0,26)->(0,27)->(0,28)->(0,29)->(0,30)->(0,31)->(0,32)->(0,33)->(0,34)->(10,35)->(10,36)->(10,37)->(10,38)->(10,39)->(10,40)->(10,41)->(12,44)->(12,45)->(12,46)->(12,47)->(15,0):1

artificial: false set: [11392, 5321, 11660, 11661, 11662, 11663, 11730, 11731, 11732, 11616, 5025, 4001, 11617, 11618, 11619, 11620, 11621, 6630, 11304, 8680, 11305, 11306, 11307, 11308, 11309, 2862, 11504, 11698, 11699, 11700, 7797, 7285, 9783, 8506, 11387, 11388, 11389, 11390, 11391] start node= 13 start time= 34 capacity type= 2
(12,0)->(12,1)->(12,2)->(12,3)->(12,4)->(12,5)->(12,6)->(16,10)->(7,11)->(7,12)->(7,13)->(7,14)->(7,15)->(7,16)->(7,17)->(14,18)->(14,19)->(14,20)->(14,21)->(5,24)->(5,25)->(5,26)->(5,27)->(5,28)->(5,29)->(5,30)->(9,32)->(9,33)->(13,34)->(13,35)->(13,36)->(13,37)->(18,39)->(16,40)->(10,41)->(12,44)->(12,45)->(12,46)->(12,47)->(12,0):1

artificial: false set: [4038, 6278, 1227, 1612, 6797, 2065, 2773, 11289, 11225, 11290, 11226, 11227, 11228, 11229, 11230, 11231, 11105, 11106, 11107, 11108, 11109, 11110, 11111, 11112, 11113, 11114, 6060, 11310, 11311, 11184, 11312, 11313, 11314, 11315, 11316, 2747] start node= 1 start time= 20 capacity type= 2
(3,0)->(3,1)->(7,6)->(5,9)->(5,10)->(5,11)->(11,12)->(1,17)->(1,18)->(1,19)->(1,20)->(1,21)->(1,22)->(1,23)->(1,24)->(1,25)->(1,26)->(1,27)->(2,28)->(13,29)->(5,30)->(5,31)->(5,32)->(5,33)->(5,34)->(5,35)->(5,36)->(5,37)->(11,38)->(3,41)->(3,42)->(3,43)->(3,44)->(3,45)->(3,46)->(3,47)->(3,0):1

artificial: false set: [5504, 9226, 5902, 9938, 6804, 11861, 2773, 11862, 11606, 11863, 11607, 11864, 11608, 11865, 11609, 8665, 11610, 11546, 11611, 11547, 11612, 11548, 11613, 11549, 11550, 11551, 8098, 5027, 355, 11052, 11053, 11054, 11055, 11056, 8881, 11057, 11058, 11830, 11831, 11832] start node= 0 start time= 17 capacity type= 2
(16,1)->(18,2)->(17,5)->(17,6)->(17,7)->(17,8)->(17,9)->(17,10)->(0,12)->(0,13)->(0,14)->(0,15)->(0,16)->(0,17)->(0,18)->(0,19)->(16,22)->(16,23)->(16,24)->(16,25)->(10,26)->(10,27)->(10,28)->(10,29)->(10,30)->(10,31)->(10,32)->(15,34)->(9,35)->(13,36)->(5,37)->(11,38)->(11,39)->(11,40)->(11,41)->(11,42)->(11,43)->(11,44)->(11,45)->(11,46)->(16,1):1

artificial: false set: [11392, 8064, 7554, 11844, 4999, 5511, 11976, 11977, 11978, 11979, 11980, 11981, 11982, 11473, 11474, 11475, 11476, 11477, 11478, 7256, 11801, 11802, 11803, 11804, 5149, 11805, 11806, 10783, 11807, 4001, 11169, 8677, 11558, 10282, 1522, 11253, 11254, 2615, 4475, 252, 11390, 11391] start node= 2 start time= 33 capacity type= 2
(15,0)->(9,1)->(9,2)->(9,3)->(9,4)->(9,5)->(9,6)->(9,7)->(13,8)->(18,10)->(8,11)->(0,12)->(10,13)->(7,14)->(7,15)->(7,16)->(7,17)->(14,18)->(4,21)->(4,22)->(4,23)->(19,24)->(19,25)->(19,26)->(19,27)->(19,28)->(19,29)->(19,30)->(19,31)->(2,33)->(2,34)->(16,36)->(16,37)->(10,38)->(10,39)->(15,41)->(15,42)->(15,43)->(15,44)->(15,45)->(15,46)->(15,47)->(15,0):1

artificial: false set: [10307, 7813, 9286, 2375, 5191, 6797, 2766, 8914, 3162, 5020, 11041, 11042, 11043, 11044, 11045, 11497, 11498, 11499, 1837, 4464, 4404, 246, 11320, 11321, 7484, 11196, 3647, 5887] start node= 0 start time= 1 capacity type= 2
(8,0)->(0,1)->(0,2)->(0,3)->(0,4)->(0,5)->(0,6)->(10,7)->(3,12)->(3,13)->(17,22)->(4,23)->(9,25)->(9,26)->(9,27)->(9,28)->(13,29)->(5,30)->(11,31)->(16,34)->(18,35)->(8,36)->(14,37)->(5,40)->(5,41)->(5,42)->(14,44)->(6,47)->(8,0):1

artificial: false set: [11392, 11078, 8070, 11079, 4999, 11080, 11081, 11082, 8523, 11147, 11083, 11404, 2894, 2769, 6226, 11730, 11090, 1299, 4501, 3286, 2135, 11160, 284, 4061, 5663, 4001, 7459, 7208, 1513, 11565, 11566, 11312, 3636, 10612, 1210, 1596, 6781, 11391] start node= 0 start time= 42 capacity type= 2
(1,2)->(1,3)->(19,4)->(15,6)->(9,7)->(13,8)->(1,10)->(2,11)->(2,12)->(13,13)->(5,14)->(7,15)->(7,16)->(7,17)->(14,18)->(14,19)->(6,22)->(4,23)->(2,24)->(2,25)->(16,27)->(7,28)->(7,29)->(5,32)->(5,33)->(11,34)->(6,36)->(8,37)->(0,38)->(0,39)->(0,40)->(0,41)->(0,42)->(0,43)->(0,44)->(10,45)->(10,46)->(10,47)->(1,2):1

artificial: false set: [11072, 11073, 11716, 11717, 11718, 11719, 11720, 11721, 274, 3987, 11417, 7450, 11418, 11419, 11420, 3613, 11421, 11422, 11423, 11555, 11556, 11557, 11558, 11559, 11055, 11376, 11056, 11377, 11057, 11378, 11058, 11059, 11060, 11061, 11062, 11063, 5176, 11064, 11065, 11066, 11067, 11068, 11069, 4478, 11070, 11071] start node= 0 start time= 15 capacity type= 1
(7,0)->(7,1)->(7,2)->(7,3)->(14,4)->(14,5)->(14,6)->(14,7)->(14,8)->(14,9)->(14,10)->(6,13)->(8,14)->(0,15)->(0,16)->(0,17)->(0,18)->(0,19)->(0,20)->(0,21)->(0,22)->(0,23)->(0,24)->(0,25)->(0,26)->(0,27)->(0,28)->(0,29)->(0,30)->(0,31)->(0,32)->(0,33)->(0,34)->(10,35)->(10,36)->(10,37)->(10,38)->(10,39)->(10,40)->(7,41)->(7,42)->(7,43)->(7,44)->(7,45)->(7,46)->(7,47)->(7,0):1

artificial: false set: [6784, 2754, 10309, 11462, 7558, 4999, 4551, 2521, 11098, 11099, 11547, 11548, 11100, 11549, 11101, 11550, 7583, 5407, 11297, 11234, 11235, 6115, 11236, 7208, 11754, 11755, 11756, 11757, 11758, 2357, 4025, 1214, 1599] start node= 1 start time= 12 capacity type= 2
(4,2)->(4,3)->(4,4)->(4,5)->(9,7)->(13,8)->(1,10)->(1,11)->(1,12)->(1,13)->(1,14)->(2,15)->(13,16)->(5,17)->(5,18)->(11,19)->(14,22)->(4,25)->(10,27)->(10,28)->(10,29)->(10,30)->(10,31)->(18,37)->(8,38)->(8,39)->(7,41)->(14,42)->(14,43)->(14,44)->(14,45)->(14,46)->(14,47)->(4,2):1

artificial: false set: [1024, 3018, 6797, 11407, 11408, 7570, 8084, 8022, 1622, 6807, 11803, 5019, 11804, 11805, 11806, 2910, 11807, 6691, 2149, 11493, 11494, 11495, 11496, 11497, 11498, 11050, 11051, 11692, 11760, 11761, 4017, 11762, 11763, 11764, 11765, 11320, 4473, 11321, 252, 5629] start node= 0 start time= 10 capacity type= 2
(15,0)->(15,1)->(15,2)->(15,3)->(15,4)->(15,5)->(15,6)->(8,9)->(0,10)->(0,11)->(0,12)->(10,13)->(1,16)->(12,19)->(15,20)->(9,21)->(9,22)->(9,23)->(9,24)->(9,25)->(9,26)->(9,27)->(13,28)->(13,29)->(5,30)->(7,31)->(7,32)->(7,33)->(14,34)->(4,37)->(2,38)->(13,39)->(5,40)->(5,41)->(5,42)->(15,43)->(15,44)->(15,45)->(15,46)->(15,47)->(15,0):1

artificial: false set: [11073, 11911, 6087, 8910, 4496, 274, 11291, 11292, 7583, 2594, 10659, 812, 5870, 11758, 11825, 11826, 11827, 5555, 11828, 11829, 11830, 11831, 11832, 9848, 11833, 11834, 11835, 11836, 11837, 2749, 10303] start node= 0 start time= 33 capacity type= 2
(4,2)->(19,3)->(18,7)->(18,8)->(5,11)->(5,12)->(5,13)->(11,14)->(16,17)->(16,18)->(16,19)->(16,20)->(16,21)->(16,22)->(16,23)->(16,24)->(16,25)->(16,26)->(16,27)->(16,28)->(16,29)->(16,30)->(18,31)->(8,32)->(0,33)->(0,34)->(10,35)->(11,39)->(1,44)->(14,46)->(14,47)->(4,2):1

artificial: false set: [11200, 11201, 11202, 11203, 11204, 11205, 11206, 11207, 11208, 11209, 11210, 11211, 11212, 11213, 11214, 11215, 11216, 11861, 11862, 9367, 4507, 284, 5663, 674, 11368, 11369, 11565, 11566, 1905, 3642, 11194, 11195, 11196, 11197, 11198, 11199] start node= 1 start time= 2 capacity type= 2
(1,2)->(17,5)->(17,6)->(17,7)->(3,10)->(3,11)->(3,12)->(3,13)->(3,14)->(3,15)->(3,16)->(3,17)->(3,18)->(3,19)->(3,20)->(3,21)->(3,22)->(3,23)->(3,24)->(3,25)->(3,26)->(3,27)->(3,28)->(3,29)->(3,30)->(3,31)->(3,32)->(3,33)->(6,40)->(6,41)->(6,42)->(8,43)->(0,44)->(10,45)->(10,46)->(10,47)->(1,2):1

artificial: false set: [2306, 4999, 1229, 718, 1614, 1235, 8534, 11415, 8473, 11098, 2971, 11870, 11871, 7208, 4072, 683, 9328, 9265, 11121, 11122, 11827, 9268, 1524, 11828, 2357, 11829, 11830, 11831, 11832, 7231] start node= 1 start time= 11 capacity type= 2
(17,1)->(4,2)->(17,4)->(4,5)->(9,7)->(13,8)->(1,10)->(1,11)->(17,14)->(17,15)->(17,16)->(16,19)->(16,20)->(16,21)->(16,22)->(16,23)->(16,24)->(16,25)->(1,29)->(2,30)->(13,31)->(1,33)->(1,34)->(1,35)->(2,36)->(16,38)->(7,39)->(7,40)->(5,43)->(1,46)->(17,1):1

artificial: false set: [11456, 11776, 11457, 11777, 11458, 11778, 11459, 11779, 11460, 11780, 11078, 11079, 11527, 11080, 11528, 11081, 11082, 11083, 11084, 11085, 11086, 11087, 4501, 11040, 11041, 11042, 11043, 11044, 8037, 11045, 5481, 246, 11448, 11449, 11450, 11451, 11771, 11452, 11772, 11453, 11773, 11454, 11774, 11455, 11775] start node= 0 start time= 0 capacity type= 0
(0,0)->(0,1)->(0,2)->(0,3)->(0,4)->(0,5)->(0,6)->(10,7)->(10,8)->(10,9)->(15,11)->(15,12)->(15,13)->(15,14)->(15,15)->(15,16)->(15,17)->(15,18)->(15,19)->(15,20)->(15,21)->(8,24)->(8,25)->(8,26)->(8,27)->(8,28)->(8,29)->(8,30)->(8,31)->(8,32)->(8,33)->(8,34)->(8,35)->(8,36)->(8,37)->(0,38)->(0,39)->(0,40)->(0,41)->(0,42)->(0,43)->(0,44)->(0,45)->(0,46)->(0,47)->(0,0):1

artificial: false set: [11398, 11399, 11911, 11400, 11912, 11913, 11914, 8910, 4496, 11664, 81, 11989, 7253, 11030, 9947, 9374, 1631, 2081, 7201, 3306, 2155, 11180, 11181, 11182, 1203, 1588, 3769, 10303] start node= 13 start time= 0 capacity type= 2
(13,0)->(13,1)->(1,3)->(2,4)->(13,5)->(18,7)->(18,8)->(18,9)->(18,10)->(18,11)->(17,14)->(3,17)->(7,22)->(7,23)->(7,24)->(7,25)->(16,30)->(18,31)->(8,32)->(0,33)->(19,37)->(19,38)->(6,42)->(4,43)->(2,44)->(2,45)->(2,46)->(2,47)->(13,0):1

artificial: false set: [768, 11716, 11717, 11718, 9286, 11719, 11720, 2633, 2124, 7246, 3987, 2327, 9304, 1629, 11104, 11105, 11106, 11881, 10794, 11882, 11883, 11180, 11884, 11885, 11886, 7214, 11887, 11888, 11889, 7730, 11890, 11891, 691, 11892, 11893, 11894, 11895, 7545, 1597] start node= 13 start time= 14 capacity type= 2
(1,0)->(14,2)->(7,3)->(14,4)->(14,5)->(14,6)->(14,7)->(14,8)->(14,9)->(4,12)->(2,13)->(13,14)->(1,16)->(1,17)->(1,18)->(1,19)->(17,22)->(4,23)->(17,25)->(17,26)->(17,27)->(17,28)->(17,29)->(17,30)->(17,31)->(17,32)->(17,33)->(17,34)->(17,35)->(17,36)->(17,37)->(17,38)->(17,39)->(17,40)->(4,41)->(19,42)->(2,44)->(2,45)->(13,46)->(1,0):1

artificial: false set: [11968, 11904, 11969, 11905, 11970, 11971, 11972, 11973, 11974, 11975, 11976, 11977, 11978, 11979, 11980, 11981, 11982, 11983, 11984, 10641, 9938, 8099, 5028, 11238, 11239, 11943, 11240, 11944, 11241, 11945, 11242, 11946, 11243, 11947, 2604, 11948, 11949, 11950, 11951, 9269, 7285, 11965, 11966, 11967] start node= 13 start time= 37 capacity type= 1
(18,0)->(18,1)->(18,2)->(17,5)->(4,6)->(4,7)->(4,8)->(4,9)->(4,10)->(4,11)->(4,12)->(19,13)->(19,14)->(19,15)->(19,16)->(19,17)->(19,18)->(19,19)->(19,20)->(19,21)->(19,22)->(19,23)->(19,24)->(19,25)->(19,26)->(19,27)->(19,28)->(19,29)->(19,30)->(19,31)->(19,32)->(19,33)->(15,35)->(9,36)->(13,37)->(18,39)->(18,40)->(18,41)->(18,42)->(18,43)->(18,44)->(18,45)->(18,46)->(18,47)->(18,0):1

artificial: false set: [11776, 11777, 6465, 11778, 11779, 11780, 10758, 4488, 8650, 269, 5716, 2773, 11606, 11607, 1496, 11608, 11609, 11610, 11611, 11612, 11613, 11614, 11615, 8037, 5483, 11568, 11569, 11570, 11571, 11065, 11066, 11067, 11068, 11773, 11774, 5310, 11775] start node= 0 start time= 28 capacity type= 2
(11,0)->(11,1)->(11,2)->(11,3)->(11,4)->(19,6)->(2,8)->(16,10)->(10,11)->(15,13)->(15,14)->(15,15)->(15,16)->(15,17)->(15,18)->(15,19)->(15,20)->(15,21)->(8,24)->(0,25)->(0,26)->(0,27)->(0,28)->(0,29)->(10,30)->(12,33)->(5,37)->(11,38)->(11,39)->(11,40)->(11,41)->(11,42)->(11,43)->(11,44)->(11,45)->(11,46)->(11,47)->(11,0):1

artificial: false set: [7555, 326, 11470, 11471, 3794, 4501, 11801, 11802, 11740, 11741, 11742, 11743, 4512, 11744, 4386, 10287, 11440, 11441, 7473, 3636, 11254, 11255, 11256, 11192, 2425, 1977, 8059] start node= 14 start time= 28 capacity type= 2
(8,0)->(7,2)->(3,8)->(3,9)->(18,15)->(8,16)->(8,17)->(8,18)->(14,19)->(4,22)->(4,23)->(4,24)->(4,25)->(14,28)->(14,29)->(14,30)->(14,31)->(14,32)->(14,33)->(6,36)->(8,37)->(0,38)->(15,41)->(15,42)->(15,43)->(8,46)->(8,47)->(8,0):1

artificial: false set: [2754, 6211, 1347, 11652, 11653, 11654, 11655, 11466, 1612, 11726, 1041, 11090, 11349, 3286, 2135, 6424, 11160, 11161, 11162, 4507, 11163, 6107, 284, 5663, 11693, 11565, 11694, 11566, 7791, 11574, 11575, 11576, 11577, 11578, 7231] start node= 0 start time= 44 capacity type= 2
(1,2)->(1,3)->(11,6)->(11,7)->(11,8)->(11,9)->(11,10)->(11,11)->(14,14)->(14,15)->(5,18)->(11,19)->(6,21)->(6,22)->(4,23)->(2,24)->(2,25)->(2,26)->(2,27)->(2,28)->(13,29)->(13,30)->(13,31)->(1,33)->(12,36)->(12,37)->(12,38)->(12,39)->(12,40)->(8,42)->(8,43)->(0,44)->(10,45)->(10,46)->(10,47)->(1,2):1

artificial: false set: [3009, 9861, 8646, 11527, 2952, 11528, 11273, 11274, 8075, 1227, 5004, 1612, 9744, 6800, 4626, 1492, 6804, 2773, 6230, 2395, 3617, 9698, 8098, 5027, 3304, 5481, 5037, 11693, 11694, 11695, 8881, 6781, 2750, 7294, 6207] start node= 1 start time= 27 capacity type= 2
(18,0)->(16,1)->(18,2)->(2,4)->(16,6)->(10,7)->(10,8)->(10,9)->(15,11)->(9,12)->(13,13)->(5,14)->(11,15)->(6,17)->(8,18)->(18,21)->(5,24)->(1,27)->(2,28)->(13,29)->(13,30)->(13,31)->(13,32)->(5,33)->(15,34)->(9,35)->(13,36)->(5,37)->(11,38)->(6,40)->(4,41)->(4,42)->(4,43)->(9,45)->(13,46)->(18,0):1

artificial: false set: [11776, 3009, 3274, 6797, 8081, 1875, 5019, 8098, 11490, 11491, 11492, 11493, 11494, 2535, 11495, 11496, 11561, 11497, 11562, 11498, 2603, 11563, 11564, 11692, 5229, 11310, 11311, 11312, 11186, 4787, 10620, 11774, 11775] start node= 15 start time= 17 capacity type= 2
(3,2)->(3,3)->(6,10)->(4,11)->(19,12)->(15,14)->(15,15)->(15,16)->(15,17)->(9,18)->(9,19)->(9,20)->(9,21)->(9,22)->(9,23)->(9,24)->(9,25)->(9,26)->(9,27)->(13,28)->(13,29)->(5,30)->(5,31)->(5,32)->(5,33)->(15,34)->(9,35)->(4,39)->(10,41)->(10,42)->(10,43)->(10,44)->(10,45)->(3,2):1

artificial: false set: [5504, 2306, 4999, 11274, 10763, 11275, 11276, 11277, 11278, 11279, 8665, 1306, 11546, 11547, 11548, 11549, 11678, 11550, 11679, 11551, 11680, 11232, 11681, 11233, 8098, 11682, 11683, 11684, 11685, 7270, 7208, 9768, 11507, 9268, 11508, 2357, 11509, 4790, 1597] start node= 13 start time= 18 capacity type= 2
(4,0)->(4,1)->(4,2)->(17,4)->(4,5)->(9,7)->(13,8)->(1,10)->(19,11)->(2,13)->(13,14)->(13,15)->(13,16)->(13,17)->(13,18)->(13,19)->(13,20)->(13,21)->(13,22)->(18,24)->(16,25)->(10,26)->(10,27)->(10,28)->(10,29)->(10,30)->(10,31)->(10,32)->(15,34)->(9,35)->(9,36)->(9,37)->(9,38)->(4,42)->(4,43)->(4,44)->(4,45)->(4,46)->(4,47)->(4,0):1

artificial: false set: [11072, 11073, 6403, 5317, 7750, 11399, 11400, 11466, 11467, 11468, 11469, 4494, 9937, 274, 9364, 6424, 11555, 11556, 4389, 4009, 7466, 3629, 4654, 10095, 11634, 11191, 11192, 1977, 11071] start node= 0 start time= 31 capacity type= 2
(18,1)->(17,4)->(3,7)->(3,8)->(3,9)->(18,15)->(12,18)->(12,19)->(8,21)->(14,22)->(7,23)->(7,24)->(7,25)->(14,26)->(6,29)->(8,30)->(0,31)->(0,32)->(0,33)->(0,34)->(10,35)->(10,36)->(10,37)->(12,40)->(8,42)->(8,43)->(8,44)->(8,45)->(8,46)->(18,1):1

artificial: false set: [11456, 11457, 11458, 11459, 11716, 11460, 11717, 11461, 11718, 11462, 454, 11719, 4551, 11720, 2316, 3987, 9236, 11417, 11418, 11419, 11420, 11421, 11870, 11422, 11871, 11423, 11872, 11873, 11874, 11875, 11376, 11377, 11378, 11448, 7545, 11449, 11450, 11451, 11452, 11453, 11454, 11455] start node= 0 start time= 22 capacity type= 2
(7,0)->(7,1)->(7,2)->(7,3)->(14,4)->(14,5)->(14,6)->(14,7)->(14,8)->(14,9)->(4,12)->(17,14)->(17,15)->(17,16)->(17,17)->(17,18)->(17,19)->(17,20)->(0,22)->(8,24)->(8,25)->(8,26)->(8,27)->(8,28)->(8,29)->(8,30)->(8,31)->(8,32)->(8,33)->(8,34)->(8,35)->(8,36)->(8,37)->(8,38)->(8,39)->(7,41)->(7,42)->(7,43)->(7,44)->(7,45)->(7,46)->(7,47)->(7,0):1

artificial: false set: [11648, 6465, 3271, 3018, 2124, 8016, 4371, 7444, 11803, 11804, 1501, 11805, 11806, 11807, 11240, 11241, 11242, 11243, 11823, 11824, 11825, 11826, 11827, 11828, 11317, 11829, 11318, 11830, 11319, 8759, 11320, 11321, 2810] start node= 15 start time= 43 capacity type= 2
(15,0)->(8,3)->(14,4)->(6,7)->(4,8)->(4,9)->(4,10)->(4,11)->(4,12)->(2,13)->(16,15)->(16,16)->(16,17)->(16,18)->(16,19)->(16,20)->(16,21)->(16,22)->(16,23)->(5,26)->(12,32)->(12,33)->(5,37)->(5,38)->(5,39)->(5,40)->(5,41)->(5,42)->(15,43)->(15,44)->(15,45)->(15,46)->(15,47)->(15,0):1

artificial: false set: [11456, 11457, 11458, 11459, 11460, 11078, 11079, 11911, 11080, 11912, 11081, 11082, 11083, 11084, 11085, 4626, 4501, 9813, 7253, 9698, 11688, 11689, 10281, 11690, 11434, 11691, 11435, 11692, 11436, 11437, 11438, 11439, 11440, 11441, 8881, 1588, 6845, 382] start node= 0 start time= 45 capacity type= 2
(16,1)->(18,2)->(2,4)->(13,5)->(18,7)->(18,8)->(18,9)->(8,10)->(8,11)->(8,12)->(8,13)->(8,14)->(8,15)->(8,16)->(8,17)->(8,18)->(18,21)->(13,24)->(13,25)->(13,26)->(13,27)->(13,28)->(13,29)->(8,32)->(8,33)->(8,34)->(8,35)->(8,36)->(8,37)->(0,38)->(0,39)->(0,40)->(0,41)->(0,42)->(0,43)->(0,44)->(0,45)->(0,46)->(16,1):1

artificial: false set: [11968, 11969, 10305, 11970, 11458, 10627, 11459, 11460, 11781, 8073, 5002, 6863, 8912, 4371, 7828, 4501, 278, 8086, 5655, 5015, 6680, 11995, 5725, 1630, 11426, 10796, 7224, 1338, 698, 6779, 2748, 9341, 11967] start node= 15 start time= 22 capacity type= 2
(8,2)->(8,3)->(14,4)->(12,8)->(15,9)->(9,10)->(13,11)->(5,12)->(11,13)->(19,15)->(19,16)->(19,17)->(19,18)->(19,19)->(15,21)->(15,22)->(9,23)->(13,24)->(1,26)->(17,29)->(16,32)->(18,33)->(8,34)->(8,35)->(8,36)->(8,37)->(0,38)->(10,39)->(1,42)->(19,43)->(19,44)->(2,46)->(13,47)->(8,2):1

artificial: false set: [11456, 11457, 11458, 11459, 11460, 11078, 11079, 11080, 4616, 11081, 11082, 11083, 11915, 11084, 11916, 11085, 11917, 11086, 8910, 11918, 11087, 11919, 11920, 11921, 11922, 11923, 11924, 4501, 11925, 11926, 11927, 11040, 11041, 5283, 9768, 242, 6390, 11833, 11834, 11835, 11836, 11837, 10303] start node= 0 start time= 0 capacity type= 2
(0,0)->(0,1)->(0,2)->(10,3)->(12,6)->(8,8)->(18,11)->(18,12)->(18,13)->(18,14)->(18,15)->(18,16)->(18,17)->(18,18)->(18,19)->(18,20)->(18,21)->(18,22)->(18,23)->(18,24)->(16,25)->(16,26)->(16,27)->(16,28)->(16,29)->(16,30)->(18,31)->(8,32)->(8,33)->(8,34)->(8,35)->(8,36)->(8,37)->(0,38)->(0,39)->(0,40)->(0,41)->(0,42)->(0,43)->(0,44)->(0,45)->(0,46)->(0,47)->(0,0):1

artificial: false set: [2944, 11460, 11078, 4999, 10763, 8910, 11472, 11473, 11474, 6418, 11475, 11476, 11477, 4501, 9238, 11478, 279, 1306, 11295, 7208, 4073, 363, 691, 5176, 11064, 11065, 11066, 11324, 1597, 2877, 6782, 11519, 10111] start node= 0 start time= 24 capacity type= 2
(9,0)->(9,1)->(9,2)->(9,3)->(9,4)->(9,5)->(9,6)->(9,7)->(13,8)->(1,10)->(19,11)->(2,13)->(13,14)->(5,15)->(5,16)->(1,19)->(17,22)->(0,24)->(0,25)->(0,26)->(0,27)->(16,30)->(18,31)->(12,34)->(8,36)->(8,37)->(0,38)->(0,39)->(10,40)->(7,41)->(5,44)->(5,45)->(9,47)->(9,0):1

artificial: false set: [8064, 3013, 4999, 11914, 11915, 11916, 11917, 6797, 11473, 11474, 11475, 11731, 11476, 11732, 11477, 11478, 11798, 11799, 7256, 11800, 11801, 11802, 8090, 11803, 5019, 11804, 11805, 11806, 11807, 4386, 7845, 6697, 11692, 10286, 11310, 11439, 11311, 11440, 11312, 11441, 11313, 11314, 11315, 11316] start node= 14 start time= 19 capacity type= 2
(15,0)->(9,1)->(9,2)->(9,3)->(9,4)->(9,5)->(9,6)->(9,7)->(13,8)->(18,10)->(18,11)->(18,12)->(18,13)->(18,14)->(8,15)->(8,16)->(8,17)->(8,18)->(14,19)->(14,20)->(14,21)->(12,25)->(15,26)->(9,27)->(13,28)->(13,29)->(5,30)->(5,31)->(5,32)->(5,33)->(5,34)->(5,35)->(5,36)->(5,37)->(15,38)->(15,39)->(15,40)->(15,41)->(15,42)->(15,43)->(15,44)->(15,45)->(15,46)->(15,47)->(15,0):1

artificial: false set: [8064, 11650, 11651, 6403, 11652, 11653, 11654, 7558, 4999, 11655, 11656, 11657, 11658, 11659, 11660, 11661, 11662, 11473, 11474, 11475, 11476, 11477, 11478, 2521, 11547, 11548, 11549, 11550, 4389, 7208, 11629, 11630, 11631, 11632, 11633, 11634, 1018, 6719, 5311] start node= 13 start time= 8 capacity type= 2
(15,0)->(9,1)->(9,2)->(9,3)->(9,4)->(9,5)->(9,6)->(9,7)->(13,8)->(1,10)->(12,13)->(12,14)->(12,15)->(12,16)->(12,17)->(12,18)->(12,19)->(8,21)->(14,22)->(4,25)->(10,27)->(10,28)->(10,29)->(10,30)->(10,31)->(12,34)->(12,35)->(12,36)->(12,37)->(12,38)->(12,39)->(12,40)->(12,41)->(12,42)->(12,43)->(12,44)->(12,45)->(12,46)->(12,47)->(15,0):1

artificial: false set: [9286, 4999, 11147, 1612, 6797, 2766, 11473, 11985, 11474, 11475, 11476, 1620, 11477, 11478, 2135, 11160, 11161, 11162, 11163, 9692, 2399, 10786, 11874, 11875, 11876, 11877, 11943, 7208, 11944, 11945, 11946, 11947, 7213, 5743, 687, 7285, 1210, 1596] start node= 13 start time= 13 capacity type= 2
(9,1)->(9,2)->(9,3)->(9,4)->(9,5)->(9,6)->(9,7)->(13,8)->(1,10)->(2,11)->(2,12)->(13,13)->(1,15)->(17,18)->(17,19)->(17,20)->(17,21)->(17,22)->(4,23)->(2,24)->(2,25)->(2,26)->(2,27)->(2,28)->(13,29)->(5,30)->(11,31)->(19,33)->(19,34)->(2,36)->(13,37)->(18,39)->(18,40)->(18,41)->(18,42)->(18,43)->(18,44)->(4,47)->(9,1):1

artificial: false set: [11078, 11079, 3271, 11080, 2312, 11081, 11082, 9226, 11083, 11084, 11085, 11407, 4371, 7444, 4501, 2910, 478, 11424, 11425, 11426, 355, 11306, 11307, 11308, 11052, 11309, 11053, 11054, 11055, 4016, 11056, 7473, 11057, 11058, 3636, 11830, 8759] start node= 0 start time= 45 capacity type= 2
(8,0)->(8,1)->(8,2)->(8,3)->(14,4)->(6,7)->(4,8)->(17,10)->(0,12)->(0,13)->(0,14)->(0,15)->(0,16)->(0,17)->(0,18)->(0,19)->(16,22)->(16,23)->(5,26)->(5,27)->(5,28)->(5,29)->(5,30)->(7,31)->(7,32)->(14,33)->(6,36)->(8,37)->(0,38)->(0,39)->(0,40)->(0,41)->(0,42)->(0,43)->(0,44)->(0,45)->(0,46)->(8,0):1

===========================new round 1=========================
-------------Start to solve SolveVehicleCoverCGHeuristic()---------------
flowCoverCount=230
Time of first LP solve= 152237
There are 42081 columns added to the model.
Tried aggregator 1 time.
MIP Presolve eliminated 10810 rows and 20562 columns.
MIP Presolve modified 182166 coefficients.
Reduced MIP has 290 rows, 21579 columns, and 265832 nonzeros.
Reduced MIP has 470 binaries, 21109 generals, 0 SOSs, and 0 indicators.
Presolve time = 0.30 sec. (341.15 ticks)
Found incumbent of value 138748.000000 after 0.35 sec. (397.43 ticks)
Tried aggregator 1 time.
Reduced MIP has 290 rows, 21579 columns, and 265832 nonzeros.
Reduced MIP has 470 binaries, 21109 generals, 0 SOSs, and 0 indicators.
Presolve time = 0.07 sec. (52.09 ticks)
Probing time = 0.05 sec. (1.87 ticks)
MIP emphasis: balance optimality and feasibility.
MIP search method: dynamic search.
Parallel mode: deterministic, using up to 4 threads.
Root relaxation solution time = 2.46 sec. (1286.84 ticks)

        Nodes                                         Cuts/
   Node  Left     Objective  IInf  Best Integer    Best Bound    ItCnt     Gap

*     0+    0                       138748.0000        0.0000           100.00%
*     0+    0                        23888.0000        0.0000           100.00%
*     0+    0                         9946.0000        0.0000           100.00%
*     0+    0                         8836.0000        0.0000           100.00%
*     0+    0                         8668.0000        0.0000           100.00%
      0     0     4719.7460   181     8668.0000     4719.7460       67   45.55%
*     0+    0                         6632.0000     4719.7460            28.83%
      0     0     4868.3849   188     6632.0000   MIRcuts: 22      432   26.59%
      0     0     4872.0188   187     6632.0000       Cuts: 4      499   26.54%
      0     0     4872.8019   188     6632.0000    MIRcuts: 1      545   26.53%
*     0+    0                         5901.0000     4872.8019            17.42%
*     0+    0                         5782.0000     4872.8019            15.72%
*     0+    0                         5757.0000     4872.8019            15.36%
      0     0     4882.5723   190     5757.0000       Cuts: 8      620   15.19%
      0     0     4893.1475   188     5757.0000    MIRcuts: 4      689   15.01%
      0     2     4893.1475   188     5757.0000     4893.1475      689   15.01%
Elapsed time = 8.86 sec. (7366.14 ticks, tree = 0.00 MB, solutions = 9)
      2     4     4937.8972   178     5757.0000     4893.1475     1000   15.01%
      5     7     4970.3223   173     5757.0000     4893.2402     1393   15.00%
     10    12     5011.7276   161     5757.0000     4893.2402     2343   15.00%
     15    17     4917.2269   173     5757.0000     4893.2950     3136   15.00%
     26    28     4939.6644   170     5757.0000     4899.3616     4182   14.90%
     34    36     4964.1379   165     5757.0000     4899.3616     5368   14.90%
     49    51     4983.8835   163     5757.0000     4899.3616     7144   14.90%
     56    58     5056.0106   144     5757.0000     4899.3616     7876   14.90%
     72    74     4995.0004   161     5757.0000     4899.3616     9683   14.90%
    116   118     5229.2139    93     5757.0000     4899.3616    14384   14.90%
Elapsed time = 14.66 sec. (10835.59 ticks, tree = 0.25 MB, solutions = 9)
    172   174     5112.0667   128     5757.0000     4899.3616    19379   14.90%
*   199+  199                         5671.0000     4899.3616            13.61%
*   221+  221                         5651.0000     4899.3616            13.30%
*   230+  230                         5451.0000     4899.3616            10.12%
    247   239     5016.7209   158     5451.0000     4899.3616    25212   10.12%
    293   281     4991.3957   162     5451.0000     4906.1702    30400   10.00%
*   339   314      integral     0     5448.0000     4906.1702    33733    9.95%
    343   318     4936.2592   178     5448.0000     4906.1702    34347    9.95%
    397   372     5044.5720   145     5448.0000     4906.1702    40015    9.95%
    507   462     5041.7601   145     5448.0000     4906.4391    47589    9.94%
    536   491     4965.6577   177     5448.0000     4906.4391    50881    9.94%
    593   548     4997.2336   168     5448.0000     4906.4391    55880    9.94%
    668   605     5038.8165   151     5448.0000     4906.4391    60843    9.94%
*   709+  640                         5430.0000     4906.4391             9.64%
    770   691     5114.0795   132     5430.0000     4906.4391    67379    9.64%
Elapsed time = 35.42 sec. (21676.41 ticks, tree = 12.17 MB, solutions = 14)
    836   757     5198.0136   104     5430.0000     4906.4391    71393    9.64%
    925   846     5373.0589    88     5430.0000     4906.4391    76417    9.64%
    956   877     5086.9292   182     5430.0000     4906.4391    77898    9.64%
   1056   971     5001.0067   185     5430.0000     4910.9490    83056    9.56%
   1104  1019     5021.8607   180     5430.0000     4910.9490    85451    9.56%
   1150  1065     4894.9890   190     5430.0000     4910.9490    88877    9.56%
   1151  1066     4897.7997   188     5430.0000     4910.9490    88955    9.56%
   1153  1067     4898.9430   188     5430.0000     4910.9490    89279    9.56%
   1156  1070     4939.7075   183     5430.0000     4910.9490    89715    9.56%
   1159  1072     4903.2466   189     5430.0000     4910.9490    90171    9.56%
Elapsed time = 63.68 sec. (41875.78 ticks, tree = 25.76 MB, solutions = 14)
   1167  1075     4920.8593   184     5430.0000     4910.9490    91027    9.56%
   1175  1079     4943.8808   187     5430.0000     4910.9490    92270    9.56%
   1183  1083     5026.2095   166     5430.0000     4910.9490    93303    9.56%
   1191  1087     4969.9800   175     5430.0000     4910.9490    94562    9.56%
   1203  1093     4916.2674   183     5430.0000     4910.9490    96165    9.56%
   1220  1104     4920.4716   186     5430.0000     4910.9490    98053    9.56%
   1236  1114     4966.2403   182     5430.0000     4910.9490    99952    9.56%
   1263  1128     4963.7922   180     5430.0000     4910.9490   102949    9.56%
   1282  1137     5061.2673   165     5430.0000     4910.9490   105604    9.56%
   1305  1152     5094.3396   158     5430.0000     4910.9490   108254    9.56%
Elapsed time = 83.16 sec. (52911.75 ticks, tree = 24.93 MB, solutions = 14)
   1322  1161     5051.5636   167     5430.0000     4910.9490   110092    9.56%
   1368  1191     5037.7142   170     5430.0000     4910.9490   113810    9.56%
   1401  1214     5042.7634   173     5430.0000     4910.9490   117177    9.56%
   1443  1240     5027.9983   173     5430.0000     4910.9490   121636    9.56%
   1473  1254     5109.4662   160     5430.0000     4910.9490   125256    9.56%
   1498  1269     5132.9707   154     5430.0000     4910.9490   127788    9.56%
   1546  1297     5056.3374   174     5430.0000     4910.9490   132287    9.56%
   1576  1317     5064.9434   170     5430.0000     4910.9490   135755    9.56%
   1595  1327     5118.9718   150     5430.0000     4910.9490   137596    9.56%
   1646  1359     5033.4624   179     5430.0000     4910.9490   143165    9.56%
Elapsed time = 105.57 sec. (65047.85 ticks, tree = 29.48 MB, solutions = 14)
   1674  1378     5038.7033   180     5430.0000     4910.9490   145527    9.56%
   1729  1408     5103.9745   159     5430.0000     4910.9490   150878    9.56%
   1775  1434     5187.6364   147     5430.0000     4910.9490   155312    9.56%
   1802  1450     5164.7494   153     5430.0000     4910.9490   157590    9.56%
   1858  1482     5059.0266   181     5430.0000     4910.9490   162880    9.56%
   1903  1507     5291.4340   141     5430.0000     4910.9490   166493    9.56%
   1940  1528     5220.1680   140     5430.0000     4910.9490   169765    9.56%
   1948  1532     5183.8371   149     5430.0000     4910.9490   170473    9.56%
   2014  1571     5085.2761   170     5430.0000     4910.9490   177293    9.56%
   2054  1592     5120.9853   165     5430.0000     4910.9490   181583    9.56%
Elapsed time = 125.39 sec. (75543.04 ticks, tree = 33.03 MB, solutions = 14)
   2095  1617     5181.7587   157     5430.0000     4910.9490   185637    9.56%
   2139  1640     5203.5626   149     5430.0000     4910.9490   188964    9.56%
   2170  1656     5163.1008   148     5430.0000     4910.9490   191659    9.56%
   2208  1677     5233.9929   140     5430.0000     4910.9490   195565    9.56%
   2245  1702     5186.0990   158     5430.0000     4910.9490   198495    9.56%
   2309  1743     5183.2524   160     5430.0000     4910.9490   204038    9.56%
   2354  1766     5183.7374   157     5430.0000     4910.9490   208322    9.56%
   2357  1768     5155.4636   165     5430.0000     4910.9490   208529    9.56%
   2425  1805     5265.5458   138     5430.0000     4910.9490   214340    9.56%
   2484  1834     5202.8563   155     5430.0000     4910.9490   219993    9.56%
Elapsed time = 147.28 sec. (86731.55 ticks, tree = 37.52 MB, solutions = 14)
   2525  1850     5147.9658   166     5430.0000     4910.9490   223564    9.56%
   2565  1873     5152.0183   163     5430.0000     4910.9490   227024    9.56%
   2584  1884     5207.2588   150     5430.0000     4910.9490   228597    9.56%
   2635  1914     5332.2369   127     5430.0000     4910.9490   233407    9.56%
   2689  1944     5201.6573   157     5430.0000     4910.9490   237548    9.56%
   2746  1977     5199.8616   165     5430.0000     4910.9490   241209    9.56%
   2763  1984     5219.8522   154     5430.0000     4910.9490   243362    9.56%
   2802  2007     5220.8102   165     5430.0000     4910.9490   246616    9.56%
   2878  2052     5218.2775   155     5430.0000     4910.9490   252837    9.56%
   2886  2057     5239.7736   152     5430.0000     4910.9490   253931    9.56%
Elapsed time = 167.21 sec. (97362.29 ticks, tree = 42.54 MB, solutions = 14)
   2946  2089     5188.8336   164     5430.0000     4910.9490   258263    9.56%
   3072  2155     5313.4214   150     5430.0000     4910.9490   267273    9.56%
   3143  2193     5214.6227   162     5430.0000     4910.9490   273103    9.56%
   3187  2211     5226.7132   153     5430.0000     4910.9490   276559    9.56%
   3255  2240     5238.0806   165     5430.0000     4910.9490   283647    9.56%
   3266  2247     4957.6473   182     5430.0000     4910.9490   284714    9.56%

Mixed integer rounding cuts applied:  37
Zero-half cuts applied:  2

Root node processing (before b&c):
  Real time             =    8.84 sec. (7360.68 ticks)
Parallel b&c, 4 threads:
  Real time             =  171.18 sec. (96397.54 ticks)
  Sync time (average)   =    8.78 sec.
  Wait time (average)   =    9.00 sec.
                          ------------
Total (root+branch&cut) =  180.02 sec. (103758.22 ticks)
optimal objective= 5430.0+35609.0=41039.0

Step 4-AdjustFlow
After adjust, flowCost=35376.0
A new better solution has been found. obj=40806.0
Tried aggregator 2 times.
MIP Presolve eliminated 78084 rows and 53877 columns.
Aggregator did 75742 substitutions.
Reduced MIP has 49274 rows, 104985 columns, and 275970 nonzeros.
Reduced MIP has 0 binaries, 67 generals, 0 SOSs, and 0 indicators.
Presolve time = 0.58 sec. (276.77 ticks)
Tried aggregator 1 time.
Reduced MIP has 49274 rows, 104985 columns, and 275970 nonzeros.
Reduced MIP has 0 binaries, 67 generals, 0 SOSs, and 0 indicators.
Presolve time = 0.28 sec. (118.24 ticks)
MIP emphasis: balance optimality and feasibility.
MIP search method: dynamic search.
Parallel mode: deterministic, using up to 4 threads.
Root relaxation solution time = 24.23 sec. (6306.47 ticks)

        Nodes                                         Cuts/
   Node  Left     Objective  IInf  Best Integer    Best Bound    ItCnt     Gap

*     0+    0                       140336.0000   -78342.0000           155.82%
*     0+    0                        47266.0000   -78342.0000           265.75%
      0     0    37990.2759    39    47266.0000    37990.2759       38   19.62%
*     0+    0                        39402.0000    37990.2759             3.58%
      0     0    38147.7567    45    39402.0000    Cuts: 1034     7572    3.18%
      0     0    38204.4529    38    39402.0000    Cuts: 1096    12478    3.04%
      0     0    38232.5394    42    39402.0000  MIRcuts: 784    18260    2.97%
*     0+    0                        39342.0000    38232.5394             2.82%
*     0+    0                        39341.0000    38232.5394             2.82%
*     0+    0                        39329.0000    38232.5394             2.79%
*     0+    0                        39227.0000    38232.5394             2.54%
*     0+    0                        39197.0000    38232.5394             2.46%
      0     0    38250.9830    45    39197.0000  MIRcuts: 820    21916    2.41%
      0     0    38259.5045    44    39197.0000  MIRcuts: 825    25664    2.39%
      0     0    38264.2193    44    39197.0000     Cuts: 724    28518    2.38%
      0     0    38264.6419    44    39197.0000  MIRcuts: 667    30140    2.38%
      0     0    38265.1652    43    39197.0000  MIRcuts: 582    31597    2.38%
Heuristic still looking.
Heuristic still looking.
Heuristic still looking.
      0     2    38265.1652    43    39197.0000    38265.1652    31597    2.38%
Elapsed time = 353.56 sec. (121471.96 ticks, tree = 0.00 MB, solutions = 8)
      1     3    38278.9054    46    39197.0000    38265.1652    36844    2.38%
      2     4    38290.8827    37    39197.0000    38265.1652    42139    2.38%
      3     5    38298.7505    37    39197.0000    38278.9224    44533    2.34%
*     4+    4                        39194.0000    38278.9224             2.33%
      4     6    38312.9903    40    39194.0000    38278.9224    48256    2.33%
*     5+    5                        39193.0000    38278.9224             2.33%
      7     9    38358.4442    42    39193.0000    38278.9224    63807    2.33%
      9    11    38332.1058    41    39193.0000    38278.9224    71682    2.33%
     11    13    38307.6318    36    39193.0000    38298.8535   134827    2.28%
     12    14    38362.9219    41    39193.0000    38298.8535   184823    2.28%
     13    15    38370.0476    39    39193.0000    38298.8535   238463    2.28%
*    14+   14                        39188.0000    38298.8535             2.27%
*    14+   14                        38947.0000    38298.8535             1.66%
     15    16    38435.7926    38    38947.0000    38298.8535   334583    1.66%
Elapsed time = 597.67 sec. (190586.21 ticks, tree = 0.00 MB, solutions = 10)

Mixed integer rounding cuts applied:  877
Gomory fractional cuts applied:  3

Root node processing (before b&c):
  Real time             =  353.47 sec. (121456.00 ticks)
Parallel b&c, 4 threads:
  Real time             =  244.28 sec. (70931.17 ticks)
  Sync time (average)   =   70.84 sec.
  Wait time (average)   =   70.87 sec.
                          ------------
Total (root+branch&cut) =  597.76 sec. (192387.16 ticks)
Intensification optimal objective= 38947.0
# columns in columnManager=67
A new better solution has been found. obj=38947.0
# columns in columnManager=67
===========================new round 2=========================
-------------Start to solve SolveVehicleCoverCGHeuristic()---------------
flowCoverCount=279
Time of first LP solve= 253679
There are 33823 columns added to the model.
Tried aggregator 1 time.
MIP Presolve eliminated 10761 rows and 21113 columns.
MIP Presolve modified 52256 coefficients.
Reduced MIP has 339 rows, 12770 columns, and 151707 nonzeros.
Reduced MIP has 1925 binaries, 10845 generals, 0 SOSs, and 0 indicators.
Presolve time = 0.18 sec. (208.96 ticks)
Found incumbent of value 170679.000000 after 0.21 sec. (241.86 ticks)
Tried aggregator 1 time.
Reduced MIP has 339 rows, 12770 columns, and 151707 nonzeros.
Reduced MIP has 1925 binaries, 10845 generals, 0 SOSs, and 0 indicators.
Presolve time = 0.04 sec. (32.32 ticks)
Probing time = 0.07 sec. (1.56 ticks)
MIP emphasis: balance optimality and feasibility.
MIP search method: dynamic search.
Parallel mode: deterministic, using up to 4 threads.
Root relaxation solution time = 0.10 sec. (46.05 ticks)

        Nodes                                         Cuts/
   Node  Left     Objective  IInf  Best Integer    Best Bound    ItCnt     Gap

*     0+    0                       170679.0000        0.0000           100.00%
*     0+    0                        48797.0000        0.0000           100.00%
*     0+    0                        35202.0000        0.0000           100.00%
      0     0    18197.6721    82    35202.0000    18197.6721      353   48.31%
*     0+    0                        19916.0000    18197.6721             8.63%
*     0+    0                        19338.0000    18197.6721             5.90%
      0     0    18858.6807    74    19338.0000      Cuts: 62      445    2.48%
*     0+    0                        19153.0000    18858.6807             1.54%
      0     0    18878.8619    50    19153.0000      Cuts: 14      464    1.43%
      0     0    18890.0000    61    19153.0000   ZeroHalf: 4      483    1.37%
*     0+    0                        18929.0000    18890.0000             0.21%

Mixed integer rounding cuts applied:  31
Zero-half cuts applied:  18
Lift and project cuts applied:  1
Gomory fractional cuts applied:  12

Root node processing (before b&c):
  Real time             =    0.86 sec. (688.29 ticks)
Parallel b&c, 4 threads:
  Real time             =    0.00 sec. (0.00 ticks)
  Sync time (average)   =    0.00 sec.
  Wait time (average)   =    0.00 sec.
                          ------------
Total (root+branch&cut) =    0.86 sec. (688.29 ticks)
optimal objective= 18929.0+41537.0=60466.0

Step 4-AdjustFlow
After adjust, flowCost=35376.0
Tried aggregator 2 times.
MIP Presolve eliminated 56299 rows and 33007 columns.
Aggregator did 45532 substitutions.
Reduced MIP has 101269 rows, 239809 columns, and 631237 nonzeros.
Reduced MIP has 0 binaries, 139 generals, 0 SOSs, and 0 indicators.
Presolve time = 0.81 sec. (392.69 ticks)
Tried aggregator 1 time.
Reduced MIP has 101269 rows, 239809 columns, and 631237 nonzeros.
Reduced MIP has 0 binaries, 139 generals, 0 SOSs, and 0 indicators.
Presolve time = 0.70 sec. (264.83 ticks)
MIP emphasis: balance optimality and feasibility.
MIP search method: dynamic search.
Parallel mode: deterministic, using up to 4 threads.
Root relaxation solution time = 237.14 sec. (48011.89 ticks)

        Nodes                                         Cuts/
   Node  Left     Objective  IInf  Best Integer    Best Bound    ItCnt     Gap

*     0+    0                        61446.0000   -74918.0000           221.92%
*     0+    0                        48380.0000   -74918.0000           254.85%
*     0+    0                        46184.0000   -74918.0000           262.22%
*     0+    0                        45973.0000   -74918.0000           262.96%
*     0+    0                        45763.0000   -74918.0000           263.71%
*     0+    0                        45561.0000   -74918.0000           264.43%
*     0+    0                        45355.0000   -74918.0000           265.18%
*     0+    0                        44842.0000   -74918.0000           267.07%
      0     0    37802.1401    38    44842.0000    37802.1401       42   15.70%
*     0+    0                        43348.0000    37802.1401            12.79%
*     0+    0                        40516.0000    37802.1401             6.70%
      0     0    37967.0725    46    40516.0000    Cuts: 1343    16053    6.29%

Mixed integer rounding cuts applied:  1865
Gomory fractional cuts applied:  7

Root node processing (before b&c):
  Real time             =  600.13 sec. (160017.52 ticks)
Parallel b&c, 4 threads:
  Real time             =    0.00 sec. (0.00 ticks)
  Sync time (average)   =    0.00 sec.
  Wait time (average)   =    0.00 sec.
                          ------------
Total (root+branch&cut) =  600.13 sec. (160017.52 ticks)
Intensification optimal objective= 40516.0
# columns in columnManager=139
===========================new round 3=========================
-------------Start to solve SolveVehicleCoverCGHeuristic()---------------
flowCoverCount=354
Exception in thread "main" java.lang.OutOfMemoryError: Java heap space
	at ilog.cplex.CplexI.fillXcache(CplexI.java:2284)
	at ilog.cplex.CplexI$SolveHandle.stop(CplexI.java:2624)
	at ilog.cplex.CplexI.solve(CplexI.java:2648)
	at ilog.cplex.IloCplex.solve(IloCplex.java:10294)
	at cg.master.Master.solveMasterProblem(Master.java:465)
	at org.jorlib.frameworks.columnGeneration.master.AbstractMaster.solve(AbstractMaster.java:152)
	at org.jorlib.frameworks.columnGeneration.colgenMain.ColGen.invokeMaster(ColGen.java:271)
	at cg.ColGenConditionalTerminate.solve(ColGenConditionalTerminate.java:88)
	at LocalSearchHeuristicSolver.SolveVehicleCoverCGHeuristic(LocalSearchHeuristicSolver.java:1346)
	at LocalSearchHeuristicSolver.Neighbourhood(LocalSearchHeuristicSolver.java:931)
	at LocalSearchHeuristicSolver.TabuSearch(LocalSearchHeuristicSolver.java:660)
	at LocalSearchHeuristicSolver.main(LocalSearchHeuristicSolver.java:2529)

---------------------------------------------------------------------------------------------------------------
设置 SolveVehicleCoverCGHeuristic() 部分的cg时长为3分钟

number of service arcs=11040
number of holding arcs=960

Time of first LP solve= 239004

There are 47803 columns added to the model.

Tried aggregator 2 times.
MIP Presolve eliminated 196844 rows and 177978 columns.
MIP Presolve modified 133858 coefficients.
Aggregator did 5810 substitutions.
Reduced MIP has 446 rows, 26648 columns, and 297829 nonzeros.
Reduced MIP has 27 binaries, 26417 generals, 0 SOSs, and 0 indicators.
Presolve time = 0.54 sec. (488.31 ticks)
Found incumbent of value 290556.000000 after 0.64 sec. (560.20 ticks)
Tried aggregator 1 time.
Reduced MIP has 446 rows, 26648 columns, and 297829 nonzeros.
Reduced MIP has 27 binaries, 26419 generals, 0 SOSs, and 0 indicators.
Presolve time = 0.07 sec. (52.94 ticks)
Probing time = 0.06 sec. (2.24 ticks)
MIP emphasis: balance optimality and feasibility.
MIP search method: dynamic search.
Parallel mode: deterministic, using up to 4 threads.
Root relaxation solution time = 2.74 sec. (1192.93 ticks)

        Nodes                                         Cuts/
   Node  Left     Objective  IInf  Best Integer    Best Bound    ItCnt     Gap

*     0+    0                       290556.0000    35376.0000            87.82%
*     0+    0                        82987.0000    35376.0000            57.37%
*     0+    0                        46894.0000    35376.0000            24.56%
*     0+    0                        44716.0000    35376.0000            20.89%
*     0+    0                        44179.0000    35376.0000            19.93%
*     0+    0                        44148.0000    35376.0000            19.87%
      0     0    39752.0056   175    44148.0000    39752.0056     1424    9.96%
*     0+    0                        42632.0000    39752.0056             6.76%
      0     0    40239.4481   186    42632.0000      Cuts: 88     2397    5.61%
*     0+    0                        41733.0000    40239.4481             3.58%
      0     0    40308.3660   179    41733.0000   MIRcuts: 30     2900    3.41%
      0     0    40343.0746   182    41733.0000   MIRcuts: 22     3176    3.33%
*     0+    0                        41556.0000    40343.0746             2.92%
      0     0    40354.0369   182    41556.0000   MIRcuts: 17     3378    2.89%
      0     0    40365.4279   182    41556.0000   MIRcuts: 12     3602    2.86%
      0     0    40367.0641   188    41556.0000    MIRcuts: 5     3713    2.86%
      0     0    40367.1705   188    41556.0000    MIRcuts: 1     3750    2.86%
      0     2    40367.1705   188    41556.0000    40367.1705     3750    2.86%
Elapsed time = 13.93 sec. (11423.54 ticks, tree = 0.00 MB, solutions = 9)
      4     6    40367.2620   189    41556.0000    40367.2150     3808    2.86%
      5     7    40484.5460   173    41556.0000    40367.2150     4373    2.86%
     10    12    40521.4436   161    41556.0000    40367.2150     5937    2.86%
     11    13    40383.0191   191    41556.0000    40367.3153     6164    2.86%
     15    17    40393.9304   184    41556.0000    40367.3153     7416    2.86%
     18    20    40396.5785   181    41556.0000    40369.3189     8020    2.86%
     22    24    40397.8452   183    41556.0000    40369.3189     8654    2.86%
     26    28    40413.4528   172    41556.0000    40369.3189     9294    2.86%
     31    33    40414.8899   170    41556.0000    40369.3189    10344    2.86%
     54    56    40590.0493   137    41556.0000    40369.3189    13273    2.86%
Elapsed time = 23.81 sec. (17468.80 ticks, tree = 0.00 MB, solutions = 9)
     76    78    40610.2021   141    41556.0000    40369.3189    16366    2.86%
    108   110    40676.6880   123    41556.0000    40369.3189    20602    2.86%
    136   138    40629.4429   102    41556.0000    40369.3189    24585    2.86%
    142   144    40796.2299    87    41556.0000    40369.3189    25218    2.86%
    201   203    40696.6980   100    41556.0000    40369.3189    31878    2.86%
*   206+  206                        41428.0000    40369.3189             2.56%
    240   242    40876.3952    74    41428.0000    40369.3189    35747    2.56%
    286   288    40897.1615    57    41428.0000    40369.3189    40364    2.56%
*   302+  302                        41258.0000    40369.3189             2.15%
    325   327    40998.2814    38    41258.0000    40369.3189    43896    2.15%
    401   403    41113.6112    22    41258.0000    40369.3189    50739    2.15%
    457   451    41149.3442    19    41258.0000    40369.3189    54916    2.15%
Elapsed time = 45.25 sec. (28251.42 ticks, tree = 10.67 MB, solutions = 11)
    813   513    41122.1919    14    41258.0000    40383.1352    63611    2.12%
*   814+  512                        41229.0000    40383.1352             2.05%
    822   522    40400.9679   172    41229.0000    40383.1352    65273    2.05%
    880   569    40411.5573   173    41229.0000    40383.1352    72445    2.05%
    900   589    40441.5839   161    41229.0000    40383.1352    75504    2.05%
*   926+  613                        41225.0000    40383.1352             2.04%
    989   651    40417.9578   174    41225.0000    40383.1352    84003    2.04%
    994   656    40442.5586   164    41225.0000    40383.1352    84635    2.04%
   1031   693    40505.9999   138    41225.0000    40383.1352    91015    2.04%
   1055   717    40567.2132   132    41225.0000    40383.1352    94623    2.04%
*  1069+  729                        41121.0000    40383.1352             1.79%
   1089   579    40625.7543   104    41121.0000    40383.1352    98958    1.79%
   1093   583    40632.0931    89    41121.0000    40383.1352    99479    1.79%
Elapsed time = 68.41 sec. (41248.68 ticks, tree = 15.03 MB, solutions = 14)
   1190   632    40658.5893    98    41121.0000    40383.1352   106467    1.79%
   1226   658    40744.2493    81    41121.0000    40383.1352   109910    1.79%
   1317   714    40796.9886    83    41121.0000    40383.1352   116608    1.79%
   1355   752    40803.8624    73    41121.0000    40383.1352   120099    1.79%
   1395   792    40856.5260    76    41121.0000    40383.1352   123855    1.79%
   1528   849    40444.3477   177    41121.0000    40383.1352   130198    1.79%
   1560   879    40456.0599   182    41121.0000    40383.1352   132755    1.79%
   1604   917    40469.2815   187    41121.0000    40383.1352   135665    1.79%
   1689   957    40424.3635   183    41121.0000    40389.6219   141720    1.78%
   1721   989    40458.5492   179    41121.0000    40389.6219   144492    1.78%
Elapsed time = 89.04 sec. (51350.87 ticks, tree = 28.26 MB, solutions = 14)
   1760  1028    40486.9467   180    41121.0000    40389.6219   147157    1.78%
   1817  1085    40487.1523   175    41121.0000    40389.6219   151020    1.78%
   1834  1102    40474.5478   192    41121.0000    40389.6219   152071    1.78%
   1944  1212    40486.1024   198    41121.0000    40389.6219   158751    1.78%
   1992  1260    40492.6731   191    41121.0000    40389.6219   161295    1.78%
   2006  1274    40544.9407   179    41121.0000    40389.6219   162121    1.78%
   2066  1334    40511.5294   197    41121.0000    40389.6219   166130    1.78%
   2110  1378    40519.8862   197    41121.0000    40389.6219   169376    1.78%
   2148  1416    40432.8163   190    41121.0000    40389.6219   172163    1.78%
   2193  1461    40404.3537   190    41121.0000    40391.0274   175857    1.78%
Elapsed time = 115.93 sec. (65927.38 ticks, tree = 46.27 MB, solutions = 14)
   2222  1490    40456.9127   190    41121.0000    40391.0274   178202    1.78%
   2261  1529    40438.6543   189    41121.0000    40391.0274   181418    1.78%
   2297  1565    40449.7877   189    41121.0000    40391.0274   184034    1.78%
   2335  1603    40403.4919   197    41121.0000    40403.4919   189062    1.74%
   2337  1605    40406.9004   195    41121.0000    40403.7227   189228    1.74%
   2339  1606    40421.6611   189    41121.0000    40403.7227   189594    1.74%
   2340  1606    40444.8787   179    41121.0000    40403.7227   189979    1.74%
   2343  1607    40482.1236   161    41121.0000    40404.7649   190424    1.74%
   2347  1610    40483.6203   164    41121.0000    40404.7649   191129    1.74%
   2351  1611    40505.9204   161    41121.0000    40404.7649   191870    1.74%
Elapsed time = 166.02 sec. (101692.87 ticks, tree = 61.17 MB, solutions = 14)
   2356  1614    40471.3121   174    41121.0000    40404.7649   192611    1.74%
   2358  1616    40456.7412   178    41121.0000    40404.7649   193289    1.74%
   2362  1618    40423.0721   184    41121.0000    40404.7649   194216    1.74%
   2368  1621    40459.3326   176    41121.0000    40404.7649   195048    1.74%
   2380  1628    40474.3178   172    41121.0000    40404.7649   196873    1.74%
   2390  1635    40440.2770   181    41121.0000    40404.7649   198660    1.74%

Mixed integer rounding cuts applied:  160
Zero-half cuts applied:  1
Lift and project cuts applied:  1

Root node processing (before b&c):
  Real time             =   13.92 sec. (11431.89 ticks)
Parallel b&c, 4 threads:
  Real time             =  166.12 sec. (99008.27 ticks)
  Sync time (average)   =   10.54 sec.
  Wait time (average)   =   10.71 sec.
                          ------------
Total (root+branch&cut) =  180.04 sec. (110440.16 ticks)
optimal objective= 41121.0

artificial: false set: [11072, 11073, 9286, 4999, 11472, 11473, 11474, 274, 11475, 11476, 11477, 11478, 2327, 11098, 9246, 11870, 11871, 11872, 11873, 11874, 11875, 11555, 11876, 11556, 11877, 11557, 11558, 11559, 7208, 11881, 4073, 11882, 11883, 683, 11884, 11885, 5176, 11324, 2877, 11519] start node= 0 start time= 32 capacity type= 2
(9,0)->(9,1)->(9,2)->(9,3)->(9,4)->(9,5)->(9,6)->(9,7)->(13,8)->(1,10)->(1,11)->(17,14)->(17,15)->(17,16)->(17,17)->(17,18)->(17,19)->(17,20)->(17,21)->(17,22)->(4,23)->(17,25)->(17,26)->(17,27)->(17,28)->(17,29)->(17,30)->(0,32)->(0,33)->(0,34)->(10,35)->(10,36)->(10,37)->(10,38)->(10,39)->(10,40)->(7,41)->(5,44)->(5,45)->(9,47)->(9,0):1

artificial: false set: [7556, 2375, 4551, 6797, 2766, 10641, 3794, 11795, 11731, 11417, 11418, 11419, 5020, 11420, 11421, 11422, 11423, 4386, 11497, 11498, 11499, 5743, 10287, 11440, 11376, 11441, 11377, 8052, 11192, 1977] start node= 15 start time= 36 capacity type= 2
(7,0)->(7,1)->(7,2)->(3,8)->(3,9)->(18,15)->(8,16)->(8,17)->(8,18)->(14,19)->(14,20)->(4,23)->(9,25)->(9,26)->(9,27)->(9,28)->(13,29)->(5,30)->(11,31)->(19,33)->(15,35)->(15,36)->(8,39)->(7,41)->(7,42)->(7,43)->(7,44)->(7,45)->(7,46)->(7,47)->(7,0):1

artificial: false set: [2944, 8064, 1219, 1604, 11460, 11078, 4999, 11079, 5321, 11147, 11660, 11661, 11662, 8910, 11473, 11474, 6418, 11475, 11476, 11477, 4501, 11478, 280, 11294, 11295, 11685, 7270, 9768, 7160, 11833, 11834, 11835, 1596, 11836, 6781, 11837, 6719, 10111] start node= 13 start time= 21 capacity type= 2
(15,0)->(9,1)->(9,2)->(9,3)->(9,4)->(9,5)->(9,6)->(9,7)->(13,8)->(2,11)->(2,12)->(13,13)->(5,14)->(5,15)->(5,16)->(1,19)->(2,20)->(13,21)->(13,22)->(18,24)->(16,25)->(16,26)->(16,27)->(16,28)->(16,29)->(16,30)->(18,31)->(12,34)->(8,36)->(8,37)->(0,38)->(0,39)->(0,40)->(10,41)->(12,44)->(12,45)->(12,46)->(12,47)->(15,0):1

artificial: false set: [3009, 7554, 2306, 3013, 4999, 7756, 11726, 11727, 11728, 11729, 6804, 6808, 11289, 3162, 6107, 4061, 7583, 8098, 5027, 8102, 5031, 11756, 11757, 11758, 11312, 9268, 11253, 2357, 11254, 11255, 11256, 6776, 11321, 2425, 2746] start node= 14 start time= 44 capacity type= 2
(4,2)->(17,4)->(4,5)->(9,7)->(13,8)->(5,9)->(5,10)->(11,11)->(14,14)->(14,15)->(14,16)->(14,17)->(14,18)->(4,21)->(4,22)->(4,23)->(4,24)->(4,25)->(14,28)->(7,29)->(5,32)->(5,33)->(15,34)->(9,35)->(13,36)->(5,37)->(15,38)->(9,39)->(13,40)->(5,41)->(5,42)->(14,44)->(14,45)->(14,46)->(14,47)->(4,2):1

artificial: false set: [11968, 11969, 11970, 11971, 11972, 11716, 11973, 11717, 11078, 11974, 11718, 11079, 11975, 11719, 11080, 11976, 11720, 11081, 11977, 11082, 11083, 11084, 1612, 6797, 11085, 11407, 4371, 4501, 10778, 2910, 478, 11424, 11425, 11426, 2604, 4016, 7473, 3636, 7545, 11965, 11966, 11967] start node= 0 start time= 45 capacity type= 2
(8,0)->(8,1)->(8,2)->(8,3)->(14,4)->(14,5)->(14,6)->(14,7)->(14,8)->(14,9)->(4,12)->(19,13)->(19,14)->(19,15)->(19,16)->(19,17)->(19,18)->(19,19)->(19,20)->(19,21)->(19,22)->(19,23)->(19,24)->(19,25)->(19,26)->(2,28)->(13,29)->(5,30)->(7,31)->(7,32)->(14,33)->(6,36)->(8,37)->(0,38)->(0,39)->(0,40)->(0,41)->(0,42)->(0,43)->(0,44)->(0,45)->(0,46)->(8,0):1

artificial: false set: [11776, 11072, 11777, 11073, 11778, 11779, 11780, 4999, 5511, 4488, 9937, 274, 11801, 1306, 11802, 11555, 11556, 8037, 11557, 11558, 7208, 4654, 9268, 2357, 11065, 11066, 11963, 8059, 11067, 10620, 11068, 11069, 11774, 11070, 11775, 11071] start node= 0 start time= 25 capacity type= 2
(18,1)->(17,4)->(4,5)->(9,7)->(13,8)->(1,10)->(19,11)->(19,12)->(15,14)->(15,15)->(15,16)->(15,17)->(15,18)->(15,19)->(15,20)->(15,21)->(8,24)->(0,25)->(0,26)->(0,27)->(0,28)->(0,29)->(0,30)->(0,31)->(0,32)->(0,33)->(0,34)->(10,35)->(10,36)->(10,37)->(10,38)->(10,39)->(15,41)->(15,42)->(15,43)->(8,46)->(18,1):1

artificial: false set: [11456, 11457, 6785, 11458, 2754, 11459, 6211, 7813, 8646, 11527, 11528, 11529, 11530, 5902, 8910, 8079, 5008, 1492, 11349, 3286, 2135, 11160, 2778, 11611, 11612, 11613, 9698, 1513, 5483, 8881, 4404, 11320, 11321, 11835, 11836, 11773, 11837, 11774, 10303] start node= 15 start time= 15 capacity type= 2
(16,1)->(18,2)->(2,4)->(16,6)->(10,7)->(10,8)->(10,9)->(10,10)->(10,11)->(15,13)->(15,14)->(15,15)->(9,16)->(13,17)->(5,18)->(11,19)->(6,21)->(6,22)->(4,23)->(2,24)->(2,25)->(16,27)->(16,28)->(16,29)->(16,30)->(18,31)->(8,32)->(8,33)->(8,34)->(8,35)->(8,36)->(14,37)->(5,40)->(5,41)->(5,42)->(11,43)->(11,44)->(11,45)->(11,46)->(16,1):1

artificial: false set: [11456, 11968, 11457, 11969, 11458, 11970, 11459, 11011, 1347, 11460, 11078, 11079, 11080, 11081, 11082, 11083, 11090, 4501, 11351, 11352, 11353, 11354, 11355, 11356, 284, 5725, 5663, 3629, 11565, 11566, 11574, 11575, 11576, 11577, 11578, 11579, 11580, 11454, 11455, 11967] start node= 0 start time= 38 capacity type= 2
(1,2)->(1,3)->(11,6)->(11,7)->(11,8)->(11,9)->(11,10)->(11,11)->(11,12)->(11,13)->(19,15)->(19,16)->(19,17)->(19,18)->(19,19)->(6,23)->(6,24)->(6,25)->(6,26)->(6,27)->(6,28)->(6,29)->(8,30)->(8,31)->(8,32)->(8,33)->(8,34)->(8,35)->(8,36)->(8,37)->(0,38)->(0,39)->(0,40)->(0,41)->(0,42)->(0,43)->(0,44)->(10,45)->(10,46)->(10,47)->(1,2):1

artificial: false set: [11648, 6784, 6465, 2754, 4999, 11278, 11473, 11474, 11475, 11476, 11477, 2773, 11478, 11606, 11607, 11608, 11609, 11098, 11610, 11099, 6235, 11100, 11101, 2399, 11297, 7208, 3309, 5875, 11830, 8759, 2810, 1214, 1599] start node= 1 start time= 12 capacity type= 2
(9,1)->(9,2)->(9,3)->(9,4)->(9,5)->(9,6)->(9,7)->(13,8)->(1,10)->(1,11)->(1,12)->(1,13)->(1,14)->(2,15)->(13,16)->(5,17)->(5,18)->(11,19)->(16,22)->(16,23)->(5,26)->(12,32)->(12,33)->(5,37)->(11,38)->(11,39)->(11,40)->(11,41)->(11,42)->(11,43)->(6,45)->(4,46)->(4,47)->(9,1):1

artificial: false set: [3009, 7244, 6797, 718, 11857, 11858, 11859, 8084, 9364, 5019, 8098, 6691, 11493, 11494, 11495, 11496, 5033, 11497, 11498, 11692, 11310, 11311, 10095, 11312, 11634, 11507, 11508, 11509, 11510, 11511, 11191, 11512, 11192, 1977, 11706, 11707] start node= 13 start time= 42 capacity type= 2
(17,1)->(17,2)->(17,3)->(17,4)->(3,7)->(3,8)->(3,9)->(18,15)->(12,18)->(12,19)->(15,20)->(9,21)->(9,22)->(9,23)->(9,24)->(9,25)->(9,26)->(9,27)->(13,28)->(13,29)->(5,30)->(5,31)->(5,32)->(5,33)->(15,34)->(9,35)->(9,36)->(9,37)->(9,38)->(9,39)->(9,40)->(9,41)->(13,42)->(13,43)->(13,44)->(1,46)->(17,1):1

artificial: false set: [11072, 6403, 4999, 11400, 3721, 11279, 81, 11989, 11030, 11232, 11233, 11234, 11235, 11236, 7208, 11370, 11371, 11372, 11629, 11373, 11630, 3310, 11631, 11632, 11633, 11634, 11445, 2357, 4534, 1018, 11071] start node= 0 start time= 31 capacity type= 2
(4,0)->(4,1)->(4,2)->(4,3)->(4,4)->(4,5)->(9,7)->(13,8)->(1,10)->(12,13)->(12,14)->(12,15)->(12,16)->(12,17)->(12,18)->(12,19)->(8,21)->(8,22)->(7,24)->(7,25)->(0,31)->(0,32)->(0,33)->(19,37)->(19,38)->(6,42)->(6,43)->(6,44)->(6,45)->(6,46)->(4,47)->(4,0):1

artificial: false set: [9861, 11786, 1483, 11787, 11788, 11789, 11790, 11791, 11792, 11793, 4626, 8022, 11806, 11807, 8098, 11304, 2154, 11436, 11437, 11438, 11439, 11760, 11440, 11761, 11441, 11762, 11763, 11507, 11764, 11508, 11765, 11509, 4790, 4473, 3001, 442] start node= 0 start time= 10 capacity type= 2
(15,0)->(15,1)->(15,2)->(15,3)->(15,4)->(15,5)->(15,6)->(8,9)->(0,10)->(8,12)->(8,13)->(8,14)->(8,15)->(8,16)->(8,17)->(8,18)->(18,21)->(5,24)->(5,25)->(15,26)->(15,27)->(15,28)->(15,29)->(15,30)->(15,31)->(15,32)->(15,33)->(15,34)->(9,35)->(9,36)->(9,37)->(9,38)->(4,42)->(2,43)->(15,46)->(15,47)->(15,0):1

artificial: false set: [2306, 8518, 11399, 4999, 11400, 11098, 11738, 11870, 11358, 11871, 7583, 11359, 11360, 11361, 11362, 11749, 11750, 11751, 7208, 11752, 4009, 11753, 11754, 683, 11755, 7467, 11756, 11757, 11758, 9328, 11827, 3635, 11828, 9268, 4404, 11829, 2357] start node= 14 start time= 26 capacity type= 2
(4,2)->(17,4)->(4,5)->(9,7)->(13,8)->(1,10)->(1,11)->(17,14)->(17,15)->(17,16)->(16,19)->(16,20)->(16,21)->(16,22)->(7,23)->(7,24)->(7,25)->(14,26)->(14,27)->(6,30)->(6,31)->(6,32)->(6,33)->(6,34)->(6,35)->(8,36)->(14,37)->(14,38)->(14,39)->(14,40)->(14,41)->(14,42)->(14,43)->(14,44)->(14,45)->(14,46)->(14,47)->(4,2):1

artificial: false set: [11848, 11849, 11850, 1227, 1612, 11279, 1235, 1620, 8022, 8923, 9692, 11232, 11104, 11233, 11105, 2594, 11106, 11107, 11108, 11109, 11110, 11111, 11112, 11113, 11114, 11050, 11051, 11693, 11694, 11121, 11122, 11955, 10612, 7285, 9783, 4473, 252, 5629, 7231] start node= 0 start time= 10 capacity type= 2
(4,0)->(4,1)->(4,2)->(19,3)->(19,4)->(15,6)->(8,9)->(0,10)->(0,11)->(0,12)->(10,13)->(1,16)->(1,17)->(1,18)->(1,19)->(1,20)->(1,21)->(1,22)->(1,23)->(1,24)->(1,25)->(1,26)->(1,27)->(2,28)->(13,29)->(13,30)->(13,31)->(1,33)->(1,34)->(1,35)->(2,36)->(13,37)->(18,39)->(16,40)->(16,41)->(16,42)->(16,43)->(18,44)->(4,47)->(4,0):1

artificial: false set: [5504, 10561, 7558, 4616, 7240, 2521, 11547, 11995, 11548, 11996, 11549, 11997, 11550, 11998, 11551, 11999, 8098, 5029, 4389, 10283, 11436, 11437, 11438, 11439, 11440, 11952, 11441, 11442, 11507, 11443, 11508, 11444, 6390, 11702, 11703, 1338] start node= 13 start time= 38 capacity type= 2
(19,0)->(19,1)->(12,6)->(8,8)->(18,11)->(8,12)->(8,13)->(8,14)->(8,15)->(8,16)->(8,17)->(8,18)->(8,19)->(8,20)->(8,21)->(14,22)->(4,25)->(10,27)->(10,28)->(10,29)->(10,30)->(10,31)->(10,32)->(15,34)->(9,35)->(9,36)->(9,37)->(13,38)->(13,39)->(13,40)->(1,42)->(19,43)->(19,44)->(19,45)->(19,46)->(19,47)->(19,0):1

artificial: false set: [9286, 11911, 1612, 6797, 2766, 2135, 11160, 11161, 11162, 11163, 11995, 11996, 11997, 11998, 11999, 11105, 8482, 11106, 10659, 6060, 11952, 11953, 11954, 691, 11126, 11127, 9848, 11128, 11129, 1338, 2747, 5887] start node= 1 start time= 38 capacity type= 2
(19,0)->(19,1)->(19,2)->(19,3)->(18,7)->(18,8)->(5,11)->(11,12)->(1,17)->(1,18)->(1,19)->(17,22)->(4,23)->(2,24)->(2,25)->(2,26)->(2,27)->(2,28)->(13,29)->(5,30)->(11,31)->(16,34)->(1,38)->(1,39)->(1,40)->(1,41)->(1,42)->(19,43)->(19,44)->(19,45)->(19,46)->(19,47)->(19,0):1

artificial: false set: [11844, 3271, 1612, 2124, 11149, 11150, 11151, 11152, 11153, 1233, 11154, 11155, 3987, 11156, 7444, 11157, 11158, 11159, 11160, 11161, 11417, 11162, 11418, 11163, 11419, 11420, 11421, 11422, 11423, 8677, 11558, 11559, 11240, 11241, 11242, 11243, 11693, 11694, 11376, 11377, 11378, 1522, 5176, 7231] start node= 13 start time= 30 capacity type= 2
(7,0)->(7,1)->(7,2)->(7,3)->(14,4)->(6,7)->(4,8)->(4,9)->(4,10)->(4,11)->(4,12)->(2,13)->(2,14)->(2,15)->(2,16)->(2,17)->(2,18)->(2,19)->(2,20)->(2,21)->(2,22)->(2,23)->(2,24)->(2,25)->(2,26)->(2,27)->(2,28)->(13,29)->(13,30)->(13,31)->(1,33)->(2,34)->(16,36)->(16,37)->(10,38)->(10,39)->(10,40)->(7,41)->(7,42)->(7,43)->(7,44)->(7,45)->(7,46)->(7,47)->(7,0):1

artificial: false set: [11392, 11652, 11653, 11654, 11655, 11466, 5325, 1041, 11730, 6424, 4507, 284, 11616, 4001, 11617, 11618, 11619, 11620, 11621, 6630, 11111, 11112, 11113, 11114, 11115, 11116, 11117, 11118, 11119, 11120, 7603, 8506, 11387, 11388, 11389, 11390, 11391] start node= 1 start time= 28 capacity type= 2
(12,0)->(12,1)->(12,2)->(12,3)->(12,4)->(12,5)->(12,6)->(16,10)->(7,11)->(7,12)->(7,13)->(7,14)->(7,15)->(7,16)->(7,17)->(14,18)->(14,19)->(1,23)->(1,24)->(1,25)->(1,26)->(1,27)->(1,28)->(1,29)->(1,30)->(1,31)->(1,32)->(1,33)->(12,36)->(12,37)->(12,38)->(12,39)->(12,40)->(8,42)->(8,43)->(0,44)->(10,45)->(12,0):1

artificial: false set: [11200, 11716, 8073, 6797, 11407, 6863, 11408, 7570, 4371, 1622, 5019, 2910, 11426, 2149, 7781, 11495, 11496, 2984, 11497, 11498, 11692, 4017, 2033, 11703, 11704, 11705, 5050, 11706, 11707, 11708, 11709, 11198, 11710, 11199] start node= 13 start time= 42 capacity type= 2
(8,2)->(8,3)->(14,4)->(14,5)->(5,8)->(15,9)->(9,10)->(3,14)->(3,15)->(3,16)->(3,17)->(9,23)->(9,24)->(9,25)->(9,26)->(9,27)->(13,28)->(13,29)->(5,30)->(7,31)->(7,32)->(7,33)->(14,34)->(4,37)->(2,38)->(13,39)->(13,40)->(13,41)->(13,42)->(13,43)->(13,44)->(13,45)->(13,46)->(13,47)->(8,2):1

artificial: false set: [11269, 11270, 11338, 11339, 11340, 6797, 2769, 4626, 6226, 1875, 9813, 3613, 3300, 2535, 11688, 11561, 11689, 11562, 11690, 11563, 11691, 11564, 11692, 5229, 11438, 11310, 11439, 11311, 11440, 11312, 11441, 11186] start node= 13 start time= 24 capacity type= 2
(3,2)->(3,3)->(6,10)->(6,11)->(6,12)->(6,13)->(8,14)->(8,15)->(8,16)->(8,17)->(8,18)->(18,21)->(13,24)->(13,25)->(13,26)->(13,27)->(13,28)->(13,29)->(5,30)->(5,31)->(5,32)->(5,33)->(11,34)->(6,36)->(4,37)->(4,38)->(4,39)->(10,41)->(10,42)->(10,43)->(10,44)->(10,45)->(3,2):1

artificial: false set: [768, 11456, 10308, 454, 3271, 2312, 9226, 7246, 3987, 7444, 4501, 86, 1629, 4641, 10794, 11052, 11180, 11053, 11054, 11055, 11056, 11057, 7730, 11058, 11059, 11060, 11061, 11448, 11449, 11450, 11451, 11452, 11453, 11454, 11455] start node= 0 start time= 13 capacity type= 2
(1,0)->(14,2)->(7,3)->(14,4)->(6,7)->(4,8)->(17,10)->(0,12)->(0,13)->(0,14)->(0,15)->(0,16)->(0,17)->(0,18)->(0,19)->(0,20)->(0,21)->(0,22)->(8,24)->(8,25)->(8,26)->(8,27)->(8,28)->(8,29)->(8,30)->(8,31)->(8,32)->(8,33)->(18,36)->(8,37)->(0,38)->(19,42)->(2,44)->(2,45)->(13,46)->(1,0):1

artificial: false set: [11072, 11073, 7555, 5511, 274, 2326, 8022, 11801, 11802, 9243, 11803, 11804, 11805, 11806, 11807, 4386, 11555, 11556, 11557, 11558, 11880, 11881, 11433, 11882, 11434, 11435, 11436, 11437, 11438, 11439, 11440, 11760, 11441, 11761, 11762, 11763, 11764, 11765, 11069, 11070, 11071] start node= 0 start time= 29 capacity type= 2
(15,0)->(15,1)->(15,2)->(15,3)->(15,4)->(15,5)->(15,6)->(8,9)->(8,10)->(8,11)->(8,12)->(8,13)->(8,14)->(8,15)->(8,16)->(8,17)->(8,18)->(14,19)->(4,22)->(17,24)->(17,25)->(17,26)->(17,27)->(0,29)->(0,30)->(0,31)->(0,32)->(0,33)->(0,34)->(10,35)->(10,36)->(10,37)->(10,38)->(10,39)->(15,41)->(15,42)->(15,43)->(15,44)->(15,45)->(15,46)->(15,47)->(15,0):1

artificial: false set: [3271, 2633, 8910, 6863, 4371, 9236, 7444, 9304, 1630, 9953, 11426, 11240, 11241, 11242, 10794, 2603, 363, 11180, 10669, 11181, 9967, 11890, 11891, 11892, 11893, 11062, 11894, 11063, 11895, 11064, 11065, 11066, 11964] start node= 0 start time= 24 capacity type= 2
(8,2)->(8,3)->(14,4)->(6,7)->(4,8)->(4,9)->(4,10)->(4,11)->(19,12)->(19,13)->(18,17)->(17,20)->(0,22)->(0,23)->(0,24)->(0,25)->(0,26)->(0,27)->(16,30)->(18,31)->(17,34)->(17,35)->(17,36)->(17,37)->(17,38)->(17,39)->(17,40)->(4,41)->(19,42)->(2,44)->(2,45)->(2,46)->(13,47)->(8,2):1

artificial: false set: [11968, 11969, 11970, 10627, 11716, 6797, 3987, 2773, 8085, 6230, 11097, 1306, 5019, 4512, 7589, 11494, 11495, 11368, 11496, 11497, 11498, 11692, 11374, 11310, 11311, 11312, 11313, 11378, 11314, 11315, 11316, 3641, 4602, 11963, 11964, 11965, 11966, 3647, 11967] start node= 1 start time= 9 capacity type= 2
(8,0)->(7,2)->(7,3)->(14,4)->(14,5)->(1,9)->(1,10)->(19,11)->(19,12)->(19,13)->(19,14)->(19,15)->(19,16)->(19,17)->(19,18)->(19,19)->(15,21)->(9,22)->(9,23)->(9,24)->(9,25)->(9,26)->(9,27)->(13,28)->(13,29)->(5,30)->(5,31)->(5,32)->(5,33)->(5,34)->(5,35)->(5,36)->(5,37)->(11,38)->(6,40)->(6,41)->(8,42)->(6,46)->(6,47)->(8,0):1

artificial: false set: [11392, 4999, 6087, 11147, 6797, 2894, 11730, 11731, 11732, 2773, 11606, 8090, 5019, 7583, 4001, 11234, 11235, 11236, 7208, 11304, 812, 11692, 11758, 11310, 11311, 11312, 11313, 11314, 11315, 11316, 2357, 7797, 3001, 1210, 1596, 6781, 11391] start node= 1 start time= 10 capacity type= 2
(4,2)->(4,3)->(4,4)->(4,5)->(9,7)->(13,8)->(1,10)->(2,11)->(2,12)->(13,13)->(5,14)->(7,15)->(7,16)->(7,17)->(14,18)->(14,19)->(14,20)->(14,21)->(5,24)->(5,25)->(15,26)->(9,27)->(13,28)->(13,29)->(5,30)->(5,31)->(5,32)->(5,33)->(5,34)->(5,35)->(5,36)->(5,37)->(11,38)->(11,39)->(1,44)->(14,46)->(14,47)->(4,2):1

artificial: false set: [11786, 11787, 11788, 11789, 11790, 11791, 11792, 9744, 11793, 11730, 9938, 11731, 11732, 11861, 11862, 9367, 2076, 4001, 8098, 5027, 7845, 11943, 11944, 6697, 11945, 11946, 11947, 11948, 11949, 11950, 11951, 8881, 11700, 7285, 11194, 11195] start node= 13 start time= 36 capacity type= 2
(18,0)->(16,1)->(18,2)->(17,5)->(17,6)->(17,7)->(3,10)->(3,11)->(3,12)->(7,17)->(14,18)->(14,19)->(14,20)->(14,21)->(12,25)->(15,26)->(15,27)->(15,28)->(15,29)->(15,30)->(15,31)->(15,32)->(15,33)->(15,34)->(9,35)->(13,36)->(13,37)->(18,39)->(18,40)->(18,41)->(18,42)->(18,43)->(18,44)->(18,45)->(18,46)->(18,47)->(18,0):1

artificial: false set: [11716, 7813, 11717, 11718, 11719, 11720, 3018, 2124, 8016, 6418, 4371, 8665, 11546, 11803, 11547, 11804, 11548, 11805, 11549, 1501, 11806, 11550, 11807, 11823, 11824, 11825, 11826, 11827, 4404, 11828, 11829, 11830, 11831, 11320, 11832, 11321, 7545, 5311] start node= 14 start time= 4 capacity type= 2
(15,0)->(8,3)->(14,4)->(14,5)->(14,6)->(14,7)->(14,8)->(14,9)->(4,12)->(2,13)->(16,15)->(16,16)->(16,17)->(16,18)->(16,19)->(16,20)->(16,21)->(16,22)->(16,23)->(16,24)->(16,25)->(10,26)->(10,27)->(10,28)->(10,29)->(10,30)->(10,31)->(12,34)->(8,36)->(14,37)->(5,40)->(5,41)->(5,42)->(15,43)->(15,44)->(15,45)->(15,46)->(15,47)->(15,0):1

artificial: false set: [11140, 11078, 11079, 11080, 11976, 11081, 11977, 11082, 11978, 11914, 11083, 11979, 11915, 11980, 11916, 11981, 11917, 11982, 11023, 11090, 4501, 3286, 11670, 11671, 7256, 284, 5663, 4386, 11363, 7459, 11565, 11566, 10286, 11439, 11440, 11441, 1203, 3636, 1589, 2615] start node= 13 start time= 6 capacity type= 2
(1,2)->(1,3)->(2,4)->(2,5)->(13,6)->(13,7)->(13,8)->(18,10)->(18,11)->(18,12)->(18,13)->(18,14)->(8,15)->(8,16)->(8,17)->(8,18)->(14,19)->(6,22)->(4,23)->(19,24)->(19,25)->(19,26)->(19,27)->(19,28)->(19,29)->(19,30)->(19,31)->(6,35)->(6,36)->(8,37)->(0,38)->(0,39)->(0,40)->(0,41)->(0,42)->(0,43)->(0,44)->(10,45)->(10,46)->(10,47)->(1,2):1

artificial: false set: [11072, 1985, 11073, 11716, 11717, 11718, 11719, 4488, 11720, 2316, 274, 4371, 11607, 11608, 11609, 11610, 6235, 9374, 11424, 11425, 11426, 11373, 11374, 5555, 10295, 11065, 7545, 11066, 11067, 11068, 11069, 11070, 3647, 11071] start node= 0 start time= 28 capacity type= 2
(8,0)->(8,1)->(8,2)->(8,3)->(14,4)->(14,5)->(14,6)->(14,7)->(14,8)->(14,9)->(4,12)->(17,14)->(3,17)->(18,23)->(8,24)->(0,25)->(0,26)->(0,27)->(0,28)->(0,29)->(0,30)->(0,31)->(0,32)->(0,33)->(0,34)->(10,35)->(11,39)->(11,40)->(11,41)->(11,42)->(11,43)->(6,45)->(6,46)->(6,47)->(8,0):1

artificial: false set: [6278, 4999, 10763, 1230, 1615, 6800, 2773, 8473, 11225, 1306, 11226, 11227, 11228, 1501, 11229, 11230, 11231, 2017, 7208, 11117, 11823, 11824, 11184, 11825, 11313, 11826, 11314, 11827, 11315, 11828, 11316, 11829, 11830, 11831, 11832] start node= 13 start time= 32 capacity type= 2
(3,0)->(3,1)->(9,7)->(13,8)->(1,10)->(19,11)->(2,13)->(16,15)->(16,16)->(16,17)->(16,18)->(16,19)->(16,20)->(16,21)->(16,22)->(16,23)->(16,24)->(16,25)->(1,29)->(1,30)->(2,31)->(13,32)->(5,33)->(5,34)->(5,35)->(5,36)->(5,37)->(11,38)->(3,41)->(3,42)->(3,43)->(3,44)->(3,45)->(3,46)->(3,47)->(3,0):1

artificial: false set: [5504, 4482, 10758, 8903, 11144, 11145, 11146, 11147, 5716, 6804, 2773, 11606, 11607, 11608, 11609, 8665, 11610, 11546, 11611, 11547, 11612, 11548, 11613, 11549, 11614, 11550, 11615, 11551, 3617, 8098, 5027, 355, 9768, 11568, 11569, 11570, 11571, 11830, 1596, 6781, 2750, 6207] start node= 0 start time= 19 capacity type= 2
(11,0)->(11,1)->(11,2)->(11,3)->(11,4)->(19,6)->(2,8)->(2,9)->(2,10)->(2,11)->(2,12)->(13,13)->(5,14)->(11,15)->(6,17)->(8,18)->(0,19)->(16,22)->(16,23)->(18,24)->(16,25)->(10,26)->(10,27)->(10,28)->(10,29)->(10,30)->(10,31)->(10,32)->(15,34)->(9,35)->(13,36)->(5,37)->(11,38)->(11,39)->(11,40)->(11,41)->(11,42)->(11,43)->(11,44)->(11,45)->(11,46)->(11,47)->(11,0):1

artificial: false set: [11840, 11841, 11842, 11843, 11844, 2124, 8910, 11089, 9238, 11415, 2974, 11104, 11105, 11106, 674, 8677, 11238, 11239, 4072, 11240, 11241, 11242, 363, 11243, 7214, 9775, 691, 9269, 5174, 11064, 11065, 11066, 11323, 11324, 11325, 1597] start node= 1 start time= 1 capacity type= 2
(1,1)->(1,2)->(17,5)->(4,6)->(4,7)->(4,8)->(4,9)->(4,10)->(4,11)->(4,12)->(2,13)->(13,14)->(1,16)->(1,17)->(1,18)->(1,19)->(17,22)->(0,24)->(0,25)->(0,26)->(0,27)->(16,30)->(18,31)->(16,32)->(16,33)->(16,34)->(16,35)->(16,36)->(16,37)->(10,38)->(7,39)->(7,40)->(5,43)->(5,44)->(5,45)->(5,46)->(1,1):1

artificial: false set: [11456, 11457, 11458, 11459, 11460, 11078, 11079, 11080, 11081, 8073, 11082, 5002, 11083, 11084, 11085, 11086, 8910, 11087, 4501, 11292, 11040, 11041, 11042, 11043, 11044, 11045, 294, 5870, 11825, 11826, 11827, 11828, 11829, 11830, 11831, 11832, 11833, 11834, 11835, 6779, 11836, 11837, 2749, 10303] start node= 0 start time= 4 capacity type= 2
(0,0)->(0,1)->(0,2)->(0,3)->(0,4)->(0,5)->(0,6)->(15,9)->(9,10)->(13,11)->(5,12)->(5,13)->(11,14)->(16,17)->(16,18)->(16,19)->(16,20)->(16,21)->(16,22)->(16,23)->(16,24)->(16,25)->(16,26)->(16,27)->(16,28)->(16,29)->(16,30)->(18,31)->(8,32)->(8,33)->(8,34)->(8,35)->(8,36)->(8,37)->(0,38)->(0,39)->(0,40)->(0,41)->(0,42)->(0,43)->(0,44)->(0,45)->(0,46)->(0,47)->(0,0):1

artificial: false set: [11456, 448, 11457, 11458, 11459, 11460, 8070, 11078, 4999, 11079, 11080, 11081, 11082, 11083, 8910, 11090, 4626, 1299, 4501, 11925, 11926, 11927, 7256, 284, 5663, 9768, 10282, 11052, 11565, 11053, 11566, 11054, 11055, 10612, 11833, 11834, 4475, 11835, 11836, 11837, 10303] start node= 0 start time= 13 capacity type= 2
(1,2)->(1,3)->(19,4)->(15,6)->(9,7)->(13,8)->(18,10)->(8,11)->(0,12)->(0,13)->(0,14)->(0,15)->(0,16)->(8,18)->(18,21)->(18,22)->(18,23)->(18,24)->(16,25)->(16,26)->(16,27)->(16,28)->(16,29)->(16,30)->(18,31)->(8,32)->(8,33)->(8,34)->(8,35)->(8,36)->(8,37)->(0,38)->(0,39)->(0,40)->(0,41)->(0,42)->(0,43)->(0,44)->(10,45)->(10,46)->(10,47)->(1,2):1

artificial: false set: [11200, 11201, 11202, 11203, 11204, 11205, 11206, 11207, 5191, 11208, 11209, 11210, 11211, 11212, 5517, 11213, 11214, 11215, 8016, 11216, 4507, 284, 11807, 11044, 11045, 11368, 11369, 1905, 4467, 246, 3642, 11196, 11197, 11198, 11199] start node= 0 start time= 4 capacity type= 2
(15,0)->(8,3)->(0,4)->(0,5)->(0,6)->(10,7)->(3,12)->(3,13)->(3,14)->(3,15)->(3,16)->(3,17)->(3,18)->(3,19)->(3,20)->(3,21)->(3,22)->(3,23)->(3,24)->(3,25)->(3,26)->(3,27)->(3,28)->(3,29)->(3,30)->(3,31)->(3,32)->(3,33)->(6,40)->(6,41)->(6,42)->(8,43)->(0,44)->(10,45)->(15,47)->(15,0):1

===========================new round 1=========================
-------------Start to solve SolveVehicleCoverCGHeuristic()---------------
flowCoverCount=221
Time of first LP solve= 148283
There are 44240 columns added to the model.
Tried aggregator 1 time.
MIP Presolve eliminated 10819 rows and 22033 columns.
MIP Presolve modified 166353 coefficients.
Reduced MIP has 281 rows, 22267 columns, and 253521 nonzeros.
Reduced MIP has 487 binaries, 21780 generals, 0 SOSs, and 0 indicators.
Presolve time = 0.30 sec. (314.48 ticks)
Found incumbent of value 149531.000000 after 0.35 sec. (366.40 ticks)
Tried aggregator 1 time.
Reduced MIP has 281 rows, 22267 columns, and 253521 nonzeros.
Reduced MIP has 487 binaries, 21780 generals, 0 SOSs, and 0 indicators.
Presolve time = 0.07 sec. (50.21 ticks)
Probing time = 0.06 sec. (1.82 ticks)
MIP emphasis: balance optimality and feasibility.
MIP search method: dynamic search.
Parallel mode: deterministic, using up to 4 threads.
Root relaxation solution time = 2.24 sec. (1151.20 ticks)

        Nodes                                         Cuts/
   Node  Left     Objective  IInf  Best Integer    Best Bound    ItCnt     Gap

*     0+    0                       149531.0000        0.0000           100.00%
*     0+    0                        28930.0000        0.0000           100.00%
*     0+    0                         9182.0000        0.0000           100.00%
*     0+    0                         7428.0000        0.0000           100.00%
*     0+    0                         7066.0000        0.0000           100.00%
      0     0     4726.0402   179     7066.0000     4726.0402       59   33.12%
*     0+    0                         6645.0000     4726.0402            28.88%
      0     0     5003.3445   182     6645.0000      Cuts: 41      583   24.71%
*     0+    0                         6053.0000     5003.3445            17.34%
      0     0     5009.0624   180     6053.0000       Cuts: 8      686   17.25%
      0     0     5019.6841   183     6053.0000       Cuts: 8      841   17.07%
*     0+    0                         5639.0000     5019.6841            10.98%
      0     0     5026.4762   183     5639.0000    MIRcuts: 3      967   10.86%
      0     0     5026.4956   183     5639.0000    MIRcuts: 1      976   10.86%
      0     2     5026.4956   183     5639.0000     5026.4956      976   10.86%
Elapsed time = 8.25 sec. (6997.25 ticks, tree = 0.00 MB, solutions = 8)
      2     4     5071.8287   175     5639.0000     5026.4956     1337   10.86%
      4     6     5093.9667   165     5639.0000     5026.5249     1636   10.86%
      9    11     5108.2638   163     5639.0000     5026.5249     2370   10.86%
     15    17     5045.4636   175     5639.0000     5026.8780     3296   10.86%
     25    27     5119.6013   159     5639.0000     5032.6243     4291   10.75%
     33    35     5121.8938   170     5639.0000     5032.6243     5643   10.75%
     38    40     5131.0917   153     5639.0000     5033.4073     6202   10.74%
     50    52     5151.5078   139     5639.0000     5033.4073     8114   10.74%
     60    62     5085.4245   158     5639.0000     5033.4073     9417   10.74%
     91    93     5152.5195   146     5639.0000     5033.4073    13110   10.74%
Elapsed time = 14.52 sec. (11084.29 ticks, tree = 0.00 MB, solutions = 8)
    138   140     5181.5427   130     5639.0000     5033.4073    18429   10.74%
    214   214     5305.1810    95     5639.0000     5033.4073    24612   10.74%
    278   274     5106.5079   154     5639.0000     5033.4139    29805   10.74%
*   343   331      integral     0     5573.0000     5033.4139    34267    9.68%
    358   323     5159.4832   143     5573.0000     5033.4139    35777    9.68%
    391   356     5144.2990   148     5573.0000     5033.4139    39652    9.68%
*   396   359      integral     0     5511.0000     5033.4139    39957    8.67%
    426   362     5141.2244   140     5511.0000     5033.4139    44358    8.67%
    470   406     5153.9535   134     5511.0000     5033.4139    49484    8.67%
*   506+  440                         5497.0000     5033.4139             8.43%
    506   442     5178.9464   124     5497.0000     5033.4139    53558    8.43%
    619   535     5061.9008   184     5497.0000     5035.7732    62402    8.39%
    692   600     5115.9208   167     5497.0000     5035.7732    67234    8.39%
Elapsed time = 35.48 sec. (23302.35 ticks, tree = 12.14 MB, solutions = 11)
    752   652     5065.1613   185     5497.0000     5035.7732    70929    8.39%
    820   720     5088.0085   176     5497.0000     5035.7732    74622    8.39%
*   825+  723                         5425.0000     5035.7732             7.17%
    894   700     5101.4262   178     5425.0000     5035.7732    78570    7.17%
    988   794     5132.8289   190     5425.0000     5035.7732    83124    7.17%
   1022   828     5131.0717   179     5425.0000     5035.7732    84941    7.17%
   1170   976     5174.4139   190     5425.0000     5035.7732    91784    7.17%
   1275  1081     5037.3887   192     5425.0000     5037.3887    98766    7.14%
   1276  1082     5039.0641   190     5425.0000     5037.3887    98869    7.14%
   1277  1083     5040.5460   192     5425.0000     5037.4471    98947    7.14%
   1281  1087     5086.2694   175     5425.0000     5037.4471    99896    7.14%
Elapsed time = 72.62 sec. (52031.24 ticks, tree = 28.23 MB, solutions = 12)
   1284  1087     5091.6739   172     5425.0000     5040.5515   100327    7.09%
   1290  1091     5045.0554   195     5425.0000     5040.7509   100976    7.08%
   1294  1093     5062.8668   180     5425.0000     5040.7509   101644    7.08%
   1303  1098     5046.6253   195     5425.0000     5040.7509   102644    7.08%
   1308  1101     5057.0246   180     5425.0000     5040.7509   103750    7.08%
   1315  1104     5076.0617   183     5425.0000     5040.7509   104479    7.08%
   1326  1109     5073.0490   184     5425.0000     5040.7509   106013    7.08%
   1343  1121     5161.4965   166     5425.0000     5040.7509   108265    7.08%
   1362  1133     5073.1961   188     5425.0000     5040.7509   110971    7.08%
   1385  1147     5171.5370   158     5425.0000     5040.7509   113871    7.08%
Elapsed time = 92.03 sec. (63881.22 ticks, tree = 27.30 MB, solutions = 12)
   1405  1160     5094.0981   172     5425.0000     5040.7509   116651    7.08%
   1423  1169     5181.8872   150     5425.0000     5040.7509   119382    7.08%
   1444  1182     5107.0774   174     5425.0000     5040.7509   121813    7.08%
   1480  1203     5174.9082   146     5425.0000     5040.7509   125664    7.08%
   1509  1221     5159.0770   162     5425.0000     5040.7509   128138    7.08%
   1538  1238     5214.5848   145     5425.0000     5040.7509   131459    7.08%
   1573  1259     5113.5395   161     5425.0000     5040.7509   135197    7.08%
   1592  1270     5093.9386   187     5425.0000     5040.7509   136905    7.08%
   1620  1281     5133.7055   171     5425.0000     5040.7509   140173    7.08%
   1654  1300     5178.7466   161     5425.0000     5040.7509   143531    7.08%
Elapsed time = 110.98 sec. (74338.14 ticks, tree = 30.10 MB, solutions = 12)
   1685  1317     5123.2521   191     5425.0000     5040.7509   146914    7.08%
   1722  1339     5106.3862   182     5425.0000     5040.7509   150496    7.08%
   1747  1354     5292.3566   140     5425.0000     5040.7509   154107    7.08%
   1750  1357     5102.3292   191     5425.0000     5040.7509   154519    7.08%
   1815  1395     5172.3262   165     5425.0000     5040.7509   161612    7.08%
   1866  1424     5167.2851   175     5425.0000     5040.7509   167922    7.08%
   1901  1441     5132.0746   178     5425.0000     5040.7509   171082    7.08%
   1951  1474     5125.4897   175     5425.0000     5040.7509   175700    7.08%
   1991  1488     5161.6927   161     5425.0000     5040.7509   180118    7.08%
   2044  1513     5197.9837   158     5425.0000     5040.7509   184990    7.08%
Elapsed time = 134.51 sec. (88018.13 ticks, tree = 34.30 MB, solutions = 12)
   2070  1524     5192.3983   162     5425.0000     5040.7509   187201    7.08%
   2109  1548     5129.0528   165     5425.0000     5040.7509   192652    7.08%
   2113  1551     5092.7750   171     5425.0000     5040.7509   192785    7.08%
   2177  1587     5204.0943   163     5425.0000     5040.7509   199263    7.08%
   2225  1618     5164.0622   171     5425.0000     5040.7509   203868    7.08%
   2250  1633     5166.5757   161     5425.0000     5040.7509   206695    7.08%
   2284  1652     5213.2549   159     5425.0000     5040.7509   209457    7.08%
   2324  1675     5187.7021   169     5425.0000     5040.7509   213214    7.08%
   2369  1699     5152.1614   172     5425.0000     5040.7509   217899    7.08%
   2402  1721     5219.4417   163     5425.0000     5040.7509   220825    7.08%
Elapsed time = 154.43 sec. (99415.47 ticks, tree = 38.10 MB, solutions = 12)
   2448  1751     5233.4480   149     5425.0000     5040.7509   224936    7.08%
   2480  1764     5197.5550   169     5425.0000     5040.7509   228762    7.08%
   2516  1785     5237.3457   162     5425.0000     5040.7509   231394    7.08%
   2564  1811     5202.4817   168     5425.0000     5040.7509   235078    7.08%
   2596  1832     5206.0624   170     5425.0000     5040.7509   237894    7.08%
   2632  1852     5182.8775   159     5425.0000     5040.7509   240742    7.08%
   2653  1865     5232.3006   160     5425.0000     5040.7509   242689    7.08%
   2671  1877     5294.4601   144     5425.0000     5040.7509   244729    7.08%
   2729  1920     5281.0600   134     5425.0000     5040.7509   250397    7.08%
   2759  1935     5290.4387   155     5425.0000     5040.7509   253396    7.08%
Elapsed time = 172.94 sec. (109440.29 ticks, tree = 42.34 MB, solutions = 12)
   2808  1962     5278.5752   153     5425.0000     5040.7509   257981    7.08%
   2850  1990     5303.3392   144     5425.0000     5040.7509   261790    7.08%
   2893  2014     5298.4545   143     5425.0000     5040.7509   265922    7.08%

Mixed integer rounding cuts applied:  81
Zero-half cuts applied:  7

Root node processing (before b&c):
  Real time             =    8.23 sec. (6991.47 ticks)
Parallel b&c, 4 threads:
  Real time             =  171.80 sec. (106293.86 ticks)
  Sync time (average)   =    8.82 sec.
  Wait time (average)   =    9.05 sec.
                          ------------
Total (root+branch&cut) =  180.03 sec. (113285.33 ticks)
optimal objective= 5425.0+35536.0=40961.0

Step 4-AdjustFlow
After adjust, flowCost=35428.0
A new better solution has been found. obj=40853.0
Tried aggregator 2 times.
MIP Presolve eliminated 81414 rows and 57388 columns.
Aggregator did 77767 substitutions.
Reduced MIP has 43919 rows, 93276 columns, and 245947 nonzeros.
Reduced MIP has 0 binaries, 70 generals, 0 SOSs, and 0 indicators.
Presolve time = 0.56 sec. (267.86 ticks)
Tried aggregator 1 time.
Reduced MIP has 43919 rows, 93276 columns, and 245947 nonzeros.
Reduced MIP has 0 binaries, 70 generals, 0 SOSs, and 0 indicators.
Presolve time = 0.23 sec. (105.18 ticks)
MIP emphasis: balance optimality and feasibility.
MIP search method: dynamic search.
Parallel mode: deterministic, using up to 4 threads.
Root relaxation solution time = 19.59 sec. (5687.36 ticks)

        Nodes                                         Cuts/
   Node  Left     Objective  IInf  Best Integer    Best Bound    ItCnt     Gap

*     0+    0                       129403.0000   -71381.0000           155.16%
*     0+    0                        48383.0000   -71381.0000           247.53%
*     0+    0                        45257.0000   -71381.0000           257.72%
      0     0    38097.7205    41    45257.0000    38097.7205       42   15.82%
*     0+    0                        39530.0000    38097.7205             3.62%
      0     0    38220.7267    43    39530.0000     Cuts: 884     5704    3.31%
      0     0    38279.2014    40    39530.0000     Cuts: 806    10571    3.16%
      0     0    38297.5276    41    39530.0000  MIRcuts: 725    16050    3.12%
*     0+    0                        39503.0000    38297.5276             3.05%
*     0+    0                        39493.0000    38297.5276             3.03%
*     0+    0                        39450.0000    38297.5276             2.92%
*     0+    0                        39442.0000    38297.5276             2.90%
*     0+    0                        39414.0000    38297.5276             2.83%
*     0+    0                        39302.0000    38297.5276             2.56%
      0     0    38309.7104    38    39302.0000  MIRcuts: 630    20598    2.52%
      0     0    38326.3184    41    39302.0000  MIRcuts: 672    26006    2.48%
      0     0    38327.6564    39    39302.0000  MIRcuts: 602    27621    2.48%
      0     0    38328.3386    42    39302.0000  MIRcuts: 526    29284    2.48%
Heuristic still looking.
Heuristic still looking.
Heuristic still looking.
      0     2    38328.3386    42    39302.0000    38328.3386    29284    2.48%
Elapsed time = 267.69 sec. (105177.34 ticks, tree = 0.00 MB, solutions = 10)
      1     3    38329.2373    38    39302.0000    38328.3386    30520    2.48%
      2     4    38329.8472    38    39302.0000    38328.5759    32609    2.48%
      3     5    38426.3912    38    39302.0000    38328.5759    40039    2.48%
      5     7    38428.6923    34    39302.0000    38328.5759    47504    2.48%
      6     8    38349.1242    34    39302.0000    38329.9738    50975    2.47%
*     8+    8                        39294.0000    38329.9738             2.45%
*     8+    8                        39286.0000    38329.9738             2.43%
      8    10    38420.1710    35    39286.0000    38329.9738    59517    2.43%
*     9+    9                        39276.0000    38329.9738             2.41%
     10    12    38358.3376    39    39276.0000    38329.9738    73565    2.41%
     11    13    38477.6132    34    39276.0000    38329.9738    87791    2.41%
     12    14    38462.9737    37    39276.0000    38329.9738   102180    2.41%
     13    15    38462.9212    41    39276.0000    38329.9738   116236    2.41%
Elapsed time = 399.89 sec. (150395.33 ticks, tree = 0.00 MB, solutions = 13)
     14    16    38471.6182    34    39276.0000    38329.9738   136781    2.41%
     16    18    38406.8603    35    39276.0000    38349.5141   165616    2.36%
     20    22    38368.5513    32    39276.0000    38349.5141   190795    2.36%
     24    26    38496.6448    32    39276.0000    38349.5141   209837    2.36%
     25    27    38375.5092    33    39276.0000    38358.4367   212663    2.34%
     29    31    38428.6355    28    39276.0000    38358.4367   228472    2.34%
     33    35    38404.3750    30    39276.0000    38358.4367   242554    2.34%
     37    39    38393.6972    32    39276.0000    38358.4367   261907    2.34%
     46    48    38423.7685    35    39276.0000    38358.4367   289269    2.34%
     48    50    38609.6742    29    39276.0000    38358.4367   294531    2.34%
Elapsed time = 764.03 sec. (230087.45 ticks, tree = 0.00 MB, solutions = 13)
     76    78    38484.0015    26    39276.0000    38358.4367   349972    2.34%
     80    82    38487.9841    21    39276.0000    38358.4367   358017    2.34%
     84    86    38504.9226    24    39276.0000    38358.4367   362920    2.34%
     88    90    38514.9123    20    39276.0000    38358.4367   369192    2.34%
     90    92    38656.5721    27    39276.0000    38358.4367   372961    2.34%
     94    96    38674.8964    25    39276.0000    38358.4367   379877    2.34%
     98   100    38708.0062    24    39276.0000    38358.4367   388913    2.34%
*   101+  101                        39165.0000    38358.4367             2.06%
    102   104    38713.2162    25    39165.0000    38358.4367   393910    2.06%
    106   108    38722.6791    22    39165.0000    38358.4367   399576    2.06%
    110   112    38728.0052    24    39165.0000    38358.4367   405458    2.06%
Elapsed time = 899.96 sec. (263568.76 ticks, tree = 0.00 MB, solutions = 13)
*   128+  128                        39138.0000    38358.4367             1.99%

Mixed integer rounding cuts applied:  656
Gomory fractional cuts applied:  1

Root node processing (before b&c):
  Real time             =  267.63 sec. (105169.46 ticks)
Parallel b&c, 4 threads:
  Real time             =  632.47 sec. (158466.27 ticks)
  Sync time (average)   =   83.19 sec.
  Wait time (average)   =   83.25 sec.
                          ------------
Total (root+branch&cut) =  900.10 sec. (263635.72 ticks)
Intensification optimal objective= 39138.0
# columns in columnManager=70
A new better solution has been found. obj=39138.0
# columns in columnManager=70
===========================new round 2=========================
-------------Start to solve SolveVehicleCoverCGHeuristic()---------------
flowCoverCount=289
Time of first LP solve= 234638
There are 33956 columns added to the model.
Tried aggregator 1 time.
MIP Presolve eliminated 10751 rows and 20619 columns.
MIP Presolve modified 58178 coefficients.
Reduced MIP has 349 rows, 13397 columns, and 162372 nonzeros.
Reduced MIP has 1485 binaries, 11912 generals, 0 SOSs, and 0 indicators.
Presolve time = 0.18 sec. (205.20 ticks)
Found incumbent of value 172968.000000 after 0.21 sec. (238.32 ticks)
Tried aggregator 1 time.
Reduced MIP has 349 rows, 13397 columns, and 162372 nonzeros.
Reduced MIP has 1485 binaries, 11912 generals, 0 SOSs, and 0 indicators.
Presolve time = 0.04 sec. (34.37 ticks)
Probing time = 0.07 sec. (1.47 ticks)
MIP emphasis: balance optimality and feasibility.
MIP search method: dynamic search.
Parallel mode: deterministic, using up to 4 threads.
Root relaxation solution time = 0.15 sec. (83.08 ticks)

        Nodes                                         Cuts/
   Node  Left     Objective  IInf  Best Integer    Best Bound    ItCnt     Gap

*     0+    0                       172968.0000        0.0000           100.00%
*     0+    0                        45469.0000        0.0000           100.00%
*     0+    0                        30895.0000        0.0000           100.00%
*     0+    0                        29766.0000        0.0000           100.00%
      0     0    16588.8427   102    29766.0000    16588.8427      505   44.27%
*     0+    0                        17941.0000    16588.8427             7.54%
*     0+    0                        17292.0000    16588.8427             4.07%
      0     0    17086.8110    90    17292.0000      Cuts: 46      583    1.19%
      0     0    17119.0774   105    17292.0000      Cuts: 18      629    1.00%
*     0+    0                        17175.0000    17119.0774             0.33%

Mixed integer rounding cuts applied:  22
Zero-half cuts applied:  16
Gomory fractional cuts applied:  7

Root node processing (before b&c):
  Real time             =    0.94 sec. (734.57 ticks)
Parallel b&c, 4 threads:
  Real time             =    0.00 sec. (0.00 ticks)
  Sync time (average)   =    0.00 sec.
  Wait time (average)   =    0.00 sec.
                          ------------
Total (root+branch&cut) =    0.94 sec. (734.57 ticks)
optimal objective= 17175.0+41283.0=58458.0

Step 4-AdjustFlow
After adjust, flowCost=35376.0
Tried aggregator 2 times.
MIP Presolve eliminated 57949 rows and 34778 columns.
Aggregator did 51114 substitutions.
Reduced MIP has 94037 rows, 218986 columns, and 576170 nonzeros.
Reduced MIP has 0 binaries, 138 generals, 0 SOSs, and 0 indicators.
Presolve time = 0.75 sec. (375.59 ticks)
Tried aggregator 1 time.
Reduced MIP has 94037 rows, 218986 columns, and 576170 nonzeros.
Reduced MIP has 0 binaries, 138 generals, 0 SOSs, and 0 indicators.
Presolve time = 0.60 sec. (242.47 ticks)
MIP emphasis: balance optimality and feasibility.
MIP search method: dynamic search.
Parallel mode: deterministic, using up to 4 threads.
Root relaxation solution time = 108.41 sec. (33617.07 ticks)

        Nodes                                         Cuts/
   Node  Left     Objective  IInf  Best Integer    Best Bound    ItCnt     Gap

*     0+    0                        58389.0000   -70788.0000           221.24%
*     0+    0                        48055.0000   -70788.0000           247.31%
*     0+    0                        47111.0000   -70788.0000           250.26%
*     0+    0                        47043.0000   -70788.0000           250.48%
*     0+    0                        46303.0000   -70788.0000           252.88%
      0     0    37940.8358    42    46303.0000    37940.8358       35   18.06%
*     0+    0                        40355.0000    37940.8358             5.98%
      0     0    38094.6333    47    40355.0000    Cuts: 1278    17915    5.60%
      0     0    38143.3203    49    40355.0000 MIRcuts: 1310    30645    5.48%
      0     0    38164.3405    41    40355.0000 MIRcuts: 1391    39696    5.43%
*     0+    0                        40063.0000    38164.3405             4.74%
*     0+    0                        39646.0000    38164.3405             3.74%
*     0+    0                        39634.0000    38164.3405             3.71%
*     0+    0                        39473.0000    38164.3405             3.32%
      0     0    38166.4014    47    39473.0000 MIRcuts: 1150    46918    3.31%
      0     0    38173.6030    48    39473.0000  MIRcuts: 928    56575    3.29%

Mixed integer rounding cuts applied:  1114
Gomory fractional cuts applied:  2

Root node processing (before b&c):
  Real time             =  900.04 sec. (277587.79 ticks)
Parallel b&c, 4 threads:
  Real time             =    0.00 sec. (0.00 ticks)
  Sync time (average)   =    0.00 sec.
  Wait time (average)   =    0.00 sec.
                          ------------
Total (root+branch&cut) =  900.04 sec. (277587.79 ticks)
Intensification optimal objective= 39473.0
# columns in columnManager=138
===========================new round 3=========================
-------------Start to solve SolveVehicleCoverCGHeuristic()---------------
flowCoverCount=313
Time of first LP solve= 250193
There are 33805 columns added to the model.
Tried aggregator 1 time.
MIP Presolve eliminated 10730 rows and 20870 columns.
MIP Presolve modified 59590 coefficients.
Reduced MIP has 370 rows, 12995 columns, and 141669 nonzeros.
Reduced MIP has 1920 binaries, 11075 generals, 0 SOSs, and 0 indicators.
Presolve time = 0.21 sec. (231.08 ticks)
Found incumbent of value 169235.000000 after 0.24 sec. (267.91 ticks)
Tried aggregator 1 time.
Reduced MIP has 370 rows, 12995 columns, and 141669 nonzeros.
Reduced MIP has 1920 binaries, 11075 generals, 0 SOSs, and 0 indicators.
Presolve time = 0.04 sec. (30.90 ticks)
Probing time = 3.32 sec. (1.24 ticks)
MIP emphasis: balance optimality and feasibility.
MIP search method: dynamic search.
Parallel mode: deterministic, using up to 4 threads.
Root relaxation solution time = 0.10 sec. (60.98 ticks)

        Nodes                                         Cuts/
   Node  Left     Objective  IInf  Best Integer    Best Bound    ItCnt     Gap

*     0+    0                       169235.0000        0.0000           100.00%
*     0+    0                        53561.0000        0.0000           100.00%
*     0+    0                        40065.0000        0.0000           100.00%
*     0+    0                        37237.0000        0.0000           100.00%
      0     0    19127.5714    91    37237.0000    19127.5714      461   48.63%
*     0+    0                        20832.0000    19127.5714             8.18%
*     0+    0                        19775.0000    19127.5714             3.27%
      0     0    19392.8842    98    19775.0000      Cuts: 35      558    1.93%
      0     0    19480.5109    95    19775.0000      Cuts: 14      600    1.49%
      0     0    19493.6019   107    19775.0000       Cuts: 9      622    1.42%
      0     0    19500.1960    95    19775.0000      Cuts: 10      640    1.39%
      0     0    19504.1453    99    19775.0000       Cuts: 3      668    1.37%
      0     0    19504.8785   115    19775.0000       Cuts: 3      684    1.37%
*     0+    0                        19597.0000    19504.8785             0.47%

Mixed integer rounding cuts applied:  24
Zero-half cuts applied:  23
Gomory fractional cuts applied:  2

Root node processing (before b&c):
  Real time             =    4.42 sec. (936.44 ticks)
Parallel b&c, 4 threads:
  Real time             =    0.00 sec. (0.00 ticks)
  Sync time (average)   =    0.00 sec.
  Wait time (average)   =    0.00 sec.
                          ------------
Total (root+branch&cut) =    4.42 sec. (936.44 ticks)
optimal objective= 19597.0+40810.0=60407.0

Step 4-AdjustFlow
After adjust, flowCost=35406.0
Tried aggregator 2 times.
MIP Presolve eliminated 50754 rows and 27508 columns.
Aggregator did 36997 substitutions.
Reduced MIP has 115349 rows, 292138 columns, and 777259 nonzeros.
Reduced MIP has 0 binaries, 200 generals, 0 SOSs, and 0 indicators.
Presolve time = 0.85 sec. (438.79 ticks)
Tried aggregator 1 time.
Reduced MIP has 115349 rows, 292138 columns, and 777259 nonzeros.
Reduced MIP has 0 binaries, 200 generals, 0 SOSs, and 0 indicators.
Presolve time = 0.82 sec. (319.31 ticks)
MIP emphasis: balance optimality and feasibility.
MIP search method: dynamic search.
Parallel mode: deterministic, using up to 4 threads.
Root relaxation solution time = 262.75 sec. (74532.20 ticks)

        Nodes                                         Cuts/
   Node  Left     Objective  IInf  Best Integer    Best Bound    ItCnt     Gap

*     0+    0                        69792.0000   -74908.0000           207.33%
*     0+    0                        51538.0000   -74908.0000           245.35%
*     0+    0                        51082.0000   -74908.0000           246.64%
*     0+    0                        50800.0000   -74908.0000           247.46%
*     0+    0                        50026.0000   -74908.0000           249.74%
*     0+    0                        49135.0000   -74908.0000           252.45%
      0     0    37885.9415    44    49135.0000    37885.9415       38   22.89%
*     0+    0                        44606.0000    37885.9415            15.07%
*     0+    0                        40579.0000    37885.9415             6.64%
      0     0    38061.8022    39    40579.0000    Cuts: 1417    28774    6.20%

Mixed integer rounding cuts applied:  1917
Gomory fractional cuts applied:  4

Root node processing (before b&c):
  Real time             =  900.20 sec. (267997.81 ticks)
Parallel b&c, 4 threads:
  Real time             =    0.00 sec. (0.00 ticks)
  Sync time (average)   =    0.00 sec.
  Wait time (average)   =    0.00 sec.
                          ------------
Total (root+branch&cut) =  900.20 sec. (267997.81 ticks)
Intensification optimal objective= 40579.0
# columns in columnManager=200
===========================new round 4=========================
上述实验跑了很久round 4 的cover cg解不出来，还是存在问题