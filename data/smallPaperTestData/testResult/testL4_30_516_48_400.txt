LocalSearchHeuristicSolver solver = new LocalSearchHeuristicSolver("./data/testset/testL4_30_516_48_400.txt", 2,5,3,5,480);
solver.TabuSearch(solutionList.get(0),10,500);
intensify  15mins

number of service arcs=24768
number of holding arcs=1440

Time of first LP solve= 2348283

There are 125541 columns added to the model.

Tried aggregator 2 times.
MIP Presolve eliminated 588122 rows and 523744 columns.
MIP Presolve modified 475963 coefficients.
Aggregator did 11847 substitutions.
Reduced MIP has 889 rows, 83114 columns, and 1162168 nonzeros.
Reduced MIP has 161 binaries, 82539 generals, 0 SOSs, and 0 indicators.
Presolve time = 2.28 sec. (1642.86 ticks)
Found incumbent of value 3.0028879e+08 after 2.86 sec. (2164.19 ticks)
Tried aggregator 1 time.
Reduced MIP has 889 rows, 83114 columns, and 1162168 nonzeros.
Reduced MIP has 161 binaries, 82542 generals, 0 SOSs, and 0 indicators.
Presolve time = 0.32 sec. (198.62 ticks)
Probing time = 0.06 sec. (8.48 ticks)
MIP emphasis: balance optimality and feasibility.
MIP search method: dynamic search.
Parallel mode: deterministic, using up to 4 threads.
Root relaxation solution time = 24.41 sec. (9613.07 ticks)

        Nodes                                         Cuts/
   Node  Left     Objective  IInf  Best Integer    Best Bound    ItCnt     Gap

*     0+    0                       3.00289e+08    65355.0000            99.98%
*     0+    0                       110040.0000    65355.0000            40.61%
*     0+    0                        82324.0000    65355.0000            20.61%
*     0+    0                        80265.0000    65355.0000            18.58%
*     0+    0                        79441.0000    65355.0000            17.73%
*     0+    0                        79333.0000    65355.0000            17.62%
      0     0    71993.7103   362    79333.0000    71993.7103       83    9.25%
      0     0    72683.7945   383    79333.0000     Cuts: 131     2608    8.38%
      0     0    72773.5757   383    79333.0000   MIRcuts: 33     3815    8.27%
      0     0    72822.2493   373    79333.0000   MIRcuts: 23     4675    8.21%
      0     0    72839.0073   370    79333.0000   MIRcuts: 11     5203    8.19%
      0     0    72841.3745   374    79333.0000    MIRcuts: 3     5344    8.18%
      0     0    72842.5062   374    79333.0000    MIRcuts: 4     5448    8.18%
Heuristic still looking.
      0     2    72842.5062   374    79333.0000    72842.5062     5448    8.18%
Elapsed time = 120.94 sec. (61702.18 ticks, tree = 0.00 MB, solutions = 6)
      2     4    72971.7796   367    79333.0000    72842.5062     6514    8.18%
      3     5    72843.3241   374    79333.0000    72842.9508     6605    8.18%
      4     6    72972.1468   366    79333.0000    72842.9508     6641    8.18%
      5     7    72992.1332   354    79333.0000    72842.9508     7307    8.18%
      8    10    72996.1980   355    79333.0000    72842.9508     8678    8.18%
      9    11    73013.0087   336    79333.0000    72842.9508     9244    8.18%
     10    12    72949.4907   390    79333.0000    72843.3407    10522    8.18%
*    13+   13                        76150.0000    72843.3407             4.34%
*    13+   13                        75950.0000    72843.3407             4.09%

Mixed integer rounding cuts applied:  253
Zero-half cuts applied:  2
Gomory fractional cuts applied:  1

Root node processing (before b&c):
  Real time             =  120.88 sec. (61689.54 ticks)
Parallel b&c, 4 threads:
  Real time             =   59.30 sec. (44284.59 ticks)
  Sync time (average)   =   22.46 sec.
  Wait time (average)   =   22.50 sec.
                          ------------
Total (root+branch&cut) =  180.18 sec. (105974.13 ticks)
optimal objective= 75950.0

artificial: false set: [10817, 6914, 25413, 21959, 23751, 13960, 20105, 24906, 7499, 24907, 25105, 11542, 2588, 26141, 4957, 26142, 26143, 4575, 20963, 26150, 12390, 26089, 26090, 26091, 23020, 13164, 11182, 23792, 496, 3124, 6200] start node= 28 start time= 39 capacity type= 2
(7,1)->(7,2)->(3,4)->(14,6)->(6,8)->(8,11)->(14,12)->(5,13)->(4,15)->(0,16)->(12,17)->(13,21)->(13,22)->(26,23)->(27,25)->(27,26)->(27,27)->(27,28)->(28,29)->(28,30)->(28,31)->(28,32)->(25,35)->(28,38)->(28,39)->(15,40)->(24,41)->(2,42)->(2,43)->(2,44)->(12,46)->(7,1):1

artificial: false set: [24769, 7875, 26053, 22214, 3146, 25740, 18188, 25741, 6606, 25742, 25743, 25744, 25745, 13522, 25746, 338, 25427, 25747, 6357, 25303, 25815, 25816, 25817, 25818, 25819, 24991, 25247, 3872, 8544, 11556, 17252, 24934, 24935, 24936, 10280, 24937, 25205, 9078, 13180, 4733, 20925] start node= 26 start time= 38 capacity type= 2
(9,0)->(0,1)->(0,2)->(8,3)->(9,5)->(9,6)->(11,7)->(11,8)->(20,12)->(20,13)->(20,14)->(20,15)->(20,16)->(20,17)->(20,18)->(20,19)->(20,20)->(6,21)->(3,22)->(3,23)->(3,24)->(3,25)->(3,26)->(14,28)->(5,29)->(6,30)->(4,31)->(4,32)->(15,34)->(13,35)->(13,36)->(26,37)->(26,38)->(21,39)->(21,40)->(21,41)->(21,42)->(21,43)->(21,44)->(25,45)->(9,47)->(9,0):1

artificial: false set: [24967, 25863, 17609, 3146, 12364, 1358, 26066, 26067, 26003, 26068, 6357, 8534, 19096, 26143, 22565, 24934, 24935, 24936, 4520, 24937, 18153, 20458, 25962, 25963, 25964, 25965, 20206, 25071, 25072, 23792, 25073, 25074, 25075, 25076, 20916, 6582, 24828, 24829] start node= 28 start time= 31 capacity type= 2
(27,2)->(27,3)->(27,4)->(27,5)->(6,6)->(4,7)->(4,8)->(21,9)->(25,10)->(1,12)->(1,13)->(1,14)->(6,15)->(6,16)->(6,17)->(6,18)->(6,19)->(6,20)->(6,21)->(3,22)->(3,23)->(3,24)->(3,25)->(3,26)->(14,28)->(28,31)->(28,32)->(25,35)->(25,36)->(9,38)->(22,39)->(22,40)->(20,41)->(24,42)->(24,43)->(24,44)->(24,45)->(24,46)->(27,2):1

artificial: false set: [12033, 25220, 25221, 25222, 24200, 24778, 24779, 21963, 24780, 24781, 4558, 25167, 13519, 25168, 25424, 25169, 7890, 11544, 4569, 350, 24995, 24996, 15461, 24997, 24807, 24808, 1193, 1578, 25004, 25005, 23021, 13234, 25587, 25588, 15798, 4598, 8759, 26041, 26042, 13243, 23742, 18239] start node= 26 start time= 25 capacity type= 1
(17,3)->(17,4)->(17,5)->(18,6)->(29,8)->(4,9)->(0,10)->(0,11)->(0,12)->(0,13)->(0,14)->(8,15)->(8,16)->(8,17)->(8,18)->(9,20)->(9,21)->(9,22)->(9,23)->(13,24)->(26,25)->(26,26)->(26,27)->(27,29)->(28,30)->(15,31)->(13,32)->(13,33)->(14,34)->(4,35)->(4,36)->(4,37)->(4,38)->(0,39)->(0,40)->(0,41)->(1,42)->(14,43)->(4,44)->(4,45)->(4,46)->(21,47)->(17,3):1

artificial: false set: [19079, 3146, 16974, 25294, 16915, 23896, 6361, 4698, 13084, 15711, 16864, 15714, 13220, 14694, 17256, 4715, 6444, 15470, 9455, 26097, 15473, 26098, 26099, 435, 26100, 26101, 4341, 26102, 23031, 23863, 25017, 25018] start node= 28 start time= 40 capacity type= 2
(0,3)->(16,6)->(28,7)->(5,9)->(5,10)->(5,11)->(6,12)->(17,14)->(18,15)->(19,16)->(17,17)->(18,18)->(19,19)->(14,20)->(4,21)->(22,23)->(20,24)->(6,25)->(3,26)->(14,28)->(19,30)->(27,33)->(27,34)->(27,35)->(27,36)->(27,37)->(27,38)->(27,39)->(28,40)->(5,42)->(10,46)->(10,47)->(0,3):1

artificial: false set: [16963, 13253, 1544, 22601, 6348, 22543, 21975, 24925, 3422, 10847, 15714, 12004, 26086, 26087, 26088, 26089, 13161, 26090, 6378, 26091, 4715, 26092, 26093, 26094, 25390, 15473, 9587, 25395, 25018, 2875] start node= 26 start time= 39 capacity type= 2
(13,3)->(13,4)->(14,5)->(1,8)->(14,9)->(5,10)->(5,11)->(6,12)->(3,13)->(3,14)->(17,17)->(18,18)->(19,19)->(27,22)->(27,23)->(27,24)->(27,25)->(27,26)->(27,27)->(27,28)->(27,29)->(27,30)->(27,31)->(10,35)->(26,39)->(27,41)->(6,42)->(3,43)->(12,46)->(12,47)->(13,3):1

artificial: false set: [13318, 20936, 20105, 25225, 24906, 25226, 26123, 24907, 25227, 26124, 24908, 25228, 26125, 24909, 25229, 26126, 24910, 25230, 26127, 24911, 25231, 25232, 26128, 9105, 26129, 10067, 2260, 1557, 19031, 19288, 24864, 24865, 24866, 23394, 24867, 25330] start node= 28 start time= 16 capacity type= 2
(2,0)->(2,1)->(2,2)->(2,3)->(2,4)->(25,8)->(28,11)->(28,12)->(28,13)->(28,14)->(28,15)->(28,16)->(28,17)->(28,18)->(1,21)->(14,22)->(22,23)->(9,25)->(9,26)->(9,27)->(9,28)->(9,29)->(9,30)->(9,31)->(9,32)->(9,33)->(11,34)->(11,35)->(23,40)->(24,41)->(2,42)->(2,43)->(2,44)->(2,45)->(2,46)->(2,47)->(2,0):1

artificial: false set: [19074, 17732, 25029, 5062, 519, 24207, 26192, 26193, 26194, 26195, 25747, 26196, 25492, 25493, 25494, 11290, 14430, 26016, 26017, 26018, 22371, 24229, 25127, 10792, 25128, 25129, 25130, 25131, 7468, 4336, 4598, 13495, 25400, 25401, 26171, 9596, 26172, 26173, 26174] start node= 26 start time= 0 capacity type= 2
(26,0)->(26,1)->(26,2)->(26,3)->(15,4)->(15,5)->(15,6)->(15,7)->(13,8)->(13,9)->(13,10)->(29,11)->(29,12)->(29,13)->(29,14)->(29,15)->(4,16)->(22,18)->(20,19)->(20,20)->(5,21)->(5,22)->(7,23)->(7,24)->(7,25)->(7,26)->(7,27)->(7,28)->(16,30)->(29,32)->(29,33)->(29,34)->(29,35)->(29,36)->(29,37)->(4,38)->(0,39)->(12,40)->(10,44)->(26,0):1

artificial: false set: [24962, 24963, 20233, 8782, 25936, 13201, 25937, 4115, 7574, 25564, 25565, 25885, 14430, 25886, 25439, 12000, 24224, 24993, 24994, 20130, 4516, 25189, 25510, 25511, 18153, 20652, 25781, 25782, 25143, 25783, 25144, 13944, 25784, 25145, 7482, 25978, 25979, 14780, 19263] start node= 21 start time= 6 capacity type= 2
(13,0)->(14,1)->(4,2)->(4,3)->(4,4)->(21,5)->(21,6)->(21,7)->(21,8)->(21,9)->(25,10)->(25,11)->(25,12)->(23,13)->(23,14)->(23,15)->(24,16)->(24,17)->(24,18)->(15,22)->(15,23)->(15,24)->(24,25)->(16,28)->(16,29)->(16,30)->(29,32)->(4,33)->(4,34)->(4,35)->(8,37)->(8,38)->(7,39)->(7,40)->(7,41)->(7,42)->(16,44)->(9,46)->(13,47)->(13,0):1

artificial: false set: [14021, 6598, 19081, 1867, 23757, 25488, 25489, 25618, 25490, 25619, 25491, 25620, 25492, 25621, 25622, 25303, 25754, 25755, 15399, 24232, 9896, 1194, 26027, 2670, 22574, 25071, 25072, 16881, 25073, 25074, 25075, 25076, 25077, 4343, 4601, 17596, 21948, 20093, 25534, 25535] start node= 28 start time= 45 capacity type= 2
(15,0)->(15,1)->(15,2)->(15,3)->(15,4)->(15,5)->(11,7)->(11,8)->(26,11)->(26,12)->(27,14)->(6,15)->(6,16)->(6,17)->(6,18)->(6,19)->(6,20)->(6,21)->(6,22)->(4,23)->(22,25)->(20,26)->(20,27)->(20,28)->(24,29)->(2,30)->(19,33)->(17,34)->(17,35)->(17,36)->(17,37)->(17,38)->(17,39)->(29,40)->(4,41)->(0,42)->(1,43)->(28,45)->(15,46)->(15,47)->(15,0):1

artificial: false set: [25794, 25795, 25796, 25797, 25798, 15495, 25799, 24200, 25672, 25800, 24969, 25673, 25801, 24970, 25674, 25802, 24971, 25675, 25803, 24972, 25676, 24973, 25677, 24974, 25678, 24975, 25679, 24976, 25616, 25617, 25618, 25619, 25620, 25621, 25622, 25632, 25633, 25634, 25635, 25636, 25637, 18220, 4529, 15798] start node= 21 start time= 23 capacity type= 1
(18,0)->(18,1)->(18,2)->(18,3)->(18,4)->(18,5)->(18,6)->(29,8)->(4,9)->(4,10)->(4,11)->(4,12)->(4,13)->(4,14)->(4,15)->(4,16)->(4,17)->(21,18)->(21,19)->(21,20)->(21,21)->(21,22)->(21,23)->(21,24)->(21,25)->(21,26)->(21,27)->(21,28)->(17,32)->(17,33)->(17,34)->(17,35)->(17,36)->(17,37)->(17,38)->(17,39)->(18,40)->(18,41)->(18,42)->(18,43)->(18,44)->(18,45)->(18,46)->(18,47)->(18,0):1

artificial: false set: [19264, 12228, 20426, 17742, 25937, 24849, 24850, 2581, 2267, 25442, 25443, 1571, 25444, 12197, 24870, 24871, 24872, 24873, 24874, 25390, 20655, 19890, 10935, 26039, 22392, 24953, 13945, 24954, 2875, 10559, 5119] start node= 26 start time= 23 capacity type= 2
(14,2)->(14,3)->(14,4)->(14,5)->(2,6)->(2,7)->(2,8)->(2,9)->(2,10)->(2,11)->(25,15)->(23,16)->(24,17)->(24,18)->(26,23)->(26,24)->(15,25)->(24,26)->(20,30)->(5,31)->(1,33)->(1,34)->(1,35)->(14,36)->(2,37)->(12,39)->(3,41)->(3,42)->(3,43)->(12,46)->(12,47)->(14,2):1

artificial: false set: [25472, 25473, 18689, 11523, 14468, 3146, 25493, 5974, 25494, 1243, 25244, 25245, 25246, 25247, 8738, 24995, 24996, 22372, 24997, 24807, 24808, 10920, 24809, 1194, 12010, 25451, 25837, 25838, 25839, 25200, 25840, 25201, 13234, 4598, 13495, 25400, 25401, 25468, 13308, 25469, 25470, 25471] start node= 26 start time= 4 capacity type= 2
(9,0)->(9,1)->(9,2)->(13,3)->(26,4)->(15,5)->(15,6)->(15,7)->(13,8)->(13,9)->(13,10)->(14,11)->(14,12)->(22,13)->(22,14)->(22,15)->(22,16)->(22,17)->(16,20)->(6,22)->(12,24)->(3,26)->(14,28)->(14,29)->(14,30)->(14,31)->(14,32)->(14,33)->(14,34)->(4,35)->(4,36)->(4,37)->(4,38)->(0,39)->(0,40)->(0,41)->(0,42)->(1,43)->(9,44)->(9,45)->(9,46)->(9,47)->(9,0):1

artificial: false set: [9411, 25283, 25284, 25285, 25286, 24775, 25287, 25288, 25289, 25290, 23882, 25291, 25292, 5452, 25293, 20174, 25294, 25295, 26134, 26135, 26136, 26137, 25883, 25884, 25374, 10783, 25248, 25249, 26082, 25250, 26083, 26084, 23013, 296, 18153, 20650, 19261] start node= 28 start time= 22 capacity type= 2
(10,0)->(10,1)->(10,2)->(10,3)->(0,7)->(0,8)->(21,9)->(25,10)->(23,11)->(23,12)->(23,13)->(24,14)->(27,18)->(27,19)->(27,20)->(27,21)->(28,22)->(28,23)->(28,24)->(28,25)->(28,26)->(5,28)->(12,30)->(12,31)->(10,35)->(10,36)->(10,37)->(10,38)->(10,39)->(10,40)->(10,41)->(10,42)->(10,43)->(10,44)->(10,45)->(10,46)->(10,47)->(10,0):1

artificial: false set: [15488, 11522, 17732, 8779, 25740, 25741, 25614, 25742, 25615, 25743, 25744, 25745, 25746, 25747, 25493, 25494, 1240, 25241, 1369, 25242, 25436, 25437, 25438, 25439, 16930, 26019, 24996, 22372, 24997, 1191, 25392, 25393, 15729, 13235, 4725, 4598, 6646, 13495, 25400, 25401, 25082, 11194, 25083, 6460] start node= 26 start time= 4 capacity type= 2
(13,0)->(13,1)->(13,2)->(26,3)->(26,4)->(15,5)->(15,6)->(15,7)->(13,8)->(13,9)->(13,10)->(20,12)->(20,13)->(20,14)->(20,15)->(20,16)->(20,17)->(20,18)->(20,19)->(20,20)->(5,21)->(6,22)->(1,25)->(6,26)->(6,27)->(6,28)->(17,30)->(17,31)->(17,32)->(18,33)->(19,34)->(14,35)->(4,36)->(4,37)->(4,38)->(0,39)->(1,40)->(9,41)->(9,42)->(9,43)->(13,44)->(13,45)->(13,46)->(13,47)->(13,0):1

artificial: false set: [25473, 8898, 13509, 13319, 11336, 19080, 25488, 25489, 25490, 25491, 25492, 25493, 25494, 5978, 25372, 25373, 20896, 3875, 17257, 10542, 18159, 13234, 15668, 25525, 25526, 12022, 13495, 25527, 25528, 25529, 25786, 25530, 25787, 25531, 25788, 25532, 25533, 25789, 25534, 25790, 25535] start node= 21 start time= 13 capacity type= 2
(15,0)->(15,1)->(15,2)->(15,3)->(15,4)->(15,5)->(15,6)->(15,7)->(13,8)->(21,10)->(21,11)->(21,12)->(21,13)->(21,14)->(21,15)->(25,16)->(9,18)->(18,20)->(15,21)->(13,22)->(14,23)->(22,24)->(20,25)->(6,26)->(12,28)->(12,29)->(12,30)->(14,33)->(14,34)->(4,35)->(15,37)->(15,38)->(15,39)->(15,40)->(15,41)->(15,42)->(15,43)->(15,44)->(15,45)->(15,46)->(15,47)->(15,0):1

artificial: false set: [13504, 25409, 25410, 25411, 25412, 11781, 4358, 20233, 25545, 25546, 25547, 25548, 25549, 26192, 26193, 26194, 26195, 26196, 19096, 25944, 17753, 25050, 25051, 4892, 25564, 25565, 14430, 4512, 24229, 24237, 25006, 14702, 25007, 23727, 25777, 25778, 25779, 25780, 18485, 13943] start node= 21 start time= 1 capacity type= 1
(4,0)->(21,1)->(21,2)->(21,3)->(21,4)->(21,5)->(16,9)->(16,10)->(16,11)->(16,12)->(16,13)->(16,14)->(28,15)->(15,16)->(13,17)->(13,18)->(13,19)->(13,20)->(13,21)->(15,23)->(24,24)->(24,25)->(16,28)->(16,29)->(16,30)->(29,32)->(29,33)->(29,34)->(29,35)->(29,36)->(29,37)->(4,38)->(22,40)->(20,41)->(5,42)->(5,43)->(5,44)->(29,45)->(4,46)->(4,47)->(4,0):1

artificial: false set: [25857, 25858, 25859, 25860, 25861, 25862, 25863, 3146, 25547, 25548, 25676, 25549, 25677, 25678, 25679, 13328, 14035, 9813, 15702, 6361, 8922, 25632, 25504, 25633, 25505, 25634, 25506, 25635, 25636, 25637, 25126, 16999, 19048, 14702, 23727, 7415, 25468, 25469, 25470, 25471] start node= 28 start time= 15 capacity type= 2
(18,0)->(18,1)->(18,2)->(18,3)->(18,4)->(18,5)->(18,6)->(19,7)->(16,11)->(16,12)->(16,13)->(16,14)->(28,15)->(15,16)->(15,17)->(15,18)->(15,19)->(11,21)->(7,22)->(7,23)->(6,25)->(3,26)->(14,28)->(14,29)->(14,30)->(14,31)->(14,32)->(22,33)->(22,34)->(22,35)->(22,36)->(22,37)->(22,38)->(22,39)->(22,40)->(9,42)->(18,44)->(18,45)->(18,46)->(18,47)->(18,0):1

artificial: false set: [25794, 25795, 8580, 25796, 25990, 19784, 20686, 25872, 24848, 25873, 24849, 25874, 24850, 25875, 1235, 25876, 25877, 25878, 25879, 25306, 24794, 25307, 24795, 26012, 24796, 26013, 24797, 24798, 1183, 13216, 25190, 25191, 20903, 25192, 10092, 25455, 4529, 373, 18165, 7673, 8569, 25919] start node= 21 start time= 18 capacity type= 2
(23,0)->(23,1)->(23,2)->(23,3)->(23,4)->(23,5)->(23,6)->(23,7)->(23,8)->(11,10)->(11,11)->(11,12)->(14,15)->(14,16)->(4,17)->(21,18)->(21,19)->(21,20)->(21,21)->(25,22)->(25,23)->(9,25)->(0,26)->(0,27)->(0,28)->(0,29)->(0,30)->(0,31)->(1,32)->(1,33)->(1,34)->(1,35)->(9,36)->(0,37)->(8,38)->(8,39)->(8,40)->(8,41)->(25,44)->(25,45)->(25,46)->(23,47)->(23,0):1

artificial: false set: [24832, 7426, 6345, 3083, 1291, 25804, 25805, 25293, 25806, 25294, 6612, 24922, 18463, 22565, 24997, 25062, 9575, 25063, 24807, 25064, 24808, 24809, 1194, 1265, 25267, 21939, 25268, 25269, 25270, 4598, 22203, 24831, 9599] start node= 21 start time= 31 capacity type= 2
(26,3)->(27,5)->(6,6)->(6,7)->(6,8)->(6,9)->(3,10)->(3,11)->(1,15)->(1,16)->(1,17)->(10,19)->(10,20)->(10,21)->(10,22)->(10,23)->(26,27)->(21,28)->(21,29)->(21,30)->(21,31)->(7,34)->(6,36)->(4,37)->(4,38)->(0,39)->(0,40)->(0,41)->(0,42)->(1,43)->(10,45)->(10,46)->(10,47)->(26,3):1

artificial: false set: [24832, 24833, 24834, 24835, 24836, 15495, 25672, 25673, 25674, 25675, 25676, 25677, 25678, 25679, 25618, 25619, 25620, 25621, 15702, 25622, 25687, 25688, 25689, 16666, 25632, 25633, 25634, 25635, 25636, 25637, 9575, 2670, 16881, 1269, 26043, 22396, 13565, 24830, 24831] start node= 26 start time= 28 capacity type= 2
(18,0)->(18,1)->(18,2)->(18,3)->(18,4)->(18,5)->(18,6)->(19,7)->(19,8)->(19,9)->(19,10)->(1,14)->(1,15)->(1,16)->(1,17)->(1,18)->(1,19)->(1,20)->(1,21)->(10,23)->(26,27)->(26,28)->(15,29)->(2,30)->(19,33)->(17,34)->(17,35)->(17,36)->(17,37)->(17,38)->(17,39)->(18,40)->(18,41)->(18,42)->(18,43)->(18,44)->(18,45)->(18,46)->(18,47)->(18,0):1

artificial: false set: [8576, 8775, 22409, 14029, 25297, 24850, 25298, 1235, 25299, 25236, 25300, 25237, 9813, 25301, 25238, 25302, 25303, 25500, 25311, 25312, 1185, 25313, 25314, 25315, 25316, 25126, 25127, 11560, 25128, 9896, 25129, 25130, 25131, 22379, 7468, 14766, 14063, 25530, 25531, 25532, 25533, 25534] start node= 26 start time= 41 capacity type= 1
(11,1)->(11,2)->(11,3)->(11,4)->(11,5)->(11,6)->(11,7)->(11,8)->(26,11)->(15,12)->(15,13)->(11,15)->(11,16)->(11,17)->(11,18)->(11,19)->(11,20)->(11,21)->(7,22)->(7,23)->(7,24)->(7,25)->(7,26)->(7,27)->(7,28)->(16,30)->(9,32)->(0,33)->(1,34)->(1,35)->(9,36)->(9,37)->(9,38)->(9,39)->(13,40)->(26,41)->(15,42)->(15,43)->(15,44)->(15,45)->(15,46)->(15,47)->(11,1):1

artificial: false set: [25152, 25153, 25154, 25155, 25475, 7492, 13188, 13253, 4741, 25094, 25095, 26124, 26125, 26126, 6232, 25504, 25505, 16930, 25506, 25507, 25508, 1834, 25195, 25196, 25197, 25198, 2670, 25199, 23727, 25713, 13557, 24886, 24887, 24824, 24888, 24825, 24889, 24890, 24891, 24892, 24893] start node= 28 start time= 13 capacity type= 2
(8,0)->(8,1)->(8,2)->(8,3)->(8,4)->(14,5)->(1,8)->(1,9)->(1,10)->(28,12)->(28,13)->(28,14)->(28,15)->(15,16)->(15,17)->(15,18)->(15,19)->(15,20)->(15,21)->(2,22)->(2,23)->(2,24)->(2,25)->(2,26)->(2,27)->(2,28)->(2,29)->(2,30)->(19,33)->(19,34)->(14,35)->(14,36)->(5,37)->(6,38)->(6,39)->(6,40)->(8,43)->(8,44)->(8,45)->(8,46)->(8,47)->(8,0):1

artificial: false set: [20938, 9934, 25935, 25235, 25236, 25237, 25238, 9111, 22177, 18153, 2282, 23725, 13934, 25903, 19376, 20080, 24881, 24882, 25778, 24883, 25779, 24884, 25780, 24885, 25781, 24886, 25782, 24887, 25783, 25336, 24888, 25784, 25337, 24889, 25338, 25339, 25340, 25341, 20670] start node= 21 start time= 2 capacity type= 2
(26,1)->(21,2)->(21,3)->(21,4)->(21,5)->(21,6)->(21,7)->(21,8)->(21,9)->(25,10)->(28,13)->(15,14)->(24,15)->(24,16)->(2,17)->(2,18)->(2,19)->(2,20)->(2,21)->(2,22)->(2,23)->(2,24)->(2,25)->(2,26)->(25,30)->(23,31)->(23,32)->(9,35)->(9,36)->(9,37)->(9,38)->(9,39)->(11,40)->(11,41)->(11,42)->(11,43)->(11,44)->(11,45)->(11,46)->(26,1):1

artificial: false set: [25664, 25794, 25795, 7108, 25796, 25990, 25991, 25992, 25353, 25354, 25355, 15692, 2380, 13965, 25105, 25106, 25107, 15702, 10908, 13216, 16930, 24996, 24997, 16807, 24807, 20014, 4529, 15729, 13235, 18165, 4598, 376, 7865, 21049, 3134] start node= 21 start time= 19 capacity type= 2
(7,1)->(7,2)->(7,3)->(7,4)->(18,6)->(19,7)->(12,9)->(12,10)->(12,11)->(12,12)->(3,14)->(14,16)->(4,17)->(21,18)->(21,19)->(21,20)->(21,21)->(25,22)->(25,23)->(25,24)->(25,25)->(2,28)->(18,32)->(18,33)->(19,34)->(14,35)->(4,36)->(4,37)->(4,38)->(0,39)->(0,40)->(8,41)->(18,44)->(15,45)->(24,46)->(7,1):1

artificial: false set: [25217, 9090, 24771, 24772, 6598, 1291, 26123, 25293, 25294, 25550, 25231, 25232, 9105, 10004, 341, 25111, 7448, 19037, 14751, 25315, 14698, 1194, 23340, 9455, 25330, 25331, 25332, 25333, 7542, 10358, 4343, 25849, 25850, 25851, 25852] start node= 28 start time= 11 capacity type= 2
(0,3)->(0,4)->(0,5)->(8,6)->(7,7)->(7,8)->(16,10)->(28,11)->(28,12)->(16,14)->(16,15)->(9,17)->(9,18)->(11,19)->(11,20)->(6,22)->(4,23)->(22,25)->(22,26)->(22,27)->(22,28)->(22,29)->(9,31)->(9,32)->(9,33)->(11,34)->(11,35)->(11,36)->(11,37)->(11,38)->(0,42)->(1,43)->(10,45)->(10,46)->(10,47)->(0,3):1

artificial: false set: [24768, 24769, 24770, 20483, 26002, 24853, 9431, 23959, 25817, 25818, 25499, 25819, 25180, 25181, 25182, 14694, 15465, 15658, 363, 11245, 7663, 25264, 25265, 25266, 25267, 435, 25268, 25269, 1526, 25270, 13500, 18428] start node= 21 start time= 41 capacity type= 2
(0,0)->(0,1)->(0,2)->(0,3)->(16,6)->(28,7)->(17,9)->(18,10)->(15,11)->(15,12)->(13,13)->(10,16)->(10,17)->(10,18)->(10,19)->(10,20)->(10,21)->(10,22)->(10,23)->(0,27)->(8,28)->(8,29)->(8,30)->(8,31)->(25,34)->(25,35)->(1,37)->(1,38)->(21,41)->(21,42)->(21,43)->(21,44)->(0,0):1

artificial: false set: [19264, 16834, 9934, 25937, 25938, 25939, 25940, 10645, 25941, 25942, 25943, 25944, 25945, 22177, 25380, 19817, 18153, 2670, 20655, 25713, 25778, 25779, 25780, 25781, 25782, 25783, 25784, 20090, 25978, 25339, 24891, 25979, 25340, 24892, 25980, 25341, 24893, 25981, 25982] start node= 21 start time= 2 capacity type= 2
(26,1)->(21,2)->(21,3)->(21,4)->(21,5)->(21,6)->(21,7)->(21,8)->(21,9)->(25,10)->(25,11)->(25,12)->(25,13)->(25,14)->(25,15)->(23,16)->(24,17)->(24,18)->(24,19)->(24,20)->(24,21)->(24,22)->(24,23)->(24,24)->(24,25)->(24,26)->(2,27)->(2,28)->(2,29)->(2,30)->(19,33)->(19,34)->(12,36)->(12,37)->(23,41)->(11,43)->(11,44)->(11,45)->(11,46)->(26,1):1

artificial: false set: [24771, 11267, 24772, 25286, 7559, 25287, 7112, 25288, 25289, 25290, 25291, 25420, 25292, 25293, 25294, 13519, 25424, 10577, 25425, 25426, 24789, 341, 25111, 11549, 358, 15658, 13547, 24876, 24877, 24878, 9455, 7542, 7224, 22398, 2559] start node= 26 start time= 30 capacity type= 2
(0,3)->(0,4)->(0,5)->(8,6)->(7,7)->(7,8)->(18,10)->(15,11)->(2,12)->(2,13)->(2,14)->(2,15)->(12,17)->(0,21)->(0,22)->(8,23)->(7,24)->(13,28)->(13,29)->(26,30)->(15,31)->(13,32)->(13,33)->(13,34)->(13,35)->(10,38)->(10,39)->(10,40)->(10,41)->(10,42)->(10,43)->(10,44)->(10,45)->(10,46)->(10,47)->(0,3):1

artificial: false set: [3266, 8516, 4549, 19077, 17734, 18374, 4871, 26184, 24200, 24778, 22602, 24779, 25099, 24780, 25100, 24781, 25101, 25167, 3152, 25168, 10896, 25169, 7890, 4569, 350, 24995, 24996, 24169, 24941, 24942, 5998, 24943, 13234, 26166, 26167] start node= 21 start time= 38 capacity type= 2
(12,0)->(3,2)->(29,6)->(29,7)->(29,8)->(4,9)->(0,10)->(0,11)->(0,12)->(0,13)->(0,14)->(8,15)->(8,16)->(8,17)->(8,18)->(9,20)->(22,21)->(20,22)->(5,23)->(29,24)->(29,25)->(3,29)->(3,30)->(3,31)->(3,32)->(14,34)->(4,35)->(4,36)->(4,37)->(21,38)->(27,42)->(6,43)->(6,44)->(6,45)->(6,46)->(12,0):1

artificial: false set: [642, 13188, 4868, 14728, 4104, 7562, 25546, 25547, 25548, 25549, 25550, 3154, 24213, 24982, 24983, 25111, 7448, 6942, 23902, 14751, 7393, 25575, 26153, 26154, 25131, 26155, 25132, 26156, 25133, 26157, 24944, 5040, 24945, 8561, 6195, 4789, 7542] start node= 28 start time= 41 capacity type= 1
(5,0)->(7,1)->(6,3)->(8,6)->(7,7)->(7,8)->(16,10)->(16,11)->(16,12)->(16,13)->(16,14)->(16,15)->(9,17)->(0,18)->(5,20)->(29,21)->(4,22)->(4,23)->(4,24)->(8,26)->(7,27)->(7,28)->(7,29)->(7,30)->(3,32)->(3,33)->(3,34)->(14,36)->(5,37)->(16,39)->(16,40)->(28,41)->(28,42)->(28,43)->(28,44)->(28,45)->(28,46)->(5,0):1

artificial: false set: [19264, 13954, 20099, 24900, 16711, 25937, 25685, 2581, 25686, 669, 4895, 24223, 3872, 24290, 10599, 24811, 24812, 11310, 20655, 26160, 26161, 19890, 26039, 26040, 26041, 25978, 26042, 25979, 21243, 25980, 25981, 8765, 25982] start node= 26 start time= 25 capacity type= 2
(29,0)->(29,1)->(29,2)->(19,5)->(19,6)->(19,7)->(25,10)->(25,11)->(25,12)->(25,13)->(25,14)->(25,15)->(23,16)->(24,17)->(24,18)->(26,23)->(26,24)->(26,25)->(26,26)->(26,27)->(9,29)->(13,30)->(29,31)->(4,32)->(15,34)->(24,35)->(2,36)->(2,37)->(12,39)->(0,43)->(0,44)->(0,45)->(5,47)->(29,0):1

artificial: false set: [24768, 12034, 13510, 25415, 3915, 13519, 25936, 25424, 25937, 25425, 11544, 25883, 25884, 25885, 25886, 289, 20130, 24996, 24997, 24807, 24808, 18153, 24809, 20650, 24810, 21290, 24811, 24812, 24813, 24814, 24815, 25778, 25779, 13235, 25780, 25781, 25782, 4598, 25783, 25784, 26041, 15678, 19263] start node= 26 start time= 25 capacity type= 2
(0,0)->(0,1)->(21,2)->(21,3)->(21,4)->(21,5)->(21,6)->(21,7)->(21,8)->(21,9)->(25,10)->(23,11)->(23,12)->(23,13)->(23,14)->(23,15)->(24,16)->(24,17)->(24,18)->(15,22)->(13,23)->(13,24)->(26,25)->(26,26)->(4,27)->(18,30)->(15,31)->(13,32)->(13,33)->(13,34)->(14,35)->(4,36)->(4,37)->(4,38)->(0,39)->(0,40)->(0,41)->(0,42)->(0,43)->(0,44)->(0,45)->(0,46)->(0,47)->(0,0):1

artificial: false set: [24834, 24835, 24836, 13318, 15495, 19079, 25672, 25673, 25674, 25675, 25676, 25677, 25678, 26126, 25679, 1557, 15702, 16855, 25752, 6364, 23391, 25632, 25633, 25634, 25635, 25636, 25637, 15465, 17257, 15658, 24941, 24942, 24943, 24944, 24945, 24946, 24947, 3444, 25592, 25082, 13499, 25083, 11388] start node= 28 start time= 14 capacity type= 1
(18,0)->(18,1)->(18,2)->(18,3)->(18,4)->(18,5)->(18,6)->(19,7)->(17,8)->(17,9)->(18,10)->(15,11)->(13,12)->(28,14)->(28,15)->(1,18)->(1,19)->(1,20)->(1,21)->(14,22)->(22,23)->(20,24)->(20,25)->(6,26)->(6,27)->(6,28)->(3,29)->(3,30)->(3,31)->(3,32)->(3,33)->(3,34)->(3,35)->(3,36)->(17,39)->(18,40)->(18,41)->(18,42)->(18,43)->(18,44)->(18,45)->(18,46)->(18,47)->(18,0):1

artificial: false set: [25729, 14722, 5125, 5070, 17810, 23891, 9431, 24855, 24856, 24857, 24858, 1243, 7516, 25244, 25245, 25246, 8543, 14693, 23718, 12010, 363, 13163, 25135, 7472, 25264, 19056, 25265, 25266, 25267, 25268, 25269, 25270, 13495, 25400, 25401, 4668, 13181] start node= 28 start time= 35 capacity type= 2
(22,0)->(20,1)->(20,2)->(16,5)->(28,6)->(15,7)->(13,8)->(13,9)->(13,10)->(14,11)->(5,12)->(10,16)->(10,17)->(10,18)->(10,19)->(10,20)->(10,21)->(10,22)->(10,23)->(0,27)->(8,28)->(14,29)->(5,30)->(7,31)->(7,32)->(16,34)->(28,35)->(5,37)->(1,39)->(1,40)->(1,41)->(1,42)->(1,43)->(9,44)->(9,45)->(9,46)->(9,47)->(22,0):1

artificial: false set: [1289, 24841, 6345, 1226, 25227, 25228, 26063, 16915, 24922, 24923, 24924, 24925, 3422, 24223, 24992, 26016, 24993, 26017, 24994, 15714, 21218, 24995, 24996, 24997, 24807, 1192, 11310, 15473, 12404, 25204, 25205, 4598, 6646, 25206, 8695, 9595, 8765] start node= 26 start time= 47 capacity type= 2
(26,0)->(26,1)->(26,2)->(9,4)->(9,5)->(9,6)->(9,7)->(6,9)->(3,10)->(3,11)->(3,12)->(3,13)->(3,14)->(17,17)->(18,18)->(19,19)->(14,20)->(6,22)->(1,25)->(1,26)->(9,27)->(9,28)->(9,29)->(13,30)->(29,31)->(4,32)->(4,33)->(4,34)->(4,35)->(4,36)->(4,37)->(4,38)->(0,39)->(0,40)->(1,41)->(10,43)->(26,47)->(26,0):1

artificial: false set: [25920, 25921, 3970, 25922, 25923, 25604, 25924, 4549, 25605, 26183, 26184, 26185, 26186, 26187, 26188, 26189, 18189, 26190, 20686, 25814, 15382, 25815, 25816, 25817, 25818, 25819, 2267, 25820, 24223, 19295, 24992, 19552, 24993, 24228, 20069, 24870, 24871, 24872, 24873, 24874, 20655] start node= 21 start time= 45 capacity type= 2
(24,0)->(24,1)->(24,2)->(24,3)->(24,4)->(24,5)->(2,6)->(2,7)->(2,8)->(2,9)->(2,10)->(2,11)->(25,15)->(23,16)->(17,20)->(17,21)->(17,22)->(29,23)->(29,24)->(29,25)->(29,26)->(29,27)->(29,28)->(29,29)->(29,30)->(29,31)->(4,32)->(4,33)->(4,34)->(29,36)->(4,37)->(21,38)->(21,39)->(21,40)->(21,41)->(21,42)->(21,43)->(21,44)->(21,45)->(25,46)->(23,47)->(24,0):1

artificial: false set: [24896, 24897, 24898, 24899, 24900, 14029, 3217, 9813, 2581, 25499, 11548, 25500, 25311, 25312, 25313, 25314, 25315, 24867, 25316, 25126, 25127, 25383, 25640, 25384, 25641, 15658, 25390, 2356, 7224, 10937, 2875, 22397, 13950, 10943, 20095] start node= 26 start time= 29 capacity type= 2
(3,1)->(2,3)->(2,4)->(18,8)->(18,9)->(18,10)->(15,11)->(15,12)->(15,13)->(11,15)->(11,16)->(11,17)->(11,18)->(11,19)->(11,20)->(11,21)->(7,22)->(7,23)->(7,24)->(13,28)->(26,29)->(15,30)->(24,31)->(2,32)->(2,33)->(2,34)->(2,35)->(2,36)->(2,37)->(12,39)->(12,40)->(12,41)->(3,43)->(12,46)->(12,47)->(3,1):1

artificial: false set: [13318, 11724, 1232, 9105, 24785, 24786, 7508, 20885, 19031, 24794, 24859, 24795, 24860, 24796, 1245, 24797, 25246, 24798, 25247, 1183, 8544, 289, 355, 18148, 15658, 1194, 8560, 25778, 25330, 25779, 25331, 25332, 25333, 25461, 10358, 25207, 8888, 8569, 13499, 24830, 1215] start node= 0 start time= 17 capacity type= 2
(9,0)->(0,1)->(21,2)->(21,3)->(21,4)->(25,5)->(9,7)->(9,8)->(18,10)->(15,11)->(13,12)->(1,14)->(1,15)->(9,16)->(0,17)->(0,18)->(0,19)->(8,20)->(14,21)->(14,22)->(22,23)->(9,25)->(0,26)->(0,27)->(0,28)->(0,29)->(0,30)->(0,31)->(1,32)->(9,33)->(11,34)->(11,35)->(11,36)->(11,37)->(11,38)->(0,42)->(1,43)->(1,44)->(1,45)->(9,46)->(9,47)->(9,0):1

artificial: false set: [12228, 6598, 25296, 25297, 25298, 25299, 25300, 25301, 25302, 25303, 24792, 24793, 25179, 25180, 25181, 25182, 25183, 25184, 25185, 25186, 7523, 4583, 9896, 362, 26027, 22574, 25071, 25072, 25073, 25074, 25075, 25076, 2485, 25077, 25336, 25337, 25338, 25339, 25340, 21948, 25341, 25342, 25343] start node= 26 start time= 11 capacity type= 1
(11,0)->(11,1)->(11,2)->(11,3)->(11,4)->(11,5)->(11,6)->(11,7)->(11,8)->(26,11)->(26,12)->(27,14)->(6,15)->(6,16)->(6,17)->(6,18)->(6,19)->(6,20)->(6,21)->(6,22)->(4,23)->(0,24)->(0,25)->(0,26)->(8,27)->(8,28)->(8,29)->(8,30)->(8,31)->(8,32)->(8,33)->(8,34)->(8,35)->(14,36)->(2,37)->(11,40)->(11,41)->(11,42)->(11,43)->(11,44)->(11,45)->(11,46)->(11,47)->(11,0):1

artificial: false set: [25728, 25729, 25858, 19458, 25859, 25860, 17732, 25861, 25862, 25863, 11336, 25225, 25226, 25227, 25228, 25229, 25230, 25231, 25232, 8529, 17810, 19096, 25889, 14693, 4773, 23718, 14759, 25769, 25770, 25771, 25772, 25773, 25774, 25775, 18159, 20656, 13495, 25786, 25787, 25788, 25789, 25790] start node= 21 start time= 10 capacity type= 2
(20,0)->(20,1)->(20,2)->(16,5)->(28,6)->(15,7)->(13,8)->(21,10)->(21,11)->(21,12)->(21,13)->(21,14)->(21,15)->(25,16)->(23,17)->(23,18)->(20,20)->(5,21)->(16,23)->(9,25)->(9,26)->(9,27)->(9,28)->(9,29)->(9,30)->(9,31)->(9,32)->(9,33)->(22,34)->(22,35)->(22,36)->(22,37)->(22,38)->(22,39)->(22,40)->(20,41)->(20,42)->(20,43)->(20,44)->(20,45)->(20,46)->(20,47)->(20,0):1

artificial: false set: [6598, 25738, 25739, 25740, 25741, 25742, 10831, 25743, 25744, 25745, 25746, 25427, 25747, 24792, 24793, 25371, 1243, 25372, 25244, 25373, 25245, 25374, 25246, 8543, 25824, 25825, 25826, 25827, 11556, 17252, 25828, 25829, 25830, 4583, 25831, 24807, 25832, 24808, 24809, 1194, 25077, 21301, 4598, 19065, 506] start node= 26 start time= 37 capacity type= 2
(22,0)->(22,1)->(22,2)->(22,3)->(22,4)->(22,5)->(22,6)->(22,7)->(22,8)->(22,9)->(20,10)->(20,11)->(20,12)->(20,13)->(20,14)->(20,15)->(20,16)->(20,17)->(20,18)->(20,19)->(20,20)->(6,21)->(6,22)->(4,23)->(0,24)->(0,25)->(0,26)->(12,27)->(12,28)->(12,29)->(12,30)->(12,31)->(13,35)->(13,36)->(26,37)->(4,38)->(0,39)->(0,40)->(0,41)->(0,42)->(1,43)->(9,44)->(9,45)->(9,46)->(9,47)->(22,0):2

artificial: false set: [9792, 15683, 6340, 13572, 1161, 13513, 11535, 3920, 3605, 11546, 24223, 7393, 25059, 1834, 23724, 11310, 26032, 26033, 26034, 26035, 26036, 2485, 26037, 26038, 26039, 25336, 22392, 25337, 25338, 25339, 21243, 25340, 13501, 25341, 8765, 25406, 25342, 25343] start node= 26 start time= 21 capacity type= 2
(11,0)->(7,1)->(6,3)->(6,4)->(3,5)->(0,9)->(1,10)->(28,12)->(15,13)->(13,14)->(13,15)->(26,16)->(26,17)->(26,18)->(26,19)->(26,20)->(26,21)->(26,22)->(26,23)->(26,24)->(15,25)->(13,26)->(26,27)->(9,29)->(13,30)->(29,31)->(4,32)->(18,35)->(15,36)->(2,37)->(11,40)->(11,41)->(11,42)->(11,43)->(11,44)->(11,45)->(11,46)->(11,47)->(11,0):1

artificial: false set: [21953, 11522, 17603, 20100, 4364, 11535, 19473, 25492, 6356, 25493, 25494, 25625, 8736, 22371, 3237, 15402, 2282, 24235, 23724, 19054, 25903, 26032, 25904, 25393, 22579, 2677, 13495, 24887, 25400, 16888, 24888, 25401, 24889, 11386, 13501, 25406, 20670] start node= 26 start time= 17 capacity type= 2
(9,0)->(13,1)->(13,2)->(26,3)->(15,4)->(15,5)->(15,6)->(15,7)->(13,8)->(13,9)->(13,10)->(28,12)->(15,13)->(13,14)->(13,15)->(26,16)->(26,17)->(27,19)->(6,20)->(3,21)->(2,23)->(2,24)->(2,25)->(2,26)->(25,30)->(23,31)->(23,32)->(23,33)->(20,35)->(24,36)->(2,37)->(19,40)->(17,41)->(17,42)->(29,43)->(4,44)->(22,46)->(9,0):1

artificial: false set: [14722, 11714, 26180, 26181, 23368, 3146, 25246, 25567, 25247, 25568, 8736, 25569, 26147, 26148, 26149, 24166, 26150, 26151, 1256, 25258, 25578, 25259, 25579, 25260, 4781, 9517, 25393, 24820, 24821, 24822, 24823, 13180, 14780] start node= 28 start time= 36 capacity type= 2
(9,0)->(13,1)->(13,2)->(1,4)->(1,5)->(1,6)->(1,7)->(1,8)->(10,10)->(10,11)->(10,12)->(10,13)->(29,20)->(29,21)->(29,22)->(3,26)->(14,28)->(5,29)->(16,31)->(16,32)->(16,33)->(16,34)->(28,35)->(28,36)->(28,37)->(28,38)->(28,39)->(28,40)->(16,42)->(16,43)->(16,44)->(9,46)->(9,47)->(9,0):1

artificial: false set: [9090, 13188, 5125, 8777, 12042, 13195, 17742, 11535, 4879, 25680, 25681, 26069, 26070, 26071, 24855, 23000, 1240, 24224, 1186, 1571, 25315, 25316, 25317, 25318, 25319, 25320, 23721, 25321, 5228, 21232, 4593, 16946, 13498, 10298, 25403, 25404, 25405, 25406, 25727] start node= 26 start time= 16 capacity type= 2
(19,0)->(19,1)->(19,2)->(27,5)->(27,6)->(27,7)->(27,8)->(28,9)->(15,10)->(13,11)->(13,12)->(13,13)->(13,14)->(13,15)->(26,16)->(9,18)->(11,19)->(11,20)->(11,21)->(11,22)->(11,23)->(11,24)->(11,25)->(11,26)->(20,30)->(5,31)->(29,32)->(4,33)->(0,34)->(1,35)->(14,36)->(5,37)->(1,39)->(1,40)->(9,41)->(13,42)->(14,43)->(5,44)->(19,47)->(19,0):1

artificial: false set: [25536, 8513, 25537, 14722, 25538, 25539, 11781, 15495, 15688, 20233, 19023, 19026, 14740, 25621, 25622, 25944, 13529, 25564, 25565, 477, 25566, 25567, 25568, 25569, 10089, 11562, 25837, 25838, 23987, 8756, 25206, 13943, 25207, 9080, 21307, 13308, 4604] start node= 26 start time= 43 capacity type= 2
(16,0)->(16,1)->(16,2)->(16,3)->(16,4)->(9,6)->(9,7)->(9,8)->(11,9)->(14,12)->(22,13)->(22,14)->(22,15)->(9,17)->(22,18)->(9,20)->(13,21)->(15,23)->(24,24)->(24,25)->(16,28)->(16,29)->(16,30)->(16,31)->(16,32)->(16,33)->(16,34)->(28,35)->(17,37)->(17,38)->(17,39)->(18,40)->(15,41)->(13,42)->(26,43)->(4,44)->(0,45)->(16,0):1

artificial: false set: [24896, 24769, 24897, 24770, 24898, 24771, 24899, 24772, 24900, 25350, 4560, 2581, 10903, 10839, 25435, 485, 9575, 13163, 24237, 25517, 25006, 25007, 25264, 25265, 25266, 25267, 25268, 25269, 25270, 3129, 26043, 4668, 11324, 22396, 13950, 20095] start node= 26 start time= 28 capacity type= 2
(4,0)->(0,1)->(0,2)->(0,3)->(0,4)->(0,5)->(12,6)->(12,7)->(3,9)->(14,11)->(5,12)->(10,16)->(10,17)->(10,18)->(10,19)->(10,20)->(10,21)->(10,22)->(10,23)->(26,27)->(26,28)->(15,29)->(15,30)->(24,31)->(2,32)->(2,33)->(2,34)->(2,35)->(2,36)->(2,37)->(12,39)->(13,43)->(13,44)->(29,45)->(4,46)->(4,47)->(4,0):1

artificial: false set: [12034, 25475, 6598, 23751, 13576, 24905, 1226, 24906, 25227, 24907, 25228, 24908, 24909, 25422, 24910, 25423, 24911, 25424, 25425, 11153, 12372, 2453, 24792, 25304, 1177, 24864, 24865, 24866, 24867, 24868, 4583, 10089, 12204, 24877, 24878, 7412, 8765, 2559] start node= 28 start time= 39 capacity type= 2
(2,0)->(2,1)->(2,2)->(2,3)->(2,4)->(2,5)->(11,8)->(11,9)->(14,12)->(2,13)->(2,14)->(2,15)->(12,17)->(7,20)->(6,22)->(4,23)->(0,24)->(0,25)->(1,26)->(9,27)->(9,28)->(9,29)->(13,30)->(13,31)->(13,32)->(13,33)->(13,34)->(14,35)->(14,36)->(28,39)->(15,40)->(2,41)->(2,42)->(2,43)->(2,44)->(2,45)->(2,46)->(2,47)->(2,0):1

artificial: false set: [25153, 25793, 25154, 3970, 7875, 24200, 3849, 3146, 25037, 25038, 11535, 4879, 11286, 6359, 4127, 24224, 24993, 24228, 8741, 24997, 24807, 24808, 24936, 24809, 24937, 24810, 24811, 7533, 22192, 18354, 4598, 22582, 26167, 13499, 25404, 380, 13180, 25405, 25406, 13246] start node= 21 start time= 17 capacity type= 2
(8,1)->(8,2)->(8,3)->(9,5)->(13,6)->(29,7)->(29,8)->(4,9)->(15,11)->(13,12)->(13,13)->(13,14)->(13,15)->(26,16)->(21,17)->(21,18)->(27,22)->(6,23)->(3,24)->(3,25)->(3,26)->(14,28)->(5,29)->(5,30)->(5,31)->(29,32)->(4,33)->(4,34)->(29,36)->(4,37)->(4,38)->(0,39)->(0,40)->(0,41)->(0,42)->(0,43)->(0,44)->(8,45)->(14,46)->(4,47)->(8,1):1

artificial: false set: [8775, 1546, 4556, 25235, 16915, 25236, 25237, 25238, 13078, 26201, 26202, 16730, 2653, 25821, 25822, 16864, 15714, 25059, 25060, 25061, 25062, 6631, 25704, 25705, 24235, 25451, 12204, 25902, 25903, 19376, 15473, 25460, 25461, 11320, 20669, 18047] start node= 21 start time= 45 capacity type= 2
(6,3)->(6,4)->(6,5)->(6,6)->(6,7)->(1,10)->(14,11)->(14,12)->(2,13)->(19,16)->(17,17)->(18,18)->(19,19)->(14,20)->(14,21)->(14,22)->(19,24)->(19,25)->(19,26)->(25,29)->(23,30)->(23,31)->(23,32)->(9,35)->(9,36)->(9,37)->(9,38)->(9,39)->(13,40)->(29,41)->(29,42)->(29,43)->(4,44)->(21,45)->(21,46)->(21,47)->(6,3):1

artificial: false set: [24200, 329, 6218, 25163, 25164, 25165, 25166, 6929, 3093, 1369, 25818, 25819, 25820, 25821, 25181, 25182, 25822, 25183, 25184, 25120, 25185, 25186, 7523, 24931, 24932, 24997, 15461, 24807, 24808, 25587, 13236, 25588, 4598, 15798, 4089, 7551, 18239] start node= 21 start time= 46 capacity type= 2
(17,3)->(17,4)->(17,5)->(18,6)->(29,8)->(4,9)->(8,11)->(8,12)->(8,13)->(8,14)->(8,15)->(7,16)->(7,17)->(3,19)->(3,20)->(3,21)->(1,25)->(6,26)->(8,29)->(8,30)->(8,31)->(8,32)->(8,33)->(8,34)->(8,35)->(14,36)->(4,37)->(4,38)->(0,39)->(0,40)->(0,41)->(21,42)->(21,43)->(21,44)->(21,45)->(21,46)->(21,47)->(17,3):1

artificial: false set: [15364, 24200, 25096, 3849, 25097, 25098, 25099, 25100, 25101, 25997, 25102, 25998, 11535, 25103, 9105, 25056, 6433, 10022, 21290, 20911, 26032, 26033, 26034, 25330, 26035, 25587, 25331, 26036, 25332, 26037, 26165, 25333, 26038, 26166, 26039, 26167, 26040, 26041, 4539, 13499, 25404, 18172, 25405, 25406] start node= 21 start time= 28 capacity type= 1
(6,0)->(6,1)->(17,3)->(17,4)->(29,5)->(29,6)->(29,7)->(29,8)->(4,9)->(15,11)->(13,12)->(13,13)->(13,14)->(13,15)->(26,16)->(26,17)->(26,18)->(26,19)->(26,20)->(26,21)->(26,22)->(26,23)->(26,24)->(26,25)->(26,26)->(4,27)->(21,28)->(25,29)->(25,30)->(25,31)->(9,33)->(11,34)->(11,35)->(11,36)->(11,37)->(11,38)->(6,40)->(6,41)->(6,42)->(6,43)->(6,44)->(6,45)->(6,46)->(6,47)->(6,0):2

artificial: false set: [23874, 5444, 25861, 25862, 25863, 7498, 3146, 13067, 25037, 20686, 25872, 24848, 25873, 24849, 25874, 24850, 25875, 25876, 13332, 25877, 25878, 25366, 25879, 25367, 19096, 17753, 25050, 26080, 23009, 1571, 10920, 19640, 5179, 13180, 16957, 5118, 25919] start node= 28 start time= 18 capacity type= 2
(23,0)->(23,1)->(23,2)->(23,3)->(23,4)->(23,5)->(23,6)->(23,7)->(23,8)->(8,10)->(14,11)->(19,13)->(27,16)->(27,17)->(28,18)->(5,20)->(12,22)->(12,23)->(12,24)->(3,26)->(14,28)->(5,29)->(5,30)->(1,32)->(1,33)->(1,34)->(1,35)->(14,36)->(22,37)->(22,38)->(22,39)->(22,40)->(20,41)->(5,42)->(5,43)->(25,46)->(23,47)->(23,0):1

artificial: false set: [20675, 26121, 24841, 26122, 1226, 26123, 8907, 14029, 9934, 9807, 15056, 6929, 26069, 3093, 26070, 26071, 23000, 25120, 26017, 26018, 24931, 24932, 19817, 23724, 15918, 21939, 25908, 25909, 25910, 25911, 25912, 25339, 25340, 25341, 25661] start node= 28 start time= 12 capacity type= 0
(26,1)->(26,2)->(26,3)->(27,5)->(27,6)->(27,7)->(27,8)->(28,9)->(28,10)->(28,11)->(28,12)->(15,13)->(11,15)->(7,16)->(7,17)->(3,19)->(3,20)->(3,21)->(1,25)->(1,26)->(9,27)->(18,29)->(18,30)->(17,32)->(25,35)->(23,36)->(23,37)->(23,38)->(23,39)->(23,40)->(23,41)->(11,43)->(11,44)->(11,45)->(11,46)->(26,1):1

artificial: false set: [6598, 25863, 20936, 14029, 2260, 10004, 25237, 8534, 19096, 24792, 17753, 24793, 25050, 24794, 25180, 25500, 25181, 25182, 19295, 25183, 25311, 20064, 25184, 25312, 24865, 25185, 25313, 24866, 25186, 25314, 24867, 7907, 25315, 4583, 5419, 363, 23723] start node= 28 start time= 11 capacity type= 2
(24,0)->(2,1)->(2,2)->(2,3)->(2,4)->(25,8)->(28,11)->(15,12)->(15,13)->(11,15)->(11,16)->(11,17)->(11,18)->(11,19)->(11,20)->(6,22)->(4,23)->(0,24)->(0,25)->(0,26)->(0,27)->(8,28)->(8,29)->(8,30)->(8,31)->(8,32)->(8,33)->(8,34)->(8,35)->(9,37)->(9,38)->(22,39)->(22,40)->(20,41)->(5,42)->(5,43)->(23,47)->(24,0):1

artificial: false set: [4549, 6598, 18182, 16903, 20487, 19081, 25738, 25739, 25483, 25740, 25484, 25741, 25485, 15438, 25486, 25935, 3152, 25936, 20177, 16849, 15702, 24857, 24995, 24996, 15461, 17258, 1578, 17582, 13103, 13234, 25586, 25587, 25588, 22581, 4343, 13304, 19065, 25083, 6460] start node= 21 start time= 38 capacity type= 2
(19,1)->(17,2)->(17,3)->(17,4)->(17,5)->(18,6)->(19,7)->(14,8)->(22,9)->(20,10)->(20,11)->(20,12)->(20,13)->(20,14)->(24,15)->(24,16)->(24,17)->(27,21)->(6,22)->(4,23)->(22,25)->(20,26)->(6,27)->(6,28)->(17,30)->(3,32)->(14,34)->(4,35)->(4,36)->(4,37)->(21,38)->(25,39)->(1,41)->(1,42)->(14,43)->(14,44)->(14,45)->(14,46)->(14,47)->(19,1):1

artificial: false set: [322, 18374, 25607, 26188, 26189, 26190, 26064, 26065, 26066, 26067, 25811, 26068, 25812, 26069, 25813, 26070, 26071, 26072, 15387, 24223, 24801, 15913, 22569, 25066, 25067, 25068, 25069, 25070, 25071, 4592, 25072, 25073, 25074, 25075, 25076, 6453, 15480, 26106, 26107, 26108, 26109, 26110, 26111] start node= 21 start time= 35 capacity type= 2
(27,0)->(27,1)->(27,2)->(27,3)->(27,4)->(27,5)->(27,6)->(27,7)->(27,8)->(27,9)->(6,10)->(6,11)->(6,12)->(6,13)->(6,14)->(6,15)->(6,16)->(6,17)->(6,18)->(6,19)->(6,20)->(6,21)->(17,23)->(17,24)->(18,25)->(17,27)->(29,28)->(29,29)->(29,30)->(29,31)->(4,32)->(0,33)->(0,34)->(21,35)->(21,36)->(21,37)->(21,38)->(27,42)->(27,43)->(27,44)->(27,45)->(27,46)->(27,47)->(27,0):1

artificial: false set: [9792, 25794, 25795, 25796, 25546, 19658, 25547, 25548, 25549, 14414, 24208, 25105, 25106, 25107, 25108, 25109, 25237, 25110, 25238, 25111, 9111, 7448, 25180, 25181, 25182, 25183, 25184, 25185, 25186, 7907, 25895, 25896, 25897, 4529, 18165, 20662, 25336, 25337, 25338, 25339, 25340, 25341, 25342, 25343] start node= 21 start time= 18 capacity type= 2
(11,0)->(7,1)->(7,2)->(7,3)->(7,4)->(7,5)->(7,6)->(7,7)->(7,8)->(16,10)->(16,11)->(16,12)->(16,13)->(16,14)->(29,16)->(4,17)->(21,18)->(21,19)->(21,20)->(21,21)->(25,22)->(23,23)->(23,24)->(23,25)->(23,26)->(8,28)->(8,29)->(8,30)->(8,31)->(8,32)->(8,33)->(8,34)->(8,35)->(9,37)->(9,38)->(9,39)->(11,40)->(11,41)->(11,42)->(11,43)->(11,44)->(11,45)->(11,46)->(11,47)->(11,0):1

artificial: false set: [14723, 16903, 15495, 25672, 19017, 25673, 3146, 25674, 25675, 25676, 25677, 25678, 25935, 25679, 9813, 15702, 6936, 13085, 25632, 2465, 25633, 25634, 25635, 25316, 25636, 26148, 25637, 25126, 25127, 8747, 17582, 20080, 23989, 13304, 25468, 11196, 17023] start node= 28 start time= 36 capacity type= 2
(18,0)->(18,1)->(18,2)->(18,3)->(18,4)->(18,5)->(18,6)->(19,7)->(14,8)->(22,9)->(9,11)->(13,12)->(20,14)->(24,15)->(24,16)->(2,17)->(11,20)->(11,21)->(7,22)->(7,23)->(7,24)->(3,26)->(14,28)->(14,29)->(19,31)->(16,35)->(28,36)->(28,37)->(17,39)->(18,40)->(18,41)->(18,42)->(18,43)->(18,44)->(18,45)->(18,46)->(18,47)->(18,0):1

artificial: false set: [8576, 24768, 24769, 24770, 24771, 516, 24772, 25350, 25230, 25231, 16915, 5397, 10903, 25693, 25694, 25695, 25696, 24801, 25697, 24802, 25698, 24803, 10597, 485, 24809, 25897, 24810, 25898, 24811, 19371, 24812, 24813, 24814, 24815, 13172, 2745] start node= 0 start time= 0 capacity type= 2
(0,0)->(0,1)->(0,2)->(0,3)->(0,4)->(0,5)->(12,6)->(12,7)->(3,9)->(19,13)->(19,14)->(19,15)->(19,16)->(19,17)->(19,18)->(19,19)->(14,20)->(5,21)->(23,25)->(23,26)->(23,27)->(9,30)->(9,31)->(9,32)->(0,33)->(0,34)->(0,35)->(0,36)->(12,37)->(0,41)->(0,42)->(0,43)->(0,44)->(0,45)->(0,46)->(0,47)->(0,0):1

artificial: false set: [8896, 24193, 24962, 24963, 15495, 25672, 25992, 19467, 22605, 17741, 25038, 25039, 25040, 16915, 25621, 25622, 16986, 20893, 5217, 15714, 4516, 5157, 18153, 25898, 16884, 13172, 25781, 25782, 25783, 25784, 15737, 20665, 25978, 25979, 25980, 6142, 25215] start node= 21 start time= 5 capacity type= 2
(29,1)->(4,2)->(4,3)->(4,4)->(21,5)->(21,6)->(21,7)->(21,8)->(21,9)->(25,10)->(25,11)->(25,12)->(25,13)->(9,15)->(9,16)->(18,18)->(19,19)->(14,20)->(5,21)->(25,24)->(25,25)->(23,26)->(23,27)->(20,29)->(5,30)->(5,31)->(5,32)->(5,33)->(19,36)->(17,37)->(17,38)->(17,39)->(18,40)->(18,41)->(19,42)->(27,45)->(6,46)->(29,1):1

artificial: false set: [25920, 25475, 12420, 25094, 25095, 25740, 4556, 25741, 18189, 20686, 25935, 25936, 20177, 20113, 25493, 25494, 19295, 16930, 23013, 24235, 17582, 2670, 25713, 23734, 13495, 13559, 25400, 6136, 24888, 25401, 24889, 11194, 24890, 24891, 24892, 24893] start node= 28 start time= 22 capacity type= 2
(24,0)->(24,1)->(15,5)->(15,6)->(15,7)->(13,8)->(13,9)->(13,10)->(20,12)->(20,13)->(20,14)->(24,15)->(24,16)->(24,17)->(27,21)->(28,22)->(15,23)->(2,24)->(2,25)->(2,26)->(2,27)->(2,28)->(2,29)->(2,30)->(19,33)->(19,34)->(14,35)->(14,36)->(6,38)->(6,39)->(6,40)->(29,43)->(4,44)->(21,45)->(25,46)->(23,47)->(24,0):1

artificial: false set: [22401, 13954, 8516, 25673, 25674, 25675, 11724, 25676, 25677, 25678, 13519, 25679, 7890, 19030, 15702, 16855, 11545, 3867, 11552, 25632, 353, 25633, 25634, 25635, 20003, 25636, 25637, 7143, 15465, 21290, 15658, 25517, 25518, 8560, 25845, 25142, 8760, 25592, 13499, 24830, 1215] start node= 26 start time= 33 capacity type= 2
(18,0)->(18,1)->(18,2)->(18,3)->(18,4)->(18,5)->(18,6)->(19,7)->(17,8)->(17,9)->(18,10)->(15,11)->(13,12)->(1,14)->(1,15)->(9,16)->(0,17)->(8,18)->(9,20)->(22,21)->(22,22)->(9,24)->(13,25)->(26,26)->(4,27)->(15,29)->(15,30)->(15,31)->(13,32)->(26,33)->(15,34)->(24,35)->(7,38)->(7,39)->(18,41)->(18,42)->(18,43)->(18,44)->(18,45)->(18,46)->(18,47)->(18,0):1

artificial: false set: [25860, 25861, 25862, 25863, 25098, 6606, 9614, 13202, 20885, 19096, 10012, 18080, 4515, 18148, 2473, 16426, 5995, 25389, 25390, 15668, 13557, 24886, 24887, 25207, 24888, 8888, 17273, 4543, 10559] start node= 21 start time= 32 capacity type= 2
(14,2)->(4,3)->(21,4)->(25,5)->(9,7)->(9,8)->(18,10)->(10,14)->(18,20)->(15,21)->(2,22)->(2,23)->(2,24)->(2,25)->(11,28)->(6,30)->(4,31)->(21,32)->(22,36)->(22,37)->(22,38)->(22,39)->(22,40)->(20,41)->(6,42)->(6,43)->(12,45)->(12,46)->(12,47)->(14,2):1

artificial: false set: [9792, 5955, 11141, 20487, 7112, 13519, 25424, 11409, 26134, 26006, 26135, 26136, 24857, 26137, 15706, 1242, 26138, 25691, 9115, 26139, 25692, 26140, 26080, 26081, 7393, 26082, 26083, 26084, 23013, 25518, 23795, 25340, 16957, 25341, 23741, 25342, 25343] start node= 28 start time= 23 capacity type= 2
(11,0)->(7,1)->(6,3)->(12,5)->(7,8)->(18,10)->(19,11)->(19,12)->(19,13)->(27,16)->(27,17)->(27,18)->(27,19)->(27,20)->(27,21)->(28,22)->(28,23)->(28,24)->(28,25)->(28,26)->(28,27)->(28,28)->(28,29)->(15,30)->(15,31)->(13,32)->(13,33)->(28,35)->(25,38)->(25,39)->(1,41)->(1,42)->(9,43)->(11,44)->(11,45)->(11,46)->(11,47)->(11,0):1

artificial: false set: [25794, 25795, 25796, 26052, 21253, 25990, 25991, 24200, 24969, 1226, 24970, 25227, 24971, 25228, 24972, 24973, 25422, 24974, 25423, 24975, 25424, 24976, 25425, 25426, 8535, 19096, 17753, 25050, 25051, 4892, 26205, 26206, 26207, 11555, 26160, 4529, 26161, 26162, 26163, 26164, 18165, 26165, 26166, 26167, 20472, 8765] start node= 26 start time= 36 capacity type= 1
(29,0)->(29,1)->(29,2)->(29,3)->(29,4)->(29,5)->(29,6)->(29,7)->(29,8)->(4,9)->(4,10)->(4,11)->(4,12)->(4,13)->(4,14)->(4,15)->(4,16)->(4,17)->(21,18)->(21,19)->(21,20)->(21,21)->(25,22)->(25,23)->(25,24)->(1,26)->(9,27)->(9,28)->(9,29)->(13,30)->(13,31)->(13,32)->(13,33)->(13,34)->(13,35)->(26,36)->(26,37)->(9,39)->(22,40)->(20,41)->(5,42)->(5,43)->(5,44)->(29,45)->(29,46)->(29,47)->(29,0):1

artificial: false set: [4549, 6606, 15502, 25679, 25814, 15702, 16855, 25815, 25816, 25817, 10012, 10910, 24991, 24992, 24928, 25632, 24993, 24929, 25633, 24994, 24930, 25634, 24995, 24931, 25635, 24996, 24932, 25636, 3237, 25637, 2473, 15465, 15658, 13547, 24887, 24888, 25592, 18234, 2556] start node= 21 start time= 39 capacity type= 2
(18,0)->(18,1)->(18,2)->(18,3)->(18,4)->(18,5)->(18,6)->(19,7)->(17,8)->(17,9)->(18,10)->(15,11)->(2,12)->(12,14)->(3,16)->(3,17)->(3,18)->(3,19)->(3,20)->(3,21)->(2,23)->(2,24)->(2,25)->(11,28)->(6,30)->(4,31)->(4,32)->(4,33)->(4,34)->(4,35)->(4,36)->(4,37)->(21,38)->(21,39)->(21,40)->(21,41)->(21,42)->(17,46)->(18,47)->(18,0):1

artificial: false set: [25153, 14722, 7112, 3146, 25037, 5070, 25742, 20686, 25743, 25744, 25745, 25746, 25747, 25107, 25108, 25109, 5974, 25110, 26006, 25111, 26007, 26008, 26009, 26010, 26011, 26012, 26013, 19679, 17252, 10920, 15658, 25135, 7472, 7538, 23795, 25077, 13499, 13180, 11196] start node= 28 start time= 35 capacity type= 2
(8,1)->(8,2)->(7,3)->(7,4)->(7,5)->(7,6)->(7,7)->(7,8)->(18,10)->(15,11)->(13,12)->(20,14)->(20,15)->(20,16)->(20,17)->(20,18)->(20,19)->(20,20)->(6,21)->(6,22)->(12,24)->(3,26)->(14,28)->(5,29)->(5,30)->(7,31)->(7,32)->(16,34)->(28,35)->(25,38)->(25,39)->(25,40)->(25,41)->(25,42)->(25,43)->(25,44)->(25,45)->(25,46)->(23,47)->(8,1):1

===========================new round 1=========================
-------------Start to solve SolveVehicleCoverCGHeuristic()---------------
flowCoverCount=513
Time of first LP solve= 192966
There are 84498 columns added to the model.
Tried aggregator 1 time.
MIP Presolve eliminated 24255 rows and 35051 columns.
MIP Presolve modified 397550 coefficients.
Reduced MIP has 603 rows, 49537 columns, and 789398 nonzeros.
Reduced MIP has 84 binaries, 49453 generals, 0 SOSs, and 0 indicators.
Presolve time = 0.92 sec. (973.41 ticks)
Found incumbent of value 226041.000000 after 1.42 sec. (1431.05 ticks)
Tried aggregator 1 time.
Reduced MIP has 603 rows, 49537 columns, and 789398 nonzeros.
Reduced MIP has 84 binaries, 49453 generals, 0 SOSs, and 0 indicators.
Presolve time = 0.20 sec. (143.10 ticks)
Probing time = 0.08 sec. (6.12 ticks)
MIP emphasis: balance optimality and feasibility.
MIP search method: dynamic search.
Parallel mode: deterministic, using up to 4 threads.
Root relaxation solution time = 10.24 sec. (4223.53 ticks)

        Nodes                                         Cuts/
   Node  Left     Objective  IInf  Best Integer    Best Bound    ItCnt     Gap

*     0+    0                       226041.0000        0.0000           100.00%
*     0+    0                        37306.0000        0.0000           100.00%
*     0+    0                        20833.0000        0.0000           100.00%
*     0+    0                        19958.0000        0.0000           100.00%
      0     0    11226.2030   306    19958.0000    11226.2030     2664   43.75%
*     0+    0                        14653.0000    11226.2030            23.39%
*     0+    0                        14350.0000    11226.2030            21.77%
      0     0    11619.7275   328    14350.0000      Cuts: 73     3521   19.03%
      0     0    11669.4151   333    14350.0000   MIRcuts: 33     3868   18.68%
      0     0    11682.3643   333    14350.0000      Cuts: 12     4105   18.59%
      0     0    11685.8048   332    14350.0000       Cuts: 5     4247   18.57%
      0     0    11687.3133   332    14350.0000    MIRcuts: 2     4342   18.56%
      0     0    11687.5311   334    14350.0000    MIRcuts: 1     4368   18.55%
      0     0    11689.6455   338    14350.0000   ZeroHalf: 1     4440   18.54%
      0     2    11689.6455   338    14350.0000    11689.6455     4440   18.54%
Elapsed time = 35.03 sec. (19747.02 ticks, tree = 0.00 MB, solutions = 6)
      2     4    11790.8218   325    14350.0000    11689.6455     5212   18.54%
      4     6    11801.9074   333    14350.0000    11691.6928     5447   18.52%
      5     7    11829.7020   324    14350.0000    11691.6928     5778   18.52%
      8    10    11837.5511   326    14350.0000    11691.6928     6675   18.52%
     10    12    11835.8984   315    14350.0000    11691.6928     7145   18.52%
     11    13    11729.9333   345    14350.0000    11691.9142     7403   18.52%
     14    16    11857.3773   337    14350.0000    11691.9142     8174   18.52%
     15    17    11731.0790   344    14350.0000    11691.9142     8521   18.52%
     19    21    11740.4442   348    14350.0000    11730.0508     9545   18.26%
     23    25    11763.0203   333    14350.0000    11730.0508    10584   18.26%
Elapsed time = 46.99 sec. (26163.86 ticks, tree = 0.00 MB, solutions = 6)
     30    32    11798.4984   317    14350.0000    11731.0800    11902   18.25%
     37    39    11809.5048   314    14350.0000    11731.0800    12811   18.25%
     47    49    12009.0009   296    14350.0000    11731.0800    14495   18.25%
     61    63    11884.4840   305    14350.0000    11731.0800    16498   18.25%
     75    77    11874.2748   302    14350.0000    11731.0800    19119   18.25%
     85    87    12119.1473   292    14350.0000    11731.0800    20774   18.25%
     97    99    12215.1433   263    14350.0000    11731.0800    23304   18.25%
    136   138    12001.9728   281    14350.0000    11731.0800    29377   18.25%
    140   142    11959.9224   279    14350.0000    11731.0800    30031   18.25%
    156   158    11984.5538   278    14350.0000    11731.0800    32813   18.25%
Elapsed time = 85.20 sec. (40730.86 ticks, tree = 1.65 MB, solutions = 6)
    187   189    12399.0246   224    14350.0000    11731.0800    37843   18.25%
    203   205    12457.3891   208    14350.0000    11731.0800    40159   18.25%
    220   222    12381.9982   219    14350.0000    11731.0800    42766   18.25%
    239   241    12605.0338   194    14350.0000    11731.0800    45443   18.25%
    252   254    12145.8210   258    14350.0000    11731.0800    47318   18.25%
    272   274    12188.8156   247    14350.0000    11731.0800    50091   18.25%
*   277+  277                        13569.0000    11731.0800            13.54%
    295   297    12531.3509   190    13569.0000    11731.0800    52830   13.54%
    311   313    12575.4105   179    13569.0000    11731.0800    54887   13.54%
    331   333    12289.3651   222    13569.0000    11731.0800    57607   13.54%
    351   353    12314.7811   212    13569.0000    11731.0800    60041   13.54%
Elapsed time = 114.29 sec. (51533.33 ticks, tree = 13.21 MB, solutions = 7)
    367   369    12395.3823   210    13569.0000    11731.0800    62007   13.54%
    391   393    12465.9477   195    13569.0000    11731.0800    64454   13.54%
    476   460    12495.7034   180    13569.0000    11731.0800    70599   13.54%
    496   476    12538.7812   184    13569.0000    11731.0800    72302   13.54%
    510   490    11818.0283   326    13569.0000    11731.0800    74274   13.54%
    522   502    11857.6473   307    13569.0000    11731.0800    75667   13.54%
    639   598    12664.1202   151    13569.0000    11740.4513    83821   13.48%
*   640+  597                        13478.0000    11740.4513            12.89%
*   640+  597                        13408.0000    11740.4513            12.44%
    640   599    11776.1247   333    13408.0000    11740.4513    84062   12.44%
    652   611    11819.6691   316    13408.0000    11740.4513    85955   12.44%
    664   623    11858.5153   303    13408.0000    11740.4513    87442   12.44%
Elapsed time = 143.57 sec. (62819.08 ticks, tree = 29.63 MB, solutions = 7)
    736   643    12904.8525   119    13408.0000    11740.4513    94799   12.44%
    745   652    11883.0296   301    13408.0000    11740.4513    96255   12.44%
*   820+  725                        13373.0000    11740.4513            12.21%
*   820+  725                        13364.0000    11740.4513            12.15%
    820   727    13171.0307    39    13364.0000    11740.4513   104912   12.15%
    835   742    11946.2195   288    13364.0000    11740.4513   107282   12.15%
    907   791    11986.9196   282    13364.0000    11740.4513   115109   12.15%
    926   810    11956.8343   287    13364.0000    11740.4513   117562   12.15%
    935   815    11997.9886   282    13364.0000    11740.4513   118554   12.15%

Mixed integer rounding cuts applied:  128
Zero-half cuts applied:  9

Root node processing (before b&c):
  Real time             =   34.97 sec. (19726.78 ticks)
Parallel b&c, 4 threads:
  Real time             =  145.08 sec. (57379.32 ticks)
  Sync time (average)   =    5.21 sec.
  Wait time (average)   =    5.32 sec.
                          ------------
Total (root+branch&cut) =  180.06 sec. (77106.10 ticks)
optimal objective= 13364.0+77233.0=90597.0

Step 4-AdjustFlow
Exception in thread "main" java.lang.OutOfMemoryError: GC overhead limit exceeded
	at LocalSearchHeuristicSolver.AdjustFlow(LocalSearchHeuristicSolver.java:995)
	at LocalSearchHeuristicSolver.Neighbourhood(LocalSearchHeuristicSolver.java:935)
	at LocalSearchHeuristicSolver.TabuSearch(LocalSearchHeuristicSolver.java:660)
	at LocalSearchHeuristicSolver.main(LocalSearchHeuristicSolver.java:2538)

x变量数目太多内存不够用
-------------------------------------------------------------------------------------------------------
number of service arcs=24768
number of holding arcs=1440

Time of first LP solve= 188756

There are 28309 columns added to the model.

Tried aggregator 2 times.
MIP Presolve eliminated 588122 rows and 505001 columns.
MIP Presolve modified 13631 coefficients.
Aggregator did 11847 substitutions.
Reduced MIP has 889 rows, 4625 columns, and 50102 nonzeros.
Reduced MIP has 51 binaries, 4160 generals, 0 SOSs, and 0 indicators.
Presolve time = 0.40 sec. (446.11 ticks)
Found incumbent of value 2.0002972e+09 after 0.48 sec. (523.35 ticks)
Probing time = 0.08 sec. (0.50 ticks)
Tried aggregator 1 time.
Reduced MIP has 889 rows, 4625 columns, and 50102 nonzeros.
Reduced MIP has 51 binaries, 4163 generals, 0 SOSs, and 0 indicators.
Presolve time = 0.01 sec. (12.52 ticks)
Probing time = 0.08 sec. (0.52 ticks)
MIP emphasis: balance optimality and feasibility.
MIP search method: dynamic search.
Parallel mode: deterministic, using up to 4 threads.
Root relaxation solution time = 0.12 sec. (91.38 ticks)

        Nodes                                         Cuts/
   Node  Left     Objective  IInf  Best Integer    Best Bound    ItCnt     Gap

*     0+    0                       2.00030e+09    65355.0000           100.00%
*     0+    0                       4.00131e+08    65355.0000            99.98%
*     0+    0                       101400.0000    65355.0000            35.55%
*     0+    0                        97948.0000    65355.0000            33.28%
*     0+    0                        97052.0000    65355.0000            32.66%
*     0+    0                        96884.0000    65355.0000            32.54%
*     0+    0                        96883.0000    65355.0000            32.54%
      0     0    81357.3661   132    96883.0000    81357.3661      890   16.03%
*     0+    0                        85596.0000    81357.3661             4.95%
*     0+    0                        85326.0000    81357.3661             4.65%
      0     0    82334.2963   143    85326.0000     Cuts: 151     1347    3.51%
*     0+    0                        84826.0000    82334.2963             2.94%
      0     0    82599.3675   142    84826.0000      Cuts: 86     1682    2.62%
      0     0    82700.5436   147    84826.0000   MIRcuts: 61     1929    2.51%
*     0+    0                        84391.0000    82700.5436             2.00%
      0     0    82754.8032   146    84391.0000   MIRcuts: 38     2059    1.94%
      0     0    82775.3115   154    84391.0000   MIRcuts: 30     2186    1.91%
      0     0    82797.6040   147    84391.0000      Cuts: 24     2287    1.89%
      0     0    82809.8967   147    84391.0000   MIRcuts: 21     2375    1.87%
      0     0    82820.0799   149    84391.0000   MIRcuts: 13     2441    1.86%
      0     0    82838.3765   144    84391.0000   MIRcuts: 23     2543    1.84%
      0     0    82852.7506   154    84391.0000      Cuts: 20     2614    1.82%
      0     0    82855.5819   150    84391.0000    MIRcuts: 8     2651    1.82%
      0     0    82855.8813   149    84391.0000    MIRcuts: 7     2671    1.82%
      0     2    82855.8813   149    84391.0000    82855.8813     2671    1.82%
Elapsed time = 4.04 sec. (2599.92 ticks, tree = 0.00 MB, solutions = 11)
      9    11    83114.8692   149    84391.0000    82859.4111     4870    1.81%
     34    36    83046.4004   144    84391.0000    82905.9530    10053    1.76%
     39    41    83215.7416   136    84391.0000    82905.9530    11109    1.76%
    104   106    83319.7284   134    84391.0000    82905.9530    17793    1.76%
    178   180    83794.7043    82    84391.0000    82905.9530    23236    1.76%
*   226+  226                        84149.0000    82905.9530             1.48%
    261   261    83988.4292    55    84149.0000    82905.9530    27890    1.48%
    345   329    83073.2683   134    84149.0000    82936.1496    34998    1.44%
    411   368    83168.4400   127    84149.0000    82936.1496    42317    1.44%
    455   412    83229.1025   114    84149.0000    82936.1496    46507    1.44%
*   538+  493                        83975.0000    82936.1496             1.24%
*   538+  493                        83967.0000    82936.1496             1.23%
*   538+  493                        83864.0000    82936.1496             1.11%
    822   648    83835.2844   111    83864.0000    82938.5555    62943    1.10%
Elapsed time = 8.65 sec. (5856.59 ticks, tree = 7.70 MB, solutions = 15)
   1213   935    83215.9928   139    83864.0000    82979.4320    84629    1.05%
   1572  1255    83653.6031    97    83864.0000    82997.7312   107370    1.03%
   1902  1487    83394.2682   118    83864.0000    83024.5414   124321    1.00%

Mixed integer rounding cuts applied:  245
Zero-half cuts applied:  1
Lift and project cuts applied:  5
Gomory fractional cuts applied:  2

Root node processing (before b&c):
  Real time             =    4.09 sec. (2657.89 ticks)
Parallel b&c, 4 threads:
  Real time             =    8.98 sec. (6401.69 ticks)
  Sync time (average)   =    0.91 sec.
  Wait time (average)   =    0.99 sec.
                          ------------
Total (root+branch&cut) =   13.07 sec. (9059.58 ticks)
optimal objective= 83864.0

artificial: false set: [14722, 14214, 19017, 11724, 1358, 20239, 5967, 10577, 23891, 4756, 14488, 26139, 26140, 13154, 25575, 6378, 8747, 25390, 25011, 4789, 309, 18166, 20471, 1849, 2875, 23741, 13950, 10559] start node= 14 start time= 2 capacity type= 2
(14,2)->(5,3)->(5,4)->(16,6)->(22,9)->(9,11)->(13,12)->(1,14)->(6,15)->(12,17)->(0,21)->(21,22)->(25,23)->(1,25)->(28,27)->(28,28)->(28,29)->(15,30)->(24,31)->(16,34)->(28,35)->(5,37)->(16,39)->(16,40)->(6,42)->(3,43)->(12,46)->(12,47)->(14,2):1

artificial: false set: [11329, 19653, 19784, 6218, 5133, 26002, 25877, 25878, 25879, 25306, 11226, 25307, 17756, 25181, 25182, 1247, 13215, 8736, 4576, 929, 18147, 20963, 20644, 26150, 23463, 8231, 10092, 7663] start node= 14 start time= 15 capacity type= 2
(9,0)->(13,1)->(21,3)->(25,4)->(23,5)->(23,6)->(23,7)->(23,8)->(11,10)->(11,11)->(11,12)->(14,15)->(4,16)->(0,17)->(23,21)->(8,23)->(6,26)->(8,29)->(8,30)->(8,31)->(25,34)->(25,35)->(28,38)->(28,39)->(13,42)->(20,44)->(5,45)->(1,47)->(9,0):1

artificial: false set: [25350, 8585, 13067, 9934, 15058, 26005, 26006, 10903, 9431, 1243, 25244, 9117, 26080, 23009, 26017, 23394, 21218, 8548, 485, 1194, 16881, 1269, 20919, 3129, 1083, 16957, 24318] start node= 10 start time= 23 capacity type= 2
(26,1)->(26,2)->(9,4)->(0,5)->(12,6)->(12,7)->(3,9)->(14,11)->(19,13)->(27,16)->(27,17)->(28,18)->(1,21)->(10,23)->(0,27)->(29,30)->(19,33)->(17,34)->(25,37)->(25,38)->(25,39)->(9,41)->(0,42)->(1,43)->(9,44)->(9,45)->(11,46)->(26,1):1

artificial: false set: [5056, 16711, 4104, 11790, 13520, 6929, 3217, 11409, 23891, 2644, 15382, 24215, 14488, 25178, 7899, 3427, 24867, 25575, 20458, 6378, 8557, 25390, 4789, 2875, 1212, 8765, 638, 10943] start node= 17 start time= 22 capacity type= 2
(3,1)->(2,3)->(2,4)->(19,7)->(25,10)->(1,12)->(9,13)->(0,14)->(5,16)->(7,17)->(3,19)->(17,22)->(29,23)->(4,24)->(8,26)->(8,27)->(9,29)->(13,30)->(15,32)->(13,33)->(28,35)->(5,37)->(16,39)->(16,40)->(6,42)->(3,43)->(12,46)->(12,47)->(3,1):1

artificial: false set: [25920, 25664, 25665, 24834, 1219, 12228, 8516, 19077, 17734, 4871, 25673, 20938, 2380, 26125, 20686, 26126, 14740, 2389, 24216, 3865, 19295, 23391, 16931, 8550, 295, 18153, 16747, 20209, 15730, 25784, 15738, 13563] start node= 21 start time= 8 capacity type= 2
(24,0)->(24,1)->(16,4)->(9,6)->(0,7)->(21,8)->(21,9)->(25,10)->(28,13)->(28,14)->(28,15)->(1,18)->(1,19)->(9,20)->(22,21)->(20,22)->(5,23)->(29,24)->(4,25)->(15,27)->(2,28)->(18,32)->(18,33)->(18,34)->(19,35)->(14,36)->(2,37)->(18,41)->(18,42)->(19,43)->(25,46)->(23,47)->(24,0):1

artificial: false set: [20672, 7878, 4358, 7559, 19473, 11538, 6612, 19096, 17753, 25050, 25051, 25563, 4765, 14751, 16991, 22562, 24997, 25128, 10089, 7465, 13164, 5228, 23789, 8753, 6195, 17267, 26035, 22004, 9080, 14716] start node= 26 start time= 19 capacity type= 2
(27,2)->(6,3)->(8,6)->(9,8)->(11,9)->(14,12)->(5,13)->(16,15)->(9,17)->(13,18)->(26,19)->(26,20)->(8,23)->(7,24)->(7,25)->(16,27)->(16,28)->(28,29)->(25,32)->(23,33)->(20,35)->(6,36)->(4,37)->(4,38)->(22,40)->(20,41)->(5,42)->(5,43)->(5,44)->(19,47)->(27,2):1

artificial: false set: [25473, 23875, 13573, 24839, 24840, 24841, 1226, 25292, 20174, 26069, 26070, 2582, 26071, 23000, 24796, 23010, 3875, 10792, 23721, 9453, 17581, 10542, 49, 13234, 5109, 13498, 8571, 11195, 509] start node= 28 start time= 9 capacity type= 2
(0,1)->(27,5)->(27,6)->(27,7)->(27,8)->(28,9)->(15,10)->(13,11)->(20,13)->(24,14)->(27,18)->(28,19)->(5,21)->(1,23)->(1,24)->(1,25)->(1,26)->(9,27)->(0,28)->(0,29)->(12,30)->(14,33)->(14,34)->(4,35)->(15,37)->(2,38)->(12,40)->(10,44)->(10,45)->(0,1):1

artificial: false set: [9984, 25664, 16834, 3843, 11526, 13318, 19079, 7498, 13259, 2380, 16916, 10645, 25752, 25380, 21991, 19817, 9136, 15729, 6578, 13493, 25461, 17593, 20090, 25339, 24891, 25340, 25341, 25342, 24830, 25343, 1215] start node= 26 start time= 7 capacity type= 1
(11,0)->(6,2)->(4,3)->(15,5)->(13,6)->(26,7)->(8,10)->(14,11)->(1,14)->(1,15)->(9,16)->(19,20)->(14,21)->(14,22)->(22,23)->(20,24)->(20,25)->(24,26)->(2,27)->(2,28)->(18,32)->(18,33)->(19,34)->(12,36)->(12,37)->(23,41)->(11,43)->(11,44)->(11,45)->(11,46)->(11,47)->(11,0):1

artificial: false set: [25920, 25921, 20686, 24848, 9431, 24795, 26012, 24796, 26013, 24797, 24798, 19295, 1183, 1569, 24995, 24996, 14693, 24997, 23718, 24807, 11245, 25264, 25265, 20210, 13234, 25266, 25267, 25268, 25269, 4598, 25270, 13495, 376, 25400, 7673, 25401, 25402, 25403, 25404] start node= 28 start time= 6 capacity type= 0
(24,0)->(24,1)->(24,2)->(16,5)->(28,6)->(15,7)->(13,8)->(13,9)->(13,10)->(13,11)->(13,12)->(13,13)->(10,16)->(10,17)->(10,18)->(10,19)->(10,20)->(10,21)->(10,22)->(10,23)->(0,27)->(0,28)->(0,29)->(0,30)->(0,31)->(1,32)->(1,33)->(14,34)->(4,35)->(4,36)->(4,37)->(4,38)->(0,39)->(0,40)->(8,41)->(25,44)->(25,45)->(25,46)->(23,47)->(24,0):1

artificial: false set: [3136, 13314, 19075, 7492, 6598, 8775, 7112, 1291, 25293, 25294, 25998, 9105, 339, 3863, 25432, 10910, 9826, 17252, 13157, 11753, 2282, 15658, 13547, 9455, 20911, 7475, 14773, 25077, 25014, 5047, 13561, 2556] start node= 18 start time= 10 capacity type= 2
(0,3)->(8,4)->(14,5)->(5,6)->(5,7)->(7,8)->(18,10)->(15,11)->(2,12)->(12,14)->(3,16)->(14,18)->(22,19)->(20,20)->(6,21)->(6,22)->(4,23)->(15,25)->(2,26)->(25,30)->(25,31)->(9,33)->(11,34)->(7,35)->(16,37)->(9,39)->(13,40)->(13,41)->(1,43)->(10,45)->(10,46)->(10,47)->(0,3):2

artificial: false set: [8576, 11522, 20233, 25098, 25099, 24203, 6476, 15502, 15695, 25936, 25937, 25237, 22997, 25238, 8535, 19096, 11290, 25564, 25565, 24801, 20130, 7907, 25510, 23718, 25511, 4524, 18157, 14766, 20654, 13488, 25393, 370, 21939, 13495, 13944, 25400, 17273, 25401, 19263] start node= 26 start time= 3 capacity type= 1
(15,0)->(13,1)->(13,2)->(26,3)->(27,5)->(28,6)->(15,7)->(13,8)->(13,9)->(13,10)->(29,11)->(4,12)->(21,13)->(25,14)->(23,15)->(24,16)->(24,17)->(24,18)->(15,22)->(15,23)->(15,24)->(24,25)->(16,28)->(16,29)->(16,30)->(9,32)->(0,33)->(0,34)->(8,35)->(9,37)->(9,38)->(9,39)->(22,40)->(20,41)->(6,42)->(6,43)->(6,44)->(17,46)->(18,47)->(15,0):1

artificial: false set: [16899, 8579, 16963, 900, 6727, 10636, 4558, 5978, 2656, 13156, 4710, 423, 26154, 23851, 20076, 24877, 24878, 18287, 24879, 19376, 25013, 4598, 22582, 25079, 25080, 25081] start node= 5 start time= 5 capacity type= 2
(19,3)->(14,4)->(5,5)->(5,6)->(6,7)->(24,12)->(2,13)->(2,14)->(2,15)->(2,16)->(19,19)->(27,22)->(6,23)->(6,24)->(6,25)->(6,26)->(12,28)->(23,32)->(9,35)->(0,36)->(4,38)->(0,39)->(28,42)->(28,43)->(4,46)->(21,47)->(19,3):1

artificial: false set: [15488, 12227, 24900, 13317, 14021, 9799, 6348, 15502, 15695, 20113, 16915, 2581, 19030, 7448, 11545, 24925, 3422, 13920, 16930, 15714, 21290, 18220, 15729, 15473, 25460, 10935, 8760, 24953, 14458, 24954, 4539, 3451] start node= 2 start time= 36 capacity type= 2
(15,0)->(24,1)->(15,5)->(11,7)->(7,8)->(16,10)->(6,12)->(3,13)->(3,14)->(17,17)->(18,18)->(19,19)->(14,20)->(14,21)->(22,22)->(9,24)->(13,25)->(26,26)->(4,27)->(21,28)->(17,32)->(18,33)->(19,34)->(14,35)->(2,36)->(2,37)->(12,39)->(3,41)->(3,42)->(3,43)->(17,46)->(18,47)->(15,0):1

artificial: false set: [19649, 6340, 6598, 19658, 10645, 13207, 7516, 24799, 24800, 25888, 1185, 12386, 1378, 5987, 8227, 4520, 18153, 13229, 4590, 20655, 3125, 4535, 18168, 25913, 20665, 25914, 25978, 25915, 25979, 19772, 25980, 25981, 25982, 10559] start node= 21 start time= 9 capacity type= 2
(14,2)->(6,4)->(3,5)->(14,7)->(4,8)->(21,9)->(25,10)->(25,11)->(25,12)->(25,13)->(25,14)->(25,15)->(23,16)->(23,17)->(8,19)->(6,22)->(4,23)->(21,24)->(25,25)->(23,26)->(8,28)->(14,29)->(4,30)->(0,31)->(0,32)->(0,33)->(1,34)->(6,35)->(12,37)->(23,41)->(23,42)->(23,43)->(23,44)->(12,47)->(14,2):1

artificial: false set: [4868, 22601, 6666, 25615, 25616, 1554, 24213, 13525, 24791, 21975, 23000, 2267, 13084, 15393, 24290, 24226, 3875, 4582, 11558, 10537, 23721, 13546, 1389, 16878, 20464, 26161, 13171, 16949, 504, 6142, 25983] start node= 17 start time= 31 capacity type= 1
(29,1)->(29,2)->(19,5)->(27,8)->(28,9)->(15,10)->(2,11)->(25,15)->(25,16)->(1,18)->(14,19)->(5,20)->(29,21)->(4,22)->(0,23)->(0,24)->(12,25)->(14,28)->(19,30)->(17,31)->(17,32)->(17,33)->(29,34)->(4,35)->(15,37)->(13,38)->(26,39)->(27,41)->(6,42)->(1,45)->(6,46)->(29,1):1

artificial: false set: [1153, 13188, 5125, 9097, 4364, 7890, 9818, 17630, 14430, 8544, 24224, 1186, 8739, 1571, 12004, 13157, 7207, 1383, 20903, 24235, 25131, 7468, 19054, 4593, 1202, 8564, 309, 5046, 18166, 6136, 25403, 11196] start node= 21 start time= 22 capacity type= 2
(9,0)->(0,1)->(1,2)->(9,3)->(13,4)->(14,5)->(5,6)->(7,7)->(13,11)->(13,12)->(20,14)->(8,18)->(9,20)->(0,21)->(21,22)->(25,23)->(9,25)->(11,26)->(7,27)->(7,28)->(16,30)->(29,32)->(4,33)->(0,34)->(1,35)->(14,36)->(5,37)->(1,39)->(6,40)->(29,43)->(4,44)->(22,46)->(9,0):1

artificial: false set: [10752, 20096, 24897, 24898, 24899, 9412, 24900, 25799, 23308, 12237, 2581, 20893, 2590, 8416, 10599, 296, 18153, 1195, 1580, 14899, 18360, 25978, 25979, 25980, 25215] start node= 21 start time= 9 capacity type= 2
(12,0)->(10,4)->(0,8)->(21,9)->(25,10)->(25,11)->(25,12)->(25,13)->(9,15)->(9,16)->(16,19)->(21,23)->(21,24)->(27,28)->(24,32)->(2,33)->(2,34)->(2,35)->(2,36)->(2,37)->(12,39)->(0,43)->(1,44)->(14,45)->(2,46)->(12,0):1

artificial: false set: [25920, 25921, 15683, 22214, 18189, 20686, 3920, 13524, 9431, 25815, 25816, 25817, 25818, 25819, 7516, 25820, 24990, 24991, 19295, 11557, 14693, 23718, 363, 13229, 11245, 25264, 25265, 25266, 20210, 25267, 25268, 25269, 25270, 13495, 25400, 25401, 25402, 25403, 25404] start node= 26 start time= 38 capacity type= 0
(24,0)->(24,1)->(24,2)->(16,5)->(28,6)->(15,7)->(13,8)->(13,9)->(13,10)->(13,11)->(13,12)->(13,13)->(10,16)->(10,17)->(10,18)->(10,19)->(10,20)->(10,21)->(10,22)->(10,23)->(0,27)->(8,28)->(14,29)->(4,30)->(4,31)->(4,32)->(18,35)->(15,36)->(13,37)->(26,38)->(21,39)->(21,40)->(21,41)->(21,42)->(21,43)->(21,44)->(21,45)->(25,46)->(23,47)->(24,0):1

artificial: false set: [19649, 6598, 16903, 22601, 19467, 17742, 13525, 15702, 21975, 6618, 5148, 25757, 25888, 6433, 1569, 15459, 3875, 8227, 25636, 25637, 11558, 25898, 25197, 20655, 13234, 4535, 18168, 13304, 20665, 19065, 17722, 4603, 25019, 380, 8254, 5119] start node= 18 start time= 4 capacity type= 2
(6,1)->(17,3)->(18,4)->(18,5)->(18,6)->(19,7)->(14,8)->(22,9)->(20,10)->(5,11)->(5,12)->(25,15)->(23,16)->(23,17)->(8,19)->(6,22)->(4,23)->(21,24)->(25,25)->(23,26)->(23,27)->(20,29)->(20,30)->(5,31)->(1,33)->(14,34)->(4,35)->(15,37)->(13,38)->(26,39)->(27,41)->(6,42)->(4,43)->(0,44)->(8,45)->(8,46)->(6,1):1

artificial: false set: [7112, 4557, 13517, 14029, 25422, 13328, 19089, 17746, 5459, 4564, 341, 25111, 11547, 25499, 6620, 25500, 25822, 25311, 25312, 10597, 5157, 20904, 24809, 1194, 15658, 1387, 10097, 6579, 13172, 7542, 8762, 22396, 12031, 18047] start node= 21 start time= 46 capacity type= 0
(6,3)->(4,4)->(0,5)->(8,6)->(7,7)->(7,8)->(18,10)->(15,11)->(15,12)->(15,13)->(11,15)->(11,16)->(11,17)->(14,20)->(5,21)->(25,24)->(9,26)->(13,27)->(26,28)->(15,29)->(13,30)->(13,31)->(14,32)->(22,33)->(20,34)->(5,35)->(12,37)->(0,41)->(0,42)->(1,43)->(6,44)->(4,45)->(21,46)->(21,47)->(6,3):1

artificial: false set: [24768, 6464, 24769, 24770, 2566, 15495, 3146, 9614, 15442, 14742, 16408, 10920, 16426, 15405, 24238, 435, 3444, 15668, 13557, 8888, 3450, 13180, 4733, 25086, 4607, 25087] start node= 10 start time= 14 capacity type= 2
(0,0)->(0,1)->(0,2)->(0,3)->(16,6)->(9,8)->(18,10)->(10,14)->(18,20)->(15,21)->(2,22)->(12,24)->(3,26)->(14,28)->(5,29)->(6,30)->(6,31)->(6,32)->(17,34)->(3,36)->(17,39)->(18,40)->(3,42)->(17,45)->(29,46)->(4,47)->(0,0):1

artificial: false set: [10817, 14722, 11781, 16711, 20233, 1358, 5967, 20239, 3217, 23891, 2644, 14488, 25944, 24867, 25575, 20458, 6378, 25390, 4789, 13943, 2875, 24828, 14716, 24829, 23741, 13950, 10943] start node= 13 start time= 21 capacity type= 2
(3,1)->(2,3)->(2,4)->(19,7)->(25,10)->(1,12)->(1,13)->(1,14)->(6,15)->(12,17)->(13,21)->(15,23)->(24,24)->(24,25)->(16,28)->(28,29)->(15,30)->(24,31)->(16,34)->(28,35)->(5,37)->(16,39)->(16,40)->(6,42)->(3,43)->(12,46)->(12,47)->(3,1):1

artificial: false set: [1344, 16903, 1289, 3851, 13517, 14029, 25422, 9807, 13328, 7120, 19089, 6611, 16915, 15702, 11547, 6433, 15714, 24996, 24997, 5157, 15461, 24807, 1192, 20904, 12392, 9451, 1199, 17266, 25587, 13172, 25588, 4598, 8762, 6586, 22396, 12031] start node= 10 start time= 43 capacity type= 2
(1,0)->(6,1)->(17,3)->(17,4)->(17,5)->(18,6)->(19,7)->(14,8)->(6,10)->(4,11)->(15,13)->(11,15)->(7,16)->(18,18)->(19,19)->(14,20)->(5,21)->(25,24)->(9,26)->(13,27)->(26,28)->(15,29)->(13,30)->(13,31)->(14,32)->(22,33)->(20,34)->(6,35)->(4,36)->(4,37)->(4,38)->(0,39)->(0,40)->(1,41)->(10,43)->(0,47)->(1,0):1

artificial: false set: [3266, 24198, 13510, 3847, 25415, 25802, 24715, 655, 10896, 1237, 8534, 18903, 11352, 26202, 23772, 19552, 1188, 18411, 20655, 4977, 4595, 15476, 15669, 13497, 11386] start node= 17 start time= 20 capacity type= 1
(12,0)->(3,2)->(29,6)->(4,7)->(15,9)->(13,10)->(28,12)->(25,15)->(23,16)->(17,20)->(18,21)->(15,22)->(13,23)->(13,24)->(21,26)->(21,27)->(0,31)->(5,33)->(4,35)->(0,36)->(1,37)->(9,38)->(22,39)->(29,42)->(29,43)->(12,0):1

artificial: false set: [13511, 15495, 25672, 25673, 25674, 25675, 15502, 25679, 25616, 25617, 25618, 25619, 25620, 25621, 15702, 25622, 16855, 11544, 15706, 25691, 25692, 26080, 25632, 26081, 25633, 26082, 25634, 26083, 25635, 26084, 25636, 23013, 25637, 15465, 21290, 18220, 23734, 25592, 26041, 4539, 15932, 16957] start node= 26 start time= 25 capacity type= 0
(18,0)->(18,1)->(18,2)->(18,3)->(18,4)->(18,5)->(18,6)->(19,7)->(17,8)->(17,9)->(18,10)->(19,11)->(19,12)->(19,13)->(27,16)->(27,17)->(27,18)->(27,19)->(27,20)->(27,21)->(28,22)->(15,23)->(13,24)->(26,25)->(26,26)->(4,27)->(21,28)->(17,32)->(17,33)->(17,34)->(17,35)->(17,36)->(17,37)->(17,38)->(17,39)->(18,40)->(18,41)->(18,42)->(18,43)->(18,44)->(17,46)->(18,47)->(18,0):1

artificial: false set: [25475, 25158, 7495, 8583, 3851, 14029, 9807, 7120, 16915, 4564, 13332, 341, 11547, 7393, 15714, 16930, 5157, 19045, 20904, 12392, 24808, 24809, 1194, 1387, 5996, 11182, 2670, 25713, 6579, 13172, 8762, 6586, 22396, 13565] start node= 2 start time= 30 capacity type= 2
(7,1)->(6,3)->(4,4)->(0,5)->(8,6)->(8,7)->(14,8)->(6,10)->(4,11)->(15,13)->(11,15)->(7,16)->(18,18)->(19,19)->(14,20)->(5,21)->(25,24)->(9,26)->(13,27)->(26,28)->(15,29)->(2,30)->(19,33)->(19,34)->(14,35)->(14,36)->(22,37)->(9,39)->(0,40)->(0,41)->(0,42)->(1,43)->(6,44)->(12,46)->(7,1):1

artificial: false set: [6593, 4098, 25283, 25284, 329, 24970, 3851, 18187, 16972, 20492, 14029, 22543, 9999, 7508, 13078, 25818, 1246, 25247, 8736, 12001, 9445, 23333, 25704, 25705, 25706, 25707, 12338, 25461, 14455, 6585] start node= 21 start time= 42 capacity type= 2
(9,0)->(13,1)->(14,2)->(28,5)->(16,7)->(6,9)->(4,10)->(4,11)->(15,13)->(11,15)->(6,17)->(4,18)->(8,20)->(14,21)->(14,22)->(19,24)->(19,25)->(19,26)->(19,27)->(19,28)->(27,31)->(10,35)->(10,36)->(10,37)->(0,41)->(21,42)->(21,43)->(25,44)->(1,46)->(9,47)->(9,0):1

artificial: false set: [3970, 4101, 4358, 7559, 6345, 8779, 11404, 21261, 13519, 16915, 26196, 20885, 25242, 2653, 25247, 8544, 11552, 16864, 289, 15714, 13220, 18148, 24229, 19048, 11564, 12204, 21297, 15473, 25778, 25779, 8695, 7224, 3130, 23742] start node= 21 start time= 2 capacity type= 2
(9,0)->(0,1)->(21,2)->(21,3)->(21,4)->(25,5)->(9,7)->(6,9)->(3,10)->(14,12)->(2,13)->(19,16)->(17,17)->(18,18)->(19,19)->(14,20)->(4,21)->(8,23)->(7,24)->(13,28)->(28,30)->(15,31)->(13,32)->(26,33)->(4,34)->(29,36)->(29,37)->(4,38)->(22,40)->(9,42)->(9,43)->(13,44)->(26,45)->(9,47)->(9,0):1

artificial: false set: [5444, 5070, 17233, 1554, 25427, 21973, 25303, 23896, 25050, 23006, 19487, 23391, 6626, 11556, 10918, 24936, 9896, 24937, 5419, 26027, 13171, 1205, 9078, 23031, 3194, 21948, 7231] start node= 1 start time= 5 capacity type= 2
(20,1)->(6,2)->(1,5)->(9,6)->(11,7)->(11,8)->(26,11)->(26,12)->(27,14)->(28,15)->(1,18)->(14,19)->(5,20)->(12,22)->(3,24)->(3,25)->(3,26)->(5,30)->(7,31)->(13,35)->(13,36)->(26,37)->(27,39)->(28,40)->(5,42)->(5,43)->(23,47)->(20,1):1

artificial: false set: [9984, 13320, 19081, 25353, 25354, 25355, 3149, 25040, 16915, 13268, 15702, 1559, 26008, 9115, 6364, 11100, 25696, 25697, 5217, 25698, 25058, 6435, 15461, 16741, 16807, 17258, 25716, 20921, 25083, 25340, 25341, 25342, 25343, 13183] start node= 3 start time= 29 capacity type= 2
(11,0)->(6,2)->(6,3)->(17,5)->(18,6)->(19,7)->(12,9)->(12,10)->(12,11)->(12,12)->(19,16)->(19,17)->(19,18)->(19,19)->(14,20)->(1,23)->(14,24)->(22,25)->(20,26)->(6,27)->(6,28)->(3,29)->(14,31)->(5,32)->(5,33)->(19,36)->(19,37)->(25,40)->(25,41)->(9,43)->(11,44)->(11,45)->(11,46)->(11,47)->(11,0):1

artificial: false set: [25729, 25730, 23874, 25028, 3845, 11336, 13195, 5132, 3152, 17235, 24792, 11162, 1246, 6942, 8543, 24804, 4965, 4583, 16938, 18155, 20652, 25133, 19056, 14705, 13234, 4595, 6580, 373, 7862, 13495, 15737, 505, 25786, 19261, 20222] start node= 13 start time= 8 capacity type= 2
(22,0)->(20,1)->(20,2)->(20,3)->(6,4)->(4,5)->(15,7)->(13,8)->(21,10)->(21,11)->(25,12)->(23,13)->(24,14)->(16,17)->(28,18)->(5,20)->(5,21)->(4,23)->(0,24)->(0,25)->(12,26)->(7,29)->(7,30)->(3,32)->(14,34)->(4,35)->(0,36)->(0,37)->(8,38)->(18,41)->(19,42)->(14,43)->(5,44)->(1,46)->(9,47)->(22,0):1

artificial: false set: [25153, 23745, 19074, 25154, 17731, 7875, 13319, 19080, 8777, 6602, 12042, 13195, 15374, 24207, 13522, 25427, 1558, 1240, 4892, 26205, 4127, 11556, 8742, 12007, 1191, 17257, 4715, 6444, 24238, 4336, 5108, 25205, 21301, 4598, 13304, 19065, 17722, 4539, 18172, 20477, 1855] start node= 21 start time= 28 capacity type= 2
(8,1)->(8,2)->(8,3)->(9,5)->(9,6)->(13,7)->(14,8)->(22,9)->(20,10)->(5,11)->(6,12)->(17,14)->(29,15)->(4,16)->(22,18)->(20,19)->(5,20)->(1,22)->(14,23)->(22,24)->(20,25)->(6,26)->(4,27)->(21,28)->(25,29)->(1,31)->(28,33)->(15,34)->(13,35)->(13,36)->(26,37)->(4,38)->(0,39)->(1,40)->(9,41)->(13,42)->(14,43)->(5,44)->(29,45)->(29,46)->(4,47)->(8,1):1

artificial: false set: [25729, 9922, 25541, 25542, 14407, 24201, 13517, 1232, 9105, 17810, 10003, 6357, 21973, 23896, 4570, 25050, 10908, 3230, 11742, 19487, 2464, 24934, 24935, 3432, 491, 5419, 23031, 15483, 15676] start node= 15 start time= 29 capacity type= 1
(20,1)->(20,2)->(16,5)->(16,6)->(16,7)->(29,9)->(4,10)->(0,11)->(12,12)->(3,14)->(2,16)->(11,19)->(6,21)->(3,22)->(3,23)->(3,24)->(17,27)->(18,28)->(15,29)->(13,30)->(1,32)->(9,33)->(11,34)->(26,37)->(27,39)->(28,40)->(5,42)->(5,43)->(23,47)->(20,1):1

artificial: false set: [8576, 18689, 4741, 6470, 15496, 16907, 22605, 25231, 10896, 657, 3410, 25043, 25044, 25556, 23446, 11545, 16986, 19037, 4957, 15461, 24296, 21290, 13164, 5998, 4335, 14709, 15798, 15737, 4347] start node= 17 start time= 5 capacity type= 2
(12,0)->(3,2)->(17,5)->(18,6)->(29,8)->(19,11)->(14,12)->(5,13)->(4,15)->(22,17)->(16,20)->(16,21)->(28,22)->(13,25)->(26,26)->(4,27)->(22,29)->(9,31)->(9,32)->(0,33)->(5,35)->(5,36)->(5,37)->(6,38)->(17,40)->(18,41)->(19,42)->(27,45)->(6,46)->(12,0):1

artificial: false set: [9792, 8769, 12034, 19458, 17732, 4549, 18182, 20487, 12235, 25037, 11533, 1232, 15702, 16855, 24857, 7515, 25889, 7393, 6435, 24996, 4773, 15461, 14759, 15465, 1578, 362, 15658, 22190, 18159, 20656, 13235, 25592, 8569, 13499, 13180, 25404, 2492, 5118, 25343] start node= 2 start time= 44 capacity type= 2
(11,0)->(7,1)->(6,3)->(17,5)->(18,6)->(19,7)->(17,8)->(17,9)->(18,10)->(15,11)->(13,12)->(13,13)->(26,14)->(21,15)->(25,16)->(23,17)->(23,18)->(20,20)->(5,21)->(16,23)->(9,25)->(0,26)->(8,27)->(14,28)->(5,29)->(5,30)->(1,32)->(9,33)->(13,34)->(14,35)->(4,36)->(4,37)->(21,38)->(25,39)->(1,41)->(1,42)->(14,43)->(2,44)->(11,47)->(11,0):1

artificial: false set: [24193, 387, 26052, 21253, 26118, 6666, 2573, 10831, 15377, 24210, 4562, 23959, 9111, 24924, 24925, 3422, 11555, 18404, 10024, 15465, 10537, 1389, 4531, 504, 16378, 12220, 6142] start node= 21 start time= 20 capacity type= 2
(29,1)->(4,2)->(0,3)->(28,6)->(28,7)->(17,9)->(18,10)->(3,12)->(3,13)->(3,14)->(17,17)->(29,18)->(4,19)->(21,20)->(0,24)->(12,25)->(14,28)->(2,29)->(12,31)->(13,35)->(26,36)->(26,37)->(9,39)->(11,40)->(6,42)->(1,45)->(6,46)->(29,1):1

artificial: false set: [24832, 1217, 25153, 8898, 7108, 13509, 21959, 16903, 519, 3849, 11724, 25107, 11542, 15702, 13208, 10651, 19679, 15394, 24227, 24996, 24997, 25384, 23017, 25385, 25386, 2670, 16881, 7538, 15668, 4598, 23738, 13563, 13499, 24892, 24893, 24830, 24831] start node= 2 start time= 28 capacity type= 1
(8,1)->(8,2)->(7,3)->(7,4)->(18,6)->(19,7)->(14,8)->(4,9)->(15,11)->(13,12)->(1,14)->(1,15)->(1,16)->(1,17)->(9,18)->(18,20)->(15,21)->(13,22)->(26,23)->(27,25)->(28,26)->(15,27)->(2,28)->(2,29)->(2,30)->(19,33)->(17,34)->(29,35)->(4,36)->(4,37)->(4,38)->(0,39)->(12,40)->(12,41)->(12,42)->(12,43)->(23,47)->(8,1):1

artificial: false set: [322, 18179, 20484, 11204, 17734, 4871, 18699, 24203, 24972, 24216, 25817, 11290, 14430, 15070, 24224, 21025, 15656, 7216, 4593, 2356, 1526, 4345, 13497, 18234, 4093, 7551] start node= 1 start time= 38 capacity type= 1
(25,1)->(2,4)->(18,8)->(15,9)->(13,10)->(29,11)->(4,12)->(4,13)->(8,15)->(7,16)->(13,20)->(20,22)->(5,23)->(29,24)->(4,25)->(22,27)->(16,30)->(29,32)->(4,33)->(0,34)->(21,35)->(25,36)->(1,38)->(21,41)->(21,42)->(17,46)->(25,1):1

artificial: false set: [23753, 22412, 13965, 20368, 26066, 26067, 26068, 26069, 26070, 11415, 26071, 26072, 13530, 25886, 18463, 7138, 15717, 25702, 22569, 11563, 4523, 18156, 20653, 20206, 16308, 17015, 6586, 14907, 19263] start node= 26 start time= 44 capacity type= 2
(27,2)->(27,3)->(27,4)->(27,5)->(27,6)->(27,7)->(27,8)->(27,9)->(6,10)->(4,11)->(21,12)->(25,13)->(23,14)->(23,15)->(24,16)->(18,21)->(19,22)->(19,23)->(16,27)->(21,31)->(7,34)->(18,36)->(13,39)->(28,41)->(15,42)->(13,43)->(26,44)->(15,45)->(24,46)->(27,2):1

artificial: false set: [15364, 23751, 24200, 13960, 20105, 20426, 7499, 17742, 25935, 4879, 4113, 25682, 16851, 12372, 2586, 24224, 2465, 7523, 25388, 25389, 17582, 20080, 9908, 26165, 26166, 26167, 26039, 22392, 4089, 13945, 13308, 19069, 11134] start node= 26 start time= 23 capacity type= 2
(19,2)->(19,3)->(17,4)->(29,5)->(29,6)->(29,7)->(29,8)->(4,9)->(8,11)->(14,12)->(22,13)->(20,14)->(24,15)->(24,16)->(2,17)->(11,20)->(26,23)->(26,24)->(15,25)->(24,26)->(20,30)->(5,31)->(29,32)->(4,33)->(8,35)->(14,36)->(28,39)->(15,40)->(24,41)->(2,42)->(12,44)->(12,45)->(12,46)->(19,2):1

artificial: false set: [2561, 20483, 15364, 1861, 23751, 24200, 13960, 20105, 7499, 21963, 25935, 25682, 10771, 16851, 2586, 26142, 26143, 9575, 25388, 25389, 23021, 17582, 20080, 23792, 26165, 26166, 26167, 4089, 13308, 19069, 11134] start node= 10 start time= 23 capacity type= 2
(19,2)->(19,3)->(17,4)->(29,5)->(29,6)->(29,7)->(29,8)->(4,9)->(8,11)->(14,12)->(22,13)->(20,14)->(24,15)->(24,16)->(2,17)->(12,19)->(10,23)->(26,27)->(27,29)->(28,30)->(28,31)->(28,32)->(25,35)->(1,37)->(28,39)->(15,40)->(24,41)->(2,42)->(12,44)->(12,45)->(12,46)->(19,2):1

artificial: false set: [15364, 8775, 24200, 7499, 15438, 25935, 3152, 4115, 16851, 10004, 1369, 26201, 26202, 669, 4895, 24288, 2465, 7909, 24235, 17582, 20080, 13234, 26165, 6646, 26166, 26167, 11320, 4089, 25082, 25083, 6460, 13308, 4604, 19069] start node= 13 start time= 40 capacity type= 2
(29,0)->(19,3)->(17,4)->(29,5)->(29,6)->(29,7)->(29,8)->(4,9)->(8,11)->(14,12)->(22,13)->(20,14)->(24,15)->(24,16)->(2,17)->(11,20)->(6,22)->(1,25)->(6,26)->(6,27)->(6,28)->(17,30)->(3,32)->(14,34)->(4,35)->(8,37)->(9,39)->(13,40)->(29,41)->(29,42)->(29,43)->(4,44)->(0,45)->(5,47)->(29,0):1

artificial: false set: [12420, 24196, 3845, 11720, 16845, 19665, 25361, 25362, 6614, 16730, 1690, 7523, 10915, 3237, 2663, 25902, 24878, 25903, 25904, 4599, 13495, 376, 7865, 15740, 20669, 2559, 10751] start node= 0 start time= 40 capacity type= 1
(29,4)->(4,5)->(15,7)->(13,8)->(1,10)->(2,14)->(2,15)->(12,17)->(12,18)->(12,19)->(3,21)->(2,23)->(19,26)->(25,29)->(23,30)->(23,31)->(23,32)->(23,33)->(8,35)->(14,36)->(6,38)->(4,39)->(0,40)->(8,41)->(18,44)->(19,45)->(12,47)->(29,4):1

artificial: false set: [4355, 13509, 24966, 24967, 21959, 20746, 14731, 23756, 12046, 9614, 13519, 11542, 8535, 18712, 13533, 24225, 24994, 22564, 19045, 4520, 18153, 26089, 26090, 26091, 23020, 25518, 13103, 11312, 16945, 15668, 6581, 23741] start node= 10 start time= 14 capacity type= 2
(19,1)->(27,4)->(6,5)->(4,6)->(4,7)->(4,8)->(21,9)->(25,10)->(10,14)->(18,20)->(15,21)->(13,22)->(26,23)->(27,25)->(27,26)->(27,27)->(27,28)->(28,29)->(15,30)->(15,31)->(13,32)->(29,33)->(4,34)->(4,35)->(22,37)->(9,39)->(22,40)->(16,43)->(28,44)->(15,45)->(13,46)->(14,47)->(19,1):1

artificial: false set: [24832, 1217, 17603, 20100, 4678, 11526, 7498, 13259, 4558, 1232, 8529, 19090, 9435, 1183, 11875, 15459, 15652, 21991, 10024, 24237, 8754, 13493, 2485, 6138, 25274, 24830, 24831, 18239] start node= 10 start time= 26 capacity type= 2
(17,3)->(18,4)->(15,5)->(13,6)->(26,7)->(8,10)->(14,11)->(1,14)->(1,15)->(1,16)->(1,17)->(9,18)->(13,19)->(5,22)->(10,26)->(10,27)->(0,31)->(1,32)->(9,33)->(22,34)->(20,35)->(24,36)->(2,37)->(11,40)->(6,42)->(29,45)->(4,46)->(21,47)->(17,3):1

artificial: false set: [26048, 22401, 13954, 20099, 7492, 24900, 13253, 25030, 6600, 1544, 25550, 24786, 7508, 2581, 24794, 7900, 25246, 11551, 14751, 8735, 355, 11175, 4585, 363, 23340, 8561, 6577, 4082, 13173, 4727, 12345, 7482, 14780, 8766] start node= 26 start time= 32 capacity type= 2
(6,1)->(4,2)->(8,4)->(14,5)->(1,8)->(14,9)->(28,12)->(16,14)->(16,15)->(9,17)->(0,18)->(0,19)->(8,20)->(14,21)->(5,22)->(5,23)->(6,24)->(4,25)->(0,26)->(0,27)->(8,28)->(9,30)->(13,31)->(26,32)->(26,33)->(15,34)->(24,35)->(2,36)->(2,37)->(12,39)->(7,42)->(16,44)->(9,46)->(9,47)->(6,1):1

artificial: false set: [21956, 8584, 13512, 329, 25417, 25418, 18186, 12364, 17615, 2641, 19102, 9568, 20064, 23014, 11245, 16756, 19381, 23735, 13495, 11768, 13498, 12027, 25403, 21115, 25404, 23551] start node= 21 start time= 42 capacity type= 1
(24,0)->(2,1)->(19,4)->(15,7)->(13,8)->(15,10)->(13,11)->(13,12)->(13,13)->(10,16)->(26,20)->(27,22)->(28,23)->(15,24)->(13,25)->(13,26)->(13,27)->(14,28)->(28,31)->(23,37)->(9,40)->(0,41)->(21,42)->(25,43)->(22,46)->(20,47)->(24,0):1

artificial: false set: [6464, 11714, 25029, 5446, 15495, 5193, 3146, 15375, 15442, 16915, 16408, 16860, 1829, 10920, 15405, 24238, 3887, 24304, 13489, 3444, 13172, 24820, 23863, 3450, 13180, 4733, 25597, 25086, 25598, 25087] start node= 13 start time= 2 capacity type= 2
(15,1)->(13,2)->(1,4)->(1,5)->(28,7)->(5,9)->(19,12)->(17,13)->(17,14)->(17,15)->(29,16)->(19,19)->(14,20)->(5,21)->(5,22)->(12,24)->(3,26)->(14,28)->(5,29)->(6,30)->(6,31)->(6,32)->(17,34)->(3,36)->(17,39)->(18,40)->(3,42)->(17,45)->(29,46)->(4,47)->(15,1):1

artificial: false set: [1153, 1217, 9090, 13188, 5125, 3142, 7112, 25033, 25034, 5067, 4364, 10003, 6357, 14430, 8544, 24224, 1186, 8739, 1571, 12004, 13157, 1383, 15658, 24235, 7468, 19054, 5103, 4593, 1202, 25014, 5047, 6136, 13176, 13499, 11196, 17726] start node= 15 start time= 11 capacity type= 2
(9,0)->(0,1)->(1,2)->(9,3)->(13,4)->(14,5)->(5,6)->(5,7)->(7,8)->(18,10)->(15,11)->(13,12)->(20,14)->(5,15)->(1,17)->(9,18)->(11,19)->(6,21)->(3,22)->(14,24)->(5,25)->(5,26)->(5,27)->(7,28)->(16,30)->(29,32)->(4,33)->(0,34)->(1,35)->(14,36)->(5,37)->(1,39)->(6,40)->(29,43)->(4,44)->(22,46)->(9,0):1

artificial: false set: [19648, 9411, 9092, 519, 25292, 25293, 25294, 25295, 7890, 9813, 14430, 25248, 24224, 25249, 24993, 25250, 24994, 24995, 24996, 24997, 25126, 295, 25127, 10792, 25128, 25129, 18153, 25130, 25131, 7468, 20655, 4598, 25784, 25978, 25979, 25980, 25981, 25982] start node= 21 start time= 8 capacity type= 0
(10,0)->(10,1)->(10,2)->(10,3)->(0,7)->(21,8)->(21,9)->(25,10)->(25,11)->(25,12)->(25,13)->(25,14)->(25,15)->(23,16)->(8,18)->(9,20)->(11,21)->(7,22)->(7,23)->(7,24)->(7,25)->(7,26)->(7,27)->(7,28)->(16,30)->(29,32)->(4,33)->(4,34)->(4,35)->(4,36)->(4,37)->(4,38)->(0,39)->(12,40)->(10,44)->(10,45)->(10,46)->(10,47)->(10,0):3

artificial: false set: [19264, 25731, 13510, 13513, 12235, 25804, 16655, 1232, 9105, 25937, 10067, 11543, 19672, 11546, 25887, 20130, 17572, 20069, 24870, 24871, 24872, 7530, 25330, 22392, 2553, 22203, 10619, 2684, 18173, 20478] start node= 8 start time= 42 capacity type= 2
(20,3)->(20,4)->(24,5)->(2,6)->(2,7)->(2,8)->(2,9)->(12,11)->(23,15)->(23,16)->(24,17)->(24,18)->(15,22)->(13,23)->(26,24)->(15,25)->(13,26)->(26,27)->(21,28)->(21,29)->(25,30)->(1,32)->(9,33)->(11,34)->(11,35)->(23,40)->(8,42)->(14,43)->(2,44)->(19,47)->(20,3):1

artificial: false set: [11331, 22603, 6476, 15502, 25679, 14483, 24212, 6613, 1174, 87, 1367, 5976, 25370, 25632, 15649, 4581, 18149, 20454, 1256, 25258, 11115, 25259, 25260, 9517, 13490, 4598, 17023] start node= 21 start time= 5 capacity type= 2
(18,0)->(18,1)->(15,2)->(13,3)->(21,5)->(25,6)->(1,8)->(10,10)->(10,11)->(10,12)->(10,13)->(29,20)->(4,21)->(0,22)->(1,23)->(6,24)->(12,26)->(12,27)->(19,31)->(16,35)->(6,37)->(4,38)->(0,39)->(27,43)->(6,44)->(17,46)->(18,47)->(18,0):1

artificial: false set: [19074, 25860, 25861, 25862, 6598, 25863, 20936, 18891, 4556, 18189, 20686, 14223, 2260, 19096, 17753, 4890, 4765, 24222, 19487, 18080, 17569, 20066, 24867, 17251, 24235, 25076, 25077, 4343, 25849, 25850, 23867, 4543] start node= 16 start time= 15 capacity type= 2
(20,1)->(24,2)->(2,3)->(2,4)->(25,8)->(28,11)->(5,13)->(16,15)->(22,18)->(20,19)->(6,20)->(6,21)->(6,22)->(4,23)->(22,25)->(22,26)->(22,27)->(29,30)->(4,31)->(21,32)->(22,36)->(22,37)->(22,38)->(22,39)->(22,40)->(20,41)->(5,42)->(29,43)->(4,44)->(21,45)->(25,46)->(23,47)->(20,1):1

artificial: false set: [25153, 25154, 7875, 8777, 12042, 13195, 6606, 20177, 13522, 25427, 1240, 4764, 4892, 10012, 26205, 4127, 24991, 3872, 11556, 23013, 8742, 1191, 2473, 12010, 13163, 14702, 24238, 23727, 13936, 25205, 21301, 23734, 4598, 13559, 25399, 25400, 24888, 25401] start node= 2 start time= 24 capacity type= 2
(8,1)->(8,2)->(8,3)->(9,5)->(9,6)->(13,7)->(13,8)->(13,9)->(13,10)->(14,11)->(5,12)->(16,14)->(28,15)->(15,16)->(24,17)->(27,21)->(28,22)->(15,23)->(2,24)->(2,25)->(11,28)->(6,30)->(4,31)->(4,32)->(15,34)->(13,35)->(13,36)->(26,37)->(4,38)->(0,39)->(1,40)->(9,41)->(13,42)->(14,43)->(5,44)->(29,45)->(29,46)->(4,47)->(8,1):1

artificial: false set: [22401, 24962, 13954, 24963, 20099, 24900, 18437, 14410, 24204, 7503, 13519, 3857, 14035, 9813, 2581, 7127, 7448, 15387, 24220, 4573, 3869, 350, 25246, 8735, 13216, 11552, 4516, 25126, 11175, 15913, 6577, 7482, 14780] start node= 17 start time= 27 capacity type= 2
(6,1)->(4,2)->(4,3)->(4,4)->(21,5)->(7,8)->(16,10)->(29,12)->(4,13)->(0,14)->(8,15)->(14,16)->(4,17)->(15,19)->(11,21)->(7,22)->(7,23)->(18,25)->(17,27)->(29,28)->(4,29)->(15,31)->(13,32)->(26,33)->(15,34)->(24,35)->(2,36)->(2,37)->(12,39)->(7,42)->(16,44)->(9,46)->(9,47)->(6,1):1

artificial: false set: [25536, 15683, 13572, 23433, 4878, 3920, 1937, 23378, 16917, 477, 23390, 24223, 14689, 2471, 1831, 15401, 24234, 24812, 24821, 2677, 12214, 24822, 16888, 10106, 4603, 11388, 13181] start node= 15 start time= 36 capacity type= 2
(16,0)->(16,1)->(28,2)->(1,5)->(1,6)->(1,7)->(28,9)->(13,12)->(28,14)->(1,17)->(19,21)->(14,22)->(2,23)->(11,26)->(14,29)->(5,30)->(29,31)->(4,32)->(18,35)->(15,36)->(2,37)->(19,40)->(17,41)->(29,42)->(4,43)->(0,44)->(0,45)->(16,0):1

artificial: false set: [19456, 17730, 19011, 13572, 4871, 26184, 17032, 1546, 2765, 8783, 16785, 1557, 13211, 12000, 25441, 6631, 24169, 4524, 25580, 18158, 20655, 13298, 5107, 8693, 2677, 13174, 25789, 14781] start node= 2 start time= 37 capacity type= 1
(13,0)->(14,1)->(14,2)->(22,3)->(9,5)->(6,7)->(1,10)->(14,11)->(4,12)->(21,13)->(21,14)->(25,15)->(23,16)->(20,18)->(5,19)->(1,21)->(14,22)->(5,23)->(29,24)->(29,25)->(3,29)->(19,33)->(15,36)->(2,37)->(19,40)->(16,44)->(16,45)->(9,47)->(13,0):1

artificial: false set: [641, 4675, 24967, 329, 18187, 21068, 25165, 7886, 25818, 24223, 24801, 1186, 1571, 22565, 24997, 24807, 9575, 4520, 24808, 18153, 20650, 11310, 8560, 4592, 16946, 13236, 6582, 4598, 19643, 21243, 8765, 2687] start node= 5 start time= 19 capacity type= 2
(19,2)->(27,5)->(6,6)->(4,7)->(4,8)->(21,9)->(25,10)->(23,11)->(8,13)->(8,14)->(9,16)->(0,17)->(5,19)->(10,23)->(26,27)->(9,29)->(13,30)->(29,31)->(4,32)->(0,33)->(0,34)->(1,35)->(14,36)->(4,37)->(4,38)->(0,39)->(0,40)->(0,41)->(21,42)->(21,43)->(25,44)->(2,47)->(19,2):2

artificial: false set: [25600, 24768, 25601, 1153, 15618, 1346, 5955, 25349, 25350, 4555, 6607, 4496, 25428, 10903, 16861, 2471, 16937, 17262, 11701, 20086, 2745, 13242, 10298, 18428, 25598, 25599] start node= 21 start time= 44 capacity type= 2
(0,0)->(0,1)->(1,2)->(6,3)->(12,5)->(12,6)->(12,7)->(3,9)->(19,13)->(17,14)->(17,15)->(17,16)->(17,17)->(17,18)->(24,22)->(2,23)->(11,26)->(20,30)->(6,31)->(4,32)->(13,36)->(13,37)->(19,41)->(14,42)->(4,43)->(21,44)->(0,0):1

artificial: false set: [19074, 20420, 24292, 4549, 18374, 16999, 17256, 3146, 22602, 25547, 5995, 12748, 25548, 25549, 25389, 25550, 25390, 14223, 11888, 4979, 17587, 6361, 10751] start node= 21 start time= 38 capacity type= 2
(29,4)->(19,7)->(16,11)->(16,12)->(16,13)->(16,14)->(16,15)->(22,18)->(20,19)->(24,20)->(20,24)->(6,25)->(3,26)->(14,28)->(13,32)->(5,35)->(4,37)->(21,38)->(27,42)->(6,43)->(12,45)->(12,46)->(12,47)->(29,4):1

artificial: false set: [24832, 1217, 8898, 7108, 13318, 16903, 22601, 3849, 25098, 650, 5452, 11724, 3215, 16917, 15702, 21975, 19031, 13208, 25374, 10783, 15716, 5995, 9587, 5043, 8569, 13499, 10941, 24830, 24831] start node= 3 start time= 47 capacity type= 2
(5,3)->(7,4)->(18,6)->(19,7)->(14,8)->(4,9)->(15,11)->(13,12)->(1,14)->(1,15)->(1,16)->(1,17)->(9,18)->(18,20)->(19,21)->(14,22)->(22,23)->(9,25)->(0,26)->(5,28)->(12,30)->(12,31)->(10,35)->(26,39)->(27,41)->(6,42)->(6,43)->(12,45)->(3,47)->(5,3):1

artificial: false set: [14722, 25794, 25795, 25796, 25990, 15495, 24199, 7115, 20239, 24208, 25621, 25622, 11286, 26139, 26140, 1245, 9118, 6433, 15459, 15652, 11755, 10031, 4529, 23987, 18165, 13493, 20471, 16312, 4088, 1849, 7546, 23741, 15805, 13950, 26175] start node= 11 start time= 47 capacity type= 2
(6,1)->(17,3)->(18,4)->(15,5)->(13,6)->(29,7)->(4,8)->(8,10)->(7,11)->(18,13)->(29,15)->(29,16)->(4,17)->(21,18)->(21,19)->(21,20)->(21,21)->(25,22)->(25,23)->(1,25)->(28,27)->(28,28)->(28,29)->(15,30)->(24,31)->(16,34)->(28,35)->(17,37)->(17,38)->(17,39)->(18,40)->(13,43)->(1,45)->(9,46)->(11,47)->(6,1):1

artificial: false set: [14722, 25794, 25795, 25796, 25990, 15495, 24199, 7115, 1293, 20239, 24208, 25621, 25622, 11286, 26139, 26140, 22371, 11755, 4529, 23987, 13492, 18165, 25397, 20471, 16312, 4088, 1849, 7546, 23741, 15805, 13950, 26175, 9599] start node= 10 start time= 47 capacity type= 2
(26,3)->(15,4)->(13,5)->(13,6)->(29,7)->(4,8)->(8,10)->(7,11)->(18,13)->(29,15)->(29,16)->(4,17)->(21,18)->(21,19)->(21,20)->(21,21)->(25,22)->(25,23)->(1,25)->(28,27)->(28,28)->(28,29)->(15,30)->(24,31)->(16,34)->(28,35)->(17,37)->(17,38)->(17,39)->(18,40)->(13,43)->(1,45)->(10,47)->(26,3):1

artificial: false set: [6464, 9793, 6914, 21955, 1161, 3146, 1867, 23757, 14029, 15442, 24916, 3605, 5974, 25311, 15399, 24232, 10920, 1194, 1834, 23724, 14063, 9904, 3444, 22581, 4601, 13180, 4733, 25534, 25086, 25087] start node= 7 start time= 2 capacity type= 2
(11,1)->(7,2)->(3,4)->(3,5)->(0,9)->(1,10)->(28,12)->(15,13)->(11,15)->(11,16)->(26,19)->(27,21)->(6,22)->(12,24)->(3,26)->(14,28)->(5,29)->(6,30)->(6,31)->(6,32)->(17,34)->(3,36)->(17,39)->(29,40)->(4,41)->(0,42)->(1,43)->(28,45)->(15,46)->(15,47)->(11,1):1

artificial: false set: [9792, 8769, 19458, 12034, 17732, 25029, 4549, 5062, 18182, 20487, 3146, 8587, 11533, 25037, 1232, 15702, 16855, 6936, 24857, 1242, 1245, 25246, 9119, 25889, 7393, 6435, 24996, 15461, 25127, 15465, 15658, 1196, 22190, 18159, 20656, 13235, 25592, 13499, 25404, 13180, 5118] start node= 3 start time= 26 capacity type= 2
(11,0)->(7,1)->(6,3)->(17,5)->(18,6)->(19,7)->(17,8)->(17,9)->(18,10)->(15,11)->(13,12)->(13,13)->(26,14)->(21,15)->(25,16)->(23,17)->(23,18)->(20,20)->(5,21)->(5,22)->(7,23)->(7,24)->(3,26)->(14,28)->(5,29)->(5,30)->(1,32)->(9,33)->(13,34)->(14,35)->(4,36)->(4,37)->(21,38)->(25,39)->(1,41)->(1,42)->(9,43)->(0,44)->(1,45)->(9,46)->(9,47)->(11,0):1

artificial: false set: [20416, 3841, 7426, 329, 9993, 3852, 7438, 25935, 6612, 2454, 15383, 24216, 25371, 11164, 17252, 12004, 12197, 24806, 24807, 24808, 4585, 18474, 13934, 25135, 6576, 25136, 25137, 13491, 4597, 6453, 506, 6587, 25149] start node= 15 start time= 3 capacity type= 2
(6,0)->(4,1)->(15,3)->(13,4)->(14,5)->(2,6)->(11,9)->(6,11)->(4,12)->(15,14)->(24,15)->(24,16)->(20,20)->(6,21)->(17,23)->(29,24)->(4,25)->(0,26)->(12,27)->(12,28)->(7,31)->(7,32)->(7,33)->(7,34)->(6,36)->(4,37)->(0,38)->(0,39)->(0,40)->(0,41)->(21,42)->(7,45)->(7,46)->(6,0):1

artificial: false set: [21376, 6598, 19081, 331, 18189, 20686, 11535, 16785, 2260, 25754, 25755, 25820, 19487, 17569, 20066, 17251, 24867, 14052, 20456, 1834, 24810, 23724, 2670, 25076, 25077, 10358, 4343, 17596, 20093, 13501, 25406] start node= 0 start time= 42 capacity type= 2
(20,1)->(24,2)->(2,3)->(2,4)->(25,8)->(1,10)->(28,12)->(15,13)->(13,14)->(13,15)->(26,16)->(20,19)->(6,20)->(6,21)->(6,22)->(4,23)->(22,25)->(20,26)->(20,27)->(20,28)->(24,29)->(2,30)->(19,33)->(15,36)->(11,38)->(0,42)->(0,43)->(21,44)->(21,45)->(25,46)->(23,47)->(20,1):1

artificial: false set: [9984, 3843, 11526, 20678, 13318, 19079, 7498, 13259, 16974, 16916, 19671, 25752, 26012, 9119, 21991, 2667, 9136, 26097, 6578, 23026, 23795, 13493, 25461, 7673, 17593, 20090, 20925, 24830, 1215] start node= 26 start time= 7 capacity type= 2
(11,0)->(6,2)->(4,3)->(15,5)->(13,6)->(26,7)->(8,10)->(14,11)->(1,14)->(1,15)->(9,16)->(19,20)->(14,21)->(14,22)->(22,23)->(20,24)->(20,25)->(24,26)->(2,27)->(19,30)->(27,33)->(27,34)->(28,35)->(25,38)->(23,39)->(8,41)->(25,44)->(25,45)->(9,47)->(11,0):1

artificial: false set: [11522, 18503, 15380, 24213, 22997, 4123, 17244, 24028, 12766, 25951, 25952, 25953, 23970, 25954, 20387, 23718, 16937, 25069, 7533, 6062, 21939, 4534, 13495, 25400, 15736, 25401, 11194, 13242, 14715] start node= 21 start time= 23 capacity type= 1
(13,2)->(26,3)->(27,5)->(28,6)->(15,7)->(13,8)->(13,9)->(13,10)->(20,12)->(6,13)->(6,14)->(28,18)->(17,20)->(29,21)->(4,22)->(21,23)->(16,27)->(28,28)->(24,31)->(24,32)->(24,33)->(24,34)->(24,35)->(18,40)->(19,41)->(14,42)->(4,43)->(8,45)->(14,46)->(13,2):1

===========================new round 1=========================
-------------Start to solve SolveVehicleCoverCGHeuristic()---------------
flowCoverCount=575
Time of first LP solve= 186397
There are 28392 columns added to the model.
Tried aggregator 1 time.
MIP Presolve eliminated 24206 rows and 24415 columns.
MIP Presolve modified 21601 coefficients.
Reduced MIP has 652 rows, 4067 columns, and 49650 nonzeros.
Reduced MIP has 80 binaries, 3987 generals, 0 SOSs, and 0 indicators.
Presolve time = 0.06 sec. (50.08 ticks)
Found incumbent of value 1.1002666e+09 after 0.09 sec. (83.29 ticks)
Probing time = 0.11 sec. (0.48 ticks)
Tried aggregator 1 time.
Reduced MIP has 652 rows, 4067 columns, and 49650 nonzeros.
Reduced MIP has 80 binaries, 3987 generals, 0 SOSs, and 0 indicators.
Presolve time = 0.01 sec. (9.85 ticks)
Probing time = 0.04 sec. (0.49 ticks)
MIP emphasis: balance optimality and feasibility.
MIP search method: dynamic search.
Parallel mode: deterministic, using up to 4 threads.
Root relaxation solution time = 0.06 sec. (33.66 ticks)

        Nodes                                         Cuts/
   Node  Left     Objective  IInf  Best Integer    Best Bound    ItCnt     Gap

*     0+    0                       1.10027e+09        0.0000           100.00%
*     0+    0                       2.00064e+08        0.0000           100.00%
*     0+    0                        36495.0000        0.0000           100.00%
*     0+    0                        34703.0000        0.0000           100.00%
      0     0    19601.7609   101    34703.0000    19601.7609      452   43.52%
*     0+    0                        22018.0000    19601.7609            10.97%
*     0+    0                        21620.0000    19601.7609             9.34%
      0     0    21044.6380   119    21620.0000      Cuts: 92      662    2.66%
      0     0    21216.5429   115    21620.0000      Cuts: 34      768    1.87%
      0     0    21271.8068   117    21620.0000      Cuts: 20      818    1.61%
      0     0    21310.3162   118    21620.0000      Cuts: 16      871    1.43%
      0     0    21325.6439   119    21620.0000      Cuts: 11      911    1.36%
      0     0    21327.6363   112    21620.0000       Cuts: 4      935    1.35%
      0     0    21332.3817   116    21620.0000       Cuts: 5      952    1.33%
      0     0    21340.8919   104    21620.0000       Cuts: 8      986    1.29%
*     0+    0                        21580.0000    21340.8919             1.11%
*     0+    0                        21525.0000    21340.8919             0.86%

Mixed integer rounding cuts applied:  45
Zero-half cuts applied:  43
Gomory fractional cuts applied:  3

Root node processing (before b&c):
  Real time             =    1.44 sec. (665.08 ticks)
Parallel b&c, 4 threads:
  Real time             =    0.00 sec. (0.00 ticks)
  Sync time (average)   =    0.00 sec.
  Wait time (average)   =    0.00 sec.
                          ------------
Total (root+branch&cut) =    1.44 sec. (665.08 ticks)
optimal objective= 21525.0+88135.0=109660.0

Step 4-AdjustFlow
Exception in thread "main" java.lang.OutOfMemoryError: Java heap space
	at LocalSearchHeuristicSolver.AdjustFlow(LocalSearchHeuristicSolver.java:995)
	at LocalSearchHeuristicSolver.Neighbourhood(LocalSearchHeuristicSolver.java:935)
	at LocalSearchHeuristicSolver.TabuSearch(LocalSearchHeuristicSolver.java:660)
	at LocalSearchHeuristicSolver.main(LocalSearchHeuristicSolver.java:2539)


----------------------------------------------------------------------------------------------------
number of service arcs=24768
number of holding arcs=1440

Time of first LP solve= 188233

There are 28148 columns added to the model.

Tried aggregator 2 times.
MIP Presolve eliminated 588123 rows and 505001 columns.
MIP Presolve modified 12978 coefficients.
Aggregator did 11847 substitutions.
Reduced MIP has 888 rows, 4464 columns, and 47904 nonzeros.
Reduced MIP has 51 binaries, 3999 generals, 0 SOSs, and 0 indicators.
Presolve time = 0.40 sec. (444.00 ticks)
Found incumbent of value 2.0002812e+09 after 0.48 sec. (519.40 ticks)
Probing time = 0.10 sec. (0.48 ticks)
Tried aggregator 1 time.
Reduced MIP has 888 rows, 4464 columns, and 47904 nonzeros.
Reduced MIP has 51 binaries, 4002 generals, 0 SOSs, and 0 indicators.
Presolve time = 0.01 sec. (12.15 ticks)
Probing time = 0.13 sec. (0.51 ticks)
MIP emphasis: balance optimality and feasibility.
MIP search method: dynamic search.
Parallel mode: deterministic, using up to 4 threads.
Root relaxation solution time = 0.11 sec. (74.34 ticks)

        Nodes                                         Cuts/
   Node  Left     Objective  IInf  Best Integer    Best Bound    ItCnt     Gap

*     0+    0                       2.00028e+09    65355.0000           100.00%
*     0+    0                       7.00128e+08    65355.0000            99.99%
*     0+    0                       1.00104e+08    65355.0000            99.93%
*     0+    0                        99466.0000    65355.0000            34.29%
*     0+    0                        98580.0000    65355.0000            33.70%
*     0+    0                        98331.0000    65355.0000            33.54%
      0     0    81934.7085   117    98331.0000    81934.7085      774   16.67%
*     0+    0                        85492.0000    81934.7085             4.16%
*     0+    0                        85313.0000    81934.7085             3.96%
      0     0    82985.9275   136    85313.0000     Cuts: 146     1277    2.73%
      0     0    83243.6366   134    85313.0000      Cuts: 70     1618    2.43%
      0     0    83355.0105   133    85313.0000      Cuts: 66     1836    2.30%
*     0+    0                        84874.0000    83355.0105             1.79%
      0     0    83401.2364   130    84874.0000      Cuts: 45     1998    1.74%
      0     0    83419.9562   142    84874.0000      Cuts: 38     2086    1.71%
      0     0    83431.6527   139    84874.0000   MIRcuts: 26     2153    1.70%
      0     0    83446.3449   139    84874.0000   MIRcuts: 14     2233    1.68%
      0     0    83461.6985   132    84874.0000   MIRcuts: 34     2360    1.66%
      0     0    83478.3142   141    84874.0000      Cuts: 20     2496    1.64%
      0     0    83479.7868   143    84874.0000   MIRcuts: 13     2537    1.64%
      0     0    83480.6847   143    84874.0000       Cuts: 4     2558    1.64%
      0     2    83480.6847   143    84874.0000    83480.6847     2558    1.64%
Elapsed time = 3.50 sec. (2212.73 ticks, tree = 0.00 MB, solutions = 9)
      8    10    83555.2134   130    84874.0000    83481.6151     3670    1.64%
     32    34    83821.5271   128    84874.0000    83536.7428     8250    1.58%
     82    84    83933.6515   118    84874.0000    83536.7428    13231    1.58%
*   103+  103                        84687.0000    83536.7428             1.36%
*   104+  104                        84668.0000    83536.7428             1.34%
    139   141    84241.7033   107    84668.0000    83536.7428    17928    1.34%
    231   225    83704.6610   132    84668.0000    83536.7428    23944    1.34%
    312   305    84139.9367    65    84668.0000    83536.7428    27904    1.34%
*   434+  393                        84461.0000    83536.7428             1.09%
    439   359    84460.4942    63    84461.0000    83536.7428    34077    1.09%
    544   434    83873.3172   121    84461.0000    83555.6383    40138    1.07%
    654   524    83796.3314   108    84461.0000    83555.6383    45895    1.07%
   1090   883    83961.7217   117    84461.0000    83584.6842    68152    1.04%
Elapsed time = 8.35 sec. (5422.64 ticks, tree = 10.99 MB, solutions = 12)
   1480  1216    83903.4625   121    84461.0000    83600.6286    93952    1.02%

Mixed integer rounding cuts applied:  229
Zero-half cuts applied:  7
Lift and project cuts applied:  3
Gomory fractional cuts applied:  2

Root node processing (before b&c):
  Real time             =    3.54 sec. (2260.28 ticks)
Parallel b&c, 4 threads:
  Real time             =    7.48 sec. (4993.87 ticks)
  Sync time (average)   =    0.63 sec.
  Wait time (average)   =    0.74 sec.
                          ------------
Total (root+branch&cut) =   11.03 sec. (7254.15 ticks)
optimal objective= 84461.0

artificial: false set: [14722, 14214, 19017, 11724, 1358, 20239, 5967, 10577, 23891, 4756, 14488, 26139, 26140, 13154, 25575, 6378, 8747, 25390, 25011, 4789, 309, 18166, 20471, 1849, 2875, 23741, 13950, 10559] start node= 14 start time= 2 capacity type= 2
(14,2)->(5,3)->(5,4)->(16,6)->(22,9)->(9,11)->(13,12)->(1,14)->(6,15)->(12,17)->(0,21)->(21,22)->(25,23)->(1,25)->(28,27)->(28,28)->(28,29)->(15,30)->(24,31)->(16,34)->(28,35)->(5,37)->(16,39)->(16,40)->(6,42)->(3,43)->(12,46)->(12,47)->(14,2):1

artificial: false set: [11329, 19653, 19784, 6218, 5133, 26002, 25877, 25878, 25879, 25306, 11226, 25307, 17756, 25181, 25182, 1247, 13215, 8736, 4576, 929, 18147, 20963, 20644, 26150, 23463, 8231, 10092, 7663] start node= 14 start time= 15 capacity type= 2
(9,0)->(13,1)->(21,3)->(25,4)->(23,5)->(23,6)->(23,7)->(23,8)->(11,10)->(11,11)->(11,12)->(14,15)->(4,16)->(0,17)->(23,21)->(8,23)->(6,26)->(8,29)->(8,30)->(8,31)->(25,34)->(25,35)->(28,38)->(28,39)->(13,42)->(20,44)->(5,45)->(1,47)->(9,0):1

artificial: false set: [25350, 8585, 13067, 9934, 15058, 26005, 26006, 10903, 9431, 1243, 25244, 9117, 26080, 23009, 26017, 23394, 21218, 8548, 485, 1194, 16881, 1269, 20919, 3129, 1083, 16957, 24318] start node= 10 start time= 23 capacity type= 2
(26,1)->(26,2)->(9,4)->(0,5)->(12,6)->(12,7)->(3,9)->(14,11)->(19,13)->(27,16)->(27,17)->(28,18)->(1,21)->(10,23)->(0,27)->(29,30)->(19,33)->(17,34)->(25,37)->(25,38)->(25,39)->(9,41)->(0,42)->(1,43)->(9,44)->(9,45)->(11,46)->(26,1):1

artificial: false set: [6914, 2371, 16391, 23368, 15368, 24201, 14730, 4558, 5070, 25427, 24916, 21973, 3413, 4570, 10908, 3230, 11556, 24937, 23851, 491, 18479, 24880, 24881, 24882, 23031, 3194, 7231] start node= 21 start time= 47 capacity type= 0
(7,2)->(3,4)->(3,5)->(17,8)->(29,9)->(4,10)->(0,11)->(12,12)->(3,14)->(2,16)->(2,17)->(2,18)->(2,19)->(18,23)->(3,25)->(3,26)->(5,30)->(7,31)->(13,35)->(13,36)->(26,37)->(27,39)->(28,40)->(16,42)->(28,43)->(4,46)->(21,47)->(7,2):1

artificial: false set: [5056, 16711, 4104, 11790, 13520, 6929, 3217, 11409, 23891, 2644, 15382, 24215, 14488, 25178, 7899, 3427, 24867, 25575, 20458, 6378, 8557, 25390, 4789, 2875, 1212, 8765, 638, 10943] start node= 17 start time= 22 capacity type= 2
(3,1)->(2,3)->(2,4)->(19,7)->(25,10)->(1,12)->(9,13)->(0,14)->(5,16)->(7,17)->(3,19)->(17,22)->(29,23)->(4,24)->(8,26)->(8,27)->(9,29)->(13,30)->(15,32)->(13,33)->(28,35)->(5,37)->(16,39)->(16,40)->(6,42)->(3,43)->(12,46)->(12,47)->(3,1):1

artificial: false set: [25473, 23875, 13573, 24839, 24840, 24841, 1226, 25292, 20174, 26069, 26070, 2582, 26071, 23000, 24796, 23010, 3875, 10792, 23721, 9453, 17581, 10542, 49, 13234, 5109, 13498, 8571, 11195, 509] start node= 28 start time= 9 capacity type= 2
(0,1)->(27,5)->(27,6)->(27,7)->(27,8)->(28,9)->(15,10)->(13,11)->(20,13)->(24,14)->(27,18)->(28,19)->(5,21)->(1,23)->(1,24)->(1,25)->(1,26)->(9,27)->(0,28)->(0,29)->(12,30)->(14,33)->(14,34)->(4,35)->(15,37)->(2,38)->(12,40)->(10,44)->(10,45)->(0,1):1

artificial: false set: [3136, 13314, 19075, 7492, 6598, 8775, 7112, 1291, 25293, 25294, 25998, 9105, 339, 3863, 25432, 10910, 9826, 17252, 13157, 11753, 2282, 15658, 13547, 9455, 20911, 7475, 14773, 25077, 25014, 5047, 13561, 2556] start node= 18 start time= 10 capacity type= 2
(0,3)->(8,4)->(14,5)->(5,6)->(5,7)->(7,8)->(18,10)->(15,11)->(2,12)->(12,14)->(3,16)->(14,18)->(22,19)->(20,20)->(6,21)->(6,22)->(4,23)->(15,25)->(2,26)->(25,30)->(25,31)->(9,33)->(11,34)->(7,35)->(16,37)->(9,39)->(13,40)->(13,41)->(1,43)->(10,45)->(10,46)->(10,47)->(0,3):2

artificial: false set: [19456, 17730, 19011, 4871, 26184, 9930, 1546, 3149, 22413, 3349, 1557, 13211, 13534, 25439, 12000, 25441, 6631, 24169, 4524, 18158, 13231, 20655, 4400, 13298, 5107, 24948, 8693, 13174, 25789] start node= 26 start time= 45 capacity type= 1
(13,0)->(14,1)->(14,2)->(22,3)->(9,5)->(6,7)->(1,10)->(14,11)->(4,12)->(21,13)->(21,14)->(25,15)->(23,16)->(20,18)->(5,19)->(1,21)->(14,22)->(5,23)->(29,24)->(29,25)->(3,29)->(14,31)->(4,32)->(3,36)->(3,37)->(11,42)->(26,45)->(15,46)->(13,47)->(13,0):1

artificial: false set: [24768, 1153, 6598, 5196, 909, 11153, 4113, 1490, 9109, 24224, 7907, 10022, 14697, 25898, 24235, 19371, 16815, 11311, 7412, 18485, 4535, 6136, 18168, 20665, 23866, 4604, 8766, 4607] start node= 7 start time= 20 capacity type= 1
(0,0)->(0,1)->(1,2)->(21,5)->(16,9)->(28,10)->(5,12)->(19,15)->(12,17)->(7,20)->(6,22)->(4,23)->(21,24)->(25,25)->(23,26)->(23,27)->(9,30)->(13,31)->(29,32)->(4,33)->(8,35)->(9,37)->(11,38)->(6,40)->(29,43)->(4,44)->(0,45)->(4,47)->(0,0):1

artificial: false set: [16899, 8579, 16963, 900, 6727, 10636, 4558, 5978, 2656, 13156, 4710, 423, 26154, 23851, 20076, 24877, 24878, 18287, 24879, 19376, 25013, 4598, 22582, 25079, 25080, 25081] start node= 5 start time= 5 capacity type= 2
(19,3)->(14,4)->(5,5)->(5,6)->(6,7)->(24,12)->(2,13)->(2,14)->(2,15)->(2,16)->(19,19)->(27,22)->(6,23)->(6,24)->(6,25)->(6,26)->(12,28)->(23,32)->(9,35)->(0,36)->(4,38)->(0,39)->(28,42)->(28,43)->(4,46)->(21,47)->(19,3):1

artificial: false set: [15488, 12227, 24900, 13317, 14021, 9799, 6348, 15502, 15695, 20113, 16915, 2581, 19030, 7448, 11545, 24925, 3422, 13920, 16930, 15714, 21290, 18220, 15729, 15473, 25460, 10935, 8760, 24953, 14458, 24954, 4539, 3451] start node= 2 start time= 36 capacity type= 2
(15,0)->(24,1)->(15,5)->(11,7)->(7,8)->(16,10)->(6,12)->(3,13)->(3,14)->(17,17)->(18,18)->(19,19)->(14,20)->(14,21)->(22,22)->(9,24)->(13,25)->(26,26)->(4,27)->(21,28)->(17,32)->(18,33)->(19,34)->(14,35)->(2,36)->(2,37)->(12,39)->(3,41)->(3,42)->(3,43)->(17,46)->(18,47)->(15,0):1

artificial: false set: [1153, 13188, 5125, 9097, 4364, 7890, 9818, 17630, 14430, 8544, 24224, 1186, 8739, 1571, 12004, 13157, 7207, 1383, 20903, 24235, 25131, 7468, 19054, 4593, 1202, 8564, 309, 5046, 18166, 6136, 25403, 11196] start node= 21 start time= 22 capacity type= 2
(9,0)->(0,1)->(1,2)->(9,3)->(13,4)->(14,5)->(5,6)->(7,7)->(13,11)->(13,12)->(20,14)->(8,18)->(9,20)->(0,21)->(21,22)->(25,23)->(9,25)->(11,26)->(7,27)->(7,28)->(16,30)->(29,32)->(4,33)->(0,34)->(1,35)->(14,36)->(5,37)->(1,39)->(6,40)->(29,43)->(4,44)->(22,46)->(9,0):1

artificial: false set: [10752, 20096, 24897, 24898, 24899, 9412, 24900, 25799, 23308, 12237, 2581, 20893, 2590, 8416, 10599, 296, 18153, 1195, 1580, 14899, 18360, 25978, 25979, 25980, 25215] start node= 21 start time= 9 capacity type= 2
(12,0)->(10,4)->(0,8)->(21,9)->(25,10)->(25,11)->(25,12)->(25,13)->(9,15)->(9,16)->(16,19)->(21,23)->(21,24)->(27,28)->(24,32)->(2,33)->(2,34)->(2,35)->(2,36)->(2,37)->(12,39)->(0,43)->(1,44)->(14,45)->(2,46)->(12,0):1

artificial: false set: [19264, 7105, 25858, 25859, 25860, 13510, 13513, 14731, 23756, 25804, 13965, 1232, 25937, 8529, 11543, 8535, 18712, 11546, 25887, 20130, 15651, 13924, 20069, 19045, 24870, 24871, 24872, 20014, 22392, 2553, 22203, 10619, 18173, 20478] start node= 21 start time= 28 capacity type= 2
(7,1)->(18,3)->(15,4)->(24,5)->(2,6)->(2,7)->(2,8)->(2,9)->(12,11)->(23,15)->(23,16)->(24,17)->(24,18)->(15,22)->(13,23)->(26,24)->(15,25)->(13,26)->(26,27)->(21,28)->(21,29)->(25,30)->(1,32)->(9,33)->(22,34)->(22,35)->(22,36)->(22,37)->(9,39)->(22,40)->(16,43)->(28,44)->(15,45)->(24,46)->(7,1):1

artificial: false set: [24832, 3970, 4358, 21959, 6345, 3083, 8779, 13515, 11404, 21261, 13519, 26196, 20885, 24922, 25242, 25247, 8544, 11552, 289, 9571, 18148, 24229, 19048, 23017, 11564, 1265, 21297, 25778, 25779, 8695, 23738, 23742, 24831] start node= 10 start time= 19 capacity type= 2
(9,0)->(0,1)->(21,2)->(21,3)->(21,4)->(25,5)->(9,7)->(6,9)->(3,10)->(3,11)->(1,15)->(1,16)->(1,17)->(10,19)->(26,23)->(27,25)->(28,26)->(15,27)->(13,28)->(28,30)->(15,31)->(13,32)->(26,33)->(4,34)->(29,36)->(29,37)->(4,38)->(22,40)->(9,42)->(9,43)->(13,44)->(26,45)->(9,47)->(9,0):1

artificial: false set: [23874, 9411, 3142, 519, 24775, 25033, 25034, 5067, 25292, 25293, 25294, 25295, 6357, 25883, 14430, 24224, 25248, 24993, 25249, 24994, 25250, 24995, 24996, 24997, 10792, 296, 18153, 20650, 7468, 14705, 4724, 4598, 13176, 19836] start node= 10 start time= 0 capacity type= 1
(10,0)->(10,1)->(10,2)->(10,3)->(0,7)->(0,8)->(21,9)->(25,10)->(23,11)->(23,12)->(16,17)->(28,18)->(5,20)->(6,21)->(3,22)->(14,24)->(5,25)->(5,26)->(5,27)->(7,28)->(16,30)->(29,32)->(4,33)->(4,34)->(4,35)->(4,36)->(4,37)->(4,38)->(0,39)->(12,40)->(10,44)->(10,45)->(10,46)->(10,47)->(10,0):1

artificial: false set: [25920, 23745, 19074, 17731, 4358, 13319, 19080, 6602, 20686, 15374, 24207, 13522, 25427, 14740, 1558, 19096, 17753, 25050, 19295, 11556, 8742, 12007, 17257, 4715, 6444, 4336, 20209, 5108, 21301, 13304, 19065, 17722, 5179, 4539, 18172, 20477, 1855] start node= 16 start time= 4 capacity type= 2
(24,0)->(24,1)->(16,4)->(9,6)->(13,7)->(14,8)->(22,9)->(20,10)->(5,11)->(6,12)->(17,14)->(29,15)->(4,16)->(22,18)->(20,19)->(5,20)->(1,22)->(14,23)->(22,24)->(20,25)->(6,26)->(4,27)->(21,28)->(25,29)->(1,31)->(28,33)->(15,34)->(13,35)->(13,36)->(26,37)->(4,38)->(22,40)->(20,41)->(5,42)->(5,43)->(25,46)->(23,47)->(24,0):1

artificial: false set: [9984, 13313, 19074, 20678, 25353, 25354, 25355, 16974, 16912, 25747, 15702, 19671, 11100, 26012, 9119, 25058, 6435, 17828, 15461, 16807, 2667, 26097, 23026, 23795, 14711, 23736, 7673, 13945, 20090, 20925] start node= 16 start time= 23 capacity type= 2
(11,0)->(6,2)->(6,3)->(17,5)->(18,6)->(19,7)->(12,9)->(12,10)->(12,11)->(12,12)->(19,16)->(14,17)->(22,18)->(20,19)->(20,20)->(16,23)->(28,24)->(15,25)->(24,26)->(2,27)->(19,30)->(27,33)->(27,34)->(28,35)->(25,38)->(23,39)->(8,41)->(25,44)->(25,45)->(9,47)->(11,0):1

artificial: false set: [24768, 6464, 24769, 24770, 2566, 15495, 3146, 9614, 15442, 14742, 16408, 10920, 16426, 15405, 24238, 435, 3444, 15668, 13557, 8888, 3450, 13180, 4733, 25086, 4607, 25087] start node= 10 start time= 14 capacity type= 2
(0,0)->(0,1)->(0,2)->(0,3)->(16,6)->(9,8)->(18,10)->(10,14)->(18,20)->(15,21)->(2,22)->(12,24)->(3,26)->(14,28)->(5,29)->(6,30)->(6,31)->(6,32)->(17,34)->(3,36)->(17,39)->(18,40)->(3,42)->(17,45)->(29,46)->(4,47)->(0,0):1

artificial: false set: [10817, 14722, 11781, 16711, 20233, 1358, 5967, 20239, 3217, 23891, 2644, 14488, 25944, 24867, 25575, 20458, 6378, 25390, 4789, 13943, 2875, 24828, 14716, 24829, 23741, 13950, 10943] start node= 13 start time= 21 capacity type= 2
(3,1)->(2,3)->(2,4)->(19,7)->(25,10)->(1,12)->(1,13)->(1,14)->(6,15)->(12,17)->(13,21)->(15,23)->(24,24)->(24,25)->(16,28)->(28,29)->(15,30)->(24,31)->(16,34)->(28,35)->(5,37)->(16,39)->(16,40)->(6,42)->(3,43)->(12,46)->(12,47)->(3,1):1

artificial: false set: [1344, 16903, 1289, 3851, 13517, 14029, 25422, 9807, 13328, 7120, 19089, 6611, 16915, 15702, 11547, 6433, 15714, 24996, 24997, 5157, 15461, 24807, 1192, 20904, 12392, 9451, 1199, 17266, 25587, 13172, 25588, 4598, 8762, 6586, 22396, 12031] start node= 10 start time= 43 capacity type= 2
(1,0)->(6,1)->(17,3)->(17,4)->(17,5)->(18,6)->(19,7)->(14,8)->(6,10)->(4,11)->(15,13)->(11,15)->(7,16)->(18,18)->(19,19)->(14,20)->(5,21)->(25,24)->(9,26)->(13,27)->(26,28)->(15,29)->(13,30)->(13,31)->(14,32)->(22,33)->(20,34)->(6,35)->(4,36)->(4,37)->(4,38)->(0,39)->(0,40)->(1,41)->(10,43)->(0,47)->(1,0):1

artificial: false set: [25216, 25153, 25217, 8898, 13509, 519, 21959, 11336, 7443, 11542, 10651, 20893, 19679, 15394, 24227, 24996, 14693, 24997, 23718, 25384, 25385, 23017, 25386, 18156, 2670, 16881, 7538, 15668, 4598, 13495, 23738, 25786, 13563, 25787, 24892, 24893, 25215] start node= 21 start time= 10 capacity type= 0
(8,1)->(8,2)->(7,3)->(16,5)->(28,6)->(15,7)->(13,8)->(21,10)->(21,11)->(21,12)->(25,13)->(9,15)->(9,16)->(9,17)->(9,18)->(18,20)->(15,21)->(13,22)->(26,23)->(27,25)->(28,26)->(15,27)->(2,28)->(2,29)->(2,30)->(19,33)->(17,34)->(29,35)->(4,36)->(4,37)->(4,38)->(0,39)->(12,40)->(12,41)->(12,42)->(12,43)->(23,47)->(8,1):1

artificial: false set: [25729, 25730, 21570, 24965, 19077, 24966, 24967, 13195, 5132, 19789, 3152, 17235, 25750, 5976, 11162, 1246, 6942, 8543, 24804, 17255, 4520, 18153, 16938, 20652, 25133, 9903, 19056, 13234, 4595, 6580, 373, 7862, 15737, 25978, 25979] start node= 26 start time= 18 capacity type= 2
(22,0)->(20,1)->(20,2)->(20,3)->(6,4)->(4,5)->(4,6)->(4,7)->(4,8)->(21,9)->(25,10)->(25,11)->(25,12)->(23,13)->(11,15)->(26,18)->(22,21)->(20,22)->(20,23)->(6,24)->(12,26)->(7,29)->(7,30)->(3,32)->(14,34)->(4,35)->(0,36)->(0,37)->(8,38)->(18,41)->(19,42)->(14,43)->(5,44)->(1,46)->(9,47)->(22,0):1

artificial: false set: [6656, 5056, 11522, 8581, 518, 16972, 21262, 1235, 25555, 25236, 25492, 25493, 10839, 25435, 25436, 8736, 7457, 22371, 23973, 15723, 11565, 25393, 14708, 13494, 15479, 25399, 25656, 25400, 25657, 25401, 25658, 11194, 17724, 25021, 25022, 22591, 25023] start node= 26 start time= 3 capacity type= 1
(9,0)->(13,1)->(13,2)->(26,3)->(15,4)->(15,5)->(15,6)->(13,7)->(13,8)->(13,9)->(13,10)->(20,12)->(5,13)->(5,14)->(5,15)->(5,16)->(7,17)->(16,19)->(16,20)->(28,21)->(17,23)->(18,24)->(18,25)->(18,26)->(18,27)->(19,28)->(27,31)->(6,32)->(1,35)->(9,36)->(9,37)->(0,38)->(12,39)->(13,43)->(13,44)->(13,45)->(26,46)->(9,0):1

artificial: false set: [3266, 24198, 13510, 3847, 25415, 25802, 24715, 655, 10896, 1237, 8534, 18903, 11352, 26202, 23772, 19552, 1188, 18411, 20655, 4977, 4595, 15476, 15669, 13497, 11386] start node= 17 start time= 20 capacity type= 1
(12,0)->(3,2)->(29,6)->(4,7)->(15,9)->(13,10)->(28,12)->(25,15)->(23,16)->(17,20)->(18,21)->(15,22)->(13,23)->(13,24)->(21,26)->(21,27)->(0,31)->(5,33)->(4,35)->(0,36)->(1,37)->(9,38)->(22,39)->(29,42)->(29,43)->(12,0):1

artificial: false set: [21376, 25860, 25861, 6598, 25862, 25863, 18891, 4556, 18189, 20686, 11535, 2260, 19096, 17753, 4890, 24222, 19487, 18080, 17569, 20066, 17251, 24867, 20456, 1834, 24235, 23724, 25076, 25077, 4343, 25849, 25850, 13501, 25406, 4543] start node= 21 start time= 32 capacity type= 2
(20,1)->(24,2)->(2,3)->(2,4)->(25,8)->(1,10)->(28,12)->(15,13)->(13,14)->(13,15)->(26,16)->(20,19)->(6,20)->(6,21)->(6,22)->(4,23)->(22,25)->(22,26)->(22,27)->(29,30)->(4,31)->(21,32)->(22,36)->(22,37)->(22,38)->(22,39)->(22,40)->(20,41)->(5,42)->(29,43)->(4,44)->(21,45)->(25,46)->(23,47)->(20,1):1

artificial: false set: [13511, 15495, 25672, 25673, 25674, 25675, 15502, 25679, 25616, 25617, 25618, 25619, 25620, 25621, 15702, 25622, 16855, 11544, 15706, 25691, 25692, 26080, 25632, 26081, 25633, 26082, 25634, 26083, 25635, 26084, 25636, 23013, 25637, 15465, 21290, 18220, 23734, 25592, 26041, 4539, 15932, 16957] start node= 26 start time= 25 capacity type= 0
(18,0)->(18,1)->(18,2)->(18,3)->(18,4)->(18,5)->(18,6)->(19,7)->(17,8)->(17,9)->(18,10)->(19,11)->(19,12)->(19,13)->(27,16)->(27,17)->(27,18)->(27,19)->(27,20)->(27,21)->(28,22)->(15,23)->(13,24)->(26,25)->(26,26)->(4,27)->(21,28)->(17,32)->(17,33)->(17,34)->(17,35)->(17,36)->(17,37)->(17,38)->(17,39)->(18,40)->(18,41)->(18,42)->(18,43)->(18,44)->(17,46)->(18,47)->(18,0):1

artificial: false set: [25475, 25158, 7495, 8583, 3851, 14029, 9807, 7120, 16915, 4564, 13332, 341, 11547, 7393, 15714, 16930, 5157, 19045, 20904, 12392, 24808, 24809, 1194, 1387, 5996, 11182, 2670, 25713, 6579, 13172, 8762, 6586, 22396, 13565] start node= 2 start time= 30 capacity type= 2
(7,1)->(6,3)->(4,4)->(0,5)->(8,6)->(8,7)->(14,8)->(6,10)->(4,11)->(15,13)->(11,15)->(7,16)->(18,18)->(19,19)->(14,20)->(5,21)->(25,24)->(9,26)->(13,27)->(26,28)->(15,29)->(2,30)->(19,33)->(19,34)->(14,35)->(14,36)->(22,37)->(9,39)->(0,40)->(0,41)->(0,42)->(1,43)->(6,44)->(12,46)->(7,1):1

artificial: false set: [3970, 4101, 4358, 7559, 6345, 8779, 11404, 21261, 13519, 16915, 26196, 20885, 25242, 2653, 25247, 8544, 11552, 16864, 289, 15714, 13220, 18148, 24229, 19048, 11564, 12204, 21297, 15473, 25778, 25779, 8695, 7224, 3130, 23742] start node= 21 start time= 2 capacity type= 2
(9,0)->(0,1)->(21,2)->(21,3)->(21,4)->(25,5)->(9,7)->(6,9)->(3,10)->(14,12)->(2,13)->(19,16)->(17,17)->(18,18)->(19,19)->(14,20)->(4,21)->(8,23)->(7,24)->(13,28)->(28,30)->(15,31)->(13,32)->(26,33)->(4,34)->(29,36)->(29,37)->(4,38)->(22,40)->(9,42)->(9,43)->(13,44)->(26,45)->(9,47)->(9,0):1

artificial: false set: [5444, 5070, 17233, 1554, 25427, 21973, 25303, 23896, 25050, 23006, 19487, 23391, 6626, 11556, 10918, 24936, 9896, 24937, 5419, 26027, 13171, 1205, 9078, 23031, 3194, 21948, 7231] start node= 1 start time= 5 capacity type= 2
(20,1)->(6,2)->(1,5)->(9,6)->(11,7)->(11,8)->(26,11)->(26,12)->(27,14)->(28,15)->(1,18)->(14,19)->(5,20)->(12,22)->(3,24)->(3,25)->(3,26)->(5,30)->(7,31)->(13,35)->(13,36)->(26,37)->(27,39)->(28,40)->(5,42)->(5,43)->(23,47)->(20,1):1

artificial: false set: [9984, 13320, 19081, 25353, 25354, 25355, 3149, 25040, 16915, 13268, 15702, 1559, 26008, 9115, 6364, 11100, 25696, 25697, 5217, 25698, 25058, 6435, 15461, 16741, 16807, 17258, 25716, 20921, 25083, 25340, 25341, 25342, 25343, 13183] start node= 3 start time= 29 capacity type= 2
(11,0)->(6,2)->(6,3)->(17,5)->(18,6)->(19,7)->(12,9)->(12,10)->(12,11)->(12,12)->(19,16)->(19,17)->(19,18)->(19,19)->(14,20)->(1,23)->(14,24)->(22,25)->(20,26)->(6,27)->(6,28)->(3,29)->(14,31)->(5,32)->(5,33)->(19,36)->(19,37)->(25,40)->(25,41)->(9,43)->(11,44)->(11,45)->(11,46)->(11,47)->(11,0):1

artificial: false set: [25729, 25730, 23874, 25028, 3845, 11336, 13195, 5132, 3152, 17235, 24792, 11162, 1246, 6942, 8543, 24804, 4965, 4583, 16938, 18155, 20652, 25133, 19056, 14705, 13234, 4595, 6580, 373, 7862, 13495, 15737, 505, 25786, 19261, 20222] start node= 13 start time= 8 capacity type= 2
(22,0)->(20,1)->(20,2)->(20,3)->(6,4)->(4,5)->(15,7)->(13,8)->(21,10)->(21,11)->(25,12)->(23,13)->(24,14)->(16,17)->(28,18)->(5,20)->(5,21)->(4,23)->(0,24)->(0,25)->(12,26)->(7,29)->(7,30)->(3,32)->(14,34)->(4,35)->(0,36)->(0,37)->(8,38)->(18,41)->(19,42)->(14,43)->(5,44)->(1,46)->(9,47)->(22,0):1

artificial: false set: [9923, 22214, 18183, 5193, 19467, 15692, 17741, 13581, 24910, 15375, 16915, 5397, 26069, 22998, 8922, 16860, 14049, 25897, 25898, 24304, 16946, 13172, 23863, 20920, 25597, 5694, 25598, 2687] start node= 21 start time= 39 capacity type= 1
(19,2)->(27,5)->(27,6)->(28,7)->(5,9)->(19,12)->(17,13)->(17,14)->(17,15)->(29,16)->(19,19)->(14,20)->(5,21)->(23,25)->(23,26)->(23,27)->(20,29)->(5,30)->(15,33)->(11,35)->(26,38)->(21,39)->(25,40)->(9,42)->(18,44)->(15,45)->(2,46)->(2,47)->(19,2):1

artificial: false set: [24832, 1217, 25153, 8898, 7108, 13318, 519, 16903, 3849, 650, 332, 5452, 11724, 18189, 20686, 25107, 16917, 15702, 19031, 13208, 25374, 10783, 19679, 9443, 15716, 10600, 7538, 8569, 13499, 24830, 24831] start node= 21 start time= 45 capacity type= 2
(8,1)->(8,2)->(7,3)->(7,4)->(18,6)->(19,7)->(14,8)->(4,9)->(15,11)->(13,12)->(1,14)->(1,15)->(1,16)->(1,17)->(9,18)->(18,20)->(19,21)->(14,22)->(22,23)->(9,25)->(0,26)->(5,28)->(12,30)->(12,31)->(10,35)->(0,39)->(12,40)->(0,44)->(21,45)->(25,46)->(23,47)->(8,1):1

artificial: false set: [8576, 18689, 4741, 6470, 15496, 16907, 22605, 25231, 10896, 657, 3410, 25043, 25044, 25556, 23446, 11545, 16986, 19037, 4957, 15461, 24296, 21290, 13164, 5998, 4335, 14709, 15798, 15737, 4347] start node= 17 start time= 5 capacity type= 2
(12,0)->(3,2)->(17,5)->(18,6)->(29,8)->(19,11)->(14,12)->(5,13)->(4,15)->(22,17)->(16,20)->(16,21)->(28,22)->(13,25)->(26,26)->(4,27)->(22,29)->(9,31)->(9,32)->(0,33)->(5,35)->(5,36)->(5,37)->(6,38)->(17,40)->(18,41)->(19,42)->(27,45)->(6,46)->(12,0):1

artificial: false set: [322, 18179, 20484, 11204, 17734, 4871, 18699, 24203, 24972, 24216, 25817, 11290, 14430, 15070, 24224, 21025, 15656, 7216, 4593, 2356, 1526, 4345, 13497, 18234, 4093, 7551] start node= 1 start time= 38 capacity type= 1
(25,1)->(2,4)->(18,8)->(15,9)->(13,10)->(29,11)->(4,12)->(4,13)->(8,15)->(7,16)->(13,20)->(20,22)->(5,23)->(29,24)->(4,25)->(22,27)->(16,30)->(29,32)->(4,33)->(0,34)->(21,35)->(25,36)->(1,38)->(21,41)->(21,42)->(17,46)->(25,1):1

artificial: false set: [23753, 22412, 13965, 20368, 26066, 26067, 26068, 26069, 26070, 11415, 26071, 26072, 13530, 25886, 18463, 7138, 15717, 25702, 22569, 11563, 4523, 18156, 20653, 20206, 16308, 17015, 6586, 14907, 19263] start node= 26 start time= 44 capacity type= 2
(27,2)->(27,3)->(27,4)->(27,5)->(27,6)->(27,7)->(27,8)->(27,9)->(6,10)->(4,11)->(21,12)->(25,13)->(23,14)->(23,15)->(24,16)->(18,21)->(19,22)->(19,23)->(16,27)->(21,31)->(7,34)->(18,36)->(13,39)->(28,41)->(15,42)->(13,43)->(26,44)->(15,45)->(24,46)->(27,2):1

artificial: false set: [11522, 18503, 15380, 24213, 22997, 16216, 24028, 17244, 12766, 25951, 25952, 25953, 25954, 23970, 20387, 23718, 25069, 7533, 6062, 21939, 4534, 13495, 25400, 25401, 11194, 14715, 380] start node= 0 start time= 44 capacity type= 2
(13,2)->(26,3)->(27,5)->(28,6)->(15,7)->(13,8)->(13,9)->(13,10)->(20,12)->(6,13)->(6,14)->(28,18)->(17,20)->(29,21)->(4,22)->(21,23)->(16,27)->(28,28)->(24,31)->(24,32)->(24,33)->(24,34)->(24,35)->(18,40)->(0,44)->(8,45)->(14,46)->(13,2):1

artificial: false set: [15364, 23751, 24200, 13960, 20105, 20426, 7499, 17742, 25935, 4879, 4113, 25682, 16851, 12372, 2586, 24224, 2465, 7523, 25388, 25389, 17582, 20080, 9908, 26165, 26166, 26167, 26039, 22392, 4089, 13945, 13308, 19069, 11134] start node= 26 start time= 23 capacity type= 2
(19,2)->(19,3)->(17,4)->(29,5)->(29,6)->(29,7)->(29,8)->(4,9)->(8,11)->(14,12)->(22,13)->(20,14)->(24,15)->(24,16)->(2,17)->(11,20)->(26,23)->(26,24)->(15,25)->(24,26)->(20,30)->(5,31)->(29,32)->(4,33)->(8,35)->(14,36)->(28,39)->(15,40)->(24,41)->(2,42)->(12,44)->(12,45)->(12,46)->(19,2):1

artificial: false set: [2561, 20483, 15364, 1861, 23751, 24200, 13960, 20105, 7499, 21963, 25935, 25682, 10771, 16851, 2586, 26142, 26143, 9575, 25388, 25389, 23021, 17582, 20080, 23792, 26165, 26166, 26167, 4089, 13308, 19069, 11134] start node= 10 start time= 23 capacity type= 2
(19,2)->(19,3)->(17,4)->(29,5)->(29,6)->(29,7)->(29,8)->(4,9)->(8,11)->(14,12)->(22,13)->(20,14)->(24,15)->(24,16)->(2,17)->(12,19)->(10,23)->(26,27)->(27,29)->(28,30)->(28,31)->(28,32)->(25,35)->(1,37)->(28,39)->(15,40)->(24,41)->(2,42)->(12,44)->(12,45)->(12,46)->(19,2):1

artificial: false set: [15364, 8775, 24200, 7499, 15438, 25935, 3152, 4115, 16851, 10004, 1369, 26201, 26202, 669, 4895, 24288, 2465, 7909, 24235, 17582, 20080, 13234, 26165, 6646, 26166, 26167, 11320, 4089, 25082, 25083, 6460, 13308, 4604, 19069] start node= 13 start time= 40 capacity type= 2
(29,0)->(19,3)->(17,4)->(29,5)->(29,6)->(29,7)->(29,8)->(4,9)->(8,11)->(14,12)->(22,13)->(20,14)->(24,15)->(24,16)->(2,17)->(11,20)->(6,22)->(1,25)->(6,26)->(6,27)->(6,28)->(17,30)->(3,32)->(14,34)->(4,35)->(8,37)->(9,39)->(13,40)->(29,41)->(29,42)->(29,43)->(4,44)->(0,45)->(5,47)->(29,0):1

artificial: false set: [12420, 24196, 3845, 11720, 16845, 19665, 25361, 25362, 6614, 16730, 1690, 7523, 10915, 3237, 2663, 25902, 24878, 25903, 25904, 4599, 13495, 376, 7865, 15740, 20669, 2559, 10751] start node= 0 start time= 40 capacity type= 1
(29,4)->(4,5)->(15,7)->(13,8)->(1,10)->(2,14)->(2,15)->(12,17)->(12,18)->(12,19)->(3,21)->(2,23)->(19,26)->(25,29)->(23,30)->(23,31)->(23,32)->(23,33)->(8,35)->(14,36)->(6,38)->(4,39)->(0,40)->(8,41)->(18,44)->(19,45)->(12,47)->(29,4):1

artificial: false set: [24832, 1217, 17603, 20100, 4678, 11526, 7498, 13259, 4558, 1232, 8529, 19090, 9435, 1183, 11875, 15459, 15652, 21991, 10024, 24237, 8754, 13493, 2485, 6138, 25274, 24830, 24831, 18239] start node= 10 start time= 26 capacity type= 2
(17,3)->(18,4)->(15,5)->(13,6)->(26,7)->(8,10)->(14,11)->(1,14)->(1,15)->(1,16)->(1,17)->(9,18)->(13,19)->(5,22)->(10,26)->(10,27)->(0,31)->(1,32)->(9,33)->(22,34)->(20,35)->(24,36)->(2,37)->(11,40)->(6,42)->(29,45)->(4,46)->(21,47)->(17,3):1

artificial: false set: [12356, 24967, 329, 18187, 21068, 25165, 7886, 25998, 24785, 9105, 1170, 1555, 6612, 25818, 10018, 22565, 24997, 24807, 4520, 24808, 18153, 20650, 2282, 20911, 8560, 16946, 6582, 4598, 23735, 13560, 24889, 19643, 2687] start node= 28 start time= 23 capacity type= 1
(19,2)->(27,5)->(6,6)->(4,7)->(4,8)->(21,9)->(25,10)->(23,11)->(8,13)->(8,14)->(9,16)->(0,17)->(0,18)->(1,19)->(14,20)->(28,23)->(15,24)->(2,25)->(2,26)->(25,30)->(25,31)->(9,33)->(11,34)->(6,36)->(4,37)->(4,38)->(0,39)->(0,40)->(0,41)->(21,42)->(21,43)->(25,44)->(2,47)->(19,2):1

artificial: false set: [26048, 22401, 13954, 20099, 7492, 24900, 13253, 25030, 6600, 1544, 25550, 24786, 7508, 2581, 24794, 7900, 25246, 11551, 14751, 8735, 355, 11175, 4585, 363, 23340, 8561, 6577, 4082, 13173, 4727, 12345, 7482, 14780, 8766] start node= 26 start time= 32 capacity type= 2
(6,1)->(4,2)->(8,4)->(14,5)->(1,8)->(14,9)->(28,12)->(16,14)->(16,15)->(9,17)->(0,18)->(0,19)->(8,20)->(14,21)->(5,22)->(5,23)->(6,24)->(4,25)->(0,26)->(0,27)->(8,28)->(9,30)->(13,31)->(26,32)->(26,33)->(15,34)->(24,35)->(2,36)->(2,37)->(12,39)->(7,42)->(16,44)->(9,46)->(9,47)->(6,1):1

artificial: false set: [8576, 16903, 20233, 25098, 25099, 6476, 15502, 25679, 25936, 25937, 25237, 15702, 25238, 8535, 19096, 17242, 25564, 25565, 25632, 25633, 24801, 25634, 20130, 25635, 7907, 25636, 25637, 25510, 25511, 4524, 18157, 14766, 20654, 370, 13304, 13944, 19065, 17273, 6587, 19263] start node= 21 start time= 13 capacity type= 0
(18,0)->(18,1)->(18,2)->(18,3)->(18,4)->(18,5)->(18,6)->(19,7)->(14,8)->(22,9)->(20,10)->(6,11)->(4,12)->(21,13)->(25,14)->(23,15)->(24,16)->(24,17)->(24,18)->(15,22)->(15,23)->(15,24)->(24,25)->(16,28)->(16,29)->(16,30)->(9,32)->(0,33)->(0,34)->(8,35)->(9,37)->(9,38)->(9,39)->(22,40)->(20,41)->(6,42)->(6,43)->(6,44)->(17,46)->(18,47)->(18,0):1

artificial: false set: [6464, 11714, 25029, 5446, 15495, 5193, 3146, 15375, 15442, 16915, 16408, 16860, 1829, 10920, 15405, 24238, 3887, 24304, 13489, 3444, 13172, 24820, 23863, 3450, 13180, 4733, 25597, 25086, 25598, 25087] start node= 13 start time= 2 capacity type= 2
(15,1)->(13,2)->(1,4)->(1,5)->(28,7)->(5,9)->(19,12)->(17,13)->(17,14)->(17,15)->(29,16)->(19,19)->(14,20)->(5,21)->(5,22)->(12,24)->(3,26)->(14,28)->(5,29)->(6,30)->(6,31)->(6,32)->(17,34)->(3,36)->(17,39)->(18,40)->(3,42)->(17,45)->(29,46)->(4,47)->(15,1):1

artificial: false set: [9792, 19458, 17732, 4549, 18182, 20487, 8587, 4877, 11533, 26190, 24850, 15702, 16855, 24857, 1242, 7515, 1245, 25246, 9119, 24223, 25889, 7393, 1185, 6435, 1571, 4773, 15461, 14759, 15465, 362, 15658, 1196, 22190, 18159, 20656, 4592, 13236, 25592, 8569, 13499, 13180, 25404] start node= 29 start time= 30 capacity type= 2
(11,0)->(7,1)->(6,3)->(17,5)->(18,6)->(19,7)->(17,8)->(17,9)->(18,10)->(15,11)->(13,12)->(13,13)->(26,14)->(21,15)->(25,16)->(23,17)->(23,18)->(20,20)->(5,21)->(16,23)->(9,25)->(0,26)->(8,27)->(14,28)->(5,29)->(29,30)->(29,31)->(4,32)->(0,33)->(1,34)->(1,35)->(14,36)->(4,37)->(21,38)->(25,39)->(1,41)->(1,42)->(9,43)->(0,44)->(1,45)->(9,46)->(9,47)->(11,0):1

artificial: false set: [8960, 19650, 19011, 17032, 1546, 19658, 8783, 7508, 24982, 13211, 25180, 25181, 7902, 12000, 25888, 25441, 25889, 7525, 13221, 13094, 6631, 4524, 25580, 18158, 20655, 13298, 8693, 4535, 18168, 20665, 14781, 25789] start node= 21 start time= 13 capacity type= 2
(13,0)->(14,1)->(14,2)->(22,3)->(9,5)->(6,7)->(1,10)->(14,11)->(4,12)->(21,13)->(21,14)->(25,15)->(23,16)->(23,17)->(23,18)->(8,20)->(14,21)->(4,22)->(4,23)->(21,24)->(25,25)->(23,26)->(8,28)->(8,29)->(8,30)->(9,32)->(8,37)->(14,38)->(19,40)->(16,44)->(16,45)->(9,47)->(13,0):1

artificial: false set: [19648, 9411, 9092, 519, 25292, 25293, 25294, 25295, 7890, 9813, 14430, 25248, 24224, 25249, 24993, 25250, 24994, 24995, 24996, 24997, 25126, 295, 25127, 10792, 25128, 25129, 18153, 25130, 25131, 7468, 20655, 4598, 25784, 25978, 25979, 25980, 25981, 25982] start node= 21 start time= 8 capacity type= 0
(10,0)->(10,1)->(10,2)->(10,3)->(0,7)->(21,8)->(21,9)->(25,10)->(25,11)->(25,12)->(25,13)->(25,14)->(25,15)->(23,16)->(8,18)->(9,20)->(11,21)->(7,22)->(7,23)->(7,24)->(7,25)->(7,26)->(7,27)->(7,28)->(16,30)->(29,32)->(4,33)->(4,34)->(4,35)->(4,36)->(4,37)->(4,38)->(0,39)->(12,40)->(10,44)->(10,45)->(10,46)->(10,47)->(10,0):2

artificial: false set: [6593, 4098, 22601, 24970, 25098, 3851, 6667, 16972, 14029, 22543, 9999, 7508, 13078, 21975, 1246, 25247, 8736, 12001, 23333, 25704, 25705, 25706, 25707, 12338, 9587, 25461, 14455, 6585] start node= 26 start time= 39 capacity type= 2
(9,0)->(13,1)->(14,2)->(28,5)->(16,7)->(6,9)->(4,10)->(4,11)->(15,13)->(11,15)->(6,17)->(4,18)->(8,20)->(14,21)->(14,22)->(19,24)->(19,25)->(19,26)->(19,27)->(19,28)->(27,31)->(10,35)->(26,39)->(27,41)->(6,42)->(6,43)->(1,46)->(9,47)->(9,0):1

artificial: false set: [11331, 22603, 6476, 15502, 25679, 14483, 24212, 6613, 1174, 87, 1367, 5976, 25370, 25632, 15649, 4581, 18149, 20454, 1256, 25258, 11115, 25259, 25260, 9517, 13490, 4598, 17023] start node= 21 start time= 5 capacity type= 2
(18,0)->(18,1)->(15,2)->(13,3)->(21,5)->(25,6)->(1,8)->(10,10)->(10,11)->(10,12)->(10,13)->(29,20)->(4,21)->(0,22)->(1,23)->(6,24)->(12,26)->(12,27)->(19,31)->(16,35)->(6,37)->(4,38)->(0,39)->(27,43)->(6,44)->(17,46)->(18,47)->(18,0):1

artificial: false set: [4868, 26052, 21253, 6666, 2573, 10831, 1554, 24213, 24791, 9111, 23000, 2267, 24290, 11555, 4582, 10024, 10537, 23721, 13546, 1389, 20464, 26161, 13171, 16949, 504, 12220, 6142, 25983] start node= 26 start time= 36 capacity type= 2
(29,1)->(29,2)->(19,5)->(27,8)->(28,9)->(15,10)->(2,11)->(25,15)->(25,16)->(1,18)->(14,19)->(5,20)->(29,21)->(4,22)->(0,23)->(0,24)->(12,25)->(14,28)->(2,29)->(12,31)->(13,35)->(26,36)->(26,37)->(9,39)->(11,40)->(6,42)->(1,45)->(6,46)->(29,1):1

artificial: false set: [25153, 25154, 7875, 8777, 12042, 13195, 6606, 20177, 13522, 25427, 1240, 4764, 4892, 10012, 26205, 4127, 24991, 3872, 11556, 23013, 8742, 1191, 2473, 12010, 13163, 14702, 24238, 23727, 13936, 25205, 21301, 23734, 4598, 13559, 25399, 25400, 24888, 25401] start node= 2 start time= 24 capacity type= 2
(8,1)->(8,2)->(8,3)->(9,5)->(9,6)->(13,7)->(13,8)->(13,9)->(13,10)->(14,11)->(5,12)->(16,14)->(28,15)->(15,16)->(24,17)->(27,21)->(28,22)->(15,23)->(2,24)->(2,25)->(11,28)->(6,30)->(4,31)->(4,32)->(15,34)->(13,35)->(13,36)->(26,37)->(4,38)->(0,39)->(1,40)->(9,41)->(13,42)->(14,43)->(5,44)->(29,45)->(29,46)->(4,47)->(8,1):1

artificial: false set: [22401, 24962, 13954, 24963, 20099, 24900, 18437, 14410, 24204, 7503, 13519, 3857, 14035, 9813, 2581, 7127, 7448, 15387, 24220, 4573, 3869, 350, 25246, 8735, 13216, 11552, 4516, 25126, 11175, 15913, 6577, 7482, 14780] start node= 17 start time= 27 capacity type= 2
(6,1)->(4,2)->(4,3)->(4,4)->(21,5)->(7,8)->(16,10)->(29,12)->(4,13)->(0,14)->(8,15)->(14,16)->(4,17)->(15,19)->(11,21)->(7,22)->(7,23)->(18,25)->(17,27)->(29,28)->(4,29)->(15,31)->(13,32)->(26,33)->(15,34)->(24,35)->(2,36)->(2,37)->(12,39)->(7,42)->(16,44)->(9,46)->(9,47)->(6,1):1

artificial: false set: [25536, 15683, 13572, 23433, 4878, 3920, 1937, 23378, 16917, 477, 23390, 24223, 14689, 2471, 1831, 15401, 24234, 24812, 24821, 2677, 12214, 24822, 16888, 10106, 4603, 11388, 13181] start node= 15 start time= 36 capacity type= 2
(16,0)->(16,1)->(28,2)->(1,5)->(1,6)->(1,7)->(28,9)->(13,12)->(28,14)->(1,17)->(19,21)->(14,22)->(2,23)->(11,26)->(14,29)->(5,30)->(29,31)->(4,32)->(18,35)->(15,36)->(2,37)->(19,40)->(17,41)->(29,42)->(4,43)->(0,44)->(0,45)->(16,0):1

artificial: false set: [23875, 20484, 3146, 20174, 26003, 26069, 26070, 1367, 26071, 6360, 23000, 25817, 18522, 8544, 23010, 23721, 24937, 17581, 4781, 23792, 49, 5109, 1526, 13498, 11195, 13180, 14782, 14719] start node= 3 start time= 25 capacity type= 2
(9,0)->(0,1)->(27,5)->(27,6)->(27,7)->(27,8)->(28,9)->(15,10)->(13,11)->(20,13)->(24,14)->(27,18)->(28,19)->(5,21)->(1,23)->(6,24)->(3,25)->(3,26)->(14,28)->(5,29)->(16,31)->(28,32)->(25,35)->(25,36)->(1,38)->(21,41)->(21,42)->(16,46)->(9,0):1

artificial: false set: [21956, 13512, 25417, 25418, 12364, 12046, 25681, 25682, 25683, 10067, 19288, 13533, 14048, 9568, 23014, 11245, 13103, 25330, 16756, 23735, 13495, 11768, 20153, 13498, 12027, 25403, 25404, 23743] start node= 11 start time= 34 capacity type= 2
(19,1)->(19,2)->(19,3)->(19,4)->(15,7)->(13,8)->(15,10)->(13,11)->(13,12)->(13,13)->(10,16)->(26,20)->(27,22)->(28,23)->(15,24)->(13,25)->(13,26)->(13,27)->(14,28)->(28,31)->(15,32)->(11,34)->(11,35)->(23,40)->(24,41)->(15,45)->(13,46)->(14,47)->(19,1):1

artificial: false set: [641, 4675, 24967, 329, 18187, 21068, 25165, 7886, 25818, 24223, 24801, 1186, 1571, 22565, 24997, 24807, 9575, 4520, 24808, 18153, 20650, 11310, 8560, 4592, 16946, 13236, 6582, 4598, 19643, 21243, 8765, 2687] start node= 5 start time= 19 capacity type= 2
(19,2)->(27,5)->(6,6)->(4,7)->(4,8)->(21,9)->(25,10)->(23,11)->(8,13)->(8,14)->(9,16)->(0,17)->(5,19)->(10,23)->(26,27)->(9,29)->(13,30)->(29,31)->(4,32)->(0,33)->(0,34)->(1,35)->(14,36)->(4,37)->(4,38)->(0,39)->(0,40)->(0,41)->(21,42)->(21,43)->(25,44)->(2,47)->(19,2):2

artificial: false set: [25600, 24768, 25601, 1153, 15618, 1346, 5955, 25349, 25350, 4555, 6607, 4496, 25428, 10903, 16861, 2471, 16937, 17262, 11701, 20086, 2745, 13242, 10298, 18428, 25598, 25599] start node= 21 start time= 44 capacity type= 2
(0,0)->(0,1)->(1,2)->(6,3)->(12,5)->(12,6)->(12,7)->(3,9)->(19,13)->(17,14)->(17,15)->(17,16)->(17,17)->(17,18)->(24,22)->(2,23)->(11,26)->(20,30)->(6,31)->(4,32)->(13,36)->(13,37)->(19,41)->(14,42)->(4,43)->(21,44)->(0,0):1

artificial: false set: [19074, 20420, 24292, 4549, 18374, 16999, 17256, 3146, 22602, 25547, 5995, 12748, 25548, 25549, 25389, 25550, 25390, 14223, 11888, 4979, 17587, 6361, 10751] start node= 21 start time= 38 capacity type= 2
(29,4)->(19,7)->(16,11)->(16,12)->(16,13)->(16,14)->(16,15)->(22,18)->(20,19)->(24,20)->(20,24)->(6,25)->(3,26)->(14,28)->(13,32)->(5,35)->(4,37)->(21,38)->(27,42)->(6,43)->(12,45)->(12,46)->(12,47)->(29,4):1

artificial: false set: [14722, 25794, 25795, 25796, 25990, 15495, 24199, 7115, 20239, 24208, 25621, 25622, 11286, 26139, 26140, 1245, 9118, 6433, 15459, 15652, 11755, 10031, 4529, 23987, 18165, 13493, 20471, 16312, 4088, 1849, 7546, 23741, 15805, 13950, 26175] start node= 11 start time= 47 capacity type= 1
(6,1)->(17,3)->(18,4)->(15,5)->(13,6)->(29,7)->(4,8)->(8,10)->(7,11)->(18,13)->(29,15)->(29,16)->(4,17)->(21,18)->(21,19)->(21,20)->(21,21)->(25,22)->(25,23)->(1,25)->(28,27)->(28,28)->(28,29)->(15,30)->(24,31)->(16,34)->(28,35)->(17,37)->(17,38)->(17,39)->(18,40)->(13,43)->(1,45)->(9,46)->(11,47)->(6,1):1

artificial: false set: [25664, 16834, 13318, 11526, 19079, 7498, 13259, 2380, 4558, 16916, 10645, 25752, 6621, 15459, 25380, 15652, 21991, 19817, 10027, 9136, 15729, 25461, 13493, 17593, 20090, 24891, 24830, 1215, 18239] start node= 21 start time= 47 capacity type= 2
(17,3)->(18,4)->(15,5)->(13,6)->(26,7)->(8,10)->(14,11)->(1,14)->(1,15)->(9,16)->(19,20)->(14,21)->(14,22)->(22,23)->(20,24)->(20,25)->(24,26)->(2,27)->(2,28)->(18,32)->(18,33)->(19,34)->(12,36)->(12,37)->(23,41)->(11,43)->(6,45)->(4,46)->(21,47)->(17,3):1

artificial: false set: [14722, 25794, 25795, 25796, 25990, 15495, 24199, 7115, 1293, 20239, 24208, 25621, 25622, 11286, 26139, 26140, 22371, 11755, 4529, 23987, 13492, 18165, 25397, 20471, 16312, 4088, 1849, 7546, 23741, 15805, 13950, 26175, 9599] start node= 10 start time= 47 capacity type= 2
(26,3)->(15,4)->(13,5)->(13,6)->(29,7)->(4,8)->(8,10)->(7,11)->(18,13)->(29,15)->(29,16)->(4,17)->(21,18)->(21,19)->(21,20)->(21,21)->(25,22)->(25,23)->(1,25)->(28,27)->(28,28)->(28,29)->(15,30)->(24,31)->(16,34)->(28,35)->(17,37)->(17,38)->(17,39)->(18,40)->(13,43)->(1,45)->(10,47)->(26,3):1

artificial: false set: [6464, 9793, 6914, 21955, 1161, 3146, 1867, 23757, 14029, 15442, 24916, 3605, 5974, 25311, 15399, 24232, 10920, 1194, 1834, 23724, 14063, 9904, 3444, 22581, 4601, 13180, 4733, 25534, 25086, 25087] start node= 7 start time= 2 capacity type= 2
(11,1)->(7,2)->(3,4)->(3,5)->(0,9)->(1,10)->(28,12)->(15,13)->(11,15)->(11,16)->(26,19)->(27,21)->(6,22)->(12,24)->(3,26)->(14,28)->(5,29)->(6,30)->(6,31)->(6,32)->(17,34)->(3,36)->(17,39)->(29,40)->(4,41)->(0,42)->(1,43)->(28,45)->(15,46)->(15,47)->(11,1):1

artificial: false set: [9792, 8769, 19458, 12034, 17732, 25029, 4549, 5062, 18182, 20487, 3146, 8587, 11533, 25037, 1232, 15702, 16855, 6936, 24857, 1242, 1245, 25246, 9119, 25889, 7393, 6435, 24996, 15461, 25127, 15465, 15658, 1196, 22190, 18159, 20656, 13235, 25592, 13499, 25404, 13180, 5118] start node= 3 start time= 26 capacity type= 2
(11,0)->(7,1)->(6,3)->(17,5)->(18,6)->(19,7)->(17,8)->(17,9)->(18,10)->(15,11)->(13,12)->(13,13)->(26,14)->(21,15)->(25,16)->(23,17)->(23,18)->(20,20)->(5,21)->(5,22)->(7,23)->(7,24)->(3,26)->(14,28)->(5,29)->(5,30)->(1,32)->(9,33)->(13,34)->(14,35)->(4,36)->(4,37)->(21,38)->(25,39)->(1,41)->(1,42)->(9,43)->(0,44)->(1,45)->(9,46)->(9,47)->(11,0):1

artificial: false set: [516, 19461, 7878, 17735, 5064, 13195, 4765, 14751, 16991, 16929, 22562, 10597, 7465, 10089, 1193, 1578, 13164, 5228, 2670, 8561, 306, 13234, 18163, 6195, 4595, 20660, 9080, 14715, 23740, 13565] start node= 15 start time= 29 capacity type= 2
(27,2)->(6,3)->(8,6)->(9,8)->(11,9)->(14,12)->(5,13)->(16,15)->(9,17)->(0,18)->(21,19)->(25,20)->(23,21)->(20,23)->(5,24)->(7,25)->(16,27)->(28,28)->(15,29)->(2,30)->(19,33)->(14,34)->(4,35)->(0,36)->(12,37)->(0,41)->(1,42)->(14,43)->(5,44)->(19,47)->(27,2):1

artificial: false set: [24967, 8775, 18187, 21068, 25165, 7886, 15056, 24785, 24786, 24787, 26003, 1172, 26004, 9431, 25432, 22565, 4520, 18153, 11369, 20650, 18220, 8560, 16946, 1269, 20917, 6582, 315, 19643, 2687] start node= 17 start time= 32 capacity type= 1
(19,2)->(27,5)->(6,6)->(4,7)->(4,8)->(21,9)->(25,10)->(23,11)->(8,13)->(8,14)->(9,16)->(0,17)->(0,18)->(0,19)->(0,20)->(1,21)->(10,23)->(0,27)->(21,28)->(17,32)->(25,35)->(25,36)->(25,37)->(9,39)->(13,40)->(13,41)->(21,43)->(25,44)->(2,47)->(19,2):1

artificial: false set: [20416, 3841, 7426, 329, 9993, 3852, 7438, 25935, 6612, 2454, 15383, 24216, 25371, 11164, 17252, 12004, 12197, 24806, 24807, 24808, 4585, 18474, 13934, 25135, 6576, 25136, 25137, 13491, 4597, 6453, 506, 6587, 25149] start node= 15 start time= 3 capacity type= 2
(6,0)->(4,1)->(15,3)->(13,4)->(14,5)->(2,6)->(11,9)->(6,11)->(4,12)->(15,14)->(24,15)->(24,16)->(20,20)->(6,21)->(17,23)->(29,24)->(4,25)->(0,26)->(12,27)->(12,28)->(7,31)->(7,32)->(7,33)->(7,34)->(6,36)->(4,37)->(0,38)->(0,39)->(0,40)->(0,41)->(21,42)->(7,45)->(7,46)->(6,0):1

artificial: false set: [21376, 6598, 19081, 331, 18189, 20686, 11535, 16785, 2260, 25754, 25755, 25820, 19487, 17569, 20066, 17251, 24867, 14052, 20456, 1834, 24810, 23724, 2670, 25076, 25077, 10358, 4343, 17596, 20093, 13501, 25406] start node= 0 start time= 42 capacity type= 2
(20,1)->(24,2)->(2,3)->(2,4)->(25,8)->(1,10)->(28,12)->(15,13)->(13,14)->(13,15)->(26,16)->(20,19)->(6,20)->(6,21)->(6,22)->(4,23)->(22,25)->(20,26)->(20,27)->(20,28)->(24,29)->(2,30)->(19,33)->(15,36)->(11,38)->(0,42)->(0,43)->(21,44)->(21,45)->(25,46)->(23,47)->(20,1):1

artificial: false set: [1217, 9090, 13188, 5125, 26118, 3142, 25033, 25034, 5067, 4364, 337, 7443, 10003, 6357, 23959, 14430, 8544, 24224, 1186, 1571, 14693, 1383, 15465, 15658, 24235, 7468, 19054, 5103, 4593, 7538, 6136, 13176, 13499, 11196, 17726] start node= 17 start time= 9 capacity type= 2
(9,0)->(0,1)->(8,2)->(7,3)->(16,5)->(28,6)->(28,7)->(17,9)->(18,10)->(15,11)->(13,12)->(20,14)->(5,15)->(1,17)->(9,18)->(11,19)->(6,21)->(3,22)->(14,24)->(5,25)->(5,26)->(5,27)->(7,28)->(16,30)->(29,32)->(4,33)->(0,34)->(1,35)->(14,36)->(5,37)->(1,39)->(6,40)->(29,43)->(4,44)->(22,46)->(9,0):1

===========================new round 1=========================
-------------Start to solve SolveVehicleCoverCGHeuristic()---------------
flowCoverCount=555
Time of first LP solve= 186807
There are 28229 columns added to the model.
Tried aggregator 1 time.
MIP Presolve eliminated 24220 rows and 24433 columns.
MIP Presolve modified 18667 coefficients.
Reduced MIP has 638 rows, 3886 columns, and 46823 nonzeros.
Reduced MIP has 74 binaries, 3812 generals, 0 SOSs, and 0 indicators.
Presolve time = 0.06 sec. (47.64 ticks)
Found incumbent of value 1.6002065e+09 after 0.09 sec. (78.76 ticks)
Probing time = 0.11 sec. (0.39 ticks)
Tried aggregator 2 times.
Aggregator did 1 substitutions.
Reduced MIP has 637 rows, 3885 columns, and 46821 nonzeros.
Reduced MIP has 74 binaries, 3811 generals, 0 SOSs, and 0 indicators.
Presolve time = 0.01 sec. (13.14 ticks)
Probing time = 0.04 sec. (0.41 ticks)
MIP emphasis: balance optimality and feasibility.
MIP search method: dynamic search.
Parallel mode: deterministic, using up to 4 threads.
Root relaxation solution time = 0.06 sec. (33.50 ticks)

        Nodes                                         Cuts/
   Node  Left     Objective  IInf  Best Integer    Best Bound    ItCnt     Gap

*     0+    0                       1.60021e+09      259.0000           100.00%
*     0+    0                       1.00055e+08      259.0000           100.00%
*     0+    0                        38130.0000      259.0000            99.32%
*     0+    0                        35058.0000      259.0000            99.26%
      0     0    21113.4205    86    35058.0000    21113.4205      445   39.78%
*     0+    0                        23534.0000    21113.4205            10.29%
*     0+    0                        22778.0000    21113.4205             7.31%
      0     0    22199.3464    47    22778.0000      Cuts: 80      565    2.54%
      0     0    22267.7925    68    22778.0000      Cuts: 20      599    2.24%
      0     0    22293.6362    60    22778.0000      Cuts: 15      629    2.13%
      0     0    22316.4037    24    22778.0000       Cuts: 8      645    2.03%
      0     0    22336.6674    49    22778.0000       Cuts: 3      657    1.94%
*     0+    0                        22759.0000    22336.6674             1.86%
      0     0    22341.2461    49    22759.0000       Cuts: 4      669    1.84%
      0     0    22349.1296    42    22759.0000   ZeroHalf: 2      687    1.80%
*     0+    0                        22545.0000    22349.1296             0.87%

Mixed integer rounding cuts applied:  33
Zero-half cuts applied:  32
Gomory fractional cuts applied:  9

Root node processing (before b&c):
  Real time             =    0.87 sec. (361.42 ticks)
Parallel b&c, 4 threads:
  Real time             =    0.00 sec. (0.00 ticks)
  Sync time (average)   =    0.00 sec.
  Wait time (average)   =    0.00 sec.
                          ------------
Total (root+branch&cut) =    0.87 sec. (361.42 ticks)
optimal objective= 22545.0+84205.0=106750.0

Step 4-AdjustFlow
After adjust, flowCost=65385.0
Tried aggregator 2 times.
MIP Presolve eliminated 152980 rows and 101409 columns.
Aggregator did 149313 substitutions.
Reduced MIP has 298565 rows, 792833 columns, and 2117167 nonzeros.
Reduced MIP has 0 binaries, 161 generals, 0 SOSs, and 0 indicators.
Presolve time = 2.76 sec. (1313.73 ticks)
Tried aggregator 1 time.
Reduced MIP has 298565 rows, 792833 columns, and 2117167 nonzeros.
Reduced MIP has 0 binaries, 161 generals, 0 SOSs, and 0 indicators.
Presolve time = 2.52 sec. (871.98 ticks)
MIP emphasis: balance optimality and feasibility.
MIP search method: dynamic search.
Parallel mode: deterministic, using up to 4 threads.
Root relaxation solution time = 892.07 sec. (170807.26 ticks)

        Nodes                                         Cuts/
   Node  Left     Objective  IInf  Best Integer    Best Bound    ItCnt     Gap

*     0+    0                       107718.0000  -142630.0000           232.41%
*     0+    0                        88688.0000  -142630.0000           260.82%
*     0+    0                        88099.0000  -142630.0000           261.90%
      0     0  -1.00000e+37     0    88099.0000  -142630.0000   129498  261.90%

Root node processing (before b&c):
  Real time             =  901.15 sec. (174303.14 ticks)
Parallel b&c, 4 threads:
  Real time             =    0.00 sec. (0.00 ticks)
  Sync time (average)   =    0.00 sec.
  Wait time (average)   =    0.00 sec.
                          ------------
Total (root+branch&cut) =  901.15 sec. (174303.14 ticks)
Intensification optimal objective= 88099.0
# columns in columnManager=161
===========================new round 2=========================

进入死循环，下一轮vehiclecover cg改为360s inten改为1800s

-------------------------------------------------------------------------------------------------------
