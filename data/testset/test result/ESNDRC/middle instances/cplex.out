Solve for test10_7_30_50_300A.txt
number of service arcs=1500
number of holding arcs=350

Time of first LP solve= 701209

There are 4669 columns added to the model.

Tried aggregator 2 times.
MIP Presolve eliminated 25653 rows and 43 columns.
Aggregator did 2958 substitutions.
Reduced MIP has 78610 rows, 366305 columns, and 1117840 nonzeros.
Reduced MIP has 4647 binaries, 0 generals, 0 SOSs, and 0 indicators.
Presolve time = 0.92 sec. (540.06 ticks)
Probing time = 1.53 sec. (102.65 ticks)
Tried aggregator 1 time.
MIP Presolve eliminated 237 rows and 1137 columns.
Reduced MIP has 78373 rows, 365168 columns, and 1114429 nonzeros.
Reduced MIP has 4647 binaries, 0 generals, 0 SOSs, and 0 indicators.
Presolve time = 1.10 sec. (466.05 ticks)
Probing time = 0.92 sec. (99.90 ticks)
Clique table members: 350.
MIP emphasis: balance optimality and feasibility.
MIP search method: dynamic search.
Parallel mode: deterministic, using up to 4 threads.
Root relaxation solution time = 812.66 sec. (170965.36 ticks)

        Nodes                                         Cuts/
   Node  Left     Objective  IInf  Best Integer    Best Bound    ItCnt     Gap

      0     0    56696.5900   157                  56696.5900   111804         
      0     0    56760.4300   156                  Cuts: 2784   143428         
      0     0    56760.4300   137                  Cuts: 3076   168117         
      0     0    56760.4300   141                  Cuts: 2695   194015         
      0     0    56760.4300   142                  Cuts: 2755   217052         
Heuristic still looking.
Heuristic still looking.
Heuristic still looking.
*     0+    0                        58409.0000    56760.4300             2.82%
      0     2    56760.4300   142    58409.0000    56760.4300   217052    2.82%
Elapsed time = 5697.11 sec. (1216390.79 ticks, tree = 0.00 MB, solutions = 1)
      1     3    56760.4300   115    58409.0000    56760.4300   258844    2.82%
      2     4    56786.6100   102    58409.0000    56760.4300   273939    2.82%
      3     5    56760.4300   129    58409.0000    56760.4300   278880    2.82%
      5     7    56760.4300   112    58409.0000    56760.4300   312758    2.82%
      6     8    56760.4300   101    58409.0000    56760.4300   336728    2.82%
      8    10    56786.6100   113    58409.0000    56760.4300   379066    2.82%
      9    11    56992.9900   100    58409.0000    56760.4300   420971    2.82%

Implied bound cuts applied:  11
Flow cuts applied:  832
Mixed integer rounding cuts applied:  2410
Gomory fractional cuts applied:  2

Root node processing (before b&c):
  Real time             = 5695.75 sec. (1216017.58 ticks)
Parallel b&c, 4 threads:
  Real time             = 1504.41 sec. (583950.95 ticks)
  Sync time (average)   =  563.90 sec.
  Wait time (average)   =  563.98 sec.
                          ------------
Total (root+branch&cut) = 7200.16 sec. (1799968.53 ticks)
optimal objective= 58409.0

artificial: false edgeIndexset: [480, 786, 772, 1814, 1671, 1415, 1307, 251, 444] start node= 1 start time= 1 capacity type= 2 edgeSet: [480, 786, 772, 1814, 1671, 1415, 1307, 251, 444] ifChargeSet: [1814, 1671]
(1,1)->(5,7)->(6,14)->(6,15)->(3,21)->(3,22)->(2,30)->(3,36)->(2,44)->(1,1):1

artificial: false edgeIndexset: [529, 657, 1571, 1800, 1401, 1514, 892, 1086, 222, 15] start node= 6 start time= 0 capacity type= 2 edgeSet: [529, 657, 1571, 1800, 1401, 1514, 892, 1086, 222, 15] ifChargeSet: [1571, 1514]
(6,0)->(6,1)->(3,7)->(0,14)->(0,15)->(1,21)->(1,22)->(2,29)->(4,36)->(3,42)->(6,0):1

artificial: false edgeIndexset: [1073, 209, 2, 516, 1558, 694, 1501, 1837, 1438, 879] start node= 6 start time= 37 capacity type= 2 edgeSet: [1073, 209, 2, 516, 1558, 694, 1501, 1837, 1438, 879] ifChargeSet: [1558, 1501]
(0,1)->(0,2)->(1,8)->(1,9)->(2,16)->(4,23)->(3,29)->(6,37)->(6,38)->(3,44)->(0,1):1

artificial: false edgeIndexset: [1424, 865, 1537, 1059, 245, 502, 38, 680, 1594, 1823] start node= 6 start time= 23 capacity type= 2 edgeSet: [1424, 865, 1537, 1059, 245, 502, 38, 680, 1594, 1823] ifChargeSet: [1537, 1594]
(2,2)->(4,9)->(3,15)->(6,23)->(6,24)->(3,30)->(0,37)->(0,38)->(1,44)->(1,45)->(2,2):1

artificial: false edgeIndexset: [1280, 273, 1779, 1667, 645, 585, 1290, 1451, 907, 718, 62] start node= 4 start time= 7 capacity type= 2 edgeSet: [1280, 273, 1779, 1667, 645, 585, 1290, 1451, 907, 718, 62] ifChargeSet: [1779, 1667]
(6,1)->(4,7)->(0,12)->(3,17)->(3,18)->(1,23)->(5,29)->(5,30)->(2,35)->(5,40)->(2,45)->(6,1):1

artificial: false edgeIndexset: [736, 80, 1298, 291, 613, 1797, 1685, 553, 1258, 1469, 925] start node= 4 start time= 25 capacity type= 2 edgeSet: [736, 80, 1298, 291, 613, 1797, 1685, 553, 1258, 1469, 925] ifChargeSet: [1797, 1685]
(2,3)->(5,8)->(2,13)->(6,19)->(4,25)->(0,30)->(3,35)->(3,36)->(1,41)->(5,47)->(5,48)->(2,3):1

artificial: false edgeIndexset: [1520, 1729, 786, 1080, 121, 364, 1644, 445, 302, 1359, 1519] start node= 0 start time= 19 capacity type= 2 edgeSet: [1520, 1729, 786, 1080, 121, 364, 1644, 445, 302, 1359, 1519] ifChargeSet: [1729, 1644]
(1,2)->(6,9)->(2,14)->(0,19)->(0,20)->(0,21)->(4,29)->(4,30)->(3,36)->(2,44)->(2,45)->(1,2):1

artificial: false edgeIndexset: [787, 1829, 1686, 1430, 1208, 265, 1322, 1771, 252, 445] start node= 1 start time= 15 capacity type= 2 edgeSet: [787, 1829, 1686, 1430, 1208, 265, 1322, 1771, 252, 445] ifChargeSet: [1829, 1686]
(1,2)->(5,8)->(1,15)->(5,21)->(5,22)->(6,29)->(6,30)->(3,36)->(3,37)->(2,45)->(1,2):1

artificial: false edgeIndexset: [1376, 1568, 1744, 753, 1745, 1652, 136, 1096, 411, 381, 319] start node= 4 start time= 44 capacity type= 2 edgeSet: [1376, 1568, 1744, 753, 1745, 1652, 136, 1096, 411, 381, 319] ifChargeSet: [1568, 1652]
(3,2)->(3,3)->(2,11)->(1,18)->(1,19)->(6,26)->(2,31)->(0,36)->(4,44)->(4,45)->(4,46)->(3,2):1

artificial: false edgeIndexset: [224, 1760, 545, 17, 1761, 532, 1573, 1162, 1102, 1039, 1631] start node= 5 start time= 10 capacity type= 2 edgeSet: [224, 1760, 545, 17, 1761, 532, 1573, 1162, 1102, 1039, 1631] ifChargeSet: [1573, 1631]
(4,2)->(5,10)->(5,11)->(5,12)->(0,17)->(1,23)->(1,24)->(2,31)->(2,32)->(4,39)->(2,45)->(4,2):1

artificial: false edgeIndexset: [512, 1648, 241, 1777, 34, 1778, 549, 1590, 1179, 1006, 1119] start node= 5 start time= 27 capacity type= 2 edgeSet: [512, 1648, 241, 1777, 34, 1778, 549, 1590, 1179, 1006, 1119] ifChargeSet: [1648, 1590]
(4,6)->(2,12)->(4,19)->(5,27)->(5,28)->(5,29)->(0,34)->(1,40)->(1,41)->(2,48)->(2,49)->(4,6):1

artificial: false edgeIndexset: [368, 1840, 1762, 1252, 596, 1751, 728, 73, 333, 557, 1263, 1391] start node= 6 start time= 40 capacity type= 2 edgeSet: [368, 1840, 1762, 1252, 596, 1751, 728, 73, 333, 557, 1263, 1391] ifChargeSet: [1762, 1751]
(5,1)->(5,2)->(2,7)->(5,12)->(5,13)->(2,18)->(0,23)->(3,28)->(1,33)->(6,40)->(6,41)->(2,46)->(5,1):1

artificial: false edgeIndexset: [1296, 722, 67, 1795, 327, 551, 1257, 1385, 362, 1834, 1756, 590] start node= 6 start time= 34 capacity type= 2 edgeSet: [1296, 722, 67, 1795, 327, 551, 1257, 1385, 362, 1834, 1756, 590] ifChargeSet: [1795, 1756]
(2,1)->(5,6)->(5,7)->(2,12)->(0,17)->(3,22)->(1,27)->(6,34)->(6,35)->(2,40)->(5,45)->(5,46)->(2,1):1

artificial: false edgeIndexset: [513, 226, 483, 1555, 1747, 1748, 1749, 950, 839, 1720, 971, 206] start node= 4 start time= 47 capacity type= 2 edgeSet: [513, 226, 483, 1555, 1747, 1748, 1749, 950, 839, 1720, 971, 206] ifChargeSet: [1555, 1720]
(4,0)->(1,5)->(1,6)->(2,13)->(4,20)->(4,21)->(1,26)->(2,33)->(3,39)->(4,47)->(4,48)->(4,49)->(4,0):1

artificial: false edgeIndexset: [976, 1746, 997, 232, 202, 459, 539, 1723, 1724, 1581, 1725, 815] start node= 4 start time= 23 capacity type= 2 edgeSet: [976, 1746, 997, 232, 202, 459, 539, 1723, 1724, 1581, 1725, 815] ifChargeSet: [1746, 1581]
(1,2)->(2,9)->(3,15)->(4,23)->(4,24)->(4,25)->(4,26)->(1,31)->(1,32)->(2,39)->(4,46)->(4,47)->(1,2):1

artificial: false edgeIndexset: [1280, 585, 1260, 1292, 397, 565, 1270, 153, 1502, 1790, 575, 1759, 1791] start node= 5 start time= 40 capacity type= 2 edgeSet: [1280, 585, 1260, 1292, 397, 565, 1270, 153, 1502, 1790, 575, 1759, 1791] ifChargeSet: [1502, 1759]
(0,2)->(0,3)->(5,9)->(5,10)->(2,15)->(5,20)->(2,25)->(5,30)->(2,35)->(5,40)->(5,41)->(5,42)->(2,47)->(0,2):1

artificial: false edgeIndexset: [581, 199, 1256, 1288, 393, 1548, 561, 1266, 1786, 571, 1755, 1787, 1276] start node= 5 start time= 36 capacity type= 2 edgeSet: [581, 199, 1256, 1288, 393, 1548, 561, 1266, 1786, 571, 1755, 1787, 1276] ifChargeSet: [1755, 1548]
(5,5)->(5,6)->(2,11)->(5,16)->(2,21)->(5,26)->(2,31)->(5,36)->(5,37)->(5,38)->(2,43)->(0,48)->(0,49)->(5,5):1

Total time= 7903763
Solve for test10_7_30_50_300C.txt
number of service arcs=1500
number of holding arcs=350

Time of first LP solve= 749796

There are 5543 columns added to the model.

Tried aggregator 2 times.
MIP Presolve eliminated 28409 rows and 43 columns.
Aggregator did 2894 substitutions.
Reduced MIP has 75918 rows, 348768 columns, and 1069213 nonzeros.
Reduced MIP has 5521 binaries, 0 generals, 0 SOSs, and 0 indicators.
Presolve time = 0.82 sec. (520.88 ticks)
Probing time = 0.84 sec. (84.48 ticks)
Tried aggregator 1 time.
MIP Presolve eliminated 248 rows and 1147 columns.
Reduced MIP has 75670 rows, 347621 columns, and 1065793 nonzeros.
Reduced MIP has 5521 binaries, 0 generals, 0 SOSs, and 0 indicators.
Presolve time = 0.96 sec. (447.97 ticks)
Probing time = 0.78 sec. (78.32 ticks)
Clique table members: 316.
MIP emphasis: balance optimality and feasibility.
MIP search method: dynamic search.
Parallel mode: deterministic, using up to 4 threads.
Root relaxation solution time = 522.83 sec. (121109.90 ticks)

        Nodes                                         Cuts/
   Node  Left     Objective  IInf  Best Integer    Best Bound    ItCnt     Gap

      0     0    28342.0941    84                  28342.0941    89660         
      0     0    28391.0096    78                  Cuts: 1665   111935         
      0     0    28438.7406    74                  Cuts: 1817   154065         
      0     0    28446.3614    68                  Cuts: 1777   180892         
      0     0    28459.7226    74                  Cuts: 1548   206183         
*     0+    0                        68505.0000    28459.7226            58.46%
      0     0    28481.9211    83    68505.0000    Cuts: 1901   236193   58.42%
*     0+    0                        40013.0000    28481.9211            28.82%
      0     0    28484.1496    74    40013.0000    Cuts: 1926   274497   28.81%
      0     0    28491.6835    81    40013.0000    Cuts: 1943   291178   28.79%
      0     0    28496.4957    82    40013.0000    Cuts: 2219   318121   28.78%
      0     0    28501.6298    85    40013.0000    Cuts: 2325   353776   28.77%
      0     0    28506.3701    93    40013.0000    Cuts: 2288   378917   28.76%
      0     0    28515.9858    96    40013.0000    Cuts: 2388   408247   28.73%
      0     0    28523.3253    80    40013.0000    Cuts: 2615   451829   28.71%
      0     0    28538.8121   100    40013.0000    Cuts: 2240   488967   28.68%
      0     0    28548.1640    92    40013.0000    Cuts: 2810   520774   28.65%
      0     0    28559.9112    92    40013.0000    Cuts: 2536   551787   28.62%
      0     0    28644.9291   109    40013.0000    Cuts: 2514   584657   28.41%

Implied bound cuts applied:  30
Flow cuts applied:  4601
Mixed integer rounding cuts applied:  4297
Gomory fractional cuts applied:  1

Root node processing (before b&c):
  Real time             = 7200.08 sec. (2804302.78 ticks)
Parallel b&c, 4 threads:
  Real time             =    0.00 sec. (0.00 ticks)
  Sync time (average)   =    0.00 sec.
  Wait time (average)   =    0.00 sec.
                          ------------
Total (root+branch&cut) = 7200.08 sec. (2804302.78 ticks)
optimal objective= 40013.0

artificial: false edgeIndexset: [1202, 1764, 1751, 1385, 971, 796, 1277, 1693, 958, 1694, 1215, 1695] start node= 3 start time= 43 capacity type= 1 edgeSet: [1202, 1764, 1751, 1385, 971, 796, 1277, 1693, 958, 1694, 1215, 1695] ifChargeSet: [1764, 1751]
(5,1)->(5,2)->(4,8)->(5,14)->(5,15)->(4,21)->(5,27)->(6,35)->(3,43)->(3,44)->(3,45)->(3,46)->(5,1):1

artificial: false edgeIndexset: [1153, 1697, 1719, 711, 920, 489, 428, 798, 334] start node= 1 start time= 34 capacity type= 2 edgeSet: [1153, 1697, 1719, 711, 920, 489, 428, 798, 334] ifChargeSet: [1697, 1719]
(5,3)->(3,11)->(4,19)->(4,20)->(2,28)->(1,34)->(2,39)->(3,47)->(3,48)->(5,3):1

artificial: false edgeIndexset: [135, 841, 1674, 1611, 368, 1105, 1330, 1751, 1496, 1752, 825, 1753, 1754, 412] start node= 5 start time= 1 capacity type= 1 edgeSet: [135, 841, 1674, 1611, 368, 1105, 1330, 1751, 1496, 1752, 825, 1753, 1754, 412] ifChargeSet: [1674, 1611]
(5,1)->(5,2)->(5,3)->(5,4)->(5,5)->(2,11)->(2,12)->(1,18)->(3,24)->(3,25)->(6,30)->(0,35)->(3,41)->(6,46)->(5,1):1

artificial: false edgeIndexset: [416, 1450, 139, 845, 1678, 1615, 372, 1109, 1334, 1755, 1756, 829, 1757, 1758] start node= 5 start time= 5 capacity type= 1 edgeSet: [416, 1450, 139, 845, 1678, 1615, 372, 1109, 1334, 1755, 1756, 829, 1757, 1758] ifChargeSet: [1678, 1615]
(6,0)->(5,5)->(5,6)->(5,7)->(5,8)->(5,9)->(2,15)->(2,16)->(1,22)->(3,28)->(3,29)->(6,34)->(0,39)->(3,45)->(6,0):1

artificial: false edgeIndexset: [803, 1763, 1764, 837, 1765, 1766, 424, 1458, 147, 1686, 1623, 380, 1117, 1342] start node= 5 start time= 13 capacity type= 1 edgeSet: [803, 1763, 1764, 837, 1765, 1766, 424, 1458, 147, 1686, 1623, 380, 1117, 1342] ifChargeSet: [1686, 1623]
(3,3)->(6,8)->(5,13)->(5,14)->(5,15)->(5,16)->(5,17)->(2,23)->(2,24)->(1,30)->(3,36)->(3,37)->(6,42)->(0,47)->(3,3):1

artificial: false edgeIndexset: [387, 1124, 1349, 104, 810, 1770, 1771, 844, 1772, 1773, 431, 1465, 1693, 1630] start node= 5 start time= 20 capacity type= 0 edgeSet: [387, 1124, 1349, 104, 810, 1770, 1771, 844, 1772, 1773, 431, 1465, 1693, 1630] ifChargeSet: [1693, 1630]
(0,4)->(3,10)->(6,15)->(5,20)->(5,21)->(5,22)->(5,23)->(5,24)->(2,30)->(2,31)->(1,37)->(3,43)->(3,44)->(6,49)->(0,4):1

artificial: false edgeIndexset: [833, 1793, 1666, 1794, 1603, 1795, 1796, 360, 1322, 1488, 817, 404, 1147, 127] start node= 5 start time= 43 capacity type= 0 edgeSet: [833, 1793, 1666, 1794, 1603, 1795, 1796, 360, 1322, 1488, 817, 404, 1147, 127] ifChargeSet: [1666, 1603]
(2,3)->(2,4)->(1,10)->(3,16)->(3,17)->(6,22)->(0,27)->(3,33)->(6,38)->(5,43)->(5,44)->(5,45)->(5,46)->(5,47)->(2,3):1

artificial: false edgeIndexset: [448, 354, 1316, 1482, 811, 1647, 1141, 121, 827, 1787, 1660, 1788, 1789, 1790] start node= 5 start time= 37 capacity type= 2 edgeSet: [448, 354, 1316, 1482, 811, 1647, 1141, 121, 827, 1787, 1660, 1788, 1789, 1790] ifChargeSet: [1660, 1647]
(1,4)->(3,10)->(3,11)->(6,16)->(0,21)->(3,27)->(6,32)->(5,37)->(5,38)->(5,39)->(5,40)->(5,41)->(2,47)->(2,48)->(1,4):1

artificial: false edgeIndexset: [1249, 993, 1729, 1236, 980, 955, 1819, 1820, 1261, 1821, 1742, 1422] start node= 6 start time= 19 capacity type= 1 edgeSet: [1249, 993, 1729, 1236, 980, 955, 1819, 1820, 1261, 1821, 1742, 1422] ifChargeSet: [1729, 1742]
(4,5)->(5,11)->(6,19)->(6,20)->(6,21)->(6,22)->(4,29)->(4,30)->(5,36)->(4,42)->(4,43)->(5,49)->(4,5):1

artificial: false edgeIndexset: [1697, 1698, 1699, 1220, 964, 391, 976, 752, 1713, 1650, 1651, 1590, 1207, 1082] start node= 1 start time= 40 capacity type= 1 edgeSet: [1697, 1698, 1699, 1220, 964, 391, 976, 752, 1713, 1650, 1651, 1590, 1207, 1082] ifChargeSet: [1713, 1651]
(3,0)->(3,1)->(3,2)->(5,7)->(4,13)->(4,14)->(5,20)->(4,26)->(5,32)->(1,40)->(1,41)->(3,47)->(3,48)->(3,49)->(3,0):1

artificial: false edgeIndexset: [997, 1573, 1065, 1680, 785, 1681, 1746, 1682, 1203, 1683, 1684, 374, 1240, 959] start node= 1 start time= 23 capacity type= 1 edgeSet: [997, 1573, 1065, 1680, 785, 1681, 1746, 1682, 1203, 1683, 1684, 374, 1240, 959] ifChargeSet: [1746, 1684]
(5,3)->(4,9)->(5,15)->(1,23)->(1,24)->(3,30)->(3,31)->(3,32)->(3,33)->(3,34)->(3,35)->(5,40)->(4,46)->(4,47)->(5,3):1

artificial: false edgeIndexset: [1697, 1825, 1189, 231, 312, 1753, 617, 1054, 798, 1326] start node= 1 start time= 12 capacity type= 2 edgeSet: [1697, 1825, 1189, 231, 312, 1753, 617, 1054, 798, 1326] ifChargeSet: [1825, 1753]
(5,3)->(5,4)->(1,12)->(2,17)->(6,25)->(6,26)->(0,31)->(5,39)->(3,47)->(3,48)->(5,3):1

artificial: false edgeIndexset: [256, 1536, 1537, 1777, 1314, 1538, 1028, 1797, 1048, 219, 239] start node= 5 start time= 27 capacity type= 1 edgeSet: [256, 1536, 1537, 1777, 1314, 1538, 1028, 1797, 1048, 219, 239] ifChargeSet: [1538, 1797]
(0,6)->(6,14)->(0,19)->(5,27)->(5,28)->(0,36)->(0,37)->(0,38)->(0,39)->(5,47)->(5,48)->(0,6):1

artificial: false edgeIndexset: [977, 1234, 1220, 964, 1783, 1208, 952, 1246, 990, 1726] start node= 4 start time= 14 capacity type= 0 edgeSet: [977, 1234, 1220, 964, 1783, 1208, 952, 1246, 990, 1726] ifChargeSet: [1783, 1726]
(4,2)->(5,8)->(4,14)->(5,20)->(4,26)->(4,27)->(5,33)->(5,34)->(4,40)->(5,46)->(4,2):1

artificial: false edgeIndexset: [1570, 1571, 324, 1572, 1573, 1641, 430, 336, 403, 309, 442, 348, 1629, 414] start node= 1 start time= 20 capacity type= 0 edgeSet: [1570, 1571, 324, 1572, 1573, 1641, 430, 336, 403, 309, 442, 348, 1629, 414] ifChargeSet: [1641, 1629]
(2,3)->(1,9)->(2,14)->(1,20)->(1,21)->(1,22)->(1,23)->(1,24)->(2,29)->(2,30)->(1,36)->(2,41)->(2,42)->(1,48)->(2,3):1

artificial: false edgeIndexset: [417, 323, 1604, 428, 334, 1616, 405, 439, 311, 1595, 1596, 349, 1597, 1598] start node= 1 start time= 45 capacity type= 1 edgeSet: [417, 323, 1604, 428, 334, 1616, 405, 439, 311, 1595, 1596, 349, 1597, 1598] ifChargeSet: [1616, 1604]
(2,4)->(2,5)->(1,11)->(2,16)->(2,17)->(1,23)->(2,28)->(1,34)->(2,39)->(1,45)->(1,46)->(1,47)->(1,48)->(1,49)->(2,4):1

artificial: false edgeIndexset: [561, 337, 1586, 1652, 1768, 1769, 1642, 1643, 28, 1020, 653, 494] start node= 1 start time= 36 capacity type= 1 edgeSet: [561, 337, 1586, 1652, 1768, 1769, 1642, 1643, 28, 1020, 653, 494] ifChargeSet: [1769, 1643]
(3,2)->(3,3)->(2,11)->(5,18)->(5,19)->(5,20)->(0,28)->(1,36)->(1,37)->(2,42)->(2,43)->(2,44)->(3,2):1

artificial: false edgeIndexset: [1008, 689, 481, 17, 597, 326, 1575, 1754, 1755, 1756, 1516, 1757] start node= 5 start time= 7 capacity type= 1 edgeSet: [1008, 689, 481, 17, 597, 326, 1575, 1754, 1755, 1756, 1516, 1757] ifChargeSet: [1575, 1516]
(5,4)->(5,5)->(5,6)->(5,7)->(5,8)->(0,16)->(0,17)->(1,25)->(1,26)->(2,31)->(3,39)->(2,47)->(5,4):1

artificial: false edgeIndexset: [1633, 1809, 1634, 1810, 675, 693, 485, 1461, 1766, 601, 1167] start node= 6 start time= 9 capacity type= 1 edgeSet: [1633, 1809, 1634, 1810, 675, 693, 485, 1461, 1766, 601, 1167] ifChargeSet: [1634, 1766]
(2,1)->(6,9)->(6,10)->(6,11)->(5,16)->(5,17)->(3,25)->(2,33)->(2,34)->(2,35)->(3,43)->(2,1):1

artificial: false edgeIndexset: [1600, 1601, 1602, 620, 1709, 1710, 911, 1328, 83, 1619, 439, 503, 345] start node= 1 start time= 45 capacity type= 1 edgeSet: [1600, 1601, 1602, 620, 1709, 1710, 911, 1328, 83, 1619, 439, 503, 345] ifChargeSet: [1602, 1619]
(2,0)->(2,1)->(2,2)->(2,3)->(4,9)->(4,10)->(4,11)->(2,19)->(2,20)->(6,28)->(0,33)->(2,39)->(1,45)->(2,0):1

artificial: false edgeIndexset: [1348, 1831, 137, 843, 1709, 1710, 1519, 1711, 1332, 120, 153, 826, 862] start node= 4 start time= 9 capacity type= 0 edgeSet: [1348, 1831, 137, 843, 1709, 1710, 1519, 1711, 1332, 120, 153, 826, 862] ifChargeSet: [1831, 1519]
(0,3)->(4,9)->(4,10)->(4,11)->(4,12)->(0,19)->(0,20)->(3,26)->(6,31)->(6,32)->(0,37)->(3,43)->(6,48)->(0,3):1

artificial: false edgeIndexset: [128, 161, 801, 834, 870, 1839, 145, 1717, 1718, 1527, 1719, 1306, 1340] start node= 4 start time= 17 capacity type= 1 edgeSet: [128, 161, 801, 834, 870, 1839, 145, 1717, 1718, 1527, 1719, 1306, 1340] ifChargeSet: [1527, 1839]
(3,1)->(6,6)->(0,11)->(4,17)->(4,18)->(4,19)->(4,20)->(0,27)->(0,28)->(3,34)->(6,39)->(6,40)->(0,45)->(3,1):1

artificial: false edgeIndexset: [801, 1734, 1735, 1544, 1736, 1323, 1806, 112, 145, 178, 818, 887, 1307] start node= 4 start time= 34 capacity type= 1 edgeSet: [801, 1734, 1735, 1544, 1736, 1323, 1806, 112, 145, 178, 818, 887, 1307] ifChargeSet: [1544, 1806]
(3,1)->(6,6)->(6,7)->(0,12)->(3,18)->(6,23)->(0,28)->(4,34)->(4,35)->(4,36)->(4,37)->(0,44)->(0,45)->(3,1):1

artificial: false edgeIndexset: [1312, 1346, 101, 134, 167, 807, 840, 876, 1845, 1723, 1724, 1533, 1725] start node= 4 start time= 23 capacity type= 1 edgeSet: [1312, 1346, 101, 134, 167, 807, 840, 876, 1845, 1723, 1724, 1533, 1725] ifChargeSet: [1845, 1533]
(0,1)->(3,7)->(6,12)->(0,17)->(4,23)->(4,24)->(4,25)->(4,26)->(0,33)->(0,34)->(3,40)->(6,45)->(6,46)->(0,1):1

artificial: false edgeIndexset: [1506, 899, 1319, 107, 813, 1746, 1747, 1748, 1335, 1818, 124, 190, 830] start node= 4 start time= 46 capacity type= 1 edgeSet: [1506, 899, 1319, 107, 813, 1746, 1747, 1748, 1335, 1818, 124, 190, 830] ifChargeSet: [1506, 1818]
(0,6)->(0,7)->(3,13)->(6,18)->(6,19)->(0,24)->(3,30)->(6,35)->(0,40)->(4,46)->(4,47)->(4,48)->(4,49)->(0,6):1

artificial: false edgeIndexset: [1189, 614, 1705, 1785, 906, 1786, 747, 1787, 1372, 1788, 780] start node= 3 start time= 30 capacity type= 0 edgeSet: [1189, 614, 1705, 1785, 906, 1786, 747, 1787, 1372, 1788, 780] ifChargeSet: [1705, 1788]
(4,5)->(4,6)->(2,14)->(6,22)->(3,30)->(5,35)->(5,36)->(5,37)->(5,38)->(5,39)->(3,47)->(4,5):1

artificial: false edgeIndexset: [529, 1795, 1654, 1735, 1736, 1737, 1738, 1196, 989, 671, 463, 655] start node= 4 start time= 35 capacity type= 1 edgeSet: [529, 1795, 1654, 1735, 1736, 1737, 1738, 1196, 989, 671, 463, 655] ifChargeSet: [1795, 1654]
(3,4)->(3,5)->(2,13)->(3,21)->(2,29)->(4,35)->(4,36)->(4,37)->(4,38)->(4,39)->(5,45)->(5,46)->(3,4):1

artificial: false edgeIndexset: [1344, 99, 1827, 133, 1605, 1606, 839, 1607, 1608, 366, 1328, 822, 409, 1565] start node= 2 start time= 5 capacity type= 0 edgeSet: [1344, 99, 1827, 133, 1605, 1606, 839, 1607, 1608, 366, 1328, 822, 409, 1565] ifChargeSet: [1827, 1565]
(2,5)->(2,6)->(2,7)->(2,8)->(2,9)->(1,15)->(1,16)->(3,22)->(6,27)->(6,28)->(0,33)->(3,39)->(6,44)->(0,49)->(2,5):1

artificial: false edgeIndexset: [1632, 1633, 1634, 1320, 392, 75, 1803, 109, 815, 848, 435, 1591, 1304, 1631] start node= 2 start time= 31 capacity type= 1 edgeSet: [1632, 1633, 1634, 1320, 392, 75, 1803, 109, 815, 848, 435, 1591, 1304, 1631] ifChargeSet: [1591, 1803]
(6,3)->(6,4)->(0,9)->(3,15)->(6,20)->(0,25)->(2,31)->(2,32)->(2,33)->(2,34)->(2,35)->(1,41)->(1,42)->(3,48)->(6,3):1

artificial: false edgeIndexset: [354, 1316, 810, 1643, 1644, 1645, 1646, 1553, 1332, 87, 1815, 121, 827, 447] start node= 2 start time= 43 capacity type= 0 edgeSet: [354, 1316, 810, 1643, 1644, 1645, 1646, 1553, 1332, 87, 1815, 121, 827, 447] ifChargeSet: [1553, 1815]
(1,3)->(1,4)->(3,10)->(6,15)->(6,16)->(0,21)->(3,27)->(6,32)->(0,37)->(2,43)->(2,44)->(2,45)->(2,46)->(2,47)->(1,3):1

artificial: false edgeIndexset: [804, 1637, 1638, 1639, 1640, 1326, 398, 81, 1809, 115, 821, 441, 1597, 1310] start node= 2 start time= 37 capacity type= 0 edgeSet: [804, 1637, 1638, 1639, 1640, 1326, 398, 81, 1809, 115, 821, 441, 1597, 1310] ifChargeSet: [1809, 1597]
(3,4)->(6,9)->(6,10)->(0,15)->(3,21)->(6,26)->(0,31)->(2,37)->(2,38)->(2,39)->(2,40)->(2,41)->(1,47)->(1,48)->(3,4):1

artificial: false edgeIndexset: [34, 1607, 1592, 521, 393, 1115, 699, 877, 558] start node= 0 start time= 34 capacity type= 1 edgeSet: [34, 1607, 1592, 521, 393, 1115, 699, 877, 558] ifChargeSet: [1607, 1592]
(2,7)->(2,8)->(5,15)->(2,21)->(4,27)->(0,34)->(1,42)->(1,43)->(3,49)->(2,7):1

artificial: false edgeIndexset: [852, 1444, 1509, 1701, 10, 523, 318, 286, 879] start node= 0 start time= 36 capacity type= 1 edgeSet: [852, 1444, 1509, 1701, 10, 523, 318, 286, 879] ifChargeSet: [1509, 1701]
(4,1)->(4,2)->(0,9)->(0,10)->(1,18)->(2,23)->(4,29)->(0,36)->(6,44)->(4,1):1

artificial: false edgeIndexset: [851, 1444, 8, 521, 316, 286, 878, 1535, 1727] start node= 1 start time= 16 capacity type= 2 edgeSet: [851, 1444, 8, 521, 316, 286, 878, 1535, 1727] ifChargeSet: [1535, 1727]
(4,1)->(0,8)->(1,16)->(2,21)->(4,27)->(4,28)->(0,35)->(0,36)->(6,44)->(4,1):1

artificial: false edgeIndexset: [592, 1473, 1507, 1028, 86, 615, 1049, 58, 1614] start node= 2 start time= 42 capacity type= 1 edgeSet: [592, 1473, 1507, 1028, 86, 615, 1049, 58, 1614] ifChargeSet: [1507, 1614]
(0,7)->(0,8)->(2,14)->(2,15)->(6,23)->(5,28)->(0,36)->(2,42)->(5,49)->(0,7):1

artificial: false edgeIndexset: [1762, 1396, 757, 982, 1654, 1655, 1288, 1656, 969, 1226, 1213, 1775] start node= 3 start time= 4 capacity type= 0 edgeSet: [1762, 1396, 757, 982, 1654, 1655, 1288, 1656, 969, 1226, 1213, 1775] ifChargeSet: [1762, 1775]
(3,4)->(3,5)->(3,6)->(3,7)->(5,12)->(5,13)->(4,19)->(5,25)->(5,26)->(4,32)->(5,38)->(6,46)->(3,4):1

Total time= 7951360
Solve for test11_10_40_30_200A.txt
number of service arcs=1200
number of holding arcs=300

Time of first LP solve= 224784

There are 6478 columns added to the model.

Tried aggregator 2 times.
MIP Presolve eliminated 37965 rows and 61 columns.
MIP Presolve modified 1 coefficients.
Aggregator did 4856 substitutions.
Reduced MIP has 19009 rows, 65660 columns, and 193124 nonzeros.
Reduced MIP has 1307 binaries, 5140 generals, 0 SOSs, and 0 indicators.
Presolve time = 0.16 sec. (118.13 ticks)
Probing time = 0.13 sec. (25.19 ticks)
Tried aggregator 1 time.
MIP Presolve eliminated 46 rows and 140 columns.
Reduced MIP has 18963 rows, 65520 columns, and 192729 nonzeros.
Reduced MIP has 1307 binaries, 5140 generals, 0 SOSs, and 0 indicators.
Presolve time = 0.14 sec. (80.37 ticks)
Probing time = 0.15 sec. (25.10 ticks)
Clique table members: 1.
MIP emphasis: balance optimality and feasibility.
MIP search method: dynamic search.
Parallel mode: deterministic, using up to 4 threads.
Root relaxation solution time = 23.37 sec. (6850.63 ticks)

        Nodes                                         Cuts/
   Node  Left     Objective  IInf  Best Integer    Best Bound    ItCnt     Gap

      0     0    26724.5200   243                  26724.5200       33         
*     0+    0                        36711.0000    26724.5200            27.20%
      0     0    26724.8328   194    36711.0000    Cuts: 1367    18602   27.20%
      0     0    26725.4118   201    36711.0000    Cuts: 1340    60613   27.20%
      0     0    26733.2501   202    36711.0000    Cuts: 1416    79142   27.18%
*     0+    0                        34689.0000    26733.2501            22.93%
      0     0    26737.0781   183    34689.0000 MIRcuts: 1562   124417   22.92%
      0     0    26769.2925   192    34689.0000    Cuts: 1623   188730   22.83%
      0     0    26802.7809   201    34689.0000 MIRcuts: 1815   246590   22.73%
      0     0    26878.0964   200    34689.0000 MIRcuts: 1853   292485   22.52%
      0     0    26976.9090   164    34689.0000 MIRcuts: 1774   370790   22.23%
      0     0    27005.3107   185    34689.0000    Cuts: 1742   432632   22.15%
      0     0    27075.9513   191    34689.0000 MIRcuts: 1720   544253   21.95%
      0     0    27098.8877   209    34689.0000 MIRcuts: 1728   592318   21.88%
      0     0    27123.9226   211    34689.0000 MIRcuts: 1853   647181   21.81%
      0     0    27158.7526   229    34689.0000 MIRcuts: 1958   698070   21.71%
      0     0    27193.7371   201    34689.0000 MIRcuts: 1784   746252   21.61%
      0     0    27237.9944   214    34689.0000    Cuts: 1834   804056   21.48%
      0     0    27260.1426   217    34689.0000    Cuts: 1959   854582   21.42%
      0     0    27304.3774   212    34689.0000 MIRcuts: 1782   914434   21.29%
*     0+    0                        32027.0000    27304.3774            14.75%
      0     0    27325.0127   243    32027.0000 MIRcuts: 1669   964767   14.68%
*     0+    0                        31769.0000    27325.0127            13.99%
*     0+    0                        30876.0000    27325.0127            11.50%
      0     0    27348.2170   253    30876.0000 MIRcuts: 2042  1023385   11.43%
      0     0    27366.5305   251    30876.0000 MIRcuts: 1639  1063785   11.37%
      0     0    27385.8257   257    30876.0000    Cuts: 1618  1114884   11.30%
*     0+    0                        30242.0000    27385.8257             9.44%
      0     0    27395.7608   257    30242.0000 MIRcuts: 1854  1149743    9.41%
      0     0    27402.8208   268    30242.0000 MIRcuts: 1733  1187502    9.39%
      0     0    27407.3593   247    30242.0000 MIRcuts: 1738  1217654    9.37%
      0     0    27412.4995   263    30242.0000 MIRcuts: 1742  1252175    9.36%
Heuristic still looking.

Mixed integer rounding cuts applied:  5334
Gomory fractional cuts applied:  2

Root node processing (before b&c):
  Real time             = 7200.05 sec. (3565195.30 ticks)
Parallel b&c, 4 threads:
  Real time             =    0.00 sec. (0.00 ticks)
  Sync time (average)   =    0.00 sec.
  Wait time (average)   =    0.00 sec.
                          ------------
Total (root+branch&cut) = 7200.05 sec. (3565195.30 ticks)
optimal objective= 30242.0

artificial: false edgeIndexset: [48, 100, 566, 814] start node= 4 start time= 26 capacity type= 1 edgeSet: [48, 100, 566, 814] ifChargeSet: []
(7,4)->(1,10)->(0,18)->(4,26)->(7,4):1

artificial: false edgeIndexset: [163, 696, 441, 268] start node= 3 start time= 21 capacity type= 1 edgeSet: [163, 696, 441, 268] ifChargeSet: []
(6,6)->(1,13)->(3,21)->(1,28)->(6,6):1

artificial: false edgeIndexset: [354, 467, 339, 452] start node= 4 start time= 2 capacity type= 1 edgeSet: [354, 467, 339, 452] ifChargeSet: []
(4,2)->(2,9)->(4,17)->(2,24)->(4,2):1

artificial: false edgeIndexset: [978, 326, 423, 280] start node= 8 start time= 18 capacity type= 1 edgeSet: [978, 326, 423, 280] ifChargeSet: []
(3,3)->(1,10)->(8,18)->(2,26)->(3,3):1

artificial: false edgeIndexset: [433, 306, 290, 988] start node= 1 start time= 20 capacity type= 2 edgeSet: [433, 306, 290, 988] ifChargeSet: []
(2,6)->(3,13)->(1,20)->(8,28)->(2,6):1

artificial: false edgeIndexset: [554, 186, 892, 719] start node= 1 start time= 6 capacity type= 2 edgeSet: [554, 186, 892, 719] ifChargeSet: []
(1,6)->(4,14)->(7,22)->(6,29)->(1,6):1

artificial: false edgeIndexset: [597, 1159, 395, 941] start node= 9 start time= 19 capacity type= 1 edgeSet: [597, 1159, 395, 941] ifChargeSet: []
(2,5)->(7,11)->(9,19)->(5,27)->(2,5):1

artificial: false edgeIndexset: [512, 727, 745, 650, 494] start node= 4 start time= 14 capacity type= 1 edgeSet: [512, 727, 745, 650, 494] ifChargeSet: []
(4,2)->(6,7)->(4,14)->(5,20)->(6,25)->(4,2):1

artificial: false edgeIndexset: [832, 148, 1333, 554, 335] start node= 2 start time= 5 capacity type= 0 edgeSet: [832, 148, 1333, 554, 335] ifChargeSet: []
(2,5)->(4,13)->(4,14)->(7,22)->(1,28)->(2,5):1

artificial: false edgeIndexset: [1068, 1053, 926, 911] start node= 7 start time= 11 capacity type= 1 edgeSet: [1068, 1053, 926, 911] ifChargeSet: []
(8,3)->(7,11)->(8,18)->(7,26)->(8,3):1

artificial: false edgeIndexset: [418, 1123, 1414, 1287, 935, 140] start node= 7 start time= 4 capacity type= 1 edgeSet: [418, 1123, 1414, 1287, 935, 140] ifChargeSet: []
(7,4)->(7,5)->(9,13)->(1,20)->(2,27)->(2,28)->(7,4):1

artificial: false edgeIndexset: [769, 36, 1108, 1496, 1497, 524] start node= 9 start time= 26 capacity type= 1 edgeSet: [769, 36, 1108, 1496, 1497, 524] ifChargeSet: []
(0,6)->(4,14)->(6,19)->(9,26)->(9,27)->(9,28)->(0,6):1

artificial: false edgeIndexset: [664, 793, 1421, 1166, 78, 1422] start node= 7 start time= 11 capacity type= 1 edgeSet: [664, 793, 1421, 1166, 78, 1422] ifChargeSet: []
(5,4)->(7,11)->(7,12)->(7,13)->(0,18)->(9,26)->(5,4):1

artificial: false edgeIndexset: [805, 1478, 678, 1479, 60, 1150] start node= 9 start time= 9 capacity type= 2 edgeSet: [805, 1478, 678, 1479, 60, 1150] ifChargeSet: []
(0,0)->(9,8)->(9,9)->(9,10)->(5,18)->(7,25)->(0,0):1

artificial: false edgeIndexset: [1125, 758, 1350, 1351, 232, 1352, 633] start node= 5 start time= 0 capacity type= 1 edgeSet: [1125, 758, 1350, 1351, 232, 1352, 633] ifChargeSet: []
(5,0)->(5,1)->(5,2)->(5,3)->(6,8)->(9,15)->(1,22)->(5,0):1

artificial: false edgeIndexset: [1137, 770, 1362, 1363, 1364, 645, 214] start node= 5 start time= 12 capacity type= 0 edgeSet: [1137, 770, 1362, 1363, 1364, 645, 214] ifChargeSet: []
(1,4)->(5,12)->(5,13)->(5,14)->(5,15)->(6,20)->(9,27)->(1,4):1

artificial: false edgeIndexset: [1298, 1346, 198, 603, 507, 429, 1246, 1247] start node= 1 start time= 16 capacity type= 2 edgeSet: [1298, 1346, 198, 603, 507, 429, 1246, 1247] ifChargeSet: []
(5,3)->(3,8)->(3,9)->(1,16)->(1,17)->(1,18)->(4,26)->(4,27)->(5,3):1

artificial: false edgeIndexset: [33, 678, 1367, 808, 1435, 491, 1436, 1437] start node= 7 start time= 28 capacity type= 1 edgeSet: [33, 678, 1367, 808, 1435, 491, 1436, 1437] ifChargeSet: []
(0,3)->(4,11)->(5,17)->(5,18)->(7,25)->(7,26)->(7,27)->(7,28)->(0,3):1

artificial: false edgeIndexset: [128, 1233, 1234, 1235, 1236, 1237, 375, 621, 446] start node= 1 start time= 3 capacity type= 2 edgeSet: [128, 1233, 1234, 1235, 1236, 1237, 375, 621, 446] ifChargeSet: []
(1,3)->(1,4)->(1,5)->(1,6)->(1,7)->(1,8)->(2,15)->(5,21)->(3,26)->(1,3):1

artificial: false edgeIndexset: [865, 852, 392, 409, 1418, 1419, 1420, 1421] start node= 7 start time= 8 capacity type= 1 edgeSet: [865, 852, 392, 409, 1418, 1419, 1420, 1421] ifChargeSet: []
(2,2)->(7,8)->(7,9)->(7,10)->(7,11)->(7,12)->(2,19)->(7,25)->(2,2):1

artificial: false edgeIndexset: [403, 919, 1047, 1352, 1353, 1354, 1466, 575] start node= 8 start time= 26 capacity type= 1 edgeSet: [403, 919, 1047, 1352, 1353, 1354, 1466, 575] ifChargeSet: []
(5,2)->(5,3)->(5,4)->(5,5)->(2,13)->(7,19)->(8,26)->(8,27)->(5,2):1

artificial: false edgeIndexset: [1232, 1233, 274, 647, 712, 1032, 1259, 1230, 1231] start node= 8 start time= 12 capacity type= 1 edgeSet: [1232, 1233, 274, 647, 712, 1032, 1259, 1230, 1231] ifChargeSet: []
(1,0)->(1,1)->(1,2)->(1,3)->(1,4)->(8,12)->(5,17)->(6,22)->(1,29)->(1,0):1

artificial: false edgeIndexset: [423, 1240, 25, 1241, 1242, 107, 1243, 1244, 1245, 1246] start node= 1 start time= 10 capacity type= 1 edgeSet: [423, 1240, 25, 1241, 1242, 107, 1243, 1244, 1245, 1246] ifChargeSet: []
(3,3)->(1,10)->(1,11)->(1,12)->(1,13)->(1,14)->(1,15)->(1,16)->(1,17)->(0,25)->(3,3):1

Total time= 7425416
Solve for test11_10_40_30_200B.txt
number of service arcs=1200
number of holding arcs=300

Time of first LP solve= 421620

There are 7224 columns added to the model.

Tried aggregator 2 times.
MIP Presolve eliminated 36499 rows and 61 columns.
Aggregator did 4162 substitutions.
Reduced MIP has 21169 rows, 78133 columns, and 256374 nonzeros.
Reduced MIP has 7128 binaries, 65 generals, 0 SOSs, and 0 indicators.
Presolve time = 0.23 sec. (150.57 ticks)
Found incumbent of value 207664.000000 after 0.66 sec. (460.11 ticks)
Probing fixed 0 vars, tightened 108 bounds.
Probing time = 0.47 sec. (78.43 ticks)
Tried aggregator 1 time.
Reduced MIP has 21169 rows, 78133 columns, and 256374 nonzeros.
Reduced MIP has 7128 binaries, 65 generals, 0 SOSs, and 0 indicators.
Presolve time = 0.20 sec. (105.09 ticks)
Probing fixed 0 vars, tightened 42 bounds.
Probing time = 0.38 sec. (79.96 ticks)
Clique table members: 296.
MIP emphasis: balance optimality and feasibility.
MIP search method: dynamic search.
Parallel mode: deterministic, using up to 4 threads.
Root relaxation solution time = 41.90 sec. (15952.25 ticks)

        Nodes                                         Cuts/
   Node  Left     Objective  IInf  Best Integer    Best Bound    ItCnt     Gap

*     0+    0                       207664.0000   -12767.0000           106.15%
*     0+    0                        78779.0000   -12767.0000           116.21%
*     0+    0                        77319.0000   -12767.0000           116.51%
*     0+    0                        76573.0000   -12767.0000           116.67%
*     0+    0                        76199.0000   -12767.0000           116.75%
*     0+    0                        76149.0000   -12767.0000           116.77%
*     0+    0                        74831.0000   -12767.0000           117.06%
*     0+    0                        74145.0000   -12767.0000           117.22%
*     0+    0                        73501.0000   -12767.0000           117.37%
*     0+    0                        73071.0000   -12767.0000           117.47%
      0     0    59029.1400   263    73071.0000    59029.1400       35   19.22%
      0     0    59029.1400   200    73071.0000    Cuts: 1825    14415   19.22%
      0     0    59029.1400   193    73071.0000    Cuts: 1344    29130   19.22%
      0     0    59029.1400   217    73071.0000    Cuts: 1378    45180   19.22%
      0     0    59030.1000   218    73071.0000    Cuts: 1621    61859   19.22%
Heuristic still looking.
Heuristic still looking.
Heuristic still looking.
      0     2    59030.1000   218    73071.0000    59030.1000    61859   19.22%
Elapsed time = 568.20 sec. (278179.42 ticks, tree = 0.00 MB, solutions = 10)
      1     3    59030.1000   186    73071.0000    59030.1000    84067   19.22%
      2     4    59049.0720   167    73071.0000    59030.1000   101312   19.22%
      3     5    59030.1000   199    73071.0000    59030.1000   112552   19.22%
      4     6    59030.1000   185    73071.0000    59030.1000   123549   19.22%
      5     7    59049.0720   180    73071.0000    59030.1000   140448   19.22%
      7     9    59030.1000   199    73071.0000    59030.1000   161578   19.22%
      9    11    59049.0720   228    73071.0000    59030.1000   306351   19.22%
     11    13    59030.1000   197    73071.0000    59030.1000   527196   19.22%
     13    15    59049.0720   185    73071.0000    59030.1000   650726   19.22%
     15    17    59068.2880   136    73071.0000    59030.1000   712605   19.22%
Elapsed time = 1033.16 sec. (471629.67 ticks, tree = 0.00 MB, solutions = 10)
     16    18    59030.1000   192    73071.0000    59030.1000   751136   19.22%
     20    22    59041.1354   173    73071.0000    59030.1000   827725   19.22%
     29    31    59082.8267   120    73071.0000    59030.1000   974359   19.22%
     31    33    59030.1000   131    73071.0000    59030.1000   998231   19.22%
     32    34    59049.0720   140    73071.0000    59030.1000  1047361   19.22%
     36    38    59049.0720   177    73071.0000    59030.1000  1141899   19.22%
     38    40    59041.1354   156    73071.0000    59030.1000  1171692   19.22%
     39    41    59030.1000   122    73071.0000    59030.1000  1191755   19.22%
     44    46    59082.8267   166    73071.0000    59030.1000  1332546   19.22%
     50    52    59082.8267   137    73071.0000    59030.1000  1444421   19.22%
Elapsed time = 1963.03 sec. (744817.00 ticks, tree = 0.00 MB, solutions = 10)
     54    56    59084.3467   136    73071.0000    59030.1000  1497953   19.22%
     62    64    59054.3400   157    73071.0000    59030.1000  1635018   19.22%
     66    68    59084.3467   143    73071.0000    59030.1000  1693501   19.22%
     69    71    59068.2880   176    73071.0000    59030.1000  1766426   19.22%
     70    72    59084.3467   135    73071.0000    59030.1000  1776076   19.22%
     71    73    59161.4077   160    73071.0000    59030.1000  1797743   19.22%
     73    75    59082.8267   160    73071.0000    59030.1000  1836597   19.22%
     75    77    59041.1354   148    73071.0000    59030.1000  1865103   19.22%
     77    79    59082.8267   159    73071.0000    59030.1000  1896655   19.22%
     79    81    59112.3800   155    73071.0000    59030.1000  1927516   19.22%
Elapsed time = 2474.33 sec. (897101.39 ticks, tree = 0.00 MB, solutions = 10)
     81    83    59082.8267   160    73071.0000    59030.1000  1952752   19.22%
     87    89    59097.5467   120    73071.0000    59030.1000  2036318   19.22%
     89    91    59097.5467   115    73071.0000    59030.1000  2055361   19.22%
     90    92    59112.3800   157    73071.0000    59030.1000  2078855   19.22%
     93    95    59098.5070   114    73071.0000    59030.1000  2113716   19.22%
     97    99    59098.5070   111    73071.0000    59030.1000  2178371   19.22%
    101   103    59098.5070   115    73071.0000    59030.1000  2225338   19.22%
    105   107    59098.5070   109    73071.0000    59030.1000  2297679   19.22%
*   108+  108                        62031.0000    59030.1000             4.84%
    108   110    59082.8267   129    62031.0000    59030.1000  2351946    4.84%
    112   114    59082.8267   129    62031.0000    59030.1000  2457916    4.84%
Elapsed time = 2989.02 sec. (1028670.71 ticks, tree = 0.62 MB, solutions = 10)
    116   118    59082.8267   116    62031.0000    59030.1000  2520732    4.84%
    120   122    59082.8267   116    62031.0000    59030.1000  2598382    4.84%
    123   125    59108.8500   110    62031.0000    59030.1000  2676143    4.84%
    127   129    59108.8500   107    62031.0000    59030.1000  2781871    4.84%
    131   133    59108.8500   110    62031.0000    59030.1000  2835528    4.84%
    135   137    59108.8500   109    62031.0000    59030.1000  2937746    4.84%
    163   165    59140.4600    91    62031.0000    59030.1000  3591853    4.84%
    173   175    59066.5345   134    62031.0000    59030.1000  3873675    4.84%
    174   176    59211.3933    81    62031.0000    59030.1000  3914784    4.84%
    175   177    59232.8800   131    62031.0000    59030.1000  3980148    4.84%
Elapsed time = 3483.34 sec. (1128220.80 ticks, tree = 5.66 MB, solutions = 11)
    179   181    59066.5345   122    62031.0000    59030.1000  4079686    4.84%
    183   185    59076.3933   152    62031.0000    59030.1000  4188679    4.84%
    187   189    59186.6323   153    62031.0000    59030.1000  4379312    4.84%
    191   193    59076.3933   154    62031.0000    59030.1000  4433066    4.84%
    195   197    59226.2077   160    62031.0000    59030.1000  4595796    4.84%
    245   247    59216.9813    70    62031.0000    59030.1000  5775519    4.84%
    249   251    59216.9813    77    62031.0000    59030.1000  5888834    4.84%
    252   254    59152.1550   113    62031.0000    59030.1000  5996561    4.84%
    256   258    59152.1550    84    62031.0000    59030.1000  6095580    4.84%
    260   262    59152.1550    92    62031.0000    59030.1000  6181257    4.84%
Elapsed time = 4449.74 sec. (1358056.89 ticks, tree = 8.68 MB, solutions = 11)
    264   266    59152.1550    84    62031.0000    59030.1000  6375643    4.84%
    268   270    59152.1550    82    62031.0000    59030.1000  6430657    4.84%
    272   274    59152.1550    82    62031.0000    59030.1000  6516428    4.84%
    276   278    59152.1550    89    62031.0000    59030.1000  6603705    4.84%
    280   282    59155.2800    88    62031.0000    59030.1000  6698270    4.84%
    284   286    59155.2800    87    62031.0000    59030.1000  6744523    4.84%
    288   290    59155.2800    77    62031.0000    59030.1000  6845837    4.84%
    289   291    59279.1916    69    62031.0000    59030.1000  6887565    4.84%
    293   295    59305.3504    54    62031.0000    59030.1000  7012759    4.84%
    294   296    59226.2077   119    62031.0000    59030.1000  7086870    4.84%
Elapsed time = 4736.69 sec. (1412715.58 ticks, tree = 8.68 MB, solutions = 11)
    297   299    59305.3504    54    62031.0000    59030.1000  7144978    4.84%
    298   300    59226.2077   113    62031.0000    59030.1000  7205090    4.84%
    320   322    59356.6622    54    62031.0000    59030.1000  7696819    4.84%
    321   323    59226.2077   140    62031.0000    59030.1000  7710592    4.84%
    324   326    59419.7056    49    62031.0000    59030.1000  7754568    4.84%
    325   327    59229.7077   139    62031.0000    59030.1000  7770104    4.84%
    328   330    59356.6622    51    62031.0000    59030.1000  7790024    4.84%
    329   331    59229.7077   145    62031.0000    59030.1000  7807014    4.84%
    333   335    59239.2277   122    62031.0000    59030.1000  7825159    4.84%
    337   339    59239.2277   117    62031.0000    59030.1000  7875001    4.84%
Elapsed time = 5277.23 sec. (1565087.56 ticks, tree = 13.90 MB, solutions = 11)
    341   343    59239.2277   118    62031.0000    59030.1000  7908112    4.84%
    345   347    59239.2277   123    62031.0000    59030.1000  7926171    4.84%
    349   351    59239.2277   108    62031.0000    59030.1000  7971447    4.84%
    353   355    59239.2277   111    62031.0000    59030.1000  8027005    4.84%
    361   363    59155.3133    79    62031.0000    59030.1000  8124703    4.84%
    365   367    59482.3483    60    62031.0000    59030.1000  8162774    4.84%
    366   368    59492.5678    44    62031.0000    59030.1000  8178451    4.84%
    369   371    59172.4942    82    62031.0000    59030.1000  8219058    4.84%
    373   375    59155.3133    84    62031.0000    59030.1000  8251944    4.84%
    377   379    59276.4333    77    62031.0000    59030.1000  8285955    4.84%
Elapsed time = 5873.67 sec. (1725542.51 ticks, tree = 14.78 MB, solutions = 11)
    381   383    59155.3133    79    62031.0000    59030.1000  8294477    4.84%
    385   387    59155.3133    77    62031.0000    59030.1000  8327126    4.84%
    389   391    59155.3133    87    62031.0000    59030.1000  8354861    4.84%
    393   395    59390.4600    85    62031.0000    59030.1000  8390746    4.84%
    397   399    59155.3133    78    62031.0000    59030.1000  8406783    4.84%
    401   403    59155.3133    82    62031.0000    59030.1000  8444945    4.84%
    418   420    59378.5956    53    62031.0000    59030.1000  8566532    4.84%
    421   423    59162.1933    77    62031.0000    59030.1000  8583869    4.84%
    423   425    59282.5415   118    62031.0000    59030.1000  8595405    4.84%
*   425+  425                        61903.0000    59030.1000             4.64%
    425   427    59162.1933    79    61903.0000    59030.1000  8596588    4.64%
Elapsed time = 6934.04 sec. (2021672.72 ticks, tree = 29.71 MB, solutions = 11)
*   442+  442                        61245.0000    59030.1000             3.62%
*   442+  442                        61025.0000    59030.1000             3.27%
    475   477    59459.3750    46    61025.0000    59030.1000  8869472    3.27%
    480   482    59294.6107    92    61025.0000    59030.1000  8922210    3.27%
    490   492    59591.2360    41    61025.0000    59030.1000  8989459    3.27%

Flow cuts applied:  413
Mixed integer rounding cuts applied:  1202
Gomory fractional cuts applied:  4

Root node processing (before b&c):
  Real time             =  568.12 sec. (278136.33 ticks)
Parallel b&c, 4 threads:
  Real time             = 6631.95 sec. (1816149.97 ticks)
  Sync time (average)   =  409.00 sec.
  Wait time (average)   =  409.09 sec.
                          ------------
Total (root+branch&cut) = 7200.07 sec. (2094286.30 ticks)
optimal objective= 61025.0

artificial: false edgeIndexset: [1060, 118, 230, 603, 1227, 15] start node= 9 start time= 10 capacity type= 2 edgeSet: [1060, 118, 230, 603, 1227, 15] ifChargeSet: [1227]
(4,3)->(9,10)->(0,15)->(1,20)->(0,27)->(0,28)->(4,3):1

artificial: false edgeIndexset: [4, 468, 279, 1256, 1307, 237] start node= 1 start time= 9 capacity type= 2 edgeSet: [4, 468, 279, 1256, 1307, 237] ifChargeSet: [1307]
(0,4)->(1,9)->(3,17)->(3,18)->(1,26)->(1,27)->(0,4):1

artificial: false edgeIndexset: [1058, 804, 103, 601, 1338, 589] start node= 9 start time= 8 capacity type= 2 edgeSet: [1058, 804, 103, 601, 1338, 589] ifChargeSet: [1338]
(4,1)->(9,8)->(0,13)->(4,18)->(4,19)->(6,24)->(4,1):1

artificial: false edgeIndexset: [835, 723, 1334, 939, 380, 525] start node= 5 start time= 3 capacity type= 2 edgeSet: [835, 723, 1334, 939, 380, 525] ifChargeSet: [1334]
(5,3)->(7,9)->(4,14)->(4,15)->(1,20)->(6,25)->(5,3):1

artificial: false edgeIndexset: [865, 577, 932, 792, 1339, 590] start node= 7 start time= 2 capacity type= 1 edgeSet: [865, 577, 932, 792, 1339, 590] ifChargeSet: [1339]
(7,2)->(4,7)->(6,12)->(4,19)->(4,20)->(6,25)->(7,2):1

artificial: false edgeIndexset: [866, 437, 903, 1240, 251, 1405] start node= 1 start time= 10 capacity type= 2 edgeSet: [866, 437, 903, 1240, 251, 1405] ifChargeSet: [1405]
(7,3)->(1,10)->(1,11)->(2,17)->(6,25)->(6,26)->(7,3):1

artificial: false edgeIndexset: [784, 1331, 582, 599, 857, 954] start node= 7 start time= 24 capacity type= 1 edgeSet: [784, 1331, 582, 599, 857, 954] ifChargeSet: [1331]
(6,4)->(4,11)->(4,12)->(6,17)->(7,24)->(4,29)->(6,4):1

artificial: false edgeIndexset: [258, 1284, 1383, 844, 445, 911] start node= 1 start time= 18 capacity type= 2 edgeSet: [258, 1284, 1383, 844, 445, 911] ifChargeSet: [1383]
(6,3)->(6,4)->(7,11)->(1,18)->(2,24)->(2,25)->(6,3):1

artificial: false edgeIndexset: [850, 1427, 422, 918, 265, 1261] start node= 7 start time= 17 capacity type= 1 edgeSet: [850, 1427, 422, 918, 265, 1261] ifChargeSet: [1261]
(2,1)->(2,2)->(6,10)->(7,17)->(7,18)->(1,25)->(2,1):1

artificial: false edgeIndexset: [609, 483, 294, 1097, 1292, 1486] start node= 9 start time= 16 capacity type= 1 edgeSet: [609, 483, 294, 1097, 1292, 1486] ifChargeSet: [1292]
(3,2)->(3,3)->(4,9)->(9,16)->(9,17)->(1,24)->(3,2):1

artificial: false edgeIndexset: [496, 277, 1080, 1305, 1499, 622] start node= 9 start time= 29 capacity type= 2 edgeSet: [496, 277, 1080, 1305, 1499, 622] ifChargeSet: [1305]
(9,0)->(1,7)->(3,15)->(3,16)->(4,22)->(9,29)->(9,0):1

artificial: false edgeIndexset: [193, 1223, 1020, 1068, 1356, 637, 174] start node= 5 start time= 6 capacity type= 2 edgeSet: [193, 1223, 1020, 1068, 1356, 637, 174] ifChargeSet: [1223]
(8,0)->(5,6)->(5,7)->(0,13)->(9,18)->(0,23)->(0,24)->(8,0):1

artificial: false edgeIndexset: [1041, 1185, 777, 1484, 189, 1054] start node= 5 start time= 27 capacity type= 2 edgeSet: [1041, 1185, 777, 1484, 189, 1054] ifChargeSet: [1484]
(9,4)->(0,9)->(9,14)->(9,15)->(8,21)->(5,27)->(9,4):1

artificial: false edgeIndexset: [1217, 1411, 902, 1239, 745, 138, 220] start node= 7 start time= 1 capacity type= 1 edgeSet: [1217, 1411, 902, 1239, 745, 138, 220] ifChargeSet: [1239]
(7,1)->(7,2)->(1,9)->(1,10)->(0,17)->(0,18)->(5,25)->(7,1):1

artificial: false edgeIndexset: [1232, 130, 739, 213, 1367, 1368, 925] start node= 7 start time= 25 capacity type= 1 edgeSet: [1232, 130, 739, 213, 1367, 1368, 925] ifChargeSet: [1232]
(1,2)->(1,3)->(0,10)->(5,17)->(5,18)->(5,19)->(7,25)->(1,2):1

artificial: false edgeIndexset: [1456, 977, 356, 1255, 633, 159, 1455] start node= 8 start time= 15 capacity type= 1 edgeSet: [1456, 977, 356, 1255, 633, 159, 1455] ifChargeSet: [1255]
(5,3)->(0,9)->(8,15)->(8,16)->(8,17)->(1,25)->(1,26)->(5,3):1

artificial: false edgeIndexset: [882, 1010, 1236, 1316, 1317, 478, 367] start node= 8 start time= 20 capacity type= 1 edgeSet: [882, 1010, 1236, 1316, 1317, 478, 367] ifChargeSet: [1236]
(1,6)->(1,7)->(6,12)->(8,20)->(3,26)->(3,27)->(3,28)->(1,6):1

artificial: false edgeIndexset: [513, 806, 438, 1238, 1239, 1240, 251, 1277] start node= 1 start time= 8 capacity type= 2 edgeSet: [513, 806, 438, 1238, 1239, 1240, 251, 1277] ifChargeSet: [1277]
(4,3)->(1,8)->(1,9)->(1,10)->(1,11)->(2,17)->(2,18)->(6,26)->(4,3):1

artificial: false edgeIndexset: [1376, 65, 1377, 658, 1204, 1301, 492, 558] start node= 5 start time= 27 capacity type= 2 edgeSet: [1376, 65, 1377, 658, 1204, 1301, 492, 558] ifChargeSet: [1204]
(0,4)->(0,5)->(3,11)->(3,12)->(4,18)->(5,26)->(5,27)->(5,28)->(0,4):1

artificial: false edgeIndexset: [1264, 530, 1255, 1256, 1257, 793, 425, 268] start node= 1 start time= 28 capacity type= 2 edgeSet: [1264, 530, 1255, 1256, 1257, 793, 425, 268] ifChargeSet: [1264]
(2,4)->(2,5)->(6,13)->(4,20)->(1,25)->(1,26)->(1,27)->(1,28)->(2,4):1

artificial: false edgeIndexset: [1024, 896, 1360, 1489, 1361, 1160, 762] start node= 5 start time= 10 capacity type= 2 edgeSet: [1024, 896, 1360, 1489, 1361, 1160, 762] ifChargeSet: [1489]
(8,4)->(5,10)->(5,11)->(5,12)->(9,19)->(9,20)->(6,26)->(8,4):1

artificial: false edgeIndexset: [821, 421, 1289, 681, 1369, 1370, 1260, 1389, 1390] start node= 5 start time= 19 capacity type= 2 edgeSet: [821, 421, 1289, 681, 1369, 1370, 1260, 1389, 1390] ifChargeSet: [1260]
(2,0)->(2,1)->(6,9)->(6,10)->(6,11)->(5,19)->(5,20)->(5,21)->(2,29)->(2,0):1

artificial: false edgeIndexset: [837, 437, 1355, 1275, 667, 1356, 1276, 1405, 1406] start node= 5 start time= 7 capacity type= 1 edgeSet: [837, 437, 1355, 1275, 667, 1356, 1276, 1405, 1406] ifChargeSet: [1276]
(5,5)->(5,6)->(5,7)->(2,15)->(2,16)->(2,17)->(6,25)->(6,26)->(6,27)->(5,5):1

artificial: false edgeIndexset: [1348, 1349, 1477, 502, 1478, 600, 1179, 1006, 1455] start node= 9 start time= 7 capacity type= 2 edgeSet: [1348, 1349, 1477, 502, 1478, 600, 1179, 1006, 1455] ifChargeSet: [1455]
(4,0)->(9,7)->(9,8)->(9,9)->(8,15)->(8,16)->(3,22)->(4,28)->(4,29)->(4,0):1

artificial: false edgeIndexset: [995, 1444, 1495, 1496, 1337, 1497, 618, 491, 1198] start node= 9 start time= 26 capacity type= 2 edgeSet: [995, 1444, 1495, 1496, 1337, 1497, 618, 491, 1198] ifChargeSet: [1444]
(8,4)->(8,5)->(3,11)->(4,17)->(4,18)->(9,25)->(9,26)->(9,27)->(9,28)->(8,4):1

artificial: false edgeIndexset: [608, 482, 1187, 1463, 1016, 1464, 1465, 1485, 1486] start node= 9 start time= 17 capacity type= 2 edgeSet: [608, 482, 1187, 1463, 1016, 1464, 1465, 1485, 1486] ifChargeSet: [1465]
(3,2)->(4,8)->(9,15)->(9,16)->(9,17)->(8,23)->(8,24)->(8,25)->(8,26)->(3,2):1

artificial: false edgeIndexset: [1201, 1202, 1203, 1204, 1205, 1253, 234, 1452, 156, 1453, 1454, 975] start node= 8 start time= 15 capacity type= 1 edgeSet: [1201, 1202, 1203, 1204, 1205, 1253, 234, 1452, 156, 1453, 1454, 975] ifChargeSet: [1253]
(0,1)->(0,2)->(0,3)->(0,4)->(0,5)->(0,6)->(8,12)->(8,13)->(8,14)->(8,15)->(1,23)->(1,24)->(0,1):1

artificial: false edgeIndexset: [1440, 961, 372, 1397, 1239, 888, 1240, 1241, 1466, 1467, 1468, 1469] start node= 8 start time= 26 capacity type= 1 edgeSet: [1440, 961, 372, 1397, 1239, 888, 1240, 1241, 1466, 1467, 1468, 1469] ifChargeSet: [1241]
(8,0)->(8,1)->(1,9)->(1,10)->(1,11)->(1,12)->(6,17)->(6,18)->(8,26)->(8,27)->(8,28)->(8,29)->(8,0):1

artificial: false edgeIndexset: [1376, 1384, 1385, 876, 1372, 1036, 717, 1373, 1454, 1374, 1375, 1455] start node= 8 start time= 15 capacity type= 1 edgeSet: [1376, 1384, 1385, 876, 1372, 1036, 717, 1373, 1454, 1374, 1375, 1455] ifChargeSet: [1376]
(6,4)->(6,5)->(6,6)->(8,14)->(8,15)->(8,16)->(5,22)->(5,23)->(5,24)->(5,25)->(5,26)->(5,27)->(6,4):1

Total time= 7622077
Solve for test12_10_50_30_100A.txt
number of service arcs=1500
number of holding arcs=300

Time of first LP solve= 609149

There are 10123 columns added to the model.

Tried aggregator 2 times.
MIP Presolve eliminated 12989 rows and 61 columns.
Aggregator did 1180 substitutions.
Reduced MIP has 17961 rows, 83694 columns, and 275031 nonzeros.
Reduced MIP has 10090 binaries, 2 generals, 0 SOSs, and 0 indicators.
Presolve time = 0.21 sec. (149.60 ticks)
Found incumbent of value 137093.000000 after 0.51 sec. (353.16 ticks)
Probing time = 0.15 sec. (21.43 ticks)
Tried aggregator 1 time.
Reduced MIP has 17961 rows, 83694 columns, and 275031 nonzeros.
Reduced MIP has 10090 binaries, 2 generals, 0 SOSs, and 0 indicators.
Presolve time = 0.20 sec. (114.23 ticks)
Probing time = 0.16 sec. (21.29 ticks)
Clique table members: 301.
MIP emphasis: balance optimality and feasibility.
MIP search method: dynamic search.
Parallel mode: deterministic, using up to 4 threads.
Root relaxation solution time = 42.56 sec. (26080.92 ticks)

        Nodes                                         Cuts/
   Node  Left     Objective  IInf  Best Integer    Best Bound    ItCnt     Gap

*     0+    0                       137093.0000    -6281.0000           104.58%
*     0+    0                        20135.0000    -6281.0000           131.19%
*     0+    0                        19273.0000    -6281.0000           132.59%
*     0+    0                        18473.0000    -6281.0000           134.00%
*     0+    0                        17531.0000    -6281.0000           135.83%
*     0+    0                        17259.0000    -6281.0000           136.39%
*     0+    0                        17217.0000    -6281.0000           136.48%
*     0+    0                        16731.0000    -6281.0000           137.54%
*     0+    0                        16057.0000    -6281.0000           139.12%
*     0+    0                        15821.0000    -6281.0000           139.70%
      0     0     8818.5400   160    15821.0000     8818.5400       31   44.26%
      0     0     8820.2902    86    15821.0000    Cuts: 2088    43788   44.25%
      0     0     8821.7478   108    15821.0000    Cuts: 1272    91488   44.24%
*     0+    0                        11906.0000     8821.7478            25.91%
      0     0     8827.7743   106    11906.0000    Cuts: 1580   153940   25.85%
*     0+    0                        11796.0000     8827.7743            25.16%
      0     0     8836.7364   100    11796.0000    Cuts: 1623   196422   25.09%
      0     0     8894.3824   112    11796.0000    Cuts: 1749   280034   24.60%
      0     0     9001.2431   111    11796.0000    Cuts: 1736   381136   23.69%
      0     0     9038.2664    93    11796.0000    Cuts: 1559   481622   23.38%
      0     0     9139.7765   101    11796.0000    Cuts: 1477   617399   22.52%
      0     0     9224.0947   110    11796.0000    Cuts: 1451   698499   21.80%
      0     0     9341.5906   114    11796.0000    Cuts: 1360   812286   20.81%
      0     0     9392.6550   126    11796.0000    Cuts: 1544   888019   20.37%
      0     0     9482.8812   127    11796.0000    Cuts: 1501  1010331   19.61%
      0     0     9520.6789   140    11796.0000    Cuts: 1352  1106782   19.29%
      0     0     9538.7903   133    11796.0000    Cuts: 1262  1191977   19.14%
      0     0     9560.0456   140    11796.0000    Cuts: 1003  1289576   18.96%
      0     0     9570.6059   138    11796.0000    Cuts: 1249  1339671   18.87%
      0     0     9583.7198   163    11796.0000    Cuts: 1135  1417674   18.75%

Implied bound cuts applied:  3
Flow cuts applied:  7317
Mixed integer rounding cuts applied:  2905
Gomory fractional cuts applied:  1

Root node processing (before b&c):
  Real time             = 7200.05 sec. (4506761.99 ticks)
Parallel b&c, 4 threads:
  Real time             =    0.00 sec. (0.00 ticks)
  Sync time (average)   =    0.00 sec.
  Wait time (average)   =    0.00 sec.
                          ------------
Total (root+branch&cut) = 7200.05 sec. (4506761.99 ticks)
optimal objective= 11796.0

artificial: false edgeIndexset: [1650, 386, 194, 950, 667, 781] start node= 1 start time= 14 capacity type= 2 edgeSet: [1650, 386, 194, 950, 667, 781] ifChargeSet: [1650]
(5,0)->(5,1)->(4,7)->(1,14)->(6,20)->(2,26)->(5,0):1

artificial: false edgeIndexset: [930, 277, 86, 71, 1065, 1162, 1566] start node= 7 start time= 22 capacity type= 1 edgeSet: [930, 277, 86, 71, 1065, 1162, 1566] ifChargeSet: [1566]
(6,0)->(2,6)->(2,7)->(0,11)->(6,15)->(7,22)->(0,26)->(6,0):1

artificial: false edgeIndexset: [210, 1206, 26, 651, 795, 731, 1630] start node= 1 start time= 0 capacity type= 2 edgeSet: [210, 1206, 26, 651, 795, 731, 1630] ifChargeSet: [1630]
(1,0)->(7,6)->(4,10)->(4,11)->(5,15)->(4,21)->(0,26)->(1,0):1

artificial: false edgeIndexset: [1443, 105, 1674, 11, 1147, 590, 895] start node= 1 start time= 15 capacity type= 2 edgeSet: [1443, 105, 1674, 11, 1147, 590, 895] ifChargeSet: [1674]
(9,3)->(7,7)->(0,11)->(1,15)->(3,20)->(5,24)->(5,25)->(9,3):1

artificial: false edgeIndexset: [737, 802, 1671, 842, 43, 748, 1149] start node= 7 start time= 9 capacity type= 1 edgeSet: [737, 802, 1671, 842, 43, 748, 1149] ifChargeSet: [1671]
(5,2)->(7,9)->(0,13)->(4,17)->(5,21)->(5,22)->(4,28)->(5,2):1

artificial: false edgeIndexset: [1042, 837, 1701, 283, 1179, 1052, 77] start node= 7 start time= 9 capacity type= 1 edgeSet: [1042, 837, 1701, 283, 1179, 1052, 77] ifChargeSet: [1701]
(6,2)->(7,9)->(2,13)->(0,17)->(6,21)->(6,22)->(5,27)->(6,2):1

artificial: false edgeIndexset: [215, 1432, 1241, 507, 1308, 1757] start node= 1 start time= 5 capacity type= 2 edgeSet: [215, 1432, 1241, 507, 1308, 1757] ifChargeSet: [1757]
(1,5)->(7,11)->(8,17)->(8,18)->(9,22)->(3,27)->(1,5):1

artificial: false edgeIndexset: [1792, 576, 821, 1126, 27, 91, 1660, 1343] start node= 1 start time= 1 capacity type= 2 edgeSet: [1792, 576, 821, 1126, 27, 91, 1660, 1343] ifChargeSet: [1660]
(1,1)->(3,6)->(5,10)->(5,11)->(6,16)->(9,22)->(9,23)->(0,27)->(1,1):1

artificial: false edgeIndexset: [1170, 1299, 1284, 1748, 424, 618, 1739, 1423] start node= 7 start time= 0 capacity type= 1 edgeSet: [1170, 1299, 1284, 1748, 424, 618, 1739, 1423] ifChargeSet: [1748]
(7,0)->(2,4)->(8,8)->(8,9)->(9,13)->(3,18)->(8,24)->(7,29)->(7,0):1

artificial: false edgeIndexset: [1297, 1762, 1746, 1283, 422, 616, 1421, 1198] start node= 7 start time= 28 capacity type= 1 edgeSet: [1297, 1762, 1746, 1283, 422, 616, 1421, 1198] ifChargeSet: [1746]
(2,2)->(8,6)->(8,7)->(9,11)->(3,16)->(8,22)->(8,23)->(7,28)->(2,2):1

Total time= 7809497
Solve for test12_10_50_30_100D.txt
number of service arcs=1500
number of holding arcs=300

Time of first LP solve= 634507

There are 11345 columns added to the model.

Tried aggregator 2 times.
MIP Presolve eliminated 14622 rows and 61 columns.
Aggregator did 1423 substitutions.
Reduced MIP has 16085 rows, 74279 columns, and 249065 nonzeros.
Reduced MIP has 11245 binaries, 69 generals, 0 SOSs, and 0 indicators.
Presolve time = 0.19 sec. (139.26 ticks)
Found incumbent of value 151352.000000 after 0.46 sec. (324.91 ticks)
Probing time = 0.15 sec. (18.09 ticks)
Tried aggregator 1 time.
Reduced MIP has 16085 rows, 74279 columns, and 249065 nonzeros.
Reduced MIP has 11245 binaries, 69 generals, 0 SOSs, and 0 indicators.
Presolve time = 0.18 sec. (104.19 ticks)
Probing time = 0.14 sec. (18.52 ticks)
Clique table members: 300.
MIP emphasis: balance optimality and feasibility.
MIP search method: dynamic search.
Parallel mode: deterministic, using up to 4 threads.
Root relaxation solution time = 18.98 sec. (8809.11 ticks)

        Nodes                                         Cuts/
   Node  Left     Objective  IInf  Best Integer    Best Bound    ItCnt     Gap

*     0+    0                       151352.0000    -5557.0000           103.67%
*     0+    0                        39002.0000    -5557.0000           114.25%
*     0+    0                        34426.0000    -5557.0000           116.14%
*     0+    0                        32440.0000    -5557.0000           117.13%
*     0+    0                        31272.0000    -5557.0000           117.77%
*     0+    0                        29466.0000    -5557.0000           118.86%
*     0+    0                        28886.0000    -5557.0000           119.24%
      0     0    20337.4100    87    28886.0000    20337.4100    25572   29.59%
      0     0    20339.0100    81    28886.0000     Cuts: 691    37739   29.59%
      0     0    20347.3442   100    28886.0000     Cuts: 735    48451   29.56%
      0     0    20349.2604   100    28886.0000     Cuts: 904    58850   29.55%
*     0+    0                        24832.0000    20349.2604            18.05%
*     0+    0                        24621.0000    20349.2604            17.35%
      0     0    20349.2604   112    24621.0000     Cuts: 975    68617   17.35%
      0     0    20351.2122   102    24621.0000    Cuts: 1066    98785   17.34%
*     0+    0                        24104.0000    20351.2122            15.57%
      0     0    20352.4876    93    24104.0000    Cuts: 1039   116946   15.56%
*     0+    0                        24076.0000    20352.4876            15.47%
*     0+    0                        23885.0000    20352.4876            14.79%
*     0+    0                        23795.0000    20352.4876            14.47%
*     0+    0                        23669.0000    20352.4876            14.01%
      0     0    20364.5129    99    23669.0000    Cuts: 1035   147680   13.96%
      0     0    20386.3773    99    23669.0000    Cuts: 1108   177599   13.87%
      0     0    20409.7919   106    23669.0000    Cuts: 1201   214095   13.77%
      0     0    20459.8163   119    23669.0000    Cuts: 1219   253219   13.56%
      0     0    20514.9817   111    23669.0000    Cuts: 1076   288211   13.33%
      0     0    20578.5150   104    23669.0000    Cuts: 1045   330947   13.06%
      0     0    20733.1559   107    23669.0000    Cuts: 1034   387535   12.40%
      0     0    20762.3074   114    23669.0000    Cuts: 1125   430515   12.28%
      0     0    20782.9905   135    23669.0000    Cuts: 1050   474894   12.19%
      0     0    20794.8004   122    23669.0000    Cuts: 1020   520358   12.14%
      0     0    20838.7102   138    23669.0000     Cuts: 880   564223   11.96%
      0     0    20861.9085   120    23669.0000     Cuts: 861   605822   11.86%
      0     0    20877.2263   120    23669.0000     Cuts: 878   656796   11.80%
      0     0    20885.0562   108    23669.0000     Cuts: 929   698033   11.76%
      0     0    20889.9432   118    23669.0000     Cuts: 747   727480   11.74%
      0     0    20894.6487   106    23669.0000     Cuts: 809   755233   11.72%
      0     0    20900.9159   130    23669.0000     Cuts: 911   790660   11.69%
      0     0    20902.9541   122    23669.0000     Cuts: 871   814795   11.69%
Heuristic still looking.
Heuristic still looking.
Heuristic still looking.
*     0+    0                        23308.0000    20902.9541            10.32%
*     0+    0                        23306.0000    20902.9541            10.31%
*     0+    0                        22821.0000    20902.9541             8.40%
      0     2    20902.9541   122    22821.0000    20902.9541   814795    8.40%
Elapsed time = 4091.09 sec. (2503322.08 ticks, tree = 0.00 MB, solutions = 17)
      1     3    20903.8463   107    22821.0000    20902.9541   822009    8.40%
      2     4    20923.9699    93    22821.0000    20902.9541   866045    8.40%
      4     6    20905.2041   103    22821.0000    20902.9541   883131    8.40%
      7     9    20907.5752   110    22821.0000    20902.9541   918485    8.40%
      9    11    20908.1189   130    22821.0000    20902.9541   953279    8.40%
*    10+   10                        22658.0000    20902.9541             7.75%
*    10+   10                        22600.0000    20902.9541             7.51%
*    10+   10                        22592.0000    20902.9541             7.48%
     12    14    20951.7826    95    22592.0000    20904.3903  1054003    7.47%
     16    18    20922.3474   103    22592.0000    20904.3903  1160836    7.47%
     21    23    20907.9043   113    22592.0000    20904.6233  1241751    7.47%
     22    24    20923.1618   112    22592.0000    20904.6233  1265118    7.47%
     25    27    20915.5693   105    22592.0000    20904.6233  1321048    7.47%
Elapsed time = 5256.56 sec. (3006774.25 ticks, tree = 0.00 MB, solutions = 20)
     28    30    20951.4639    84    22592.0000    20904.6233  1406940    7.47%
     29    31    20907.9966   114    22592.0000    20904.6233  1413519    7.47%
     32    34    20934.0400    78    22592.0000    20904.6233  1438132    7.47%
     33    35    20914.2458    98    22592.0000    20904.6233  1462106    7.47%
     37    39    20975.9970    84    22592.0000    20904.6233  1564971    7.47%
*    38+   38                        22039.0000    20904.6233             5.15%
     38    40    20916.1076   107    22039.0000    20904.6233  1580439    5.15%
     52    54    20931.5198    93    22039.0000    20904.6233  1819574    5.15%
     54    56    20940.5370    86    22039.0000    20904.6233  1870659    5.15%
     62    64    20940.9021    86    22039.0000    20904.6233  1951551    5.15%
     63    65    20975.8939    79    22039.0000    20904.6233  1995587    5.15%
Elapsed time = 6866.82 sec. (3669146.91 ticks, tree = 0.00 MB, solutions = 21)
     66    68    20954.5947    85    22039.0000    20904.6233  2052645    5.15%
     68    70    20952.1295    78    22039.0000    20904.6233  2085344    5.15%
     69    71    20951.3390    76    22039.0000    20904.6233  2120247    5.15%
     70    72    20943.6243    92    22039.0000    20904.6233  2133643    5.15%
     72    74    20951.4109    80    22039.0000    20904.6233  2136967    5.15%
     73    75    20957.1535    87    22039.0000    20904.6233  2165881    5.15%

Implied bound cuts applied:  1
Flow cuts applied:  2933
Mixed integer rounding cuts applied:  3257
Gomory fractional cuts applied:  3

Root node processing (before b&c):
  Real time             = 4090.95 sec. (2503242.63 ticks)
Parallel b&c, 4 threads:
  Real time             = 3109.11 sec. (1279602.45 ticks)
  Sync time (average)   =  571.85 sec.
  Wait time (average)   =  571.89 sec.
                          ------------
Total (root+branch&cut) = 7200.05 sec. (3782845.08 ticks)
optimal objective= 22039.000000000065

artificial: false edgeIndexset: [481, 52, 1560, 1449, 1005] start node= 7 start time= 15 capacity type= 1 edgeSet: [481, 52, 1560, 1449, 1005] ifChargeSet: [1560]
(2,0)->(2,1)->(9,9)->(7,15)->(0,22)->(2,0):1

artificial: false edgeIndexset: [754, 1555, 356, 1066, 621, 910] start node= 7 start time= 16 capacity type= 1 edgeSet: [754, 1555, 356, 1066, 621, 910] ifChargeSet: [1555]
(5,4)->(6,10)->(7,16)->(4,21)->(1,25)->(1,26)->(5,4):1

artificial: false edgeIndexset: [528, 116, 933, 1525, 1208, 1034] start node= 8 start time= 8 capacity type= 1 edgeSet: [528, 116, 933, 1525, 1208, 1034] ifChargeSet: [1525]
(6,3)->(8,8)->(7,14)->(3,18)->(0,25)->(0,26)->(6,3):1

artificial: false edgeIndexset: [1633, 674, 564, 860, 876, 750] start node= 5 start time= 0 capacity type= 2 edgeSet: [1633, 674, 564, 860, 876, 750] ifChargeSet: [1633]
(5,0)->(6,6)->(4,13)->(4,14)->(6,20)->(3,24)->(5,0):1

artificial: false edgeIndexset: [485, 21, 1783, 1564, 1244, 269] start node= 9 start time= 14 capacity type= 1 edgeSet: [485, 21, 1783, 1564, 1244, 269] ifChargeSet: [1564]
(2,4)->(2,5)->(9,13)->(9,14)->(0,21)->(1,29)->(2,4):1

artificial: false edgeIndexset: [1168, 1635, 1060, 646, 124, 830] start node= 8 start time= 28 capacity type= 1 edgeSet: [1168, 1635, 1060, 646, 124, 830] ifChargeSet: [1635]
(0,4)->(7,10)->(4,15)->(4,16)->(5,20)->(8,28)->(0,4):1

artificial: false edgeIndexset: [132, 1656, 1128, 697, 540, 1342] start node= 7 start time= 18 capacity type= 1 edgeSet: [132, 1656, 1128, 697, 540, 1342] ifChargeSet: [1656]
(3,0)->(5,6)->(5,7)->(0,12)->(7,18)->(9,22)->(3,0):1

artificial: false edgeIndexset: [1383, 504, 1515, 700, 1772, 46] start node= 9 start time= 2 capacity type= 1 edgeSet: [1383, 504, 1515, 700, 1772, 46] ifChargeSet: [1515]
(9,2)->(9,3)->(5,10)->(0,15)->(0,16)->(2,24)->(9,2):1

artificial: false edgeIndexset: [1409, 786, 1522, 1156, 1092, 203] start node= 7 start time= 12 capacity type= 1 edgeSet: [1409, 786, 1522, 1156, 1092, 203] ifChargeSet: [1522]
(5,6)->(7,12)->(8,16)->(0,22)->(0,23)->(9,29)->(5,6):1

artificial: false edgeIndexset: [1504, 499, 1781, 1302, 185, 1257] start node= 9 start time= 27 capacity type= 1 edgeSet: [1504, 499, 1781, 1302, 185, 1257] ifChargeSet: [1781]
(0,4)->(0,5)->(9,11)->(9,12)->(2,19)->(9,27)->(0,4):1

artificial: false edgeIndexset: [1137, 801, 1604, 1030, 555, 395, 1261] start node= 1 start time= 5 capacity type= 2 edgeSet: [1137, 801, 1604, 1030, 555, 395, 1261] ifChargeSet: [1604]
(9,1)->(1,5)->(7,10)->(3,14)->(3,15)->(5,21)->(7,27)->(9,1):1

artificial: false edgeIndexset: [1221, 1077, 662, 1688, 969, 1485] start node= 7 start time= 27 capacity type= 1 edgeSet: [1221, 1077, 662, 1688, 969, 1485] ifChargeSet: [1688]
(4,2)->(6,8)->(6,9)->(9,15)->(8,21)->(7,27)->(4,2):1

artificial: false edgeIndexset: [1664, 1665, 982, 70, 1144, 1498, 766] start node= 8 start time= 4 capacity type= 1 edgeSet: [1664, 1665, 982, 70, 1144, 1498, 766] ifChargeSet: [1665]
(8,4)->(0,10)->(5,14)->(5,15)->(5,16)->(6,22)->(9,28)->(8,4):1

artificial: false edgeIndexset: [881, 803, 1414, 1110, 1638, 649, 1739] start node= 4 start time= 18 capacity type= 1 edgeSet: [881, 803, 1414, 1110, 1638, 649, 1739] ifChargeSet: [1739]
(7,0)->(9,4)->(6,11)->(4,18)->(4,19)->(5,23)->(7,29)->(7,0):1

artificial: false edgeIndexset: [1793, 1284, 328, 731, 1659, 635, 1660, 495] start node= 9 start time= 24 capacity type= 1 edgeSet: [1793, 1284, 328, 731, 1659, 635, 1660, 495] ifChargeSet: [1660]
(4,5)->(5,9)->(5,10)->(5,11)->(2,15)->(9,23)->(9,24)->(1,28)->(4,5):1

Total time= 7834840
Solve for test6_5_15_40_200A.txt
number of service arcs=600
number of holding arcs=200

Time of first LP solve= 479148

There are 5313 columns added to the model.

Tried aggregator 2 times.
MIP Presolve eliminated 6751 rows and 31 columns.
Aggregator did 823 substitutions.
Reduced MIP has 33441 rows, 125575 columns, and 425202 nonzeros.
Reduced MIP has 5297 binaries, 0 generals, 0 SOSs, and 0 indicators.
Presolve time = 0.31 sec. (221.93 ticks)
Probing time = 0.15 sec. (34.39 ticks)
Tried aggregator 1 time.
MIP Presolve eliminated 647 rows and 2366 columns.
Reduced MIP has 32794 rows, 123209 columns, and 418210 nonzeros.
Reduced MIP has 5297 binaries, 0 generals, 0 SOSs, and 0 indicators.
Presolve time = 0.37 sec. (190.55 ticks)
Probing time = 0.26 sec. (34.02 ticks)
Clique table members: 201.
MIP emphasis: balance optimality and feasibility.
MIP search method: dynamic search.
Parallel mode: deterministic, using up to 4 threads.
Root relaxation solution time = 91.22 sec. (29573.99 ticks)

        Nodes                                         Cuts/
   Node  Left     Objective  IInf  Best Integer    Best Bound    ItCnt     Gap

      0     0    21753.6800   104                  21753.6800       41         
*     0+    0                        34904.0000    21753.6800            37.68%
      0     0    21753.6800    71    34904.0000     Cuts: 575    10415   37.68%
      0     0    21753.6800    76    34904.0000     Cuts: 485    22034   37.68%
      0     0    21753.6800    75    34904.0000     Cuts: 515    35756   37.68%
*     0+    0                        27014.0000    21753.6800            19.47%
*     0+    0                        26758.0000    21753.6800            18.70%
Heuristic still looking.
Heuristic still looking.
Heuristic still looking.
      0     2    21753.6800    75    26758.0000    21753.6800    35756   18.70%
Elapsed time = 747.88 sec. (292923.87 ticks, tree = 0.00 MB, solutions = 3)
      1     3    21753.6800    51    26758.0000    21753.6800    58477   18.70%
      2     4    21753.6800    66    26758.0000    21753.6800    70543   18.70%
      3     5    21753.6800    57    26758.0000    21753.6800    82896   18.70%
      5     7    21753.6800    53    26758.0000    21753.6800   107701   18.70%
      6     8    21758.1600    46    26758.0000    21753.6800   117988   18.70%
*     8+    8                        23356.0000    21753.6800             6.86%
      8    10    21753.6800    68    23356.0000    21753.6800   134070    6.86%
     11    13    21790.0559    37    23356.0000    21753.6800   316692    6.86%
     12    14    21758.1600    56    23356.0000    21753.6800   401649    6.86%
     13    15    21753.6800    55    23356.0000    21753.6800   484370    6.86%
     15    17    21758.1600    49    23356.0000    21753.6800   666010    6.86%
Elapsed time = 1434.86 sec. (577596.53 ticks, tree = 0.00 MB, solutions = 4)
     16    18    21758.1600    53    23356.0000    21753.6800   697015    6.86%
     17    19    21753.6800    59    23356.0000    21753.6800   724693    6.86%
     18    20    21753.6800    56    23356.0000    21753.6800   751113    6.86%
     20    22    21758.1600    33    23356.0000    21753.6800   788122    6.86%
     21    23    21758.1600    26    23356.0000    21753.6800   803282    6.86%
     22    24    21774.4484    22    23356.0000    21753.6800   818415    6.86%
     23    25    21783.6435    30    23356.0000    21753.6800   853889    6.86%
     25    27    21758.1600    41    23356.0000    21753.6800   871310    6.86%
     27    29    21783.6435    33    23356.0000    21753.6800   873217    6.86%
     28    30    21784.3417    25    23356.0000    21753.6800   920524    6.86%
Elapsed time = 1929.24 sec. (726091.11 ticks, tree = 0.00 MB, solutions = 4)
     42    44    21784.3417    21    23356.0000    21753.6800  1054651    6.86%
     43    45    21758.1600    40    23356.0000    21753.6800  1063095    6.86%
     44    46    21783.6435    24    23356.0000    21753.6800  1072544    6.86%
     45    47    21783.6435    26    23356.0000    21753.6800  1082418    6.86%
     46    48    21784.3417    27    23356.0000    21753.6800  1088967    6.86%
     47    49    21783.6435    23    23356.0000    21753.6800  1123192    6.86%
     51    53    21783.6435    20    23356.0000    21753.6800  1159130    6.86%
     55    57    21783.6435    26    23356.0000    21753.6800  1196722    6.86%
     59    61    22042.0067    14    23356.0000    21753.6800  1237369    6.86%
     63    65    21783.6435    25    23356.0000    21753.6800  1279416    6.86%
Elapsed time = 2465.32 sec. (876146.94 ticks, tree = 0.00 MB, solutions = 4)
     68    70    21783.6435    29    23356.0000    21753.6800  1349559    6.86%
     72    74    22110.6218    26    23356.0000    21753.6800  1391945    6.86%
     73    75    21783.6435    20    23356.0000    21753.6800  1403593    6.86%
     76    78    21784.3417    26    23356.0000    21753.6800  1425854    6.86%
     77    79    21784.3417    23    23356.0000    21753.6800  1439779    6.86%
*    81+   81                        22478.0000    21753.6800             3.22%
     81    83    22056.4400    12    22478.0000    21753.6800  1483358    3.22%
     85    87    21784.3417    33    22478.0000    21753.6800  1527919    3.22%
     89    91    22042.0067    13    22478.0000    21753.6800  1562804    3.22%
     93    95    21784.3417    36    22478.0000    21753.6800  1594007    3.22%
     97    99    22110.6218    28    22478.0000    21753.6800  1639233    3.22%
Elapsed time = 3114.92 sec. (1060046.03 ticks, tree = 0.00 MB, solutions = 4)
    101   103    21784.3417    29    22478.0000    21753.6800  1658358    3.22%
    105   107    21784.3417    25    22478.0000    21753.6800  1695312    3.22%
    110   112    21783.6435    30    22478.0000    21753.6800  1737846    3.22%
    114   116    21784.3417    25    22478.0000    21753.6800  1775566    3.22%
    116   118    21783.6435    24    22478.0000    21753.6800  1790416    3.22%
    117   119    21783.6435    30    22478.0000    21753.6800  1806342    3.22%
    121   123    21783.6435    33    22478.0000    21753.6800  1838970    3.22%
    125   127    21970.2600    15    22478.0000    21753.6800  1879044    3.22%
    129   131    21783.6435    32    22478.0000    21753.6800  1913540    3.22%
    133   135    21783.6435    37    22478.0000    21753.6800  1937932    3.22%
Elapsed time = 3762.05 sec. (1256330.50 ticks, tree = 5.73 MB, solutions = 5)
    137   139    22042.0067    17    22478.0000    21753.6800  1966890    3.22%
    141   143    21783.6435    42    22478.0000    21753.6800  1992251    3.22%
    144   146    21783.6435    28    22478.0000    21753.6800  2006271    3.22%
    148   150    21915.3882    11    22478.0000    21753.6800  2035185    3.22%
    150   152    21784.3417    24    22478.0000    21753.6800  2044512    3.22%
    154   156    21784.3417    24    22478.0000    21753.6800  2059887    3.22%
    158   160    21784.3417    27    22478.0000    21753.6800  2088818    3.22%
    162   164    22110.6218    25    22478.0000    21753.6800  2117474    3.22%
    167   169    21783.6435    30    22478.0000    21753.6800  2149454    3.22%
    170   172    21783.6435    41    22478.0000    21753.6800  2169076    3.22%
Elapsed time = 4139.43 sec. (1365052.67 ticks, tree = 5.73 MB, solutions = 5)
    176   178    21784.3417    30    22478.0000    21753.6800  2191319    3.22%
    177   179    21784.3417    24    22478.0000    21753.6800  2195079    3.22%
    178   180    21783.6435    26    22478.0000    21753.6800  2204888    3.22%
    182   184    21783.6435    22    22478.0000    21753.6800  2226272    3.22%
    186   188    21783.6435    21    22478.0000    21753.6800  2262036    3.22%
    187   189    21783.6435    40    22478.0000    21753.6800  2268148    3.22%
    191   193    21783.6435    38    22478.0000    21753.6800  2287103    3.22%
    195   197    21783.6435    39    22478.0000    21753.6800  2319980    3.22%
    199   201    22042.0067    13    22478.0000    21753.6800  2351913    3.22%
    203   205    21783.6435    40    22478.0000    21753.6800  2381540    3.22%
Elapsed time = 4746.65 sec. (1528442.19 ticks, tree = 22.53 MB, solutions = 5)
    207   209    21925.9500    12    22478.0000    21753.6800  2403398    3.22%
    211   213    21783.6435    34    22478.0000    21753.6800  2417045    3.22%
    215   217    21783.6435    29    22478.0000    21753.6800  2442682    3.22%
    219   221    21783.6435    33    22478.0000    21753.6800  2457071    3.22%
    242   244    22042.0067    14    22478.0000    21753.6800  2580535    3.22%
    251   253    22043.8866    12    22478.0000    21753.6800  2607508    3.22%
    255   257    21788.8932    22    22478.0000    21753.6800  2630709    3.22%
    256   258    21915.3882    16    22478.0000    21753.6800  2637896    3.22%
    258   260    21783.6435    43    22478.0000    21753.6800  2646841    3.22%
    260   262    21801.8930    29    22478.0000    21753.6800  2657598    3.22%
Elapsed time = 5015.27 sec. (1607484.38 ticks, tree = 45.61 MB, solutions = 5)
    262   264    21925.9500    20    22478.0000    21753.6800  2671615    3.22%
    264   266    21801.8930    32    22478.0000    21753.6800  2680194    3.22%
    266   268    21783.6435    40    22478.0000    21753.6800  2694154    3.22%
    269   271    21799.5389    31    22478.0000    21753.6800  2705723    3.22%
    270   272    21783.6435    35    22478.0000    21753.6800  2709833    3.22%
    273   275    22018.1289    23    22478.0000    21753.6800  2728385    3.22%
    274   276    21783.6435    36    22478.0000    21753.6800  2733304    3.22%
    278   280    21925.9500    18    22478.0000    21753.6800  2752860    3.22%
    282   284    21783.6435    36    22478.0000    21753.6800  2770185    3.22%
    286   288    21783.6435    34    22478.0000    21753.6800  2793372    3.22%
Elapsed time = 5284.35 sec. (1681150.18 ticks, tree = 45.61 MB, solutions = 5)
    290   292    21783.6435    30    22478.0000    21753.6800  2806929    3.22%
    294   296    21783.6435    33    22478.0000    21753.6800  2830607    3.22%
    298   300    21925.9500    17    22478.0000    21753.6800  2852734    3.22%
    302   304    21783.6435    36    22478.0000    21753.6800  2875183    3.22%
    306   308    21970.2600    14    22478.0000    21753.6800  2906792    3.22%
    310   312    21783.6435    34    22478.0000    21753.6800  2921839    3.22%
    314   316    21783.6435    30    22478.0000    21753.6800  2944937    3.22%
    318   320    21783.6435    30    22478.0000    21753.6800  2963415    3.22%
    370   372    21925.4554    16    22478.0000    21753.6800  3120812    3.22%
    373   375    21783.6435    28    22478.0000    21753.6800  3140394    3.22%
Elapsed time = 5787.23 sec. (1825823.06 ticks, tree = 92.42 MB, solutions = 5)
    377   379    21783.6435    29    22478.0000    21753.6800  3157102    3.22%
    381   383    21925.9500    16    22478.0000    21753.6800  3176622    3.22%
    384   386    22110.6218    28    22478.0000    21753.6800  3192611    3.22%
    388   390    21813.2663    29    22478.0000    21753.6800  3203153    3.22%
    392   394    21915.3882    15    22478.0000    21753.6800  3226994    3.22%
    393   395    21783.6435    35    22478.0000    21753.6800  3232004    3.22%
    397   399    21925.9500    20    22478.0000    21753.6800  3251958    3.22%
    401   403    21783.6435    35    22478.0000    21753.6800  3265202    3.22%
    409   411    22042.0067    13    22478.0000    21753.6800  3299561    3.22%
    413   415    21783.6435    31    22478.0000    21753.6800  3318987    3.22%
Elapsed time = 6231.52 sec. (1944716.70 ticks, tree = 92.42 MB, solutions = 5)
    417   419    21783.6435    35    22478.0000    21753.6800  3335145    3.22%
    421   423    22042.0067    16    22478.0000    21753.6800  3347040    3.22%
    425   427    21783.6435    34    22478.0000    21753.6800  3360462    3.22%
    429   431    21783.6435    32    22478.0000    21753.6800  3368387    3.22%
    433   435    21925.9500    13    22478.0000    21753.6800  3394224    3.22%
    437   439    21783.6435    27    22478.0000    21753.6800  3407824    3.22%
*   510   506      integral     0    22232.0000    21753.6800  3589348    2.15%
    526   510    22019.0367    18    22232.0000    21753.6800  3613183    2.15%
    527   511    21789.8007    29    22232.0000    21753.6800  3640371    2.15%
    531   515    21925.9500    16    22232.0000    21753.6800  3656185    2.15%
    535   517    21789.8007    34    22232.0000    21753.6800  3665379    2.15%
Elapsed time = 6735.88 sec. (2091871.85 ticks, tree = 143.77 MB, solutions = 6)
    539   519    22042.0067    16    22232.0000    21753.6800  3676315    2.15%
    543   523    21789.8007    31    22232.0000    21753.6800  3687815    2.15%
    547   525    21789.8007    29    22232.0000    21753.6800  3693132    2.15%
    551   527    21789.8007    27    22232.0000    21753.6800  3703469    2.15%
    555   529    21789.8007    29    22232.0000    21753.6800  3711874    2.15%
    559   531    22110.6218    27    22232.0000    21753.6800  3720196    2.15%
    563   535    21789.8007    24    22232.0000    21753.6800  3727306    2.15%
    567   539    21789.8007    25    22232.0000    21753.6800  3733190    2.15%
    571   539    22110.6218    28    22232.0000    21753.6800  3749431    2.15%
    575   543    21800.0976    23    22232.0000    21753.6800  3761844    2.15%
Elapsed time = 7032.50 sec. (2176751.65 ticks, tree = 143.77 MB, solutions = 6)
    579   547    22110.6218    25    22232.0000    21753.6800  3775824    2.15%
    585   551    22042.0067    17    22232.0000    21753.6800  3791513    2.15%
    591   555    21800.0976    29    22232.0000    21753.6800  3804218    2.15%

Flow cuts applied:  181
Mixed integer rounding cuts applied:  220
Gomory fractional cuts applied:  1

Root node processing (before b&c):
  Real time             =  747.44 sec. (292547.86 ticks)
Parallel b&c, 4 threads:
  Real time             = 6452.62 sec. (1941057.83 ticks)
  Sync time (average)   =  383.03 sec.
  Wait time (average)   =  383.12 sec.
                          ------------
Total (root+branch&cut) = 7200.06 sec. (2233605.69 ticks)
optimal objective= 22232.0

artificial: false edgeIndexset: [0, 736, 417, 163, 292, 106, 782, 751, 463, 47, 432, 477, 606, 735] start node= 1 start time= 3 capacity type= 2 edgeSet: [0, 736, 417, 163, 292, 106, 782, 751, 463, 47, 432, 477, 606, 735] ifChargeSet: [736, 782, 751, 735]
(0,0)->(1,3)->(0,6)->(0,7)->(2,12)->(3,15)->(3,16)->(3,17)->(4,22)->(4,23)->(0,26)->(3,31)->(3,32)->(4,37)->(0,0):1

artificial: false edgeIndexset: [608, 129, 514, 452, 199, 615, 136, 459, 622, 623, 144, 467, 630, 151, 122, 445] start node= 4 start time= 5 capacity type= 1 edgeSet: [608, 129, 514, 452, 199, 615, 136, 459, 622, 623, 144, 467, 630, 151, 122, 445] ifChargeSet: [630, 615, 622, 623]
(0,2)->(4,5)->(0,8)->(0,9)->(4,12)->(0,15)->(0,16)->(4,19)->(0,22)->(0,23)->(0,24)->(4,27)->(0,30)->(0,31)->(4,34)->(1,39)->(0,2):1

artificial: false edgeIndexset: [418, 68, 295, 783, 464, 370, 627, 436, 693, 85, 694, 313, 761, 442] start node= 4 start time= 1 capacity type= 2 edgeSet: [418, 68, 295, 783, 464, 370, 627, 436, 693, 85, 694, 313, 761, 442] ifChargeSet: [627, 693, 694, 783]
(4,1)->(4,2)->(0,5)->(3,10)->(2,13)->(2,14)->(2,15)->(3,18)->(4,23)->(4,24)->(0,27)->(0,28)->(2,33)->(3,36)->(4,1):1

artificial: false edgeIndexset: [128, 480, 192, 771, 165, 492, 344, 217, 155, 507, 798, 702, 799, 703] start node= 1 start time= 17 capacity type= 2 edgeSet: [128, 480, 192, 771, 165, 492, 344, 217, 155, 507, 798, 702, 799, 703] ifChargeSet: [771, 798, 799, 703]
(4,0)->(1,5)->(0,8)->(4,11)->(4,12)->(1,17)->(2,22)->(2,23)->(2,24)->(4,27)->(1,32)->(0,35)->(4,38)->(4,39)->(4,0):1

artificial: false edgeIndexset: [737, 418, 355, 643, 772, 518, 230, 329, 204, 503, 668, 669, 573] start node= 1 start time= 3 capacity type= 2 edgeSet: [737, 418, 355, 643, 772, 518, 230, 329, 204, 503, 668, 669, 573] ifChargeSet: [737, 772, 668, 669]
(1,3)->(1,4)->(2,9)->(4,12)->(4,13)->(3,17)->(3,18)->(4,23)->(1,28)->(1,29)->(1,30)->(2,35)->(4,38)->(1,3):1

artificial: false edgeIndexset: [416, 706, 8, 651, 781, 400, 113, 758, 470, 759, 347, 252, 445, 542] start node= 1 start time= 11 capacity type= 2 edgeSet: [416, 706, 8, 651, 781, 400, 113, 758, 470, 759, 347, 252, 445, 542] ifChargeSet: [706, 758, 759, 781]
(3,0)->(4,5)->(0,8)->(1,11)->(1,12)->(3,16)->(4,21)->(4,22)->(2,26)->(2,27)->(4,30)->(0,33)->(3,38)->(3,39)->(3,0):1

artificial: false edgeIndexset: [353, 227, 712, 362, 332, 495, 368, 720, 721, 691, 596, 660, 181, 24, 285] start node= 1 start time= 20 capacity type= 2 edgeSet: [353, 227, 712, 362, 332, 495, 368, 720, 721, 691, 596, 660, 181, 24, 285] ifChargeSet: [720, 721, 691, 712]
(3,0)->(3,1)->(3,2)->(2,5)->(3,8)->(2,11)->(2,12)->(4,15)->(1,20)->(1,21)->(0,24)->(1,27)->(2,32)->(2,33)->(4,36)->(3,0):1

Total time= 7679553
Solve for test6_5_15_40_200C.txt
number of service arcs=600
number of holding arcs=200

Time of first LP solve= 606978

There are 5508 columns added to the model.

Tried aggregator 2 times.
MIP Presolve eliminated 6830 rows and 31 columns.
Aggregator did 848 substitutions.
Reduced MIP has 33337 rows, 126028 columns, and 426755 nonzeros.
Reduced MIP has 5492 binaries, 0 generals, 0 SOSs, and 0 indicators.
Presolve time = 0.33 sec. (222.97 ticks)
Probing time = 0.17 sec. (35.83 ticks)
Tried aggregator 1 time.
MIP Presolve eliminated 159 rows and 595 columns.
Reduced MIP has 33178 rows, 125433 columns, and 424991 nonzeros.
Reduced MIP has 5492 binaries, 0 generals, 0 SOSs, and 0 indicators.
Presolve time = 0.37 sec. (191.79 ticks)
Probing time = 0.31 sec. (34.87 ticks)
Clique table members: 201.
MIP emphasis: balance optimality and feasibility.
MIP search method: dynamic search.
Parallel mode: deterministic, using up to 4 threads.
Root relaxation solution time = 69.21 sec. (19360.43 ticks)

        Nodes                                         Cuts/
   Node  Left     Objective  IInf  Best Integer    Best Bound    ItCnt     Gap

      0     0    23494.4400   103                  23494.4400    29917         
*     0+    0                        36763.0000    23494.4400            36.09%
      0     0    23494.4400    91    36763.0000     Cuts: 625    40114   36.09%
      0     0    23494.4400    82    36763.0000     Cuts: 634    50183   36.09%
      0     0    23494.4400    82    36763.0000     Cuts: 701    58983   36.09%
*     0+    0                        30452.0000    23494.4400            22.85%
      0     0    23494.4400    90    30452.0000     Cuts: 632    68170   22.85%
Heuristic still looking.
Heuristic still looking.
Heuristic still looking.
*     0+    0                        25401.0000    23494.4400             7.51%
      0     2    23494.4400    90    25401.0000    23494.4400    68170    7.51%
Elapsed time = 1063.60 sec. (402510.27 ticks, tree = 0.00 MB, solutions = 3)
      1     3    23494.4400    57    25401.0000    23494.4400    73531    7.51%
      2     4    23494.4400    35    25401.0000    23494.4400    81237    7.51%
      3     5    23494.4400    72    25401.0000    23494.4400    83804    7.51%
      4     6    23494.4400    71    25401.0000    23494.4400    92035    7.51%
      5     7    23499.5600    36    25401.0000    23494.4400   100014    7.51%
      7     9    23494.4400    90    25401.0000    23494.4400   115790    7.51%
      8    10    23494.4400    40    25401.0000    23494.4400   120575    7.51%
      9    11    23524.5200    42    25401.0000    23494.4400   139024    7.51%
     11    13    23529.6400    32    25401.0000    23494.4400   148852    7.51%
     12    14    23524.5200    39    25401.0000    23494.4400   152715    7.51%
Elapsed time = 1249.83 sec. (500621.14 ticks, tree = 0.00 MB, solutions = 3)
     13    15    23494.4400    63    25401.0000    23494.4400   157176    7.51%
     14    16    23494.4400    78    25401.0000    23494.4400   164198    7.51%
     18    20    23499.5600    36    25401.0000    23494.4400   194933    7.51%
     20    22    23529.6400    34    25401.0000    23494.4400   207337    7.51%
     21    23    23524.5200    45    25401.0000    23494.4400   212454    7.51%
     22    24    23494.4400    61    25401.0000    23494.4400   219640    7.51%
     24    26    23508.0830    21    25401.0000    23494.4400   246778    7.51%
     29    31    23494.4400    67    25401.0000    23494.4400   292745    7.51%
     32    34    23513.6028    26    25401.0000    23494.4400   322177    7.51%
     35    37    23494.4400    55    25401.0000    23494.4400   346017    7.51%
Elapsed time = 1606.42 sec. (617416.52 ticks, tree = 0.00 MB, solutions = 3)
     39    41    23494.4400    51    25401.0000    23494.4400   365401    7.51%
     43    45    23494.4400    51    25401.0000    23494.4400   380486    7.51%
     44    46    23554.0000    26    25401.0000    23494.4400   389239    7.51%
     48    50    23524.9392    26    25401.0000    23494.4400   409230    7.51%
     59    61    23554.0000    24    25401.0000    23494.4400   476228    7.51%
     62    64    23598.4708    20    25401.0000    23494.4400   499866    7.51%
*    64+   64                        24843.0000    23494.4400             5.43%
*    64+   64                        24525.0000    23494.4400             4.20%
     64    66    23553.9800    21    24525.0000    23494.4400   508285    4.20%
     66    68    23496.8400    41    24525.0000    23494.4400   527563    4.20%
     70    72    23497.4309    23    24525.0000    23494.4400   546907    4.20%
     74    76    23497.4309    17    24525.0000    23494.4400   602034    4.20%
Elapsed time = 1920.38 sec. (697146.96 ticks, tree = 0.00 MB, solutions = 3)
     78    80    23497.4309    20    24525.0000    23494.4400   620291    4.20%
     81    83    23499.5600    33    24525.0000    23494.4400   643235    4.20%
     85    87    23569.4504    10    24525.0000    23494.4400   679515    4.20%
     93    95    23593.6996    13    24525.0000    23494.4400   711822    4.20%
     94    96    23631.1325    11    24525.0000    23494.4400   718958    4.20%
     97    99    23705.5800     4    24525.0000    23494.4400   734130    4.20%
     99   101    23499.5600    32    24525.0000    23494.4400   742916    4.20%
    103   105    23499.5600    43    24525.0000    23494.4400   760164    4.20%
    104   106    23732.5100    13    24525.0000    23494.4400   774137    4.20%
    108   110    23497.4309    22    24525.0000    23494.4400   789474    4.20%
Elapsed time = 2167.91 sec. (752320.30 ticks, tree = 0.14 MB, solutions = 5)
    111   113    23499.5600    37    24525.0000    23494.4400   803665    4.20%
    112   114    23602.5240    13    24525.0000    23494.4400   808860    4.20%
    116   118    23497.4309    26    24525.0000    23494.4400   830550    4.20%
    120   122    23602.5240    10    24525.0000    23494.4400   846534    4.20%
    121   123    23599.6927    10    24525.0000    23494.4400   854170    4.20%
    125   127    23809.0933     4    24525.0000    23494.4400   876766    4.20%
    152   154    23599.6927     9    24525.0000    23494.4400   980079    4.20%
    156   158    23620.0800    17    24525.0000    23494.4400   994669    4.20%
    160   162    23787.9800     7    24525.0000    23494.4400  1023201    4.20%
    164   166    23620.0800    15    24525.0000    23494.4400  1040205    4.20%
Elapsed time = 2528.36 sec. (857136.08 ticks, tree = 10.83 MB, solutions = 5)
    168   170    23620.1022    14    24525.0000    23494.4400  1049667    4.20%
    172   174    23620.1022    16    24525.0000    23494.4400  1053360    4.20%
    175   177    23707.6667    14    24525.0000    23494.4400  1064866    4.20%
    176   178    23929.7420    10    24525.0000    23494.4400  1075436    4.20%
    180   182    23620.1022     9    24525.0000    23494.4400  1093538    4.20%
    183   185    23707.6667    14    24525.0000    23494.4400  1107435    4.20%
    184   186    23620.6081    13    24525.0000    23494.4400  1111535    4.20%
    187   189    23500.0069    33    24525.0000    23494.4400  1118890    4.20%
    188   190    23824.7480     9    24525.0000    23494.4400  1127374    4.20%
    191   193    23667.4862     9    24525.0000    23494.4400  1143753    4.20%
Elapsed time = 2681.59 sec. (898117.79 ticks, tree = 10.83 MB, solutions = 5)
    195   197    23500.0069    29    24525.0000    23494.4400  1162528    4.20%
    196   198    23815.5333     8    24525.0000    23494.4400  1169154    4.20%
    199   201    23500.0069    31    24525.0000    23494.4400  1176999    4.20%
    203   205    23698.0216    15    24525.0000    23494.4400  1203069    4.20%
    211   213    23570.2650    20    24525.0000    23494.4400  1228038    4.20%
    219   221    23708.3891     7    24525.0000    23494.4400  1254957    4.20%
    220   222    23637.2600    16    24525.0000    23494.4400  1259935    4.20%
    223   225    23634.2137    13    24525.0000    23494.4400  1262895    4.20%
    226   228    23500.0069    27    24525.0000    23494.4400  1270060    4.20%
    227   229    23666.3240     4    24525.0000    23494.4400  1272058    4.20%
Elapsed time = 2805.25 sec. (939035.89 ticks, tree = 29.21 MB, solutions = 5)
    228   230    23602.9200    24    24525.0000    23494.4400  1275434    4.20%
    232   234    23575.2000    25    24525.0000    23494.4400  1283712    4.20%
    236   238    23602.9200    29    24525.0000    23494.4400  1303420    4.20%
    240   242    23578.6509    25    24525.0000    23494.4400  1314488    4.20%
    244   246    23804.5829    17    24525.0000    23494.4400  1326960    4.20%
    248   250    23587.9941    27    24525.0000    23494.4400  1339385    4.20%
    252   254    23767.4780    22    24525.0000    23494.4400  1352058    4.20%
    256   258    23587.9941    28    24525.0000    23494.4400  1360158    4.20%
    260   262    23847.6533    11    24525.0000    23494.4400  1375532    4.20%
*   263+  263                        24201.0000    23494.4400             2.92%
    321   322    23587.9941    28    24201.0000    23494.4400  1499046    2.92%
Elapsed time = 3109.69 sec. (1028096.32 ticks, tree = 69.17 MB, solutions = 6)
    322   323    23730.3492    10    24201.0000    23494.4400  1501290    2.92%
    323   324    23501.0215    34    24201.0000    23494.4400  1503357    2.92%
    327   328    23672.4862    10    24201.0000    23494.4400  1517344    2.92%
    331   332    23501.0215    30    24201.0000    23494.4400  1528406    2.92%
    333   334    23592.2782    24    24201.0000    23494.4400  1534863    2.92%
    335   336    23501.0215    33    24201.0000    23494.4400  1536040    2.92%
    337   338    23592.2782    19    24201.0000    23494.4400  1539262    2.92%
    339   340    23803.4320    16    24201.0000    23494.4400  1548416    2.92%
    341   342    23597.2850    20    24201.0000    23494.4400  1553317    2.92%
    345   346    23840.6833    10    24201.0000    23494.4400  1563219    2.92%
Elapsed time = 3251.14 sec. (1066950.18 ticks, tree = 69.17 MB, solutions = 6)
    349   350    23611.3300    21    24201.0000    23494.4400  1574298    2.92%
    353   354    23718.0400    10    24201.0000    23494.4400  1579388    2.92%
    357   358    23611.3300    24    24201.0000    23494.4400  1583973    2.92%
    361   362    23647.8927    17    24201.0000    23494.4400  1591898    2.92%
    365   366    23611.3300    22    24201.0000    23494.4400  1603897    2.92%
    369   370    23611.3300    23    24201.0000    23494.4400  1609235    2.92%
    373   374    23647.8927    13    24201.0000    23494.4400  1618472    2.92%
    377   378    23647.8927    14    24201.0000    23494.4400  1626478    2.92%
    379   380    23501.0215    37    24201.0000    23494.4400  1629970    2.92%
    383   384    23501.0215    29    24201.0000    23494.4400  1635432    2.92%
Elapsed time = 3425.70 sec. (1120924.11 ticks, tree = 69.17 MB, solutions = 6)
    450   451    23880.7891     9    24201.0000    23494.4400  1749524    2.92%
    453   454    23717.0606     8    24201.0000    23494.4400  1756767    2.92%
    457   458    23890.1667     4    24201.0000    23494.4400  1765508    2.92%
    472   473    23700.0775    19    24201.0000    23494.4400  1801908    2.92%
    476   477    23501.0215    26    24201.0000    23494.4400  1805175    2.92%
    480   481    23501.0215    29    24201.0000    23494.4400  1808040    2.92%
    484   485    23602.5240    15    24201.0000    23494.4400  1816429    2.92%
*   589   579      integral     0    24199.0000    23494.4400  1936109    2.91%
    618   588    23891.8800     8    24199.0000    23494.4400  1952384    2.91%
    624   594    23700.0775    16    24199.0000    23494.4400  1960233    2.91%
    628   598    23501.0215    25    24199.0000    23494.4400  1966517    2.91%
Elapsed time = 3765.28 sec. (1221298.25 ticks, tree = 172.57 MB, solutions = 7)
    636   606    23501.0215    25    24199.0000    23494.4400  1975940    2.91%
    640   610    23508.5682    22    24199.0000    23494.4400  1980900    2.91%
    644   614    23697.2692    16    24199.0000    23494.4400  1997348    2.91%
    648   618    23511.1200    23    24199.0000    23494.4400  2001017    2.91%
    652   622    23895.1543    13    24199.0000    23494.4400  2007520    2.91%
    656   626    23511.1200    18    24199.0000    23494.4400  2012101    2.91%
    660   630    23512.2057    17    24199.0000    23494.4400  2020356    2.91%
    664   634    23516.4620    16    24199.0000    23494.4400  2027336    2.91%
    668   636    23686.2650     9    24199.0000    23494.4400  2042527    2.91%
    801   732    23724.8742     7    24199.0000    23494.4400  2132081    2.91%
Elapsed time = 4018.71 sec. (1300290.15 ticks, tree = 172.57 MB, solutions = 7)
    870   775    24158.7333     2    24199.0000    23494.4400  2169108    2.91%
    873   778    23524.9238    19    24199.0000    23494.4400  2173724    2.91%
    877   778    23555.1628    11    24199.0000    23494.4400  2180868    2.91%
    881   782    23532.2276    20    24199.0000    23494.4400  2183810    2.91%
    885   786    23822.6884    14    24199.0000    23494.4400  2193278    2.91%
    889   788    23532.2276    22    24199.0000    23494.4400  2196867    2.91%
    893   792    23602.5240    13    24199.0000    23494.4400  2205185    2.91%
    897   796    23532.6257    19    24199.0000    23494.4400  2212431    2.91%
    901   798    23532.6257    22    24199.0000    23494.4400  2215286    2.91%
    905   801    23818.6000    15    24199.0000    23494.4400  2226706    2.91%
Elapsed time = 4287.04 sec. (1380459.56 ticks, tree = 243.69 MB, solutions = 7)
    909   805    23532.6257    20    24199.0000    23494.4400  2231423    2.91%
   1144   982    23532.6257    15    24199.0000    23494.4400  2381228    2.91%
   1152   986    23663.0720     9    24199.0000    23494.4400  2397042    2.91%
   1156   990    23539.8703    18    24199.0000    23494.4400  2418001    2.91%
   1160   994    23657.1419     7    24199.0000    23494.4400  2428368    2.91%
   1168  1000    23544.0000    20    24199.0000    23494.4400  2438203    2.91%
   1172  1002    23818.9600    12    24199.0000    23494.4400  2445289    2.91%
   1180  1008    23544.2726    25    24199.0000    23494.4400  2449698    2.91%
   1184  1012    23671.1143     8    24199.0000    23494.4400  2454050    2.91%
   1196  1020    23602.5240    10    24199.0000    23494.4400  2469626    2.91%
Elapsed time = 4452.98 sec. (1461995.66 ticks, tree = 323.92 MB, solutions = 7)
   1204  1027    23544.2726    24    24199.0000    23494.4400  2478892    2.91%
   1208  1029    23602.5240    11    24199.0000    23494.4400  2487518    2.91%
   1221  1037    23544.3208    22    24199.0000    23494.4400  2499706    2.91%
   1229  1045    23544.4219    23    24199.0000    23494.4400  2503455    2.91%
   1233  1049    23715.1709     9    24199.0000    23494.4400  2510550    2.91%
   1237  1053    23544.5829    27    24199.0000    23494.4400  2517910    2.91%
   1241  1057    23813.8218    15    24199.0000    23494.4400  2523932    2.91%
   1249  1061    23792.2618     7    24199.0000    23494.4400  2535213    2.91%
   1257  1069    23602.5240     9    24199.0000    23494.4400  2543975    2.91%
   1261  1073    23604.0788    15    24199.0000    23494.4400  2548412    2.91%
Elapsed time = 4615.38 sec. (1516801.78 ticks, tree = 342.90 MB, solutions = 7)
   1269  1077    23611.1200    18    24199.0000    23494.4400  2563840    2.91%
   1277  1083    23637.1200    12    24199.0000    23494.4400  2576118    2.91%
   1281  1083    24010.1550    15    24199.0000    23494.4400  2582790    2.91%
   1293  1091    23637.1200    16    24199.0000    23494.4400  2595822    2.91%
   1415  1193    24088.3543     3    24199.0000    23494.4400  2686245    2.91%
*  1498  1257      integral     0    24149.0000    23494.4400  2744678    2.71%
   1502  1261    24088.6267     3    24149.0000    23494.4400  2746554    2.71%
   1507  1264    23777.0816    11    24149.0000    23494.4400  2759233    2.71%
   1515  1272    23649.4229    16    24149.0000    23494.4400  2768140    2.71%
   1516  1273    23850.3333     2    24149.0000    23494.4400  2772714    2.71%
   1535  1288    23930.3600    12    24149.0000    23494.4400  2791774    2.71%
Elapsed time = 4849.83 sec. (1588993.09 ticks, tree = 429.51 MB, solutions = 7)
   1540  1293    23740.7631     5    24149.0000    23494.4400  2799029    2.71%
   1554  1305    24106.2540     4    24149.0000    23494.4400  2821765    2.71%
   1558  1309    24137.0800     1    24149.0000    23494.4400  2835515    2.71%
   1566  1316    24129.2100     3    24149.0000    23494.4400  2845690    2.71%
   1567  1317    23658.4709    12    24149.0000    23494.4400  2845889    2.71%
   1578  1322    23494.4400    70    24149.0000    23494.4400  2860962    2.71%
   1582  1326    23494.4400    73    24149.0000    23494.4400  2865701    2.71%
   1586  1330    23524.5200    41    24149.0000    23494.4400  2877235    2.71%
   1746  1350    23524.5200    46    24149.0000    23494.4400  2985262    2.71%
   1750  1354    23529.6400    30    24149.0000    23494.4400  2989784    2.71%
Elapsed time = 5109.55 sec. (1667400.29 ticks, tree = 461.37 MB, solutions = 8)
   1754  1358    23529.6400    35    24149.0000    23494.4400  2994527    2.71%
   1758  1360    23676.5800    11    24149.0000    23494.4400  3001949    2.71%
   1762  1364    23529.6400    36    24149.0000    23494.4400  3006647    2.71%
   1766  1368    23724.4000    20    24149.0000    23494.4400  3017512    2.71%
   1770  1372    23547.2800    41    24149.0000    23494.4400  3026394    2.71%
   1774  1376    23725.0225    14    24149.0000    23494.4400  3034446    2.71%
   1778  1380    23547.2800    39    24149.0000    23494.4400  3040830    2.71%
   1786  1388    23608.7141    16    24149.0000    23494.4400  3051333    2.71%
   1790  1390    23618.0736    18    24149.0000    23494.4400  3054861    2.71%
   1798  1398    23634.9275    22    24149.0000    23494.4400  3064645    2.71%
Elapsed time = 5370.40 sec. (1743292.74 ticks, tree = 461.37 MB, solutions = 8)
   1802  1402    23803.6027    15    24149.0000    23494.4400  3076370    2.71%
   2090  1612    23635.7503    22    24149.0000    23494.4400  3249110    2.71%
   2098  1620    23635.7503    25    24149.0000    23494.4400  3258610    2.71%
   2102  1624    24113.5800    14    24149.0000    23494.4400  3263832    2.71%
   2106  1628    23636.3760    16    24149.0000    23494.4400  3274544    2.71%
   2114  1635    24113.5800    11    24149.0000    23494.4400  3283208    2.71%
   2122  1641    24113.5800    12    24149.0000    23494.4400  3296199    2.71%
   2138  1655    24113.5800    13    24149.0000    23494.4400  3317778    2.71%
   2146  1661    24113.5800    10    24149.0000    23494.4400  3330632    2.71%
   2162  1677    23758.4975    10    24149.0000    23494.4400  3352796    2.71%
Elapsed time = 5654.81 sec. (1830296.56 ticks, tree = 559.94 MB, solutions = 8)
   2170  1683    23637.2124    24    24149.0000    23494.4400  3359534    2.71%
   2182  1693    24129.6800    16    24149.0000    23494.4400  3376164    2.71%
   2194  1703    24129.6800    13    24149.0000    23494.4400  3388442    2.71%
*  2312+ 1797                        24139.0000    23494.4400             2.67%
*  2634+ 1970                        24111.0000    23494.4400             2.56%
   2634  1972    23771.0357     9    24111.0000    23494.4400  3550864    2.56%
*  2636+ 1972                        24092.0000    23494.4400             2.48%
   2636  1974    23637.2124    25    24092.0000    23494.4400  3551429    2.48%

Flow cuts applied:  354
Mixed integer rounding cuts applied:  627

Root node processing (before b&c):
  Real time             = 1063.08 sec. (402074.75 ticks)
Parallel b&c, 4 threads:
  Real time             = 6136.98 sec. (2094289.78 ticks)
  Sync time (average)   =  529.87 sec.
  Wait time (average)   =  530.02 sec.
                          ------------
Total (root+branch&cut) = 7200.06 sec. (2496364.53 ticks)
optimal objective= 24092.0

artificial: false edgeIndexset: [640, 641, 770, 771, 711, 423, 679, 202, 555, 587, 459, 492, 432, 786, 407, 95] start node= 1 start time= 39 capacity type= 2 edgeSet: [640, 641, 770, 771, 711, 423, 679, 202, 555, 587, 459, 492, 432, 786, 407, 95] ifChargeSet: [786, 770, 771, 711]
(1,0)->(1,1)->(1,2)->(2,7)->(4,10)->(4,11)->(4,12)->(0,15)->(3,19)->(2,23)->(4,26)->(4,27)->(2,31)->(2,32)->(4,35)->(1,39)->(1,0):1

artificial: false edgeIndexset: [608, 674, 323, 620, 335, 49, 693, 694, 599, 345, 315, 61, 30] start node= 1 start time= 34 capacity type= 2 edgeSet: [608, 674, 323, 620, 335, 49, 693, 694, 599, 345, 315, 61, 30] ifChargeSet: [608, 693, 694, 620]
(2,3)->(0,8)->(0,9)->(2,13)->(2,14)->(2,15)->(0,20)->(0,21)->(2,25)->(0,30)->(1,34)->(1,35)->(4,39)->(2,3):1

artificial: false edgeIndexset: [32, 165, 615, 616, 8, 521, 172, 145, 17, 788, 661, 182, 760, 316, 509] start node= 4 start time= 0 capacity type= 2 edgeSet: [32, 165, 615, 616, 8, 521, 172, 145, 17, 788, 661, 182, 760, 316, 509] ifChargeSet: [788, 661, 615, 616]
(4,0)->(4,1)->(1,5)->(0,8)->(1,12)->(0,15)->(0,16)->(0,17)->(1,21)->(1,22)->(0,25)->(4,28)->(4,29)->(0,32)->(1,36)->(4,0):1

artificial: false edgeIndexset: [355, 387, 714, 495, 18, 691, 83, 470, 600, 601, 602, 412, 222, 447] start node= 1 start time= 22 capacity type= 2 edgeSet: [355, 387, 714, 495, 18, 691, 83, 470, 600, 601, 602, 412, 222, 447] ifChargeSet: [691, 601, 602, 714]
(0,0)->(0,1)->(0,2)->(0,3)->(3,7)->(2,11)->(2,12)->(4,15)->(0,18)->(1,22)->(2,27)->(3,30)->(2,34)->(2,35)->(0,0):1

artificial: false edgeIndexset: [480, 421, 489, 12, 716, 108, 627, 437, 472, 504, 216, 603, 604, 605, 126] start node= 1 start time= 16 capacity type= 2 edgeSet: [480, 421, 489, 12, 716, 108, 627, 437, 472, 504, 216, 603, 604, 605, 126] ifChargeSet: [627, 604, 716, 605]
(4,0)->(0,3)->(0,4)->(0,5)->(0,6)->(4,9)->(0,12)->(1,16)->(2,21)->(4,24)->(0,27)->(0,28)->(3,32)->(2,36)->(2,37)->(4,0):1

artificial: false edgeIndexset: [526, 271, 625, 626, 210, 403, 756, 757, 758, 182, 538, 27, 479, 415] start node= 1 start time= 10 capacity type= 2 edgeSet: [526, 271, 625, 626, 210, 403, 756, 757, 758, 182, 538, 27, 479, 415] ifChargeSet: [625, 626, 757, 758]
(2,3)->(4,6)->(1,10)->(2,15)->(4,18)->(1,22)->(0,25)->(0,26)->(0,27)->(1,31)->(3,36)->(3,37)->(3,38)->(3,39)->(2,3):1

artificial: false edgeIndexset: [737, 450, 709, 710, 391, 458, 366, 465, 754, 562, 374, 439, 729, 475, 382] start node= 4 start time= 2 capacity type= 2 edgeSet: [737, 450, 709, 710, 391, 458, 366, 465, 754, 562, 374, 439, 729, 475, 382] ifChargeSet: [737, 754, 710, 729]
(4,2)->(2,6)->(3,9)->(3,10)->(2,14)->(3,17)->(3,18)->(2,22)->(3,25)->(2,29)->(2,30)->(2,31)->(3,34)->(3,35)->(2,39)->(4,2):1

Total time= 7807533
Solve for test7_5_15_50_400A.txt
number of service arcs=750
number of holding arcs=250

Time of first LP solve= 716161

There are 3693 columns added to the model.

Tried aggregator 2 times.
MIP Presolve eliminated 13771 rows and 31 columns.
MIP Presolve modified 23 coefficients.
Aggregator did 2185 substitutions.
Reduced MIP has 85309 rows, 323564 columns, and 1002496 nonzeros.
Reduced MIP has 3677 binaries, 0 generals, 0 SOSs, and 0 indicators.
Presolve time = 0.91 sec. (602.96 ticks)
Probing time = 1.56 sec. (99.89 ticks)
Tried aggregator 1 time.
MIP Presolve eliminated 1458 rows and 5554 columns.
Reduced MIP has 83851 rows, 318010 columns, and 986040 nonzeros.
Reduced MIP has 3677 binaries, 0 generals, 0 SOSs, and 0 indicators.
Presolve time = 1.11 sec. (449.78 ticks)
Probing time = 0.90 sec. (93.85 ticks)
Clique table members: 238.
MIP emphasis: balance optimality and feasibility.
MIP search method: dynamic search.
Parallel mode: deterministic, using up to 4 threads.
Root relaxation solution time = 322.38 sec. (85325.21 ticks)

        Nodes                                         Cuts/
   Node  Left     Objective  IInf  Best Integer    Best Bound    ItCnt     Gap

      0     0    46733.4384    78                  46733.4384    66664         
      0     0    46733.4384    87                  Cuts: 1219    83315         
      0     0    46733.4384    86                  Cuts: 1147    99816         
Heuristic still looking.
Heuristic still looking.
Heuristic still looking.
      0     2    46733.4384    86                  46733.4384    99816         
Elapsed time = 1771.55 sec. (479925.50 ticks, tree = 0.00 MB, solutions = 0)
      1     3    46736.1575    82                  46733.4384   128498         
      2     4    46758.9315    76                  46733.4384   156672         
      3     5    46736.1575    78                  46736.1575   175760         
      4     6    46772.1093    78                  46736.1575   200371         
      5     7    46758.9315    77                  46736.1575   224922         
      6     8    46823.2112    52                  46736.1575   252852         
      7     9    46758.9315    95                  46736.1575   274080         
      8    10    46758.9315    45                  46736.1575   397422         
      9    11    46736.1575    88                  46736.1575   554672         
     10    12    46832.3932    62                  46736.1575  1109505         
Elapsed time = 4020.31 sec. (1257131.97 ticks, tree = 0.00 MB, solutions = 0)
     12    14    46808.4319    77                  46736.1575  2010066         
     13    15    46736.1575    66                  46736.1575  2092423         
     14    16    46762.8171    54                  46736.1575  2173460         
     15    17    46747.2742    44                  46736.1575  2186259         
     16    18    46853.5175    44                  46736.1575  2203468         
     17    19    46771.3170    37                  46736.1575  2226685         
     19    21    46747.9487    53                  46736.1575  2269311         
     21    23    46783.5050    58                  46736.1575  2326106         
     22    24    46830.5828    63                  46736.1575  2366123         
     23    25    46773.9550    44                  46736.1575  2436752         
Elapsed time = 5932.53 sec. (1876812.53 ticks, tree = 0.00 MB, solutions = 0)
     24    26    46922.0787    36                  46736.1575  2523893         
     26    28    46830.5828    41                  46736.1575  2646821         
     27    29    46747.9487    56                  46736.1575  2668651         
     28    30    46932.3588    52                  46736.1575  2699578         
     30    32    46830.5828    47                  46736.1575  2836229         
     31    33    46748.0119    45                  46736.1575  2866119         
     33    35    46764.5041    42                  46736.1575  2935774         

Implied bound cuts applied:  9
Flow cuts applied:  226
Mixed integer rounding cuts applied:  616
Gomory fractional cuts applied:  3

Root node processing (before b&c):
  Real time             = 1769.03 sec. (479000.41 ticks)
Parallel b&c, 4 threads:
  Real time             = 5431.18 sec. (1649709.34 ticks)
  Sync time (average)   = 1185.26 sec.
  Wait time (average)   = 1185.33 sec.
                          ------------
Total (root+branch&cut) = 7200.22 sec. (2128709.75 ticks)
Exception in thread "main" ilog.cplex.CpxException: CPLEX Error  1217: No solution exists.

	at ilog.cplex.CplexI.CALL(CplexI.java:4714)
	at ilog.cplex.CplexI._getObjValue(CplexI.java:5983)
	at ilog.cplex.CplexI.getObjValue(CplexI.java:3114)
	at ilog.cplex.IloCplex.getObjValue(IloCplex.java:5309)
	at bap.primalHeuristic.ColumnGenerationBasedHeuristic.Solve(ColumnGenerationBasedHeuristic.java:427)
	at bap.primalHeuristic.ColumnGenerationBasedHeuristic.main(ColumnGenerationBasedHeuristic.java:571)
Solve for test7_5_15_50_400B.txt
number of service arcs=750
number of holding arcs=250

Time of first LP solve= 787597

There are 5248 columns added to the model.

Tried aggregator 2 times.
MIP Presolve eliminated 16502 rows and 31 columns.
Aggregator did 2458 substitutions.
Reduced MIP has 82305 rows, 307962 columns, and 960294 nonzeros.
Reduced MIP has 5232 binaries, 0 generals, 0 SOSs, and 0 indicators.
Presolve time = 0.74 sec. (463.72 ticks)
Probing time = 0.21 sec. (55.15 ticks)
Tried aggregator 1 time.
MIP Presolve eliminated 1832 rows and 6890 columns.
Reduced MIP has 80473 rows, 301072 columns, and 939884 nonzeros.
Reduced MIP has 5232 binaries, 0 generals, 0 SOSs, and 0 indicators.
Presolve time = 0.97 sec. (414.75 ticks)
Probing time = 0.48 sec. (69.17 ticks)
Clique table members: 251.
MIP emphasis: balance optimality and feasibility.
MIP search method: dynamic search.
Parallel mode: deterministic, using up to 4 threads.
Root relaxation solution time = 305.12 sec. (82532.00 ticks)

        Nodes                                         Cuts/
   Node  Left     Objective  IInf  Best Integer    Best Bound    ItCnt     Gap

      0     0    57963.0384   138                  57963.0384       77         
      0     0    57963.0384   136                   Cuts: 970    27610         
      0     0    57963.0384   140                   Cuts: 961    55936         
      0     0    57963.0384   153                   Cuts: 931    84372         
Heuristic still looking.
Heuristic still looking.
Heuristic still looking.
      0     2    57963.0384   153                  57963.0384    84372         
Elapsed time = 5525.76 sec. (1256683.80 ticks, tree = 0.00 MB, solutions = 0)
      1     3    57963.0384   154                  57963.0384   156528         
      2     4    57963.0384   158                  57963.0384   203614         

Flow cuts applied:  157
Mixed integer rounding cuts applied:  317
Gomory fractional cuts applied:  1

Root node processing (before b&c):
  Real time             = 5525.42 sec. (1256446.08 ticks)
Parallel b&c, 4 threads:
  Real time             = 1674.72 sec. (729500.08 ticks)
  Sync time (average)   =  981.97 sec.
  Wait time (average)   =  982.00 sec.
                          ------------
Total (root+branch&cut) = 7200.13 sec. (1985946.16 ticks)
Exception in thread "main" ilog.cplex.CpxException: CPLEX Error  1217: No solution exists.

	at ilog.cplex.CplexI.CALL(CplexI.java:4714)
	at ilog.cplex.CplexI._getObjValue(CplexI.java:5983)
	at ilog.cplex.CplexI.getObjValue(CplexI.java:3114)
	at ilog.cplex.IloCplex.getObjValue(IloCplex.java:5309)
	at bap.primalHeuristic.ColumnGenerationBasedHeuristic.Solve(ColumnGenerationBasedHeuristic.java:427)
	at bap.primalHeuristic.ColumnGenerationBasedHeuristic.main(ColumnGenerationBasedHeuristic.java:571)
Solve for test8_7_30_30_200A.txt
number of service arcs=900
number of holding arcs=210

Time of first LP solve= 317363

There are 5934 columns added to the model.

Tried aggregator 2 times.
MIP Presolve eliminated 18185 rows and 43 columns.
Aggregator did 1954 substitutions.
Reduced MIP has 23202 rows, 92712 columns, and 290307 nonzeros.
Reduced MIP has 1020 binaries, 4892 generals, 0 SOSs, and 0 indicators.
Presolve time = 0.20 sec. (141.90 ticks)
Found incumbent of value 1.0013929e+08 after 0.57 sec. (328.18 ticks)
Probing time = 0.13 sec. (20.53 ticks)
Tried aggregator 1 time.
MIP Presolve eliminated 338 rows and 1334 columns.
Reduced MIP has 22864 rows, 91378 columns, and 286284 nonzeros.
Reduced MIP has 1020 binaries, 4892 generals, 0 SOSs, and 0 indicators.
Presolve time = 0.24 sec. (117.64 ticks)
Probing time = 0.14 sec. (26.32 ticks)
Clique table members: 1.
MIP emphasis: balance optimality and feasibility.
MIP search method: dynamic search.
Parallel mode: deterministic, using up to 4 threads.
Root relaxation solution time = 28.42 sec. (12627.51 ticks)

        Nodes                                         Cuts/
   Node  Left     Objective  IInf  Best Integer    Best Bound    ItCnt     Gap

*     0+    0                       1.00139e+08    -5629.0000           100.01%
*     0+    0                        63521.0000    -5629.0000           108.86%
*     0+    0                        54767.0000    -5629.0000           110.28%
*     0+    0                        53181.0000    -5629.0000           110.58%
*     0+    0                        52923.0000    -5629.0000           110.64%
*     0+    0                        52349.0000    -5629.0000           110.75%
*     0+    0                        52245.0000    -5629.0000           110.77%
      0     0    43439.4400   146    52245.0000    43439.4400    31661   16.85%
*     0+    0                        49999.0000    43439.4400            13.12%
      0     0    43439.4400   124    49999.0000    Cuts: 1007    41748   13.12%
      0     0    43439.4400   126    49999.0000    Cuts: 1042    50871   13.12%
      0     0    43439.4400   126    49999.0000 MIRcuts: 1045    59974   13.12%
*     0+    0                        48844.0000    43439.4400            11.06%
Heuristic still looking.
Heuristic still looking.
      0     2    43439.4400   126    48844.0000    43439.4400    59974   11.06%
Elapsed time = 200.70 sec. (103135.53 ticks, tree = 0.00 MB, solutions = 8)
      1     3    43439.4400   117    48844.0000    43439.4400    78278   11.06%
      2     4    43439.4400   114    48844.0000    43439.4400    85803   11.06%
      3     5    43543.7400   110    48844.0000    43439.4400   101963   11.06%
      4     6    43543.7400   107    48844.0000    43439.4400   108471   11.06%
      5     7    43439.4400   129    48844.0000    43439.4400   112877   11.06%
      6     8    43543.7400   116    48844.0000    43439.4400   118919   11.06%
      7     9    43645.8114   120    48844.0000    43439.4400   125684   11.06%
     11    13    43439.4400   115    48844.0000    43439.4400   232121   11.06%
     12    14    43543.9600    92    48844.0000    43439.4400   265996   11.06%
     14    16    43439.4400   119    48844.0000    43439.4400   324883   11.06%
Elapsed time = 476.28 sec. (228726.26 ticks, tree = 0.00 MB, solutions = 8)
     16    18    43439.4400   109    48844.0000    43439.4400   338692   11.06%
     17    19    43543.9600    80    48844.0000    43439.4400   349416   11.06%
     24    26    43645.8114   106    48844.0000    43439.4400   438650   11.06%
     25    27    43439.4400   138    48844.0000    43439.4400   485667   11.06%
     26    28    43543.9600    93    48844.0000    43439.4400   538399   11.06%
     27    29    43672.1600    99    48844.0000    43439.4400   653085   11.06%
     30    32    43550.0800    72    48844.0000    43439.4400   731918   11.06%
     31    33    43672.1600    98    48844.0000    43439.4400   735021   11.06%
     33    35    43439.4400   107    48844.0000    43439.4400   746358   11.06%
     41    43    43457.7800    82    48844.0000    43439.4400   856430   11.06%
Elapsed time = 805.84 sec. (337713.27 ticks, tree = 0.00 MB, solutions = 8)
     42    44    43558.4400    73    48844.0000    43439.4400   901131   11.06%
     46    48    43550.0800    81    48844.0000    43439.4400   939355   11.06%
     50    52    43556.0800    74    48844.0000    43439.4400  1010448   11.06%
     62    64    43459.7000    98    48844.0000    43439.4400  1171263   11.06%
     71    73    43457.7800   104    48844.0000    43439.4400  1255921   11.06%
     75    77    43530.0880    78    48844.0000    43439.4400  1286446   11.06%
     79    81    43457.7800    95    48844.0000    43439.4400  1340865   11.06%
     99   101    43465.3832    75    48844.0000    43439.4400  1485654   11.06%
    101   103    43457.7800    88    48844.0000    43439.4400  1496490   11.06%
    105   107    43457.7800    93    48844.0000    43439.4400  1516069   11.06%
Elapsed time = 1373.19 sec. (493802.96 ticks, tree = 0.83 MB, solutions = 8)
    106   108    43559.9200    67    48844.0000    43439.4400  1522227   11.06%
    107   109    43723.9900    62    48844.0000    43439.4400  1530702   11.06%
    109   111    43460.6200    77    48844.0000    43439.4400  1546779   11.06%
    111   113    43723.9900    60    48844.0000    43439.4400  1561477   11.06%
    113   115    43460.6200    72    48844.0000    43439.4400  1574482   11.06%
    115   117    43723.9900    61    48844.0000    43439.4400  1586808   11.06%
    117   119    43466.3832    73    48844.0000    43439.4400  1597931   11.06%
    118   120    43559.9200    57    48844.0000    43439.4400  1605324   11.06%
    122   124    43559.9200    58    48844.0000    43439.4400  1637654   11.06%
    126   128    43570.4200    53    48844.0000    43439.4400  1664290   11.06%
Elapsed time = 1622.54 sec. (550444.84 ticks, tree = 0.83 MB, solutions = 8)
    130   132    43570.4200    56    48844.0000    43439.4400  1683031   11.06%
    132   134    43469.6600    79    48844.0000    43439.4400  1698150   11.06%
    136   138    43571.2600    69    48844.0000    43439.4400  1726707   11.06%
*   137+  137                        46573.0000    43439.4400             6.73%
    137   139    43617.7600    68    46573.0000    43439.4400  1731702    6.73%
    145   147    43729.3300    64    46573.0000    43439.4400  1783219    6.73%
    152   154    43466.3832    79    46573.0000    43439.4400  1823234    6.73%
    154   156    43765.7000    51    46573.0000    43439.4400  1837871    6.73%
    158   160    43765.7000    60    46573.0000    43439.4400  1861007    6.73%
    162   164    43775.0656    49    46573.0000    43439.4400  1893242    6.73%
    166   168    43777.7322    55    46573.0000    43439.4400  1917259    6.73%
Elapsed time = 1879.67 sec. (612277.14 ticks, tree = 4.63 MB, solutions = 9)
    167   169    43569.2600    65    46573.0000    43439.4400  1925784    6.73%
    170   172    43847.8550    46    46573.0000    43439.4400  1950540    6.73%
    174   176    43777.7322    58    46573.0000    43439.4400  1974918    6.73%
    175   177    43574.2333    83    46573.0000    43439.4400  1986041    6.73%
    231   233    43525.6262    76    46573.0000    43439.4400  2364745    6.73%
    233   235    43884.3400    31    46573.0000    43439.4400  2380828    6.73%
    237   239    43884.3400    31    46573.0000    43439.4400  2404310    6.73%
    241   243    43884.3400    32    46573.0000    43439.4400  2430896    6.73%
    245   247    44111.3200    24    46573.0000    43439.4400  2457724    6.73%
    249   251    43884.3400    33    46573.0000    43439.4400  2481644    6.73%
Elapsed time = 2506.81 sec. (789302.41 ticks, tree = 7.37 MB, solutions = 9)
    253   255    43956.0160    23    46573.0000    43439.4400  2514257    6.73%
    257   259    43956.0160    23    46573.0000    43439.4400  2542057    6.73%
    261   263    43956.0160    23    46573.0000    43439.4400  2563549    6.73%
    265   267    43956.0160    23    46573.0000    43439.4400  2594811    6.73%
    269   271    43956.0160    22    46573.0000    43439.4400  2614570    6.73%
    288   290    43538.2600    73    46573.0000    43439.4400  2754801    6.73%
    314   316    43525.6262    79    46573.0000    43439.4400  2882340    6.73%
    317   319    43538.2600    76    46573.0000    43439.4400  2896985    6.73%
    318   320    43670.1800    74    46573.0000    43439.4400  2905796    6.73%
    321   323    43697.3900    69    46573.0000    43439.4400  2924938    6.73%
Elapsed time = 2688.47 sec. (823512.35 ticks, tree = 9.56 MB, solutions = 9)
    325   327    43538.2600    72    46573.0000    43439.4400  2949910    6.73%
    329   331    43538.2600    72    46573.0000    43439.4400  2972948    6.73%
    333   335    43538.2600    68    46573.0000    43439.4400  3000513    6.73%
    337   339    43538.2600    68    46573.0000    43439.4400  3033469    6.73%
    341   343    43539.4900    71    46573.0000    43439.4400  3061251    6.73%
    345   347    43697.3900    63    46573.0000    43439.4400  3087020    6.73%
    349   351    43545.6551    71    46573.0000    43439.4400  3117495    6.73%
    353   355    43778.1200    71    46573.0000    43439.4400  3144558    6.73%
*   361+  361                        45244.0000    43439.4400             3.99%
    417   419    43662.8811    59    45244.0000    43439.4400  3474853    3.99%
    498   500    43662.8811    57    45244.0000    43439.4400  3967684    3.99%
Elapsed time = 3473.70 sec. (999406.55 ticks, tree = 14.59 MB, solutions = 10)
    500   502    44044.8520    23    45244.0000    43439.4400  3981637    3.99%
    502   504    43662.8811    59    45244.0000    43439.4400  3996164    3.99%
    504   506    44094.6933    11    45244.0000    43439.4400  4005425    3.99%
    506   508    43692.4811    49    45244.0000    43439.4400  4019547    3.99%
*   508+  508                        45210.0000    43439.4400             3.92%
    508   510    44103.1280    14    45210.0000    43439.4400  4027790    3.92%
    510   512    43692.4811    54    45210.0000    43439.4400  4045777    3.92%
    514   516    43732.6561    44    45210.0000    43439.4400  4069751    3.92%
    518   520    43738.6011    44    45210.0000    43439.4400  4092546    3.92%
    521   523    43590.6400    55    45210.0000    43439.4400  4109487    3.92%
    522   524    43858.7800    51    45210.0000    43439.4400  4121358    3.92%
Elapsed time = 3615.38 sec. (1028532.93 ticks, tree = 14.59 MB, solutions = 10)
    526   528    43739.3200    42    45210.0000    43439.4400  4137181    3.92%
    530   532    43739.3200    41    45210.0000    43439.4400  4165780    3.92%
    534   536    43739.3200    44    45210.0000    43439.4400  4191771    3.92%
    537   539    43620.3300    55    45210.0000    43439.4400  4213015    3.92%
    538   540    43739.3200    42    45210.0000    43439.4400  4228197    3.92%
    542   544    43739.3200    44    45210.0000    43439.4400  4251884    3.92%
    546   548    43740.5200    31    45210.0000    43439.4400  4290361    3.92%
    550   552    43743.0800    39    45210.0000    43439.4400  4309885    3.92%
    554   556    43944.8320    36    45210.0000    43439.4400  4331456    3.92%
    560   562    43719.9200    38    45210.0000    43439.4400  4390079    3.92%
Elapsed time = 3864.68 sec. (1097611.15 ticks, tree = 14.59 MB, solutions = 10)
    628   630    43743.0800    35    45210.0000    43439.4400  4650432    3.92%
    631   633    43620.8517    57    45210.0000    43439.4400  4663707    3.92%
    635   637    43719.9200    48    45210.0000    43439.4400  4694010    3.92%
    639   641    43620.8517    57    45210.0000    43439.4400  4708761    3.92%
    644   646    43749.0000    30    45210.0000    43439.4400  4736433    3.92%
    648   650    43752.7715    31    45210.0000    43439.4400  4761977    3.92%
    652   654    43882.5200    33    45210.0000    43439.4400  4784320    3.92%
*  1168+ 1168                        45071.0000    43439.4400             3.62%
*  1168+ 1168                        45068.0000    43439.4400             3.61%
*  1168+ 1168                        45044.0000    43439.4400             3.56%
*  1168+ 1168                        44991.0000    43439.4400             3.45%
*  1168+ 1168                        44959.0000    43439.4400             3.38%
   1168  1170    43911.0600    27    44959.0000    43439.4400  5436705    3.38%
*  1169+ 1169                        44803.0000    43439.4400             3.04%
*  1169+ 1169                        44583.0000    43439.4400             2.57%
*  1169+ 1169                        44461.0000    43439.4400             2.30%
   1171  1173    43734.2200    39    44461.0000    43439.4400  5457682    2.30%
   1172  1066    43443.2733   130    44461.0000    43443.2733  5576400    2.29%
Elapsed time = 5412.49 sec. (1693523.62 ticks, tree = 37.92 MB, solutions = 23)
   1173  1067    43443.2733   111    44461.0000    43443.2733  5594621    2.29%
*  1174+  711                        44436.0000    43443.2733             2.23%
   1174   713    43443.2733   109    44436.0000    43443.2733  5603423    2.23%
   1175   714    43533.2533   116    44436.0000    43443.2733  5611090    2.23%
   1176   715    43533.2533   116    44436.0000    43443.2733  5619386    2.23%
   1177   716    43443.2733   119    44436.0000    43443.2733  5621230    2.23%
   1178   717    43533.2533   124    44436.0000    43443.2733  5626395    2.23%
   1179   717    43573.8962   105    44436.0000    43443.2733  5638499    2.23%
   1183   721    43443.2733   109    44436.0000    43443.2733  5718857    2.23%
   1186   722    43574.5991   104    44436.0000    43443.2733  5818063    2.23%
   1190   724    43575.1991    94    44436.0000    43443.2733  5842450    2.23%
Elapsed time = 5771.07 sec. (1863431.00 ticks, tree = 25.09 MB, solutions = 24)
   1194   727    43443.2733   110    44436.0000    43443.2733  5859170    2.23%
   1198   729    43445.3304   109    44436.0000    43443.2733  5932674    2.23%
   1214   739    43533.2533   105    44436.0000    43443.2733  6036775    2.23%
   1222   743    43533.2533   107    44436.0000    43443.2733  6050728    2.23%
   1226   743    43533.2533    97    44436.0000    43443.2733  6066707    2.23%
   1230   744    43585.1296    97    44436.0000    43443.2733  6083607    2.23%
   1231   744    43628.3511    96    44436.0000    43443.2733  6101202    2.23%
   1242   746    43604.8551   109    44436.0000    43443.2733  6172157    2.23%
   1243   747    43447.3055   108    44436.0000    43443.2733  6202178    2.23%
   1247   748    43448.0441   116    44436.0000    43443.2733  6276761    2.23%
Elapsed time = 6242.58 sec. (1983861.81 ticks, tree = 23.91 MB, solutions = 24)
   1251   751    43448.0441   112    44436.0000    43443.2733  6300359    2.23%
   1261   758    43494.1200   115    44436.0000    43443.2733  6475621    2.23%
   1263   759    43587.3619   116    44436.0000    43443.2733  6552474    2.23%
   1294   776    43558.7152   103    44436.0000    43443.2733  6718188    2.23%
   1306   782    43450.4971   103    44436.0000    43443.2733  6762073    2.23%
   1311   786    43541.8316   106    44436.0000    43443.2733  6780427    2.23%
   1317   788    43590.3414   107    44436.0000    43443.2733  6826525    2.23%
   1321   791    43591.5902   125    44436.0000    43443.2733  6832867    2.23%
   1329   797    43596.1650   106    44436.0000    43443.2733  6842398    2.23%
   1341   807    43596.1650   112    44436.0000    43443.2733  6863790    2.23%
Elapsed time = 6858.41 sec. (2159445.69 ticks, tree = 27.53 MB, solutions = 24)
   1345   809    43690.8474   101    44436.0000    43443.2733  6875079    2.23%
   1349   810    43452.6373   113    44436.0000    43443.2733  6900801    2.23%
   1358   817    43452.6373   112    44436.0000    43443.2733  6925345    2.23%
   1362   819    43452.6373   113    44436.0000    43443.2733  6942378    2.23%
   1363   820    43638.7946   105    44436.0000    43443.2733  6961243    2.23%
   1364   821    43587.3619   110    44436.0000    43443.2733  6965383    2.23%
   1372   824    43587.3619   107    44436.0000    43443.2733  6972862    2.23%
   1375   825    43602.7626   107    44436.0000    43443.2733  6984821    2.23%
   1376   825    43631.1257   103    44436.0000    43443.2733  6999125    2.23%
   1380   827    43587.3619   100    44436.0000    43443.2733  7007320    2.23%
Elapsed time = 7120.89 sec. (2249306.74 ticks, tree = 43.18 MB, solutions = 24)
   1383   828    43547.3405    98    44436.0000    43443.2733  7023034    2.23%
   1399   836    43452.6373   123    44436.0000    43443.2733  7070664    2.23%

Mixed integer rounding cuts applied:  2045
Gomory fractional cuts applied:  7

Root node processing (before b&c):
  Real time             =  200.63 sec. (103121.06 ticks)
Parallel b&c, 4 threads:
  Real time             = 6999.44 sec. (2173387.30 ticks)
  Sync time (average)   =  654.07 sec.
  Wait time (average)   =  654.22 sec.
                          ------------
Total (root+branch&cut) = 7200.07 sec. (2276508.36 ticks)
optimal objective= 44436.0

artificial: false edgeIndexset: [148, 6, 23, 408, 191] start node= 1 start time= 11 capacity type= 2 edgeSet: [148, 6, 23, 408, 191] ifChargeSet: []
(0,6)->(1,11)->(3,18)->(0,23)->(1,28)->(0,6):1

artificial: false edgeIndexset: [211, 26, 588, 222, 607] start node= 4 start time= 7 capacity type= 2 edgeSet: [211, 26, 588, 222, 607] ifChargeSet: []
(1,1)->(4,7)->(1,12)->(4,18)->(0,26)->(1,1):1

artificial: false edgeIndexset: [948, 453, 87, 280, 139] start node= 1 start time= 18 capacity type= 2 edgeSet: [948, 453, 87, 280, 139] ifChargeSet: []
(3,3)->(2,10)->(1,18)->(1,19)->(0,27)->(3,3):1

artificial: false edgeIndexset: [49, 131, 326, 423, 985] start node= 1 start time= 11 capacity type= 2 edgeSet: [49, 131, 326, 423, 985] ifChargeSet: []
(3,3)->(1,11)->(0,19)->(2,25)->(2,26)->(3,3):1

artificial: false edgeIndexset: [438, 454, 311, 956, 207] start node= 1 start time= 26 capacity type= 2 edgeSet: [438, 454, 311, 956, 207] ifChargeSet: []
(3,4)->(2,11)->(3,18)->(1,26)->(1,27)->(3,4):1

artificial: false edgeIndexset: [597, 230, 822, 1046, 95] start node= 4 start time= 26 capacity type= 1 edgeSet: [597, 230, 822, 1046, 95] ifChargeSet: []
(0,5)->(6,12)->(1,20)->(4,26)->(4,27)->(0,5):1

artificial: false edgeIndexset: [759, 232, 874, 284, 718] start node= 5 start time= 9 capacity type= 2 edgeSet: [759, 232, 874, 284, 718] ifChargeSet: []
(6,4)->(5,9)->(2,14)->(1,22)->(4,28)->(6,4):1

artificial: false edgeIndexset: [784, 112, 736, 899, 670] start node= 5 start time= 16 capacity type= 2 edgeSet: [784, 112, 736, 899, 670] ifChargeSet: []
(5,4)->(4,10)->(5,16)->(0,22)->(6,29)->(5,4):1

artificial: false edgeIndexset: [881, 545, 659, 766, 351] start node= 5 start time= 16 capacity type= 2 edgeSet: [881, 545, 659, 766, 351] ifChargeSet: []
(3,5)->(6,11)->(5,16)->(2,21)->(4,29)->(3,5):1

artificial: false edgeIndexset: [689, 803, 101, 725, 888] start node= 5 start time= 5 capacity type= 2 edgeSet: [689, 803, 101, 725, 888] ifChargeSet: []
(5,5)->(0,11)->(6,18)->(5,23)->(4,29)->(5,5):1

artificial: false edgeIndexset: [657, 801, 483, 886, 700] start node= 5 start time= 21 capacity type= 2 edgeSet: [657, 801, 483, 886, 700] ifChargeSet: []
(3,3)->(4,10)->(6,16)->(5,21)->(4,27)->(3,3):1

artificial: false edgeIndexset: [1042, 594, 1043, 518, 796, 62] start node= 4 start time= 24 capacity type= 1 edgeSet: [1042, 594, 1043, 518, 796, 62] ifChargeSet: []
(0,2)->(3,8)->(5,16)->(4,22)->(4,23)->(4,24)->(0,2):1

artificial: false edgeIndexset: [1024, 851, 695, 807, 379, 1023] start node= 5 start time= 27 capacity type= 2 edgeSet: [1024, 851, 695, 807, 379, 1023] ifChargeSet: []
(4,3)->(4,4)->(4,5)->(6,11)->(2,19)->(5,27)->(4,3):1

artificial: false edgeIndexset: [1072, 1073, 1074, 307, 745, 524, 31] start node= 5 start time= 25 capacity type= 2 edgeSet: [1072, 1073, 1074, 307, 745, 524, 31] ifChargeSet: []
(0,1)->(2,7)->(3,14)->(5,22)->(5,23)->(5,24)->(5,25)->(0,1):1

artificial: false edgeIndexset: [1028, 1029, 330, 826, 700, 989, 174] start node= 4 start time= 8 capacity type= 1 edgeSet: [1028, 1029, 330, 826, 700, 989, 174] ifChargeSet: []
(2,0)->(4,8)->(4,9)->(4,10)->(6,16)->(1,24)->(2,29)->(2,0):2

artificial: false edgeIndexset: [163, 565, 1081, 940, 812, 941, 318, 942] start node= 1 start time= 12 capacity type= 2 edgeSet: [163, 565, 1081, 940, 812, 941, 318, 942] ifChargeSet: []
(6,1)->(6,2)->(1,10)->(1,11)->(1,12)->(1,13)->(2,18)->(3,25)->(6,1):1

artificial: false edgeIndexset: [561, 1107, 645, 838, 936, 937, 218, 1034] start node= 4 start time= 14 capacity type= 1 edgeSet: [561, 1107, 645, 838, 936, 937, 218, 1034] ifChargeSet: []
(1,6)->(1,7)->(1,8)->(4,14)->(4,15)->(3,21)->(6,27)->(6,28)->(1,6):1

Total time= 7517973
Solve for test8_7_30_30_200C.txt
number of service arcs=900
number of holding arcs=210

Time of first LP solve= 329861

There are 6865 columns added to the model.

Tried aggregator 2 times.
MIP Presolve eliminated 18954 rows and 43 columns.
Aggregator did 2154 substitutions.
Reduced MIP has 22233 rows, 87044 columns, and 276883 nonzeros.
Reduced MIP has 1035 binaries, 5808 generals, 0 SOSs, and 0 indicators.
Presolve time = 0.22 sec. (141.12 ticks)
Probing time = 0.14 sec. (20.99 ticks)
Tried aggregator 1 time.
MIP Presolve eliminated 120 rows and 439 columns.
Reduced MIP has 22113 rows, 86605 columns, and 275574 nonzeros.
Reduced MIP has 1035 binaries, 5808 generals, 0 SOSs, and 0 indicators.
Presolve time = 0.21 sec. (112.55 ticks)
Probing time = 0.14 sec. (27.07 ticks)
Clique table members: 1.
MIP emphasis: balance optimality and feasibility.
MIP search method: dynamic search.
Parallel mode: deterministic, using up to 4 threads.
Root relaxation solution time = 38.26 sec. (10696.39 ticks)

        Nodes                                         Cuts/
   Node  Left     Objective  IInf  Best Integer    Best Bound    ItCnt     Gap

      0     0    41757.2200   144                  41757.2200    30291         
      0     0    41757.2200   141                   Cuts: 796    37403         
*     0+    0                        67778.0000    41757.2200            38.39%
      0     0    41757.2200   141    67778.0000     Cuts: 853    45225   38.39%
      0     0    41757.2200   148    67778.0000  MIRcuts: 870    53383   38.39%
Heuristic still looking.
      0     2    41757.2200   148    67778.0000    41757.2200    53383   38.39%
Elapsed time = 181.40 sec. (83046.97 ticks, tree = 0.00 MB, solutions = 1)
      1     3    41757.2200   139    67778.0000    41757.2200    62538   38.39%
      2     4    41757.2200   156    67778.0000    41757.2200    67323   38.39%
      3     5    41757.2200   130    67778.0000    41757.2200    72650   38.39%
      5     7    41757.2200   141    67778.0000    41757.2200    85355   38.39%
      6     8    41778.4400   135    67778.0000    41757.2200    91305   38.39%
      7     9    41757.2200   104    67778.0000    41757.2200   103773   38.39%
      9    11    41772.7933   107    67778.0000    41757.2200   126763   38.39%
     10    12    41778.4400    88    67778.0000    41757.2200   144096   38.39%
     13    15    41757.2200   131    67778.0000    41757.2200   210220   38.39%
     14    16    42020.7867   127    67778.0000    41757.2200   236426   38.39%
Elapsed time = 328.60 sec. (156023.21 ticks, tree = 0.00 MB, solutions = 1)
     15    17    41757.2200    98    67778.0000    41757.2200   241247   38.39%
     17    19    41772.7933   100    67778.0000    41757.2200   250742   38.39%
     19    21    41757.2200   131    67778.0000    41757.2200   260869   38.39%
     24    26    41757.2200   136    67778.0000    41757.2200   341916   38.39%
     25    27    42020.7867   132    67778.0000    41757.2200   349863   38.39%
     28    30    41757.2200   147    67778.0000    41757.2200   377294   38.39%
     30    32    41772.7933   119    67778.0000    41757.2200   474654   38.39%
     32    34    41772.7933   116    67778.0000    41757.2200   556981   38.39%
     34    36    41772.7933   122    67778.0000    41757.2200   631085   38.39%
     36    38    41757.2200   123    67778.0000    41757.2200   679295   38.39%
Elapsed time = 515.32 sec. (213969.23 ticks, tree = 0.00 MB, solutions = 1)
     39    41    41772.7933    99    67778.0000    41757.2200   705538   38.39%
     41    43    41772.7933    86    67778.0000    41757.2200   724853   38.39%
     45    47    41772.7933    88    67778.0000    41757.2200   748558   38.39%
     49    51    41838.7933    81    67778.0000    41757.2200   790739   38.39%
     50    52    41800.0200   111    67778.0000    41757.2200   826578   38.39%
     53    55    41772.7933    91    67778.0000    41757.2200   843642   38.39%
     65    67    41772.7933   120    67778.0000    41757.2200   945150   38.39%
     67    69    42063.1667   104    67778.0000    41757.2200   953788   38.39%
     69    71    41772.7933    87    67778.0000    41757.2200   962267   38.39%
     70    72    41772.7933   115    67778.0000    41757.2200   969714   38.39%
Elapsed time = 710.37 sec. (275982.10 ticks, tree = 0.00 MB, solutions = 1)
     74    76    41757.2200   104    67778.0000    41757.2200   985958   38.39%
     76    78    41841.8467   105    67778.0000    41757.2200   998083   38.39%
     79    81    41772.7933   101    67778.0000    41757.2200  1013193   38.39%
     80    82    41963.6600    88    67778.0000    41757.2200  1021548   38.39%
     82    84    41772.7933   110    67778.0000    41757.2200  1037316   38.39%
     85    87    41920.5600    94    67778.0000    41757.2200  1059455   38.39%
     92    94    41813.4600    81    67778.0000    41757.2200  1092071   38.39%
     96    98    41772.7933    90    67778.0000    41757.2200  1105473   38.39%
     97    99    41757.2200   110    67778.0000    41757.2200  1108857   38.39%
    101   103    42020.7867   102    67778.0000    41757.2200  1123285   38.39%
Elapsed time = 853.91 sec. (312974.00 ticks, tree = 0.72 MB, solutions = 1)
    105   107    41757.2200   115    67778.0000    41757.2200  1134427   38.39%
    106   108    41922.6333    84    67778.0000    41757.2200  1140195   38.39%
    109   111    41829.4067    74    67778.0000    41757.2200  1156628   38.39%
    112   114    41881.1533    67    67778.0000    41757.2200  1170677   38.39%
    113   115    41829.7400    84    67778.0000    41757.2200  1175937   38.39%
    116   118    41772.7933    97    67778.0000    41757.2200  1183788   38.39%
    117   119    41834.3467    71    67778.0000    41757.2200  1190737   38.39%
    121   123    41834.3467    88    67778.0000    41757.2200  1203268   38.39%
    125   127    41982.9467    65    67778.0000    41757.2200  1225174   38.39%
    129   131    41834.3467    88    67778.0000    41757.2200  1232709   38.39%
Elapsed time = 961.32 sec. (340735.41 ticks, tree = 0.72 MB, solutions = 1)
    133   135    41856.4800    63    67778.0000    41757.2200  1255781   38.39%
    137   139    41856.4800    83    67778.0000    41757.2200  1263557   38.39%
    165   167    41922.6333    79    67778.0000    41757.2200  1351395   38.39%
    167   169    41864.3200    84    67778.0000    41757.2200  1359252   38.39%
    170   172    41772.7933   129    67778.0000    41757.2200  1367636   38.39%
    171   173    41926.7400    80    67778.0000    41757.2200  1379825   38.39%
    175   177    41856.4800    76    67778.0000    41757.2200  1393643   38.39%
    178   180    41772.7933   102    67778.0000    41757.2200  1423680   38.39%
    201   203    41876.6500    72    67778.0000    41757.2200  1533861   38.39%
    210   212    41772.7933    98    67778.0000    41757.2200  1569148   38.39%
Elapsed time = 1295.53 sec. (423226.44 ticks, tree = 7.45 MB, solutions = 1)
    211   213    41893.9281    61    67778.0000    41757.2200  1575486   38.39%
    212   214    41883.8133    81    67778.0000    41757.2200  1583519   38.39%
    215   217    41902.6199    66    67778.0000    41757.2200  1596296   38.39%
    216   218    41772.7933   105    67778.0000    41757.2200  1599156   38.39%
    220   222    41772.7933   113    67778.0000    41757.2200  1613695   38.39%
    223   225    41929.7466    62    67778.0000    41757.2200  1625541   38.39%
    227   229    41986.3467    58    67778.0000    41757.2200  1646130   38.39%
    231   233    41929.7466    68    67778.0000    41757.2200  1655617   38.39%
    235   237    41929.7466    58    67778.0000    41757.2200  1673604   38.39%
    236   238    41772.7933   114    67778.0000    41757.2200  1675718   38.39%
Elapsed time = 1422.68 sec. (459964.13 ticks, tree = 7.45 MB, solutions = 1)
    240   242    41772.7933   113    67778.0000    41757.2200  1692033   38.39%
    244   246    41772.7933   117    67778.0000    41757.2200  1707636   38.39%
    246   248    41836.2000    77    67778.0000    41757.2200  1717189   38.39%
    274   276    42051.1000    50    67778.0000    41757.2200  1839858   38.39%
    286   288    41836.2000    87    67778.0000    41757.2200  1875127   38.39%
    290   292    41957.3700    60    67778.0000    41757.2200  1891372   38.39%
    294   296    41836.2000    92    67778.0000    41757.2200  1904530   38.39%
    295   297    41945.8520    55    67778.0000    41757.2200  1910841   38.39%
    296   298    41904.2333    75    67778.0000    41757.2200  1913670   38.39%
    300   302    42013.3600    67    67778.0000    41757.2200  1933596   38.39%
Elapsed time = 1656.00 sec. (514868.75 ticks, tree = 9.35 MB, solutions = 1)
    304   306    41904.2333    82    67778.0000    41757.2200  1948936   38.39%
    308   310    42213.5667    66    67778.0000    41757.2200  1967003   38.39%
    312   314    41904.2333    83    67778.0000    41757.2200  1982124   38.39%
    316   318    42213.5667    66    67778.0000    41757.2200  2003323   38.39%
    324   326    42213.5667    75    67778.0000    41757.2200  2033718   38.39%
    328   330    41904.2333    84    67778.0000    41757.2200  2045315   38.39%
    332   334    41904.2333    84    67778.0000    41757.2200  2060857   38.39%
    336   338    42013.3600    66    67778.0000    41757.2200  2074486   38.39%
    344   346    42204.3560    54    67778.0000    41757.2200  2105992   38.39%
    359   361    41836.2000    77    67778.0000    41757.2200  2152948   38.39%
Elapsed time = 1784.17 sec. (540489.11 ticks, tree = 12.37 MB, solutions = 1)
    363   365    41836.2000    83    67778.0000    41757.2200  2161783   38.39%
    364   366    42181.1108    52    67778.0000    41757.2200  2170144   38.39%
    367   369    41957.3700    64    67778.0000    41757.2200  2182467   38.39%
    371   373    41836.2000    87    67778.0000    41757.2200  2202337   38.39%
    373   375    41935.0333    71    67778.0000    41757.2200  2210942   38.39%
*   375+  375                        46117.0000    41757.2200             9.45%
    375   377    41952.3133    62    46117.0000    41757.2200  2222323    9.45%
    379   381    41836.2000    86    46117.0000    41757.2200  2237291    9.45%
    383   385    41836.2000    88    46117.0000    41757.2200  2249425    9.45%
    387   389    41952.3133    62    46117.0000    41757.2200  2271503    9.45%
    395   397    41836.2000    82    46117.0000    41757.2200  2299124    9.45%
Elapsed time = 1911.76 sec. (572810.37 ticks, tree = 12.37 MB, solutions = 1)
*   397+  397                        45181.0000    41757.2200             7.58%
    399   401    41952.3133    64    45181.0000    41757.2200  2319445    7.58%
    407   409    41836.2000    74    45181.0000    41757.2200  2350907    7.58%
    415   417    41836.2000    72    45181.0000    41757.2200  2378274    7.58%
    423   425    41952.3133    64    45181.0000    41757.2200  2405908    7.58%
    477   479    41952.3133    62    45181.0000    41757.2200  2585394    7.58%
    482   484    42041.1600    54    45181.0000    41757.2200  2609852    7.58%
    489   491    41952.3133    71    45181.0000    41757.2200  2638057    7.58%
    494   496    42226.3733    45    45181.0000    41757.2200  2658867    7.58%
*   495+  495                        44177.0000    41757.2200             5.48%
    502   504    42041.1600    52    44177.0000    41757.2200  2686049    5.48%
    510   512    42067.4366    49    44177.0000    41757.2200  2718781    5.48%
Elapsed time = 2272.20 sec. (645329.51 ticks, tree = 15.80 MB, solutions = 3)
    518   520    42067.4366    53    44177.0000    41757.2200  2745921    5.48%
    526   528    42168.0900    40    44177.0000    41757.2200  2775421    5.48%
    581   583    41967.5200    66    44177.0000    41757.2200  2953931    5.48%
    589   591    41967.5200    69    44177.0000    41757.2200  2977913    5.48%
    597   599    41967.5200    72    44177.0000    41757.2200  3003652    5.48%
    601   603    41992.8400    64    44177.0000    41757.2200  3019985    5.48%
    613   615    41992.8400    74    44177.0000    41757.2200  3060637    5.48%
    625   627    41992.8400    62    44177.0000    41757.2200  3101999    5.48%
    633   635    42002.0900    62    44177.0000    41757.2200  3132877    5.48%
    637   639    42099.1200    63    44177.0000    41757.2200  3148216    5.48%
Elapsed time = 2573.85 sec. (709813.56 ticks, tree = 20.96 MB, solutions = 5)
    711   713    42030.6400    54    44177.0000    41757.2200  3378593    5.48%
    727   729    42030.6400    56    44177.0000    41757.2200  3421267    5.48%
    735   737    42052.3800    51    44177.0000    41757.2200  3452891    5.48%
    741   743    42580.7700    30    44177.0000    41757.2200  3471914    5.48%
*   743+  743                        43474.0000    41757.2200             3.95%
    743   745    42052.3800    56    43474.0000    41757.2200  3477229    3.95%
    755   757    42052.3800    46    43474.0000    41757.2200  3521914    3.95%
    767   769    42052.3800    57    43474.0000    41757.2200  3560183    3.95%
    775   777    42052.3800    54    43474.0000    41757.2200  3590352    3.95%
    858   860    42112.1200    48    43474.0000    41757.2200  3850701    3.95%
    868   870    42126.5431    45    43474.0000    41757.2200  3880292    3.95%
Elapsed time = 2976.90 sec. (779490.27 ticks, tree = 33.57 MB, solutions = 6)
    875   877    42252.9200    29    43474.0000    41757.2200  3907626    3.95%
    887   889    42252.9399    29    43474.0000    41757.2200  3944909    3.95%
    895   897    42253.6311    27    43474.0000    41757.2200  3971866    3.95%
    907   909    42253.6311    31    43474.0000    41757.2200  4009853    3.95%
    919   921    42263.4600    29    43474.0000    41757.2200  4054475    3.95%
    927   929    42263.4600    28    43474.0000    41757.2200  4079087    3.95%
    939   941    42265.8600    26    43474.0000    41757.2200  4117902    3.95%
    955   957    42265.8600    34    43474.0000    41757.2200  4160746    3.95%
    967   969    42265.8600    34    43474.0000    41757.2200  4199407    3.95%
    975   977    42608.7150    24    43474.0000    41757.2200  4225319    3.95%
Elapsed time = 3245.21 sec. (829775.43 ticks, tree = 33.57 MB, solutions = 6)
    987   989    42265.8600    30    43474.0000    41757.2200  4261558    3.95%
   1051  1053    42541.2200    23    43474.0000    41757.2200  4418264    3.95%
   1058  1060    42152.2200    33    43474.0000    41757.2200  4437955    3.95%
   1070  1072    42152.2200    36    43474.0000    41757.2200  4476805    3.95%
   1083  1085    42265.8600    30    43474.0000    41757.2200  4514224    3.95%
   1094  1096    42197.2873    34    43474.0000    41757.2200  4545093    3.95%
   1106  1108    42507.5000    28    43474.0000    41757.2200  4583686    3.95%
   1114  1116    42302.7867    29    43474.0000    41757.2200  4611830    3.95%
   1130  1132    42205.1063    32    43474.0000    41757.2200  4654227    3.95%
   1142  1144    42205.1063    32    43474.0000    41757.2200  4695176    3.95%
Elapsed time = 3517.11 sec. (885340.30 ticks, tree = 39.30 MB, solutions = 6)
   1154  1156    42303.4750    30    43474.0000    41757.2200  4740402    3.95%
   1162  1164    42302.7867    26    43474.0000    41757.2200  4772967    3.95%
   1170  1172    42303.3366    30    43474.0000    41757.2200  4800552    3.95%
*  1215+ 1215                        43205.0000    41757.2200             3.35%
*  1215+ 1215                        43076.0000    41757.2200             3.06%
*  1215+ 1215                        43058.0000    41757.2200             3.02%
   1215  1217    42205.1063    38    43058.0000    41757.2200  4911050    3.02%
   1216  1218    42622.5400    27    43058.0000    41757.2200  4915035    3.02%
*  1217+ 1217                        43055.0000    41757.2200             3.01%
*  1218+ 1218                        43045.0000    41757.2200             2.99%
*  1218+ 1218                        43039.0000    41757.2200             2.98%
   1219  1201    41757.2200   139    43039.0000    41757.2200  5004377    2.98%
*  1220+  799                        43025.0000    41757.2200             2.95%
*  1220+  533                        42959.0000    41757.2200             2.80%
   1220   534    41757.2200   133    42959.0000    41757.2200  5012463    2.80%
   1221   534    41855.1000   138    42959.0000    41757.2200  5019575    2.80%
   1222   534    41757.2200   136    42959.0000    41757.2200  5024389    2.80%
   1223   534    41923.9200   124    42959.0000    41757.2200  5033079    2.80%
Elapsed time = 4490.45 sec. (1338956.34 ticks, tree = 25.40 MB, solutions = 18)
   1227   536    41757.2200   149    42959.0000    41757.2200  5049524    2.80%
   1230   536    42016.7867   115    42959.0000    41757.2200  5088350    2.80%
   1231   537    42020.7867   148    42959.0000    41757.2200  5114679    2.80%
   1235   539    41757.2200   165    42959.0000    41757.2200  5169628    2.80%
   1244   545    42105.1191   110    42959.0000    41757.2200  5191633    2.80%
   1249   549    41841.8800   146    42959.0000    41757.2200  5202779    2.80%
   1253   552    41757.2200   149    42959.0000    41757.2200  5213396    2.80%
   1256   553    42016.7867   114    42959.0000    41757.2200  5227175    2.80%
   1261   557    41757.2200   133    42959.0000    41757.2200  5250724    2.80%
   1265   558    41757.2200   144    42959.0000    41757.2200  5265444    2.80%
Elapsed time = 4782.53 sec. (1447182.42 ticks, tree = 24.53 MB, solutions = 18)
   1268   560    42016.7867   122    42959.0000    41757.2200  5269289    2.80%
   1284   565    42181.2700   127    42959.0000    41757.2200  5336900    2.80%
   1293   567    41952.7600   143    42959.0000    41757.2200  5360111    2.80%
   1307   576    42179.6854   133    42959.0000    41757.2200  5402528    2.80%
   1310   577    41757.2200   133    42959.0000    41757.2200  5422213    2.80%
   1314   580    41757.2200   131    42959.0000    41757.2200  5434470    2.80%
   1319   583    41987.2150   115    42959.0000    41757.2200  5447453    2.80%
   1328   590    41855.1000   143    42959.0000    41757.2200  5494984    2.80%
   1332   592    41855.1000   144    42959.0000    41757.2200  5519601    2.80%
   1341   596    42223.7100   117    42959.0000    41757.2200  5545495    2.80%
Elapsed time = 5157.89 sec. (1570155.24 ticks, tree = 23.33 MB, solutions = 18)
   1344   599    41757.2200   160    42959.0000    41757.2200  5547592    2.80%
   1347   601    42115.8333   106    42959.0000    41757.2200  5558266    2.80%
   1355   605    42016.7867   120    42959.0000    41757.2200  5578593    2.80%
   1382   621    41811.6400   131    42959.0000    41757.2200  5795953    2.80%
   1393   628    42386.8667   126    42959.0000    41757.2200  5823435    2.80%
   1394   628    41890.1825   139    42959.0000    41757.2200  5834110    2.80%
   1400   632    41855.1000   153    42959.0000    41757.2200  5858899    2.80%
   1429   649    42020.2533   141    42959.0000    41757.2200  5949455    2.80%
   1438   652    41855.1000   170    42959.0000    41757.2200  5962450    2.80%
   1441   653    41924.6133   149    42959.0000    41757.2200  5964400    2.80%
Elapsed time = 5849.56 sec. (1810977.48 ticks, tree = 42.72 MB, solutions = 18)
   1488   680    41911.0933   136    42959.0000    41757.2200  6056249    2.80%
   1491   682    41757.2200   144    42959.0000    41757.2200  6066299    2.80%
   1503   687    41757.2200   168    42959.0000    41757.2200  6069302    2.80%
   1509   690    41959.0567   130    42959.0000    41757.2200  6088969    2.80%
   1517   696    41855.1000   183    42959.0000    41757.2200  6110677    2.80%
   1521   698    41911.0933   152    42959.0000    41757.2200  6121825    2.80%
   1529   702    41855.1000   187    42959.0000    41757.2200  6128295    2.80%
   1541   709    41855.1000   183    42959.0000    41757.2200  6150318    2.80%
   1561   722    41998.0500   127    42959.0000    41757.2200  6195109    2.80%
   1569   724    41924.6133   153    42959.0000    41757.2200  6207901    2.80%
Elapsed time = 6081.86 sec. (1892050.56 ticks, tree = 72.63 MB, solutions = 18)
   1570   724    42040.7333   139    42959.0000    41757.2200  6216244    2.80%
   1573   726    42036.0200   123    42959.0000    41757.2200  6235531    2.80%
   1584   735    41768.9116   171    42959.0000    41757.2200  6253791    2.80%
   1589   740    42012.3100   114    42959.0000    41757.2200  6265334    2.80%
   1609   750    42036.0200   128    42959.0000    41757.2200  6299442    2.80%
   1625   760    42012.3100   117    42959.0000    41757.2200  6351295    2.80%
   1639   769    42061.6400   132    42959.0000    41757.2200  6382948    2.80%
   1641   770    41855.1000   173    42959.0000    41757.2200  6385085    2.80%
   1648   775    41924.6133   139    42959.0000    41757.2200  6388260    2.80%
   1650   777    42017.3867   129    42959.0000    41757.2200  6398806    2.80%
Elapsed time = 6782.09 sec. (2169397.10 ticks, tree = 88.84 MB, solutions = 18)
   1697   807    42180.4200   130    42959.0000    41757.2200  6442417    2.80%
   1703   811    42105.8600   112    42959.0000    41757.2200  6463288    2.80%
   1710   815    42268.5067   117    42959.0000    41757.2200  6481880    2.80%
   1716   820    42061.6400   127    42959.0000    41757.2200  6494925    2.80%
   1724   825    42061.6400   134    42959.0000    41757.2200  6509970    2.80%
   1732   827    42061.6400   134    42959.0000    41757.2200  6538876    2.80%
   1756   841    41883.2249   137    42959.0000    41757.2200  6573353    2.80%
   1774   850    41987.2150   122    42959.0000    41757.2200  6636577    2.80%
   1782   856    41925.9169   130    42959.0000    41757.2200  6647742    2.80%
   1790   858    41927.1969   138    42959.0000    41757.2200  6656754    2.80%
Elapsed time = 7100.57 sec. (2268300.57 ticks, tree = 119.96 MB, solutions = 18)
   1810   870    41927.1969   139    42959.0000    41757.2200  6669027    2.80%
   1826   882    41927.1969   140    42959.0000    41757.2200  6695573    2.80%
   1830   885    41928.5675   136    42959.0000    41757.2200  6713370    2.80%
   1845   894    42184.1800   117    42959.0000    41757.2200  6727225    2.80%
   1859   902    42017.3867   125    42959.0000    41757.2200  6748796    2.80%

Mixed integer rounding cuts applied:  279
Gomory fractional cuts applied:  4

Root node processing (before b&c):
  Real time             =  181.35 sec. (83030.34 ticks)
Parallel b&c, 4 threads:
  Real time             = 7018.72 sec. (2215502.96 ticks)
  Sync time (average)   =  674.65 sec.
  Wait time (average)   =  674.85 sec.
                          ------------
Total (root+branch&cut) = 7200.07 sec. (2298533.30 ticks)
optimal objective= 42959.0

artificial: false edgeIndexset: [112, 346, 747, 365, 190] start node= 5 start time= 27 capacity type= 2 edgeSet: [112, 346, 747, 365, 190] ifChargeSet: []
(3,5)->(1,10)->(3,16)->(0,22)->(5,27)->(3,5):1

artificial: false edgeIndexset: [656, 261, 549, 376, 62] start node= 5 start time= 26 capacity type= 2 edgeSet: [656, 261, 549, 376, 62] ifChargeSet: []
(0,2)->(4,9)->(3,16)->(1,21)->(5,26)->(0,2):1

artificial: false edgeIndexset: [577, 386, 674, 211, 200] start node= 5 start time= 14 capacity type= 2 edgeSet: [577, 386, 674, 211, 200] ifChargeSet: []
(1,1)->(4,7)->(5,14)->(1,20)->(3,26)->(1,1):1

artificial: false edgeIndexset: [209, 586, 683, 220, 365] start node= 5 start time= 23 capacity type= 2 edgeSet: [209, 586, 683, 220, 365] ifChargeSet: []
(3,5)->(1,10)->(4,16)->(5,23)->(1,29)->(3,5):1

artificial: false edgeIndexset: [819, 56, 650, 303, 255] start node= 1 start time= 15 capacity type= 2 edgeSet: [819, 56, 650, 303, 255] ifChargeSet: []
(2,3)->(6,9)->(1,15)->(5,20)->(0,26)->(2,3):1

artificial: false edgeIndexset: [800, 314, 27, 155, 973] start node= 1 start time= 5 capacity type= 2 edgeSet: [800, 314, 27, 155, 973] ifChargeSet: []
(1,5)->(2,13)->(2,14)->(6,20)->(0,27)->(1,5):1

artificial: false edgeIndexset: [230, 759, 824, 476, 94] start node= 5 start time= 9 capacity type= 2 edgeSet: [230, 759, 824, 476, 94] ifChargeSet: []
(0,4)->(5,9)->(6,14)->(1,20)->(4,26)->(0,4):1

artificial: false edgeIndexset: [800, 147, 100, 765, 783] start node= 5 start time= 15 capacity type= 2 edgeSet: [800, 147, 100, 765, 783] ifChargeSet: []
(6,3)->(0,10)->(5,15)->(6,20)->(0,27)->(6,3):1

artificial: false edgeIndexset: [327, 712, 585, 219, 813] start node= 5 start time= 22 capacity type= 2 edgeSet: [327, 712, 585, 219, 813] ifChargeSet: []
(6,3)->(1,9)->(4,15)->(5,22)->(2,27)->(6,3):1

artificial: false edgeIndexset: [1025, 21, 794, 606, 239] start node= 1 start time= 29 capacity type= 2 edgeSet: [1025, 21, 794, 606, 239] ifChargeSet: []
(4,5)->(4,6)->(6,14)->(0,21)->(1,29)->(4,5):1

artificial: false edgeIndexset: [435, 938, 363, 189, 207, 831] start node= 1 start time= 8 capacity type= 2 edgeSet: [435, 938, 363, 189, 207, 831] ifChargeSet: []
(3,3)->(1,8)->(1,9)->(3,15)->(6,21)->(1,27)->(3,3):1

artificial: false edgeIndexset: [738, 356, 122, 1066, 1067, 878] start node= 5 start time= 16 capacity type= 1 edgeSet: [738, 356, 122, 1066, 1067, 878] ifChargeSet: []
(0,2)->(6,8)->(5,16)->(5,17)->(5,18)->(3,26)->(0,2):1

artificial: false edgeIndexset: [329, 282, 1099, 1100, 861, 941, 815] start node= 1 start time= 11 capacity type= 2 edgeSet: [329, 282, 1099, 1100, 861, 941, 815] ifChargeSet: []
(6,5)->(1,11)->(1,12)->(6,19)->(6,20)->(6,21)->(2,29)->(6,5):1

artificial: false edgeIndexset: [496, 483, 953, 234, 1020, 220, 1021, 1022] start node= 4 start time= 3 capacity type= 1 edgeSet: [496, 483, 953, 234, 1020, 220, 1021, 1022] ifChargeSet: []
(4,0)->(4,1)->(4,2)->(4,3)->(1,10)->(4,16)->(1,23)->(1,24)->(4,0):1

artificial: false edgeIndexset: [1090, 227, 1043, 1044, 821, 1045, 1046, 567, 424] start node= 4 start time= 23 capacity type= 1 edgeSet: [1090, 227, 1043, 1044, 821, 1045, 1046, 567, 424] ifChargeSet: []
(3,4)->(6,10)->(6,11)->(1,17)->(4,23)->(4,24)->(4,25)->(4,26)->(4,27)->(3,4):1

artificial: false edgeIndexset: [305, 1091, 228, 1044, 1045, 822, 1046, 1047, 1048, 1049, 510] start node= 4 start time= 24 capacity type= 1 edgeSet: [305, 1091, 228, 1044, 1045, 822, 1046, 1047, 1048, 1049, 510] ifChargeSet: []
(4,0)->(2,5)->(6,11)->(6,12)->(1,18)->(4,24)->(4,25)->(4,26)->(4,27)->(4,28)->(4,29)->(4,0):1

artificial: false edgeIndexset: [327, 167, 940, 941, 814, 942, 943, 944, 945, 946, 985, 986, 1083] start node= 1 start time= 10 capacity type= 1 edgeSet: [327, 167, 940, 941, 814, 942, 943, 944, 945, 946, 985, 986, 1083] ifChargeSet: []
(6,3)->(6,4)->(1,10)->(1,11)->(1,12)->(1,13)->(1,14)->(1,15)->(1,16)->(1,17)->(2,25)->(2,26)->(2,27)->(6,3):1

Total time= 7530384
Solve for test9_7_30_30_400B.txt
number of service arcs=900
number of holding arcs=210

Time of first LP solve= 614675

There are 6469 columns added to the model.

Tried aggregator 2 times.
MIP Presolve eliminated 34758 rows and 43 columns.
Aggregator did 4344 substitutions.
Reduced MIP has 46239 rows, 187608 columns, and 581441 nonzeros.
Reduced MIP has 1050 binaries, 5397 generals, 0 SOSs, and 0 indicators.
Presolve time = 0.41 sec. (284.97 ticks)
Probing time = 0.14 sec. (25.18 ticks)
Tried aggregator 1 time.
MIP Presolve eliminated 600 rows and 2605 columns.
Reduced MIP has 45639 rows, 185003 columns, and 573502 nonzeros.
Reduced MIP has 1050 binaries, 5397 generals, 0 SOSs, and 0 indicators.
Presolve time = 0.51 sec. (233.52 ticks)
Probing time = 0.29 sec. (31.52 ticks)
Clique table members: 1.
MIP emphasis: balance optimality and feasibility.
MIP search method: dynamic search.
Parallel mode: deterministic, using up to 4 threads.
Root relaxation solution time = 98.97 sec. (24910.23 ticks)

        Nodes                                         Cuts/
   Node  Left     Objective  IInf  Best Integer    Best Bound    ItCnt     Gap

      0     0    34399.0440   195                  34399.0440    50350         
      0     0    34399.0440   210                  Cuts: 1282    62492         
      0     0    34399.0440   185                  Cuts: 1449    75197         
      0     0    34399.0440   202                  Cuts: 1397    86097         
Heuristic still looking.
Heuristic still looking.
Heuristic still looking.
*     0+    0                        61108.0000    34399.0440            43.71%
      0     2    34399.0440   202    61108.0000    34399.0440    86097   43.71%
Elapsed time = 697.73 sec. (217052.53 ticks, tree = 0.00 MB, solutions = 1)
      1     3    34399.0440   179    61108.0000    34399.0440    97683   43.71%
      2     4    34399.0440   190    61108.0000    34399.0440   104782   43.71%
      3     5    34399.0440   184    61108.0000    34399.0440   113935   43.71%
      5     7    34399.0440   177    61108.0000    34399.0440   132680   43.71%
      6     8    34399.0440   194    61108.0000    34399.0440   139550   43.71%
      7     9    34399.0440   197    61108.0000    34399.0440   148844   43.71%
      8    10    34510.1067   179    61108.0000    34399.0440   165711   43.71%
     10    12    34399.0440   142    61108.0000    34399.0440   195384   43.71%
     11    13    34430.5000   117    61108.0000    34399.0440   239038   43.71%
     14    16    34399.0440   159    61108.0000    34399.0440   322058   43.71%
Elapsed time = 1148.78 sec. (422845.60 ticks, tree = 0.00 MB, solutions = 1)
     18    20    34504.7677   165    61108.0000    34399.0440   456100   43.71%
     22    24    34399.0440   146    61108.0000    34399.0440   558929   43.71%
     24    26    34510.1067   139    61108.0000    34399.0440   566911   43.71%
     26    28    34399.0440   163    61108.0000    34399.0440   579466   43.71%
     28    30    34510.1067   148    61108.0000    34399.0440   591916   43.71%
     34    36    34505.2880   160    61108.0000    34399.0440   864651   43.71%
     63    65    34399.0440   166    61108.0000    34399.0440  1261420   43.71%
     64    66    34430.5000   148    61108.0000    34399.0440  1274202   43.71%
     67    69    34469.9160   121    61108.0000    34399.0440  1332253   43.71%
     68    70    34473.5200   115    61108.0000    34399.0440  1378307   43.71%
Elapsed time = 2731.26 sec. (932744.74 ticks, tree = 0.00 MB, solutions = 1)
     72    74    34473.5200   120    61108.0000    34399.0440  1462877   43.71%
     76    78    34732.6500   106    61108.0000    34399.0440  1513348   43.71%
     80    82    34473.5200   126    61108.0000    34399.0440  1572105   43.71%
     84    86    34671.9200    97    61108.0000    34399.0440  1618051   43.71%
     88    90    34482.6133   117    61108.0000    34399.0440  1655038   43.71%
     92    94    34482.6133   115    61108.0000    34399.0440  1707178   43.71%
     96    98    34482.6133   122    61108.0000    34399.0440  1734405   43.71%
     99   101    34399.0440   140    61108.0000    34399.0440  1751792   43.71%
    103   105    34482.6133   112    61108.0000    34399.0440  1851535   43.71%
    118   120    34941.0067    93    61108.0000    34399.0440  2098954   43.71%
Elapsed time = 3175.64 sec. (1028520.86 ticks, tree = 0.00 MB, solutions = 1)
    119   121    34399.0440   146    61108.0000    34399.0440  2101677   43.71%
    120   122    34482.6133   120    61108.0000    34399.0440  2105845   43.71%
    122   124    34768.8896   111    61108.0000    34399.0440  2109400   43.71%
    145   147    34536.4733   111    61108.0000    34399.0440  2361590   43.71%
    155   157    34419.1320   136    61108.0000    34399.0440  2466430   43.71%
    156   158    34482.6133   115    61108.0000    34399.0440  2474878   43.71%
    158   160    35187.7567   105    61108.0000    34399.0440  2488233   43.71%
    163   165    34423.3823   122    61108.0000    34399.0440  2522196   43.71%
    164   166    34505.2133   101    61108.0000    34399.0440  2582647   43.71%
    168   170    34505.2133   104    61108.0000    34399.0440  2594908   43.71%
Elapsed time = 4340.96 sec. (1348570.60 ticks, tree = 3.00 MB, solutions = 1)
    172   174    34752.3400    85    61108.0000    34399.0440  2672387   43.71%
    176   178    34505.2133   115    61108.0000    34399.0440  2703959   43.71%
    179   181    34458.1800   152    61108.0000    34399.0440  2743721   43.71%
    183   185    34533.9800   115    61108.0000    34399.0440  2856819   43.71%
    187   189    34533.9800   117    61108.0000    34399.0440  2874339   43.71%
    191   193    34715.8957    94    61108.0000    34399.0440  2941670   43.71%
    226   228    35285.6035    76    61108.0000    34399.0440  3360255   43.71%
    227   229    34533.9800   113    61108.0000    34399.0440  3373420   43.71%
    228   230    34751.0400   107    61108.0000    34399.0440  3398502   43.71%
    232   234    34505.2133   106    61108.0000    34399.0440  3440612   43.71%
Elapsed time = 4981.27 sec. (1480967.52 ticks, tree = 9.11 MB, solutions = 1)
    236   238    34505.2133   104    61108.0000    34399.0440  3492078   43.71%
    239   241    34621.3224   106    61108.0000    34399.0440  3566068   43.71%
    242   244    35106.4780    83    61108.0000    34399.0440  3652956   43.71%
    246   248    34934.4960    91    61108.0000    34399.0440  3743400   43.71%
    247   249    34621.3224   103    61108.0000    34399.0440  3789563   43.71%
    250   252    35064.4868    95    61108.0000    34399.0440  3864630   43.71%
    254   256    34934.4960    79    61108.0000    34399.0440  3928233   43.71%
    258   260    34934.4960    81    61108.0000    34399.0440  4015671   43.71%
    262   264    35038.1933    93    61108.0000    34399.0440  4127829   43.71%
    266   268    34951.2200    94    61108.0000    34399.0440  4195558   43.71%
Elapsed time = 5438.03 sec. (1569766.60 ticks, tree = 9.11 MB, solutions = 1)
    270   272    34953.2200    96    61108.0000    34399.0440  4285201   43.71%
    274   276    34951.2200    98    61108.0000    34399.0440  4352394   43.71%
    278   280    35204.0833    77    61108.0000    34399.0440  4416083   43.71%
    279   281    34752.4911   124    61108.0000    34399.0440  4497947   43.71%
    283   285    34533.9800   123    61108.0000    34399.0440  4539852   43.71%
    289   291    35079.9733    84    61108.0000    34399.0440  4677819   43.71%
    311   313    34715.8957   132    61108.0000    34399.0440  5125441   43.71%
    315   317    34533.9800   126    61108.0000    34399.0440  5170988   43.71%
    319   321    34611.1533   103    61108.0000    34399.0440  5216281   43.71%
    320   322    34768.0916   116    61108.0000    34399.0440  5264958   43.71%
Elapsed time = 6142.57 sec. (1733084.37 ticks, tree = 13.00 MB, solutions = 1)
    324   326    34585.3467   118    61108.0000    34399.0440  5283033   43.71%
    327   329    34761.5118    86    61108.0000    34399.0440  5318716   43.71%
    328   330    34754.5760   110    61108.0000    34399.0440  5416604   43.71%
    367   369    34611.1533   115    61108.0000    34399.0440  5692681   43.71%
    368   370    34585.3467   123    61108.0000    34399.0440  5709214   43.71%
    371   373    34823.0900   102    61108.0000    34399.0440  5741587   43.71%
    372   374    34640.8163   111    61108.0000    34399.0440  5762670   43.71%
    376   378    34585.3467   113    61108.0000    34399.0440  5784004   43.71%
*   378+  378                        52070.0000    34399.0440            33.94%
    379   381    34823.0900    82    52070.0000    34399.0440  5817963   33.94%
    383   385    34824.0218    82    52070.0000    34399.0440  5834296   33.94%
Elapsed time = 6891.61 sec. (1909700.38 ticks, tree = 15.72 MB, solutions = 1)
    384   386    34585.3467    99    52070.0000    34399.0440  5851499   33.94%
    388   390    34585.3467    96    52070.0000    34399.0440  5872324   33.94%
    392   394    34587.4267    97    52070.0000    34399.0440  5891855   33.94%
    396   398    34818.1133    79    52070.0000    34399.0440  5939911   33.94%
    400   402    34587.4267    97    52070.0000    34399.0440  5961392   33.94%
    404   406    34590.6200    89    52070.0000    34399.0440  5986728   33.94%
    413   415    34858.6800    88    52070.0000    34399.0440  6050837   33.94%
    421   423    35035.0973    47    52070.0000    34399.0440  6096782   33.94%

Mixed integer rounding cuts applied:  1416
Gomory fractional cuts applied:  4

Root node processing (before b&c):
  Real time             =  697.59 sec. (216996.73 ticks)
Parallel b&c, 4 threads:
  Real time             = 6502.52 sec. (1764444.60 ticks)
  Sync time (average)   =  825.93 sec.
  Wait time (average)   =  826.06 sec.
                          ------------
Total (root+branch&cut) = 7200.11 sec. (1981441.33 ticks)
optimal objective= 52070.0

artificial: false edgeIndexset: [228, 552, 425, 30, 383] start node= 1 start time= 18 capacity type= 0 edgeSet: [228, 552, 425, 30, 383] ifChargeSet: []
(0,0)->(2,5)->(3,12)->(1,18)->(2,23)->(0,0):1

artificial: false edgeIndexset: [48, 371, 216, 443, 540] start node= 2 start time= 23 capacity type= 0 edgeSet: [48, 371, 216, 443, 540] ifChargeSet: []
(3,0)->(1,6)->(2,11)->(0,18)->(2,23)->(3,0):1

artificial: false edgeIndexset: [50, 373, 218, 445, 542] start node= 1 start time= 8 capacity type= 1 edgeSet: [50, 373, 218, 445, 542] ifChargeSet: []
(3,2)->(1,8)->(2,13)->(0,20)->(2,25)->(3,2):1

artificial: false edgeIndexset: [212, 566, 439, 44, 367] start node= 1 start time= 2 capacity type= 1 edgeSet: [212, 566, 439, 44, 367] ifChargeSet: []
(1,2)->(2,7)->(0,14)->(2,19)->(3,26)->(1,2):1

artificial: false edgeIndexset: [561, 434, 39, 362, 237] start node= 1 start time= 27 capacity type= 1 edgeSet: [561, 434, 39, 362, 237] ifChargeSet: []
(2,2)->(0,9)->(2,14)->(3,21)->(1,27)->(2,2):1

artificial: false edgeIndexset: [404, 231, 219, 446, 543] start node= 1 start time= 9 capacity type= 1 edgeSet: [404, 231, 219, 446, 543] ifChargeSet: []
(3,3)->(1,9)->(2,14)->(1,21)->(2,26)->(3,3):1

artificial: false edgeIndexset: [225, 692, 549, 297, 410] start node= 2 start time= 20 capacity type= 0 edgeSet: [225, 692, 549, 297, 410] ifChargeSet: []
(4,2)->(3,9)->(1,15)->(2,20)->(1,27)->(4,2):1

artificial: false edgeIndexset: [1058, 789, 121, 203, 15] start node= 5 start time= 8 capacity type= 2 edgeSet: [1058, 789, 121, 203, 15] ifChargeSet: []
(0,1)->(5,8)->(5,9)->(0,15)->(1,23)->(0,1):1

artificial: false edgeIndexset: [17, 1060, 791, 123, 205] start node= 5 start time= 10 capacity type= 0 edgeSet: [17, 1060, 791, 123, 205] ifChargeSet: []
(0,3)->(5,10)->(5,11)->(0,17)->(1,25)->(0,3):1

artificial: false edgeIndexset: [129, 181, 23, 1066, 797] start node= 5 start time= 16 capacity type= 1 edgeSet: [129, 181, 23, 1066, 797] ifChargeSet: []
(1,1)->(0,9)->(5,16)->(5,17)->(0,23)->(1,1):1

artificial: false edgeIndexset: [672, 469, 454, 687] start node= 4 start time= 12 capacity type= 1 edgeSet: [672, 469, 454, 687] ifChargeSet: []
(2,4)->(4,12)->(2,19)->(4,27)->(2,4):1

artificial: false edgeIndexset: [195, 7, 1081, 842, 173] start node= 6 start time= 1 capacity type= 0 edgeSet: [195, 7, 1081, 842, 173] ifChargeSet: []
(6,1)->(6,2)->(0,7)->(1,15)->(0,23)->(6,1):1

artificial: false edgeIndexset: [688, 113, 312, 395, 797] start node= 1 start time= 12 capacity type= 2 edgeSet: [688, 113, 312, 395, 797] ifChargeSet: []
(2,5)->(1,12)->(5,17)->(0,23)->(4,28)->(2,5):1

artificial: false edgeIndexset: [324, 407, 809, 670, 95] start node= 1 start time= 24 capacity type= 1 edgeSet: [324, 407, 809, 670, 95] ifChargeSet: []
(0,5)->(4,10)->(2,17)->(1,24)->(5,29)->(0,5):1

artificial: false edgeIndexset: [19, 1093, 854, 155, 207] start node= 6 start time= 13 capacity type= 1 edgeSet: [19, 1093, 854, 155, 207] ifChargeSet: []
(0,5)->(6,13)->(6,14)->(0,19)->(1,27)->(0,5):1

artificial: false edgeIndexset: [35, 840, 490, 796, 172] start node= 0 start time= 22 capacity type= 1 edgeSet: [35, 840, 490, 796, 172] ifChargeSet: []
(6,0)->(0,5)->(2,10)->(5,16)->(0,22)->(6,0):1

artificial: false edgeIndexset: [866, 486, 168, 792, 31] start node= 2 start time= 6 capacity type= 1 edgeSet: [866, 486, 168, 792, 31] ifChargeSet: []
(0,1)->(2,6)->(5,12)->(0,18)->(6,26)->(0,1):1

artificial: false edgeIndexset: [849, 116, 104, 619, 751] start node= 4 start time= 1 capacity type= 1 edgeSet: [849, 116, 104, 619, 751] ifChargeSet: []
(4,1)->(6,9)->(0,14)->(4,19)->(0,26)->(4,1):1

artificial: false edgeIndexset: [884, 213, 518, 25, 799] start node= 5 start time= 19 capacity type= 2 edgeSet: [884, 213, 518, 25, 799] ifChargeSet: []
(1,3)->(2,8)->(6,14)->(5,19)->(0,25)->(1,3):1

artificial: false edgeIndexset: [800, 885, 214, 519, 26] start node= 5 start time= 20 capacity type= 2 edgeSet: [800, 885, 214, 519, 26] ifChargeSet: []
(1,4)->(2,9)->(6,15)->(5,20)->(0,26)->(1,4):1

artificial: false edgeIndexset: [754, 852, 119, 107, 622] start node= 4 start time= 4 capacity type= 1 edgeSet: [754, 852, 119, 107, 622] ifChargeSet: []
(4,4)->(6,12)->(0,17)->(4,22)->(0,29)->(4,4):1

artificial: false edgeIndexset: [848, 595, 438, 43, 750] start node= 6 start time= 8 capacity type= 1 edgeSet: [848, 595, 438, 43, 750] ifChargeSet: []
(4,0)->(6,8)->(0,13)->(2,18)->(3,25)->(4,0):1

artificial: false edgeIndexset: [34, 771, 869, 586, 429] start node= 4 start time= 21 capacity type= 1 edgeSet: [34, 771, 869, 586, 429] ifChargeSet: []
(0,4)->(2,9)->(3,16)->(4,21)->(6,29)->(0,4):1

artificial: false edgeIndexset: [754, 852, 599, 442, 47] start node= 2 start time= 22 capacity type= 1 edgeSet: [754, 852, 599, 442, 47] ifChargeSet: []
(4,4)->(6,12)->(0,17)->(2,22)->(3,29)->(4,4):1

artificial: false edgeIndexset: [227, 181, 982, 983, 9, 414] start node= 1 start time= 17 capacity type= 1 edgeSet: [227, 181, 982, 983, 9, 414] ifChargeSet: []
(1,1)->(0,9)->(1,17)->(2,22)->(2,23)->(2,24)->(1,1):1

artificial: false edgeIndexset: [977, 978, 4, 409, 222, 206] start node= 2 start time= 17 capacity type= 1 edgeSet: [977, 978, 4, 409, 222, 206] ifChargeSet: []
(0,4)->(1,12)->(2,17)->(2,18)->(2,19)->(1,26)->(0,4):1

artificial: false edgeIndexset: [691, 548, 596, 709, 284] start node= 4 start time= 19 capacity type= 1 edgeSet: [691, 548, 596, 709, 284] ifChargeSet: []
(4,1)->(3,8)->(1,14)->(4,19)->(3,26)->(4,1):1

artificial: false edgeIndexset: [706, 563, 581, 694, 299] start node= 4 start time= 4 capacity type= 1 edgeSet: [706, 563, 581, 694, 299] ifChargeSet: []
(4,4)->(3,11)->(4,16)->(3,23)->(1,29)->(4,4):1

artificial: false edgeIndexset: [608, 1026, 1027, 91, 203, 15] start node= 4 start time= 6 capacity type= 1 edgeSet: [608, 1026, 1027, 91, 203, 15] ifChargeSet: []
(0,1)->(4,6)->(4,7)->(4,8)->(0,15)->(1,23)->(0,1):1

artificial: false edgeIndexset: [626, 3, 1044, 1045, 109, 191] start node= 4 start time= 24 capacity type= 1 edgeSet: [626, 3, 1044, 1045, 109, 191] ifChargeSet: []
(0,3)->(1,11)->(0,19)->(4,24)->(4,25)->(4,26)->(0,3):1

artificial: false edgeIndexset: [112, 194, 629, 6, 1047, 1048] start node= 4 start time= 27 capacity type= 0 edgeSet: [112, 194, 629, 6, 1047, 1048] ifChargeSet: []
(0,6)->(1,14)->(0,22)->(4,27)->(4,28)->(4,29)->(0,6):1

artificial: false edgeIndexset: [609, 981, 502, 808, 94, 46] start node= 4 start time= 9 capacity type= 0 edgeSet: [609, 981, 502, 808, 94, 46] ifChargeSet: []
(0,4)->(4,9)->(0,16)->(2,21)->(2,22)->(5,28)->(0,4):1

artificial: false edgeIndexset: [480, 786, 102, 55, 618, 1037] start node= 4 start time= 17 capacity type= 1 edgeSet: [480, 786, 102, 55, 618, 1037] ifChargeSet: []
(2,0)->(5,6)->(0,12)->(4,17)->(4,18)->(0,25)->(2,0):1

artificial: false edgeIndexset: [114, 37, 600, 1049, 492, 798] start node= 4 start time= 29 capacity type= 1 edgeSet: [114, 37, 600, 1049, 492, 798] ifChargeSet: []
(4,0)->(0,7)->(2,12)->(5,18)->(0,24)->(4,29)->(4,0):1

artificial: false edgeIndexset: [1025, 231, 986, 13, 477, 606] start node= 1 start time= 21 capacity type= 2 edgeSet: [1025, 231, 986, 13, 477, 606] ifChargeSet: []
(4,5)->(4,6)->(0,13)->(1,21)->(2,26)->(2,27)->(4,5):1

artificial: false edgeIndexset: [277, 85, 936, 762, 540, 860] start node= 6 start time= 20 capacity type= 0 edgeSet: [277, 85, 936, 762, 540, 860] ifChargeSet: []
(3,0)->(1,6)->(1,7)->(4,12)->(6,20)->(0,25)->(3,0):1

artificial: false edgeIndexset: [279, 87, 938, 764, 542, 862] start node= 6 start time= 22 capacity type= 0 edgeSet: [279, 87, 938, 764, 542, 862] ifChargeSet: []
(3,2)->(1,8)->(1,9)->(4,14)->(6,22)->(0,27)->(3,2):1

artificial: false edgeIndexset: [84, 276, 935, 569, 761, 859] start node= 1 start time= 5 capacity type= 2 edgeSet: [84, 276, 935, 569, 761, 859] ifChargeSet: []
(1,5)->(1,6)->(4,11)->(6,19)->(0,24)->(3,29)->(1,5):1

artificial: false edgeIndexset: [544, 864, 281, 89, 940, 766] start node= 4 start time= 16 capacity type= 0 edgeSet: [544, 864, 281, 89, 940, 766] ifChargeSet: []
(3,4)->(1,10)->(1,11)->(4,16)->(6,24)->(0,29)->(3,4):1

artificial: false edgeIndexset: [432, 37, 744, 906, 780, 589] start node= 0 start time= 6 capacity type= 1 edgeSet: [432, 37, 744, 906, 780, 589] ifChargeSet: []
(5,0)->(0,6)->(0,7)->(2,12)->(3,19)->(4,24)->(5,0):1

artificial: false edgeIndexset: [560, 752, 850, 296, 75, 1021] start node= 4 start time= 1 capacity type= 0 edgeSet: [560, 752, 850, 296, 75, 1021] ifChargeSet: []
(4,1)->(4,2)->(6,10)->(0,15)->(3,20)->(1,26)->(4,1):1

artificial: false edgeIndexset: [1041, 65, 772, 550, 840, 286] start node= 6 start time= 0 capacity type= 0 edgeSet: [1041, 65, 772, 550, 840, 286] ifChargeSet: []
(6,0)->(0,5)->(3,10)->(1,16)->(4,21)->(4,22)->(6,0):1

artificial: false edgeIndexset: [800, 579, 421, 998, 56, 734] start node= 3 start time= 9 capacity type= 1 edgeSet: [800, 579, 421, 998, 56, 734] ifChargeSet: []
(2,1)->(3,8)->(3,9)->(4,14)->(5,20)->(0,26)->(2,1):1

artificial: false edgeIndexset: [801, 87, 667, 572, 974, 495] start node= 3 start time= 2 capacity type= 1 edgeSet: [801, 87, 667, 572, 974, 495] ifChargeSet: []
(3,2)->(4,7)->(2,14)->(2,15)->(5,21)->(0,27)->(3,2):1

artificial: false edgeIndexset: [674, 579, 501, 998, 807, 63] start node= 4 start time= 14 capacity type= 1 edgeSet: [674, 579, 501, 998, 807, 63] ifChargeSet: []
(0,3)->(3,8)->(3,9)->(4,14)->(2,21)->(5,27)->(0,3):1

artificial: false edgeIndexset: [576, 672, 499, 805, 1031, 61] start node= 4 start time= 11 capacity type= 1 edgeSet: [576, 672, 499, 805, 1031, 61] ifChargeSet: []
(0,1)->(3,6)->(4,11)->(4,12)->(2,19)->(5,25)->(0,1):1

artificial: false edgeIndexset: [496, 802, 1028, 88, 573, 669] start node= 4 start time= 8 capacity type= 1 edgeSet: [496, 802, 1028, 88, 573, 669] ifChargeSet: []
(3,3)->(4,8)->(4,9)->(2,16)->(5,22)->(0,28)->(3,3):1

artificial: false edgeIndexset: [592, 705, 100, 747, 909, 783] start node= 0 start time= 9 capacity type= 1 edgeSet: [592, 705, 100, 747, 909, 783] ifChargeSet: []
(5,3)->(0,9)->(0,10)->(4,15)->(3,22)->(4,27)->(5,3):1

artificial: false edgeIndexset: [96, 743, 809, 905, 588, 701] start node= 0 start time= 5 capacity type= 1 edgeSet: [96, 743, 809, 905, 588, 701] ifChargeSet: []
(0,5)->(0,6)->(4,11)->(3,18)->(4,23)->(5,29)->(0,5):1

artificial: false edgeIndexset: [727, 1063, 794, 715, 572, 110] start node= 5 start time= 13 capacity type= 0 edgeSet: [727, 1063, 794, 715, 572, 110] ifChargeSet: []
(3,2)->(4,7)->(5,13)->(5,14)->(0,20)->(4,25)->(3,2):1

artificial: false edgeIndexset: [838, 742, 71, 587, 1006, 846] start node= 4 start time= 22 capacity type= 1 edgeSet: [838, 742, 71, 587, 1006, 846] ifChargeSet: []
(6,6)->(0,11)->(3,16)->(3,17)->(4,22)->(5,28)->(6,6):1

artificial: false edgeIndexset: [259, 597, 1015, 247, 1016, 632, 553] start node= 4 start time= 2 capacity type= 1 edgeSet: [259, 597, 1015, 247, 1016, 632, 553] ifChargeSet: []
(4,2)->(1,7)->(3,13)->(1,19)->(3,25)->(3,26)->(3,27)->(4,2):1

artificial: false edgeIndexset: [369, 662, 471, 1049, 1020, 1021, 46] start node= 4 start time= 29 capacity type= 0 edgeSet: [369, 662, 471, 1049, 1020, 1021, 46] ifChargeSet: []
(4,0)->(4,1)->(4,2)->(2,9)->(0,16)->(2,21)->(4,29)->(4,0):1

artificial: false edgeIndexset: [689, 114, 614, 456, 921, 922, 923] start node= 0 start time= 24 capacity type= 1 edgeSet: [689, 114, 614, 456, 921, 922, 923] ifChargeSet: []
(2,6)->(4,14)->(0,21)->(0,22)->(0,23)->(0,24)->(4,29)->(2,6):1

artificial: false edgeIndexset: [1027, 1028, 1029, 54, 377, 670, 479] start node= 4 start time= 7 capacity type= 1 edgeSet: [1027, 1028, 1029, 54, 377, 670, 479] ifChargeSet: []
(4,7)->(4,8)->(4,9)->(4,10)->(2,17)->(0,24)->(2,29)->(4,7):1

artificial: false edgeIndexset: [672, 577, 867, 531, 979, 980, 62] start node= 2 start time= 19 capacity type= 1 edgeSet: [672, 577, 867, 531, 979, 980, 62] ifChargeSet: []
(0,2)->(3,7)->(4,12)->(2,19)->(2,20)->(2,21)->(6,27)->(0,2):1

artificial: false edgeIndexset: [950, 951, 264, 952, 953, 570, 12, 605] start node= 4 start time= 5 capacity type= 1 edgeSet: [950, 951, 264, 952, 953, 570, 12, 605] ifChargeSet: []
(3,0)->(4,5)->(0,12)->(1,20)->(1,21)->(1,22)->(1,23)->(1,24)->(3,0):1

artificial: false edgeIndexset: [624, 1, 1043, 251, 939, 588, 940, 1007] start node= 4 start time= 23 capacity type= 1 edgeSet: [624, 1, 1043, 251, 939, 588, 940, 1007] ifChargeSet: []
(0,1)->(1,9)->(1,10)->(1,11)->(3,17)->(3,18)->(4,23)->(4,24)->(0,1):1

artificial: false edgeIndexset: [20, 612, 1030, 919, 1031, 269, 958, 575] start node= 4 start time= 10 capacity type= 1 edgeSet: [20, 612, 1030, 919, 1031, 269, 958, 575] ifChargeSet: []
(3,5)->(4,10)->(4,11)->(4,12)->(0,19)->(0,20)->(1,28)->(1,29)->(3,5):1

artificial: false edgeIndexset: [117, 632, 217, 972, 973, 862, 526, 974, 975] start node= 2 start time= 12 capacity type= 1 edgeSet: [117, 632, 217, 972, 973, 862, 526, 974, 975] ifChargeSet: []
(4,2)->(1,7)->(2,12)->(2,13)->(2,14)->(2,15)->(2,16)->(6,22)->(0,27)->(4,2):1

artificial: false edgeIndexset: [960, 102, 647, 232, 987, 988, 989, 847, 511] start node= 2 start time= 27 capacity type= 1 edgeSet: [960, 102, 647, 232, 987, 988, 989, 847, 511] ifChargeSet: []
(2,0)->(2,1)->(6,7)->(0,12)->(4,17)->(1,22)->(2,27)->(2,28)->(2,29)->(2,0):1

artificial: false edgeIndexset: [978, 979, 868, 532, 980, 981, 93, 638, 223] start node= 2 start time= 18 capacity type= 0 edgeSet: [978, 979, 868, 532, 980, 981, 93, 638, 223] ifChargeSet: []
(0,3)->(4,8)->(1,13)->(2,18)->(2,19)->(2,20)->(2,21)->(2,22)->(6,28)->(0,3):1

artificial: false edgeIndexset: [418, 340, 53, 935, 936, 937, 858, 938, 939] start node= 1 start time= 5 capacity type= 1 edgeSet: [418, 340, 53, 935, 936, 937, 858, 938, 939] ifChargeSet: []
(1,5)->(1,6)->(1,7)->(1,8)->(1,9)->(1,10)->(6,18)->(0,23)->(2,28)->(1,5):1

artificial: false edgeIndexset: [404, 356, 39, 951, 952, 953, 954, 955, 844] start node= 1 start time= 21 capacity type= 1 edgeSet: [404, 356, 39, 951, 952, 953, 954, 955, 844] ifChargeSet: []
(6,4)->(0,9)->(2,14)->(1,21)->(1,22)->(1,23)->(1,24)->(1,25)->(1,26)->(6,4):1

artificial: false edgeIndexset: [406, 358, 41, 953, 954, 955, 956, 957, 846] start node= 1 start time= 23 capacity type= 0 edgeSet: [406, 358, 41, 953, 954, 955, 956, 957, 846] ifChargeSet: []
(6,6)->(0,11)->(2,16)->(1,23)->(1,24)->(1,25)->(1,26)->(1,27)->(1,28)->(6,6):1

artificial: false edgeIndexset: [1072, 496, 1, 1073, 900, 804, 939, 220, 975] start node= 1 start time= 9 capacity type= 1 edgeSet: [1072, 496, 1, 1073, 900, 804, 939, 220, 975] ifChargeSet: []
(0,0)->(0,1)->(1,9)->(1,10)->(2,15)->(2,16)->(5,22)->(5,23)->(5,24)->(0,0):1

artificial: false edgeIndexset: [1056, 787, 328, 73, 588, 653, 1053, 1054, 1055] start node= 5 start time= 3 capacity type= 0 edgeSet: [1056, 787, 328, 73, 588, 653, 1053, 1054, 1055] ifChargeSet: []
(5,3)->(5,4)->(5,5)->(5,6)->(5,7)->(0,13)->(3,18)->(4,23)->(1,28)->(5,3):1

artificial: false edgeIndexset: [593, 658, 1058, 1059, 1060, 1061, 792, 78, 303] start node= 5 start time= 8 capacity type= 1 edgeSet: [593, 658, 1058, 1059, 1060, 1061, 792, 78, 303] ifChargeSet: []
(1,3)->(5,8)->(5,9)->(5,10)->(5,11)->(5,12)->(0,18)->(3,23)->(4,28)->(1,3):1

artificial: false edgeIndexset: [322, 67, 1077, 582, 1078, 647, 1079, 1050, 781] start node= 5 start time= 27 capacity type= 0 edgeSet: [322, 67, 1077, 582, 1078, 647, 1079, 1050, 781] ifChargeSet: []
(5,0)->(5,1)->(0,7)->(3,12)->(4,17)->(1,22)->(5,27)->(5,28)->(5,29)->(5,0):1

artificial: false edgeIndexset: [321, 66, 1076, 581, 1077, 646, 1078, 1079, 780] start node= 5 start time= 26 capacity type= 1 edgeSet: [321, 66, 1076, 581, 1077, 646, 1078, 1079, 780] ifChargeSet: []
(5,0)->(0,6)->(3,11)->(4,16)->(1,21)->(5,26)->(5,27)->(5,28)->(5,29)->(5,0):1

artificial: false edgeIndexset: [848, 103, 648, 233, 538, 1084, 1085, 1086, 1087] start node= 6 start time= 4 capacity type= 1 edgeSet: [848, 103, 648, 233, 538, 1084, 1085, 1086, 1087] ifChargeSet: []
(6,4)->(6,5)->(6,6)->(6,7)->(6,8)->(0,13)->(4,18)->(1,23)->(2,28)->(6,4):1

artificial: false edgeIndexset: [1056, 1057, 818, 899, 886, 1054, 831, 1055] start node= 5 start time= 4 capacity type= 1 edgeSet: [1056, 1057, 818, 899, 886, 1054, 831, 1055] ifChargeSet: []
(5,4)->(5,5)->(5,6)->(5,7)->(5,8)->(6,16)->(5,21)->(6,29)->(5,4):1

artificial: false edgeIndexset: [881, 898, 1066, 1067, 1068, 813, 1069, 830] start node= 5 start time= 16 capacity type= 1 edgeSet: [881, 898, 1066, 1067, 1068, 813, 1069, 830] ifChargeSet: []
(5,3)->(6,11)->(5,16)->(5,17)->(5,18)->(5,19)->(5,20)->(6,28)->(5,3):1

artificial: false edgeIndexset: [1091, 1043, 1092, 1044, 853, 745, 1051, 108, 1052, 813] start node= 4 start time= 23 capacity type= 1 edgeSet: [1091, 1043, 1092, 1044, 853, 745, 1051, 108, 1052, 813] ifChargeSet: []
(5,1)->(5,2)->(5,3)->(6,11)->(6,12)->(6,13)->(0,18)->(4,23)->(4,24)->(4,25)->(5,1):1

artificial: false edgeIndexset: [723, 1059, 1060, 1061, 118, 1062, 1063, 1064, 825, 863] start node= 5 start time= 9 capacity type= 0 edgeSet: [723, 1059, 1060, 1061, 118, 1062, 1063, 1064, 825, 863] ifChargeSet: []
(4,3)->(5,9)->(5,10)->(5,11)->(5,12)->(5,13)->(5,14)->(5,15)->(6,23)->(0,28)->(4,3):1

Total time= 7815514
Solve for test9_7_30_30_400C.txt
number of service arcs=900
number of holding arcs=210

Time of first LP solve= 616766

There are 5215 columns added to the model.

Tried aggregator 2 times.
MIP Presolve eliminated 33659 rows and 43 columns.
Aggregator did 3309 substitutions.
Reduced MIP has 48373 rows, 197082 columns, and 602918 nonzeros.
Reduced MIP has 1040 binaries, 4153 generals, 0 SOSs, and 0 indicators.
Presolve time = 0.41 sec. (280.33 ticks)
Probing time = 0.16 sec. (24.77 ticks)
Tried aggregator 1 time.
MIP Presolve eliminated 439 rows and 1798 columns.
Reduced MIP has 47934 rows, 195284 columns, and 597464 nonzeros.
Reduced MIP has 1040 binaries, 4153 generals, 0 SOSs, and 0 indicators.
Presolve time = 0.48 sec. (238.67 ticks)
Probing time = 0.33 sec. (30.84 ticks)
Clique table members: 1.
MIP emphasis: balance optimality and feasibility.
MIP search method: dynamic search.
Parallel mode: deterministic, using up to 4 threads.
Root relaxation solution time = 204.31 sec. (55447.45 ticks)

        Nodes                                         Cuts/
   Node  Left     Objective  IInf  Best Integer    Best Bound    ItCnt     Gap

      0     0    80943.6394   244                  80943.6394       41         
      0     0    80943.6394   187                  Cuts: 1812    13729         
      0     0    80943.6394   195                  Cuts: 1486    33072         
      0     0    80943.6394   206                  Cuts: 1609    56109         
Heuristic still looking.
Heuristic still looking.
*     0+    0                       115657.0000    80943.6394            30.01%
      0     2    80943.6394   206   115657.0000    80943.6394    56109   30.01%
Elapsed time = 1414.64 sec. (396026.80 ticks, tree = 0.00 MB, solutions = 1)
      1     3    80943.6394   209   115657.0000    80943.6394    83950   30.01%
      2     4    80943.6394   205   115657.0000    80943.6394   100550   30.01%
      3     5    80943.6394   220   115657.0000    80943.6394   113725   30.01%
      4     6    80943.6394   205   115657.0000    80943.6394   128398   30.01%
      5     7    80943.6394   209   115657.0000    80943.6394   143595   30.01%
      7     9    80943.6394   226   115657.0000    80943.6394   178425   30.01%
      9    11    80961.0761   140   115657.0000    80943.6394   237265   30.01%
     11    13    80943.6394   178   115657.0000    80943.6394   399278   30.01%
     12    14    80961.0761   179   115657.0000    80943.6394   615600   30.01%
     14    16    80943.6394   206   115657.0000    80943.6394   873627   30.01%
Elapsed time = 2474.59 sec. (796357.68 ticks, tree = 0.00 MB, solutions = 1)
     15    17    81006.8986   179   115657.0000    80943.6394   926150   30.01%
     17    19    80977.8111   196   115657.0000    80943.6394  1036196   30.01%
     18    20    80943.6394   157   115657.0000    80943.6394  1045113   30.01%
     21    23    80943.6394   159   115657.0000    80943.6394  1072392   30.01%
     22    24    80943.6394   177   115657.0000    80943.6394  1089809   30.01%
     26    28    80977.8111   129   115657.0000    80943.6394  1182969   30.01%
     30    32    80977.8111   174   115657.0000    80943.6394  1300695   30.01%
     51    53    81036.1438   167   115657.0000    80943.6394  1848291   30.01%
     53    55    80963.6956   166   115657.0000    80943.6394  2052068   30.01%
     55    57    80977.8111   135   115657.0000    80943.6394  2110527   30.01%
Elapsed time = 4688.80 sec. (1495306.84 ticks, tree = 0.00 MB, solutions = 1)
     56    58    81042.8082   121   115657.0000    80943.6394  2413361   30.01%
     60    62    81042.8082   119   115657.0000    80943.6394  2723489   30.01%
     64    66    81042.8082   120   115657.0000    80943.6394  2759365   30.01%
     68    70    81047.6064   105   115657.0000    80943.6394  3012048   30.01%
     72    74    81047.6064   106   115657.0000    80943.6394  3048646   30.01%
     76    78    81291.1433    98   115657.0000    80943.6394  3128595   30.01%
     80    82    81047.6064   109   115657.0000    80943.6394  3328764   30.01%
     84    86    81154.2267    81   115657.0000    80943.6394  3419366   30.01%
     88    90    81154.2267    85   115657.0000    80943.6394  3605836   30.01%
     92    94    81217.7267    70   115657.0000    80943.6394  3644187   30.01%
Elapsed time = 5478.87 sec. (1661536.46 ticks, tree = 0.00 MB, solutions = 1)
     96    98    81217.7267    71   115657.0000    80943.6394  3668052   30.01%
    100   102    81450.3100    76   115657.0000    80943.6394  3707870   30.01%
    104   106    81217.7267    79   115657.0000    80943.6394  3734917   30.01%
    108   110    81450.3100    94   115657.0000    80943.6394  3768159   30.01%
    120   122    81139.4633    81   115657.0000    80943.6394  4058005   30.01%
    122   124    81033.4058   114   115657.0000    80943.6394  4150861   30.01%
    126   128    81033.4058   111   115657.0000    80943.6394  4254100   30.01%
    130   132    81033.4058   113   115657.0000    80943.6394  4343233   30.01%
    134   136    81033.9433    99   115657.0000    80943.6394  4419476   30.01%
    138   140    81033.9433   102   115657.0000    80943.6394  4521563   30.01%
Elapsed time = 6761.46 sec. (1940101.02 ticks, tree = 4.34 MB, solutions = 1)
    142   144    81158.0000    89   115657.0000    80943.6394  4657822   30.01%
    146   148    81033.9433   101   115657.0000    80943.6394  4742591   30.01%
    147   149    81081.7440   109   115657.0000    80943.6394  4765780   30.01%
    151   153    81081.7440   102   115657.0000    80943.6394  4806909   30.01%
    154   156    81081.7440   109   115657.0000    80943.6394  4844593   30.01%

Mixed integer rounding cuts applied:  1243
Gomory fractional cuts applied:  6

Root node processing (before b&c):
  Real time             = 1414.48 sec. (395967.10 ticks)
Parallel b&c, 4 threads:
  Real time             = 5785.63 sec. (1643894.22 ticks)
  Sync time (average)   =  749.84 sec.
  Wait time (average)   =  749.91 sec.
                          ------------
Total (root+branch&cut) = 7200.11 sec. (2039861.32 ticks)
optimal objective= 115657.0

artificial: false edgeIndexset: [261, 165, 9, 122, 26] start node= 0 start time= 9 capacity type= 2 edgeSet: [261, 165, 9, 122, 26] ifChargeSet: []
(1,2)->(0,9)->(1,15)->(2,21)->(0,26)->(1,2):1

artificial: false edgeIndexset: [994, 1106, 995, 867, 771, 996, 997, 998, 615, 489] start node= 4 start time= 15 capacity type= 1 edgeSet: [994, 1106, 995, 867, 771, 996, 997, 998, 615, 489] ifChargeSet: []
(3,4)->(3,5)->(3,6)->(3,7)->(3,8)->(3,9)->(4,15)->(5,21)->(6,26)->(6,27)->(3,4):1

artificial: false edgeIndexset: [976, 977, 978, 979, 980, 598, 455, 973, 974, 351, 975] start node= 2 start time= 13 capacity type= 1 edgeSet: [976, 977, 978, 979, 980, 598, 455, 973, 974, 351, 975] ifChargeSet: []
(3,5)->(2,13)->(2,14)->(2,15)->(2,16)->(2,17)->(2,18)->(2,19)->(2,20)->(2,21)->(4,28)->(3,5):1

artificial: false edgeIndexset: [576, 981, 982, 359, 983, 984, 985, 986, 987, 988, 463] start node= 2 start time= 21 capacity type= 1 edgeSet: [576, 981, 982, 359, 983, 984, 985, 986, 987, 988, 463] ifChargeSet: []
(4,6)->(3,13)->(2,21)->(2,22)->(2,23)->(2,24)->(2,25)->(2,26)->(2,27)->(2,28)->(2,29)->(4,6):1

artificial: false edgeIndexset: [355, 467, 999, 1000, 1001, 1002, 1003, 572, 1004, 1005, 1006] start node= 3 start time= 9 capacity type= 1 edgeSet: [355, 467, 999, 1000, 1001, 1002, 1003, 572, 1004, 1005, 1006] ifChargeSet: []
(4,2)->(3,9)->(3,10)->(3,11)->(3,12)->(3,13)->(3,14)->(3,15)->(3,16)->(3,17)->(2,25)->(4,2):1

artificial: false edgeIndexset: [1056, 1057, 626, 1058, 500, 315, 699, 1052, 1053, 1054, 1055] start node= 5 start time= 2 capacity type= 0 edgeSet: [1056, 1057, 626, 1058, 500, 315, 699, 1052, 1053, 1054, 1055] ifChargeSet: []
(5,2)->(5,3)->(5,4)->(5,5)->(5,6)->(5,7)->(5,8)->(5,9)->(2,15)->(3,20)->(4,26)->(5,2):1

artificial: false edgeIndexset: [1045, 1046, 1047, 1048, 1049, 348, 460, 1020, 573, 1021, 1022] start node= 4 start time= 25 capacity type= 1 edgeSet: [1045, 1046, 1047, 1048, 1049, 348, 460, 1020, 573, 1021, 1022] ifChargeSet: []
(4,0)->(4,1)->(4,2)->(4,3)->(3,10)->(2,18)->(4,25)->(4,26)->(4,27)->(4,28)->(4,29)->(4,0):1

artificial: false edgeIndexset: [1040, 593, 1041, 338, 450, 1042, 1035, 1036, 1037, 1038, 1039] start node= 4 start time= 15 capacity type= 0 edgeSet: [1040, 593, 1041, 338, 450, 1042, 1035, 1036, 1037, 1038, 1039] ifChargeSet: []
(3,0)->(2,8)->(4,15)->(4,16)->(4,17)->(4,18)->(4,19)->(4,20)->(4,21)->(4,22)->(4,23)->(3,0):1

artificial: false edgeIndexset: [592, 1040, 337, 1041, 1034, 1035, 1036, 1037, 1038, 479, 1039] start node= 4 start time= 14 capacity type= 0 edgeSet: [592, 1040, 337, 1041, 1034, 1035, 1036, 1037, 1038, 479, 1039] ifChargeSet: []
(2,7)->(4,14)->(4,15)->(4,16)->(4,17)->(4,18)->(4,19)->(4,20)->(4,21)->(4,22)->(3,29)->(2,7):1

artificial: false edgeIndexset: [353, 167, 600, 11, 636] start node= 1 start time= 17 capacity type= 1 edgeSet: [353, 167, 600, 11, 636] ifChargeSet: []
(4,0)->(5,6)->(0,11)->(1,17)->(2,23)->(4,0):1

artificial: false edgeIndexset: [625, 162, 6, 631, 348] start node= 1 start time= 12 capacity type= 1 edgeSet: [625, 162, 6, 631, 348] ifChargeSet: []
(5,1)->(0,6)->(1,12)->(2,18)->(4,25)->(5,1):1

artificial: false edgeIndexset: [354, 168, 601, 12, 637] start node= 1 start time= 18 capacity type= 1 edgeSet: [354, 168, 601, 12, 637] ifChargeSet: []
(4,1)->(5,7)->(0,12)->(1,18)->(2,24)->(4,1):1

artificial: false edgeIndexset: [192, 498, 180, 564, 426] start node= 4 start time= 24 capacity type= 2 edgeSet: [192, 498, 180, 564, 426] ifChargeSet: []
(1,0)->(3,6)->(1,12)->(3,18)->(4,24)->(1,0):1

artificial: false edgeIndexset: [193, 499, 181, 565, 427] start node= 3 start time= 19 capacity type= 1 edgeSet: [193, 499, 181, 565, 427] ifChargeSet: []
(1,1)->(3,7)->(1,13)->(3,19)->(4,25)->(1,1):1

artificial: false edgeIndexset: [194, 500, 182, 566, 428] start node= 4 start time= 26 capacity type= 1 edgeSet: [194, 500, 182, 566, 428] ifChargeSet: []
(1,2)->(3,8)->(1,14)->(3,20)->(4,26)->(1,2):1

artificial: false edgeIndexset: [483, 195, 549, 441, 207] start node= 4 start time= 9 capacity type= 1 edgeSet: [483, 195, 549, 441, 207] ifChargeSet: []
(3,3)->(4,9)->(1,15)->(3,21)->(1,27)->(3,3):1

artificial: false edgeIndexset: [197, 503, 185, 569, 431] start node= 3 start time= 23 capacity type= 1 edgeSet: [197, 503, 185, 569, 431] ifChargeSet: []
(1,5)->(3,11)->(1,17)->(3,23)->(4,29)->(1,5):1

artificial: false edgeIndexset: [7, 23, 120, 648, 223, 959] start node= 5 start time= 18 capacity type= 2 edgeSet: [7, 23, 120, 648, 223, 959] ifChargeSet: []
(1,0)->(0,7)->(1,13)->(5,18)->(0,23)->(1,29)->(1,0):1

artificial: false edgeIndexset: [1, 434, 937, 266, 170, 188] start node= 3 start time= 14 capacity type= 2 edgeSet: [1, 434, 937, 266, 170, 188] ifChargeSet: []
(0,1)->(1,7)->(1,8)->(3,14)->(1,20)->(2,26)->(0,1):1

artificial: false edgeIndexset: [307, 805, 151, 410, 462] start node= 6 start time= 25 capacity type= 0 edgeSet: [307, 805, 151, 410, 462] ifChargeSet: []
(1,1)->(2,7)->(3,12)->(2,20)->(6,25)->(1,1):1

artificial: false edgeIndexset: [417, 469, 314, 158, 782] start node= 6 start time= 2 capacity type= 2 edgeSet: [417, 469, 314, 158, 782] ifChargeSet: []
(6,2)->(1,8)->(2,14)->(3,19)->(2,27)->(6,2):1

artificial: false edgeIndexset: [451, 326, 170, 794, 399] start node= 6 start time= 14 capacity type= 0 edgeSet: [451, 326, 170, 794, 399] ifChargeSet: []
(3,1)->(2,9)->(6,14)->(1,20)->(2,26)->(3,1):1

artificial: false edgeIndexset: [176, 800, 405, 457, 302] start node= 6 start time= 20 capacity type= 1 edgeSet: [176, 800, 405, 457, 302] ifChargeSet: []
(2,2)->(3,7)->(2,15)->(6,20)->(1,26)->(2,2):1

artificial: false edgeIndexset: [101, 636, 205, 799, 511] start node= 1 start time= 25 capacity type= 1 edgeSet: [101, 636, 205, 799, 511] ifChargeSet: []
(3,1)->(5,6)->(0,11)->(6,19)->(1,25)->(3,1):1

artificial: false edgeIndexset: [97, 632, 537, 201, 795] start node= 6 start time= 15 capacity type= 1 edgeSet: [97, 632, 537, 201, 795] ifChargeSet: []
(5,2)->(0,7)->(6,15)->(1,21)->(3,27)->(5,2):1

artificial: false edgeIndexset: [98, 633, 538, 202, 796] start node= 0 start time= 8 capacity type= 1 edgeSet: [98, 633, 538, 202, 796] ifChargeSet: []
(5,3)->(0,8)->(6,16)->(1,22)->(3,28)->(5,3):1

artificial: false edgeIndexset: [99, 634, 539, 203, 797] start node= 6 start time= 17 capacity type= 0 edgeSet: [99, 634, 539, 203, 797] ifChargeSet: []
(5,4)->(0,9)->(6,17)->(1,23)->(3,29)->(5,4):1

artificial: false edgeIndexset: [785, 117, 652, 527, 191] start node= 0 start time= 27 capacity type= 2 edgeSet: [785, 117, 652, 527, 191] ifChargeSet: []
(6,5)->(1,11)->(3,17)->(5,22)->(0,27)->(6,5):1

artificial: false edgeIndexset: [646, 809, 521, 185, 111] start node= 1 start time= 5 capacity type= 1 edgeSet: [646, 809, 521, 185, 111] ifChargeSet: []
(1,5)->(3,11)->(5,16)->(0,21)->(6,29)->(1,5):1

artificial: false edgeIndexset: [771, 806, 39, 615, 122] start node= 4 start time= 15 capacity type= 1 edgeSet: [771, 806, 39, 615, 122] ifChargeSet: []
(1,2)->(0,9)->(4,15)->(5,21)->(6,26)->(1,2):1

artificial: false edgeIndexset: [761, 59, 796, 605, 142] start node= 4 start time= 5 capacity type= 1 edgeSet: [761, 59, 796, 605, 142] ifChargeSet: []
(4,5)->(5,11)->(6,16)->(1,22)->(0,29)->(4,5):1

artificial: false edgeIndexset: [784, 130, 779, 47, 623] start node= 4 start time= 23 capacity type= 1 edgeSet: [784, 130, 779, 47, 623] ifChargeSet: []
(6,4)->(1,10)->(0,17)->(4,23)->(5,29)->(6,4):1

artificial: false edgeIndexset: [602, 506, 43, 589, 638] start node= 0 start time= 13 capacity type= 1 edgeSet: [602, 506, 43, 589, 638] ifChargeSet: []
(4,2)->(5,8)->(0,13)->(4,19)->(3,26)->(4,2):1

artificial: false edgeIndexset: [629, 503, 40, 586, 635] start node= 0 start time= 10 capacity type= 1 edgeSet: [629, 503, 40, 586, 635] ifChargeSet: []
(5,5)->(0,10)->(4,16)->(3,23)->(4,29)->(5,5):1

artificial: false edgeIndexset: [497, 34, 659, 580, 623] start node= 0 start time= 4 capacity type= 1 edgeSet: [497, 34, 659, 580, 623] ifChargeSet: []
(0,4)->(4,10)->(3,17)->(4,23)->(5,29)->(0,4):1

artificial: false edgeIndexset: [592, 641, 605, 509, 46] start node= 0 start time= 16 capacity type= 1 edgeSet: [592, 641, 605, 509, 46] ifChargeSet: []
(4,5)->(5,11)->(0,16)->(4,22)->(3,29)->(4,5):1

artificial: false edgeIndexset: [618, 59, 492, 654, 575] start node= 0 start time= 29 capacity type= 1 edgeSet: [618, 59, 492, 654, 575] ifChargeSet: []
(4,5)->(3,12)->(4,18)->(5,24)->(0,29)->(4,5):1

artificial: false edgeIndexset: [163, 409, 570, 427, 894] start node= 4 start time= 0 capacity type= 2 edgeSet: [163, 409, 570, 427, 894] ifChargeSet: []
(4,0)->(3,7)->(1,13)->(2,19)->(6,24)->(4,0):1

artificial: false edgeIndexset: [418, 579, 436, 873, 172] start node= 4 start time= 9 capacity type= 1 edgeSet: [418, 579, 436, 873, 172] ifChargeSet: []
(6,3)->(4,9)->(3,16)->(1,22)->(2,28)->(6,3):1

artificial: false edgeIndexset: [178, 585, 394, 442, 879] start node= 4 start time= 15 capacity type= 2 edgeSet: [178, 585, 394, 442, 879] ifChargeSet: []
(2,4)->(6,9)->(4,15)->(3,22)->(1,28)->(2,4):1

artificial: false edgeIndexset: [867, 484, 166, 550, 412] start node= 4 start time= 10 capacity type= 1 edgeSet: [867, 484, 166, 550, 412] ifChargeSet: []
(3,4)->(4,10)->(1,16)->(2,22)->(6,27)->(3,4):1

artificial: false edgeIndexset: [16, 641, 657, 902, 232, 63] start node= 1 start time= 22 capacity type= 1 edgeSet: [16, 641, 657, 902, 232, 63] ifChargeSet: []
(0,2)->(0,3)->(5,11)->(0,16)->(1,22)->(5,27)->(0,2):1

artificial: false edgeIndexset: [435, 310, 153, 201, 969, 447] start node= 2 start time= 9 capacity type= 1 edgeSet: [435, 310, 153, 201, 969, 447] ifChargeSet: []
(1,3)->(2,9)->(2,10)->(3,15)->(1,21)->(3,27)->(1,3):1

artificial: false edgeIndexset: [932, 213, 73, 26, 651, 638] start node= 1 start time= 3 capacity type= 1 edgeSet: [932, 213, 73, 26, 651, 638] ifChargeSet: []
(1,2)->(1,3)->(5,8)->(0,13)->(5,21)->(0,26)->(1,2):1

artificial: false edgeIndexset: [928, 640, 215, 75, 29, 653] start node= 1 start time= 5 capacity type= 1 edgeSet: [928, 640, 215, 75, 29, 653] ifChargeSet: []
(1,5)->(5,10)->(0,15)->(5,23)->(0,28)->(0,29)->(1,5):1

artificial: false edgeIndexset: [210, 70, 23, 648, 635, 959] start node= 1 start time= 29 capacity type= 0 edgeSet: [210, 70, 23, 648, 635, 959] ifChargeSet: []
(1,0)->(5,5)->(0,10)->(5,18)->(0,23)->(1,29)->(1,0):1

artificial: false edgeIndexset: [742, 74, 507, 603, 639] start node= 4 start time= 3 capacity type= 1 edgeSet: [742, 74, 507, 603, 639] ifChargeSet: []
(4,3)->(5,9)->(0,14)->(5,22)->(3,27)->(4,3):1

artificial: false edgeIndexset: [496, 658, 731, 622, 63] start node= 4 start time= 22 capacity type= 1 edgeSet: [496, 658, 731, 622, 63] ifChargeSet: []
(0,3)->(5,11)->(3,16)->(4,22)->(5,28)->(0,3):1

artificial: false edgeIndexset: [529, 360, 314, 698, 714] start node= 5 start time= 24 capacity type= 2 edgeSet: [529, 360, 314, 698, 714] ifChargeSet: []
(2,0)->(5,8)->(2,14)->(3,19)->(5,24)->(2,0):1

artificial: false edgeIndexset: [82, 6, 631, 647, 1050, 222] start node= 1 start time= 12 capacity type= 2 edgeSet: [82, 6, 631, 647, 1050, 222] ifChargeSet: []
(5,0)->(5,1)->(0,6)->(1,12)->(5,17)->(0,22)->(5,0):1

artificial: false edgeIndexset: [642, 517, 775, 840, 77] start node= 3 start time= 7 capacity type= 1 edgeSet: [642, 517, 775, 840, 77] ifChargeSet: []
(6,0)->(3,7)->(5,12)->(0,17)->(5,25)->(6,0):1

artificial: false edgeIndexset: [656, 531, 854, 759, 61] start node= 3 start time= 21 capacity type= 1 edgeSet: [656, 531, 854, 759, 61] ifChargeSet: []
(0,1)->(5,9)->(6,14)->(3,21)->(5,26)->(0,1):1

artificial: false edgeIndexset: [883, 758, 619, 60, 655] start node= 4 start time= 19 capacity type= 1 edgeSet: [883, 758, 619, 60, 655] ifChargeSet: []
(0,0)->(5,8)->(6,13)->(4,19)->(5,25)->(0,0):1

artificial: false edgeIndexset: [881, 756, 88, 617, 653] start node= 4 start time= 17 capacity type= 0 edgeSet: [881, 756, 88, 617, 653] ifChargeSet: []
(5,6)->(6,11)->(4,17)->(5,23)->(0,28)->(5,6):1

artificial: false edgeIndexset: [224, 864, 769, 666, 511] start node= 6 start time= 24 capacity type= 2 edgeSet: [224, 864, 769, 666, 511] ifChargeSet: []
(3,1)->(5,6)->(1,14)->(5,19)->(6,24)->(3,1):1

artificial: false edgeIndexset: [529, 852, 212, 757, 684] start node= 3 start time= 19 capacity type= 0 edgeSet: [529, 852, 212, 757, 684] ifChargeSet: []
(1,2)->(5,7)->(6,12)->(3,19)->(5,24)->(1,2):1

artificial: false edgeIndexset: [678, 523, 236, 846, 751] start node= 3 start time= 13 capacity type= 1 edgeSet: [678, 523, 236, 846, 751] ifChargeSet: []
(5,1)->(6,6)->(3,13)->(5,18)->(1,26)->(5,1):1

artificial: false edgeIndexset: [662, 537, 220, 860, 765] start node= 6 start time= 20 capacity type= 1 edgeSet: [662, 537, 220, 860, 765] ifChargeSet: []
(5,2)->(1,10)->(5,15)->(6,20)->(3,27)->(5,2):1

artificial: false edgeIndexset: [515, 868, 228, 773, 670] start node= 3 start time= 5 capacity type= 0 edgeSet: [515, 868, 228, 773, 670] ifChargeSet: []
(3,5)->(5,10)->(1,18)->(5,23)->(6,28)->(3,5):1

artificial: false edgeIndexset: [688, 886, 216, 761, 622] start node= 4 start time= 22 capacity type= 1 edgeSet: [688, 886, 216, 761, 622] ifChargeSet: []
(1,6)->(5,11)->(6,16)->(4,22)->(5,28)->(1,6):1

artificial: false edgeIndexset: [320, 65, 979, 630, 535, 703] start node= 2 start time= 20 capacity type= 1 edgeSet: [320, 65, 979, 630, 535, 703] ifChargeSet: []
(5,0)->(0,5)->(5,13)->(2,19)->(2,20)->(3,25)->(5,0):1

artificial: false edgeIndexset: [514, 471, 329, 699, 316, 975] start node= 5 start time= 9 capacity type= 1 edgeSet: [514, 471, 329, 699, 316, 975] ifChargeSet: []
(3,4)->(5,9)->(2,15)->(2,16)->(3,21)->(2,29)->(3,4):1

artificial: false edgeIndexset: [320, 704, 998, 519, 475, 303] start node= 3 start time= 8 capacity type= 1 edgeSet: [320, 704, 998, 519, 475, 303] ifChargeSet: []
(2,3)->(3,8)->(3,9)->(5,14)->(2,20)->(3,25)->(2,3):1

artificial: false edgeIndexset: [321, 307, 691, 536, 1002, 463] start node= 3 start time= 13 capacity type= 1 edgeSet: [321, 307, 691, 536, 1002, 463] ifChargeSet: []
(5,1)->(2,7)->(3,12)->(3,13)->(2,21)->(3,26)->(5,1):1

artificial: false edgeIndexset: [464, 322, 693, 309, 537, 1052] start node= 2 start time= 9 capacity type= 1 edgeSet: [464, 322, 693, 309, 537, 1052] ifChargeSet: []
(5,2)->(5,3)->(2,9)->(3,14)->(2,22)->(3,27)->(5,2):1

artificial: false edgeIndexset: [768, 803, 70, 634, 909, 239] start node= 1 start time= 29 capacity type= 1 edgeSet: [768, 803, 70, 634, 909, 239] ifChargeSet: []
(5,4)->(0,9)->(0,10)->(5,18)->(6,23)->(1,29)->(5,4):1

artificial: false edgeIndexset: [868, 918, 455, 919, 253, 110] start node= 0 start time= 18 capacity type= 1 edgeSet: [868, 918, 455, 919, 253, 110] ifChargeSet: []
(3,5)->(2,13)->(0,18)->(0,19)->(0,20)->(6,28)->(3,5):1

artificial: false edgeIndexset: [2, 711, 938, 939, 267, 526, 190] start node= 2 start time= 27 capacity type= 1 edgeSet: [2, 711, 938, 939, 267, 526, 190] ifChargeSet: []
(0,2)->(1,8)->(1,9)->(1,10)->(3,16)->(5,21)->(2,27)->(0,2):1

artificial: false edgeIndexset: [992, 865, 916, 453, 251, 107] start node= 0 start time= 17 capacity type= 1 edgeSet: [992, 865, 916, 453, 251, 107] ifChargeSet: []
(3,2)->(3,3)->(2,11)->(0,16)->(0,17)->(6,25)->(3,2):1

artificial: false edgeIndexset: [992, 513, 20, 919, 698, 206, 254] start node= 2 start time= 14 capacity type= 1 edgeSet: [992, 513, 20, 919, 698, 206, 254] ifChargeSet: []
(3,2)->(3,3)->(5,8)->(2,14)->(0,19)->(0,20)->(1,26)->(3,2):1

artificial: false edgeIndexset: [705, 933, 981, 262, 520, 184, 27] start node= 2 start time= 21 capacity type= 1 edgeSet: [705, 933, 981, 262, 520, 184, 27] ifChargeSet: []
(1,3)->(1,4)->(3,10)->(5,15)->(2,21)->(2,22)->(0,27)->(1,3):1

artificial: false edgeIndexset: [515, 835, 760, 825, 410, 300] start node= 5 start time= 10 capacity type= 2 edgeSet: [515, 835, 760, 825, 410, 300] ifChargeSet: []
(2,0)->(3,5)->(5,10)->(6,15)->(2,20)->(6,25)->(2,0):1

artificial: false edgeIndexset: [512, 832, 757, 822, 327, 407] start node= 5 start time= 7 capacity type= 0 edgeSet: [512, 832, 757, 822, 327, 407] ifChargeSet: []
(3,2)->(5,7)->(6,12)->(2,17)->(6,22)->(2,27)->(3,2):1

artificial: false edgeIndexset: [817, 772, 837, 312, 392, 527] start node= 5 start time= 22 capacity type= 1 edgeSet: [817, 772, 837, 312, 392, 527] ifChargeSet: []
(2,2)->(6,7)->(2,12)->(3,17)->(5,22)->(6,27)->(2,2):1

artificial: false edgeIndexset: [532, 822, 777, 812, 317, 397] start node= 5 start time= 27 capacity type= 2 edgeSet: [532, 822, 777, 812, 317, 397] ifChargeSet: []
(6,2)->(2,7)->(6,12)->(2,17)->(3,22)->(5,27)->(6,2):1

artificial: false edgeIndexset: [533, 823, 778, 813, 318, 398] start node= 5 start time= 28 capacity type= 1 edgeSet: [533, 823, 778, 813, 318, 398] ifChargeSet: []
(6,3)->(2,8)->(6,13)->(2,18)->(3,23)->(5,28)->(6,3):1

artificial: false edgeIndexset: [534, 824, 779, 814, 319, 399] start node= 3 start time= 24 capacity type= 0 edgeSet: [534, 824, 779, 814, 319, 399] ifChargeSet: []
(6,4)->(2,9)->(6,14)->(2,19)->(3,24)->(5,29)->(6,4):1

artificial: false edgeIndexset: [0, 929, 708, 264, 522, 186, 1067] start node= 2 start time= 24 capacity type= 1 edgeSet: [0, 929, 708, 264, 522, 186, 1067] ifChargeSet: []
(0,0)->(1,6)->(3,12)->(5,17)->(5,18)->(2,24)->(0,29)->(0,0):1

artificial: false edgeIndexset: [692, 1016, 200, 968, 537, 249, 14] start node= 2 start time= 8 capacity type= 1 edgeSet: [692, 1016, 200, 968, 537, 249, 14] ifChargeSet: []
(5,2)->(2,8)->(2,9)->(0,14)->(1,20)->(3,26)->(3,27)->(5,2):1

artificial: false edgeIndexset: [816, 401, 836, 391, 826, 411] start node= 6 start time= 6 capacity type= 1 edgeSet: [816, 401, 836, 391, 826, 411] ifChargeSet: []
(2,1)->(6,6)->(2,11)->(6,16)->(2,21)->(6,26)->(2,1):1

artificial: false edgeIndexset: [818, 403, 838, 393, 828, 413] start node= 2 start time= 3 capacity type= 0 edgeSet: [818, 403, 838, 393, 828, 413] ifChargeSet: []
(2,3)->(6,8)->(2,13)->(6,18)->(2,23)->(6,28)->(2,3):1

artificial: false edgeIndexset: [720, 515, 740, 535, 730, 525] start node= 5 start time= 0 capacity type= 1 edgeSet: [720, 515, 740, 535, 730, 525] ifChargeSet: []
(5,0)->(3,5)->(5,10)->(3,15)->(5,20)->(3,25)->(5,0):1

artificial: false edgeIndexset: [529, 724, 519, 744, 539, 734] start node= 5 start time= 4 capacity type= 2 edgeSet: [529, 724, 519, 744, 539, 734] ifChargeSet: []
(5,4)->(3,9)->(5,14)->(3,19)->(5,24)->(3,29)->(5,4):1

artificial: false edgeIndexset: [994, 867, 227, 772, 485, 551] start node= 1 start time= 17 capacity type= 2 edgeSet: [994, 867, 227, 772, 485, 551] ifChargeSet: []
(3,4)->(3,5)->(4,11)->(1,17)->(5,22)->(6,27)->(3,4):1

artificial: false edgeIndexset: [66, 675, 1064, 904, 905, 269, 173] start node= 0 start time= 4 capacity type= 1 edgeSet: [66, 675, 1064, 904, 905, 269, 173] ifChargeSet: []
(0,4)->(0,5)->(0,6)->(5,14)->(5,15)->(1,23)->(2,29)->(0,4):1

artificial: false edgeIndexset: [480, 224, 546, 325, 709, 942, 943] start node= 1 start time= 12 capacity type= 1 edgeSet: [480, 224, 546, 325, 709, 942, 943] ifChargeSet: []
(3,0)->(4,6)->(1,12)->(1,13)->(1,14)->(5,19)->(2,25)->(3,0):1

artificial: false edgeIndexset: [544, 323, 707, 1066, 508, 940, 221] start node= 4 start time= 4 capacity type= 1 edgeSet: [544, 323, 707, 1066, 508, 940, 221] ifChargeSet: []
(4,4)->(1,10)->(1,11)->(5,16)->(5,17)->(2,23)->(3,28)->(4,4):1

artificial: false edgeIndexset: [305, 1078, 952, 233, 490, 556, 719] start node= 1 start time= 22 capacity type= 1 edgeSet: [305, 1078, 952, 233, 490, 556, 719] ifChargeSet: []
(2,5)->(3,10)->(4,16)->(1,22)->(1,23)->(5,28)->(5,29)->(2,5):1

artificial: false edgeIndexset: [1008, 499, 212, 1045, 566, 313, 697] start node= 4 start time= 25 capacity type= 1 edgeSet: [1008, 499, 212, 1045, 566, 313, 697] ifChargeSet: []
(1,2)->(5,7)->(2,13)->(3,18)->(3,19)->(4,25)->(4,26)->(1,2):1

artificial: false edgeIndexset: [305, 1000, 234, 491, 1037, 558, 719] start node= 5 start time= 29 capacity type= 0 edgeSet: [305, 1000, 234, 491, 1037, 558, 719] ifChargeSet: []
(2,5)->(3,10)->(3,11)->(4,17)->(4,18)->(1,24)->(5,29)->(2,5):1

artificial: false edgeIndexset: [503, 1049, 217, 1020, 541, 318, 702] start node= 4 start time= 0 capacity type= 1 edgeSet: [503, 1049, 217, 1020, 541, 318, 702] ifChargeSet: []
(4,0)->(4,1)->(1,7)->(5,12)->(2,18)->(3,23)->(4,29)->(4,0):1

artificial: false edgeIndexset: [224, 481, 1027, 548, 326, 710, 1069] start node= 4 start time= 7 capacity type= 1 edgeSet: [224, 481, 1027, 548, 326, 710, 1069] ifChargeSet: []
(3,1)->(4,7)->(4,8)->(1,14)->(5,19)->(5,20)->(2,26)->(3,1):1

artificial: false edgeIndexset: [951, 952, 953, 954, 284, 158, 271, 175] start node= 1 start time= 21 capacity type= 2 edgeSet: [951, 952, 953, 954, 284, 158, 271, 175] ifChargeSet: []
(2,1)->(1,8)->(2,14)->(1,21)->(1,22)->(1,23)->(1,24)->(1,25)->(2,1):1

artificial: false edgeIndexset: [160, 273, 961, 962, 953, 954, 286, 175] start node= 1 start time= 23 capacity type= 1 edgeSet: [160, 273, 961, 962, 953, 954, 286, 175] ifChargeSet: []
(2,1)->(2,2)->(2,3)->(1,10)->(2,16)->(1,23)->(1,24)->(1,25)->(2,1):1

artificial: false edgeIndexset: [161, 961, 274, 962, 963, 954, 287, 175] start node= 1 start time= 24 capacity type= 1 edgeSet: [161, 961, 274, 962, 963, 954, 287, 175] ifChargeSet: []
(2,1)->(2,2)->(2,3)->(2,4)->(1,11)->(2,17)->(1,24)->(1,25)->(2,1):1

artificial: false edgeIndexset: [177, 290, 963, 164, 964, 277, 965, 966] start node= 2 start time= 3 capacity type= 0 edgeSet: [177, 290, 963, 164, 964, 277, 965, 966] ifChargeSet: []
(2,3)->(2,4)->(2,5)->(2,6)->(2,7)->(1,14)->(2,20)->(1,27)->(2,3):1

artificial: false edgeIndexset: [294, 151, 967, 168, 968, 281, 969, 970] start node= 2 start time= 7 capacity type= 0 edgeSet: [294, 151, 967, 168, 968, 281, 969, 970] ifChargeSet: []
(1,1)->(2,7)->(2,8)->(2,9)->(2,10)->(2,11)->(1,18)->(2,24)->(1,1):1

artificial: false edgeIndexset: [294, 151, 967, 168, 968, 281, 969, 970] start node= 2 start time= 7 capacity type= 1 edgeSet: [294, 151, 967, 168, 968, 281, 969, 970] ifChargeSet: []
(1,1)->(2,7)->(2,8)->(2,9)->(2,10)->(2,11)->(1,18)->(2,24)->(1,1):1

artificial: false edgeIndexset: [560, 146, 1091, 884, 1092, 1093, 93] start node= 6 start time= 11 capacity type= 1 edgeSet: [560, 146, 1091, 884, 1092, 1093, 93] ifChargeSet: []
(0,3)->(6,11)->(6,12)->(6,13)->(6,14)->(4,20)->(1,26)->(0,3):1

artificial: false edgeIndexset: [561, 147, 1092, 885, 1093, 1094, 94] start node= 6 start time= 12 capacity type= 2 edgeSet: [561, 147, 1092, 885, 1093, 1094, 94] ifChargeSet: []
(0,4)->(6,12)->(6,13)->(6,14)->(6,15)->(4,21)->(1,27)->(0,4):1

artificial: false edgeIndexset: [562, 148, 1093, 886, 1094, 1095, 95] start node= 6 start time= 13 capacity type= 0 edgeSet: [562, 148, 1093, 886, 1094, 1095, 95] ifChargeSet: []
(0,5)->(6,13)->(6,14)->(6,15)->(6,16)->(4,22)->(1,28)->(0,5):1

artificial: false edgeIndexset: [100, 567, 1098, 123, 891, 1099, 1100] start node= 6 start time= 18 capacity type= 2 edgeSet: [100, 567, 1098, 123, 891, 1099, 1100] ifChargeSet: []
(1,3)->(0,10)->(6,18)->(6,19)->(6,20)->(6,21)->(4,27)->(1,3):1

artificial: false edgeIndexset: [102, 569, 1100, 125, 893, 1101, 1102] start node= 6 start time= 20 capacity type= 0 edgeSet: [102, 569, 1100, 125, 893, 1101, 1102] ifChargeSet: []
(1,5)->(0,12)->(6,20)->(6,21)->(6,22)->(6,23)->(4,29)->(1,5):1

artificial: false edgeIndexset: [913, 914, 915, 420, 916, 745, 77, 126] start node= 0 start time= 13 capacity type= 2 edgeSet: [913, 914, 915, 420, 916, 745, 77, 126] ifChargeSet: []
(3,0)->(1,6)->(0,13)->(0,14)->(0,15)->(0,16)->(0,17)->(5,25)->(3,0):1

artificial: false edgeIndexset: [928, 929, 434, 900, 729, 140, 61, 927] start node= 0 start time= 27 capacity type= 1 edgeSet: [928, 929, 434, 900, 729, 140, 61, 927] ifChargeSet: []
(0,0)->(0,1)->(5,9)->(3,14)->(1,20)->(0,27)->(0,28)->(0,29)->(0,0):1

artificial: false edgeIndexset: [725, 87, 136, 923, 924, 925, 430, 926] start node= 0 start time= 23 capacity type= 1 edgeSet: [725, 87, 136, 923, 924, 925, 430, 926] ifChargeSet: []
(5,5)->(3,10)->(1,16)->(0,23)->(0,24)->(0,25)->(0,26)->(0,27)->(5,5):1

artificial: false edgeIndexset: [726, 88, 137, 924, 925, 926, 431, 927] start node= 0 start time= 24 capacity type= 1 edgeSet: [726, 88, 137, 924, 925, 926, 431, 927] ifChargeSet: []
(5,6)->(3,11)->(1,17)->(0,24)->(0,25)->(0,26)->(0,27)->(0,28)->(5,6):1

artificial: false edgeIndexset: [1056, 291, 165, 667, 1053, 238, 1054, 1055] start node= 5 start time= 3 capacity type= 2 edgeSet: [1056, 291, 165, 667, 1053, 238, 1054, 1055] ifChargeSet: []
(5,3)->(5,4)->(5,5)->(5,6)->(5,7)->(1,15)->(2,21)->(1,28)->(5,3):1

artificial: false edgeIndexset: [609, 1026, 1027, 1028, 265, 765, 30, 830] start node= 4 start time= 6 capacity type= 0 edgeSet: [609, 1026, 1027, 1028, 265, 765, 30, 830] ifChargeSet: []
(0,0)->(4,6)->(4,7)->(4,8)->(4,9)->(5,15)->(6,20)->(2,25)->(0,0):1

artificial: false edgeIndexset: [609, 1026, 1027, 1028, 265, 765, 30, 830] start node= 4 start time= 6 capacity type= 1 edgeSet: [609, 1026, 1027, 1028, 265, 765, 30, 830] ifChargeSet: []
(0,0)->(4,6)->(4,7)->(4,8)->(4,9)->(5,15)->(6,20)->(2,25)->(0,0):1

artificial: false edgeIndexset: [1024, 1025, 262, 57, 762, 827, 606, 1023] start node= 4 start time= 3 capacity type= 1 edgeSet: [1024, 1025, 262, 57, 762, 827, 606, 1023] ifChargeSet: []
(4,3)->(4,4)->(4,5)->(4,6)->(5,12)->(6,17)->(2,22)->(0,27)->(4,3):1

artificial: false edgeIndexset: [160, 662, 1078, 1079, 233, 1050, 1051, 286] start node= 5 start time= 28 capacity type= 0 edgeSet: [160, 662, 1078, 1079, 233, 1050, 1051, 286] ifChargeSet: []
(5,0)->(5,1)->(5,2)->(1,10)->(2,16)->(1,23)->(5,28)->(5,29)->(5,0):1

artificial: false edgeIndexset: [752, 817, 626, 1043, 1044, 1045, 252, 47] start node= 4 start time= 23 capacity type= 0 edgeSet: [752, 817, 626, 1043, 1044, 1045, 252, 47] ifChargeSet: []
(5,2)->(6,7)->(2,12)->(0,17)->(4,23)->(4,24)->(4,25)->(4,26)->(5,2):1

artificial: false edgeIndexset: [50, 755, 820, 629, 1046, 1047, 1048, 255] start node= 4 start time= 26 capacity type= 1 edgeSet: [50, 755, 820, 629, 1046, 1047, 1048, 255] ifChargeSet: []
(5,5)->(6,10)->(2,15)->(0,20)->(4,26)->(4,27)->(4,28)->(4,29)->(5,5):1

artificial: false edgeIndexset: [1056, 85, 72, 650, 1053, 637, 1054, 1055] start node= 5 start time= 7 capacity type= 0 edgeSet: [1056, 85, 72, 650, 1053, 637, 1054, 1055] ifChargeSet: []
(5,3)->(5,4)->(5,5)->(5,6)->(5,7)->(0,12)->(5,20)->(0,25)->(5,3):1

artificial: false edgeIndexset: [224, 769, 834, 8, 904, 905, 906, 907, 269] start node= 0 start time= 4 capacity type= 0 edgeSet: [224, 769, 834, 8, 904, 905, 906, 907, 269] ifChargeSet: []
(0,4)->(0,5)->(0,6)->(0,7)->(0,8)->(1,14)->(5,19)->(6,24)->(2,29)->(0,4):1

artificial: false edgeIndexset: [912, 913, 914, 246, 231, 776, 811, 15, 911] start node= 0 start time= 11 capacity type= 1 edgeSet: [912, 913, 914, 246, 231, 776, 811, 15, 911] ifChargeSet: []
(6,1)->(2,6)->(0,11)->(0,12)->(0,13)->(0,14)->(0,15)->(1,21)->(5,26)->(6,1):1

artificial: false edgeIndexset: [17, 913, 914, 915, 916, 248, 233, 778, 813] start node= 0 start time= 13 capacity type= 1 edgeSet: [17, 913, 914, 915, 916, 248, 233, 778, 813] ifChargeSet: []
(6,3)->(2,8)->(0,13)->(0,14)->(0,15)->(0,16)->(0,17)->(1,23)->(5,28)->(6,3):1

artificial: false edgeIndexset: [944, 241, 945, 226, 771, 836, 6, 942, 943] start node= 1 start time= 12 capacity type= 1 edgeSet: [944, 241, 945, 226, 771, 836, 6, 942, 943] ifChargeSet: []
(2,1)->(0,6)->(1,12)->(1,13)->(1,14)->(1,15)->(1,16)->(5,21)->(6,26)->(2,1):1

artificial: false edgeIndexset: [768, 833, 3, 939, 268, 940, 941, 942, 223] start node= 1 start time= 9 capacity type= 1 edgeSet: [768, 833, 3, 939, 268, 940, 941, 942, 223] ifChargeSet: []
(0,3)->(1,9)->(1,10)->(1,11)->(1,12)->(1,13)->(5,18)->(6,23)->(2,28)->(0,3):1

artificial: false edgeIndexset: [946, 947, 948, 245, 949, 230, 775, 10, 810] start node= 1 start time= 16 capacity type= 0 edgeSet: [946, 947, 948, 245, 949, 230, 775, 10, 810] ifChargeSet: []
(6,0)->(2,5)->(0,10)->(1,16)->(1,17)->(1,18)->(1,19)->(1,20)->(5,25)->(6,0):1

artificial: false edgeIndexset: [224, 769, 834, 4, 940, 269, 941, 942, 943] start node= 1 start time= 10 capacity type= 1 edgeSet: [224, 769, 834, 4, 940, 269, 941, 942, 943] ifChargeSet: []
(0,4)->(1,10)->(1,11)->(1,12)->(1,13)->(1,14)->(5,19)->(6,24)->(2,29)->(0,4):2

artificial: false edgeIndexset: [256, 930, 211, 756, 21, 821, 957, 958, 959] start node= 1 start time= 27 capacity type= 2 edgeSet: [256, 930, 211, 756, 21, 821, 957, 958, 959] ifChargeSet: []
(1,0)->(1,1)->(5,6)->(6,11)->(2,16)->(0,21)->(1,27)->(1,28)->(1,29)->(1,0):1

artificial: false edgeIndexset: [944, 945, 946, 243, 947, 228, 773, 838, 8] start node= 1 start time= 14 capacity type= 1 edgeSet: [944, 945, 946, 243, 947, 228, 773, 838, 8] ifChargeSet: []
(2,3)->(0,8)->(1,14)->(1,15)->(1,16)->(1,17)->(1,18)->(5,23)->(6,28)->(2,3):1

artificial: false edgeIndexset: [945, 946, 947, 244, 948, 229, 774, 839, 9] start node= 1 start time= 15 capacity type= 1 edgeSet: [945, 946, 947, 244, 948, 229, 774, 839, 9] ifChargeSet: []
(2,4)->(0,9)->(1,15)->(1,16)->(1,17)->(1,18)->(1,19)->(5,24)->(6,29)->(2,4):1

artificial: false edgeIndexset: [210, 755, 20, 820, 956, 957, 958, 255, 959] start node= 1 start time= 26 capacity type= 2 edgeSet: [210, 755, 20, 820, 956, 957, 958, 255, 959] ifChargeSet: []
(1,0)->(5,5)->(6,10)->(2,15)->(0,20)->(1,26)->(1,27)->(1,28)->(1,29)->(1,0):1

artificial: false edgeIndexset: [740, 151, 1065, 1066, 1067, 1068, 445, 1069, 367] start node= 5 start time= 15 capacity type= 2 edgeSet: [740, 151, 1065, 1066, 1067, 1068, 445, 1069, 367] ifChargeSet: []
(1,1)->(2,7)->(5,15)->(5,16)->(5,17)->(5,18)->(5,19)->(5,20)->(3,25)->(1,1):1

artificial: false edgeIndexset: [448, 1072, 370, 743, 154, 1068, 1069, 1070, 1071] start node= 5 start time= 18 capacity type= 2 edgeSet: [448, 1072, 370, 743, 154, 1068, 1069, 1070, 1071] ifChargeSet: []
(1,4)->(2,10)->(5,18)->(5,19)->(5,20)->(5,21)->(5,22)->(5,23)->(3,28)->(1,4):1

artificial: false edgeIndexset: [1073, 1074, 1075, 1076, 1077, 375, 423, 748, 159] start node= 5 start time= 23 capacity type= 1 edgeSet: [1073, 1074, 1075, 1076, 1077, 375, 423, 748, 159] ifChargeSet: []
(3,3)->(1,9)->(2,15)->(5,23)->(5,24)->(5,25)->(5,26)->(5,27)->(5,28)->(3,3):1

artificial: false edgeIndexset: [176, 1009, 962, 1091, 963, 852, 964, 965, 440, 396] start node= 1 start time= 26 capacity type= 1 edgeSet: [176, 1009, 962, 1091, 963, 852, 964, 965, 440, 396] ifChargeSet: []
(2,2)->(2,3)->(2,4)->(2,5)->(2,6)->(6,11)->(6,12)->(3,19)->(3,20)->(1,26)->(2,2):1

Total time= 7817432
Solve for test7_5_15_50_400B.txt
number of service arcs=750
number of holding arcs=250

Solve for test7_5_15_50_400A.txt
number of service arcs=750
number of holding arcs=250

Time of first LP solve= 644592

There are 4350 columns added to the model.

Tried aggregator 2 times.
MIP Presolve eliminated 14020 rows and 31 columns.
Aggregator did 2383 substitutions.
Reduced MIP has 84862 rows, 324023 columns, and 934104 nonzeros.
Reduced MIP has 0 binaries, 4334 generals, 0 SOSs, and 0 indicators.
Presolve time = 0.55 sec. (406.73 ticks)
Tried aggregator 1 time.
MIP Presolve eliminated 1453 rows and 5549 columns.
Reduced MIP has 83409 rows, 318474 columns, and 918858 nonzeros.
Reduced MIP has 0 binaries, 4334 generals, 0 SOSs, and 0 indicators.
Presolve time = 0.97 sec. (392.64 ticks)
MIP emphasis: balance optimality and feasibility.
MIP search method: dynamic search.
Parallel mode: deterministic, using up to 4 threads.
Root relaxation solution time = 184.44 sec. (48607.00 ticks)

        Nodes                                         Cuts/
   Node  Left     Objective  IInf  Best Integer    Best Bound    ItCnt     Gap

      0     0    45291.9271    56                  45291.9271    58126         
      0     0    45291.9271    62                   Cuts: 491    67703         
*     0+    0                        83870.0000    45291.9271            46.00%
      0     0    45291.9271    71    83870.0000     Cuts: 491    76837   46.00%
Heuristic still looking.
Heuristic still looking.
Heuristic still looking.
*     0+    0                        46738.0000    45291.9271             3.09%
      0     2    45291.9271    71    46738.0000    45291.9271    76837    3.09%
Elapsed time = 697.93 sec. (235178.31 ticks, tree = 0.00 MB, solutions = 2)
      1     3    45291.9271    70    46738.0000    45291.9271    83695    3.09%
      2     4    45291.9271    70    46738.0000    45291.9271    84591    3.09%
      3     5    45291.9271    46    46738.0000    45291.9271    94260    3.09%
      4     6    45291.9271    53    46738.0000    45291.9271    94388    3.09%
      5     7    45365.8069    41    46738.0000    45291.9271   122025    3.09%
      6     8    45291.9271    67    46738.0000    45291.9271   154080    3.09%
      8    10    45387.5644    47    46738.0000    45291.9271   222189    3.09%
     10    12    45291.9271    58    46738.0000    45291.9271   270120    3.09%
     15    17    45365.8069    43    46738.0000    45291.9271   310427    3.09%
     21    23    45291.9271    43    46738.0000    45291.9271   331444    3.09%
Elapsed time = 1420.47 sec. (512518.34 ticks, tree = 0.00 MB, solutions = 2)
     22    24    45291.9271    45    46738.0000    45291.9271   332052    3.09%
     24    26    45387.5644    51    46738.0000    45291.9271   337386    3.09%
     26    28    45365.8069    42    46738.0000    45291.9271   353371    3.09%
     28    30    45387.5644    54    46738.0000    45291.9271   364847    3.09%
     32    34    45440.2844    48    46738.0000    45291.9271   381882    3.09%
     36    38    45498.1956    46    46738.0000    45291.9271   401320    3.09%
     38    40    45292.1692    49    46738.0000    45291.9271   413204    3.09%
     40    42    45437.2098    45    46738.0000    45291.9271   423529    3.09%
     41    43    45292.1692    40    46738.0000    45291.9271   423767    3.09%
     43    45    45387.5644    60    46738.0000    45291.9271   424662    3.09%
Elapsed time = 1813.32 sec. (613275.82 ticks, tree = 0.00 MB, solutions = 2)
     45    47    45437.2098    48    46738.0000    45291.9271   437540    3.09%
     46    48    45365.8069    51    46738.0000    45291.9271   449831    3.09%
*    53+   53                        46734.0000    45291.9271             3.09%
     53    55    45368.9678    25    46734.0000    45291.9271   467883    3.09%
     57    59    45292.1817    38    46734.0000    45291.9271   487279    3.09%
     61    63    45292.1817    40    46734.0000    45291.9271   494830    3.09%
     81    83    45294.7340    33    46734.0000    45291.9271   560261    3.09%
     85    87    45298.2497    33    46734.0000    45291.9271   585290    3.09%
     89    91    45296.9090    38    46734.0000    45291.9271   603722    3.09%
     90    92    45292.1652    35    46734.0000    45291.9271   606840    3.09%
     93    95    45298.2497    43    46734.0000    45291.9271   616088    3.09%
Elapsed time = 2677.44 sec. (823111.21 ticks, tree = 0.00 MB, solutions = 3)
     94    96    45292.1652    33    46734.0000    45291.9271   620061    3.09%
*    95+   95                        46222.0000    45291.9271             2.01%
     97    99    45299.7113    37    46222.0000    45291.9271   629505    2.01%
     98   100    45292.1652    34    46222.0000    45291.9271   634102    2.01%
    101   103    45299.7113    41    46222.0000    45291.9271   646802    2.01%
    102   104    45302.7812    23    46222.0000    45291.9271   658063    2.01%
    123   125    45299.8442    38    46222.0000    45291.9271   715026    2.01%
    127   129    45303.7767    44    46222.0000    45291.9271   724984    2.01%
*   129+  129                        45859.0000    45291.9271             1.24%
    131   133    45492.6356    22    45859.0000    45291.9271   743315    1.24%
    135   137    45311.1602    41    45859.0000    45291.9271   751900    1.24%
    139   141    45569.9689    28    45859.0000    45291.9271   767146    1.24%
Elapsed time = 3230.38 sec. (960151.23 ticks, tree = 13.31 MB, solutions = 4)
    143   145    45319.1762    39    45859.0000    45291.9271   780992    1.24%
    147   149    45643.3067    44    45859.0000    45291.9271   790435    1.24%
    151   153    45571.6800    30    45859.0000    45291.9271   802768    1.24%
    155   157    45325.3916    57    45859.0000    45291.9271   812824    1.24%
    162   164    45315.3790    28    45859.0000    45291.9271   827806    1.24%
*   182+  164                        45756.0000    45291.9271             1.01%
    241   143    45325.3916    39    45756.0000    45291.9271   930696    1.01%
    245   145        cutoff          45756.0000    45291.9271   935184    1.01%
    246   146    45316.8751    37    45756.0000    45291.9271   937601    1.01%
    249   147    45325.3916    48    45756.0000    45291.9271   941665    1.01%
    253   151    45690.4578    31    45756.0000    45291.9271   957518    1.01%
Elapsed time = 3733.95 sec. (1102341.68 ticks, tree = 21.22 MB, solutions = 6)
    257   153    45325.3916    42    45756.0000    45291.9271   968704    1.01%
    261   157    45328.3394    45    45756.0000    45291.9271   972280    1.01%
    265   159    45480.3295    33    45756.0000    45291.9271   983489    1.01%
    275   163    45475.1556    17    45756.0000    45291.9271  1014314    1.01%
    546   166    45725.0711    28    45756.0000    45291.9271  1164212    1.01%
    550   170    45332.4635    27    45756.0000    45291.9271  1172160    1.01%
    554   170    45574.7244    25    45756.0000    45291.9271  1181187    1.01%
    558   174    45335.2305    35    45756.0000    45291.9271  1189065    1.01%
    562   176    45350.6960    44    45756.0000    45291.9271  1201654    1.01%
    566   180    45719.2133    25    45756.0000    45291.9271  1212870    1.01%
Elapsed time = 4245.17 sec. (1240094.87 ticks, tree = 21.22 MB, solutions = 6)
    570   178        cutoff          45756.0000    45291.9271  1222015    1.01%
*   607   182      integral     0    45755.0000    45291.9271  1261069    1.01%
    743   187    45350.6960    44    45755.0000    45291.9271  1342320    1.01%
    747   187    45350.6960    55    45755.0000    45291.9271  1350041    1.01%
    751   189    45515.8476    25    45755.0000    45291.9271  1358051    1.01%
    755   189    45515.8476    28    45755.0000    45291.9271  1361098    1.01%
    759   189        cutoff          45755.0000    45291.9271  1364326    1.01%
    760   190    45416.2711    16    45755.0000    45291.9271  1367169    1.01%
    764   188    45666.6982    12    45755.0000    45291.9271  1374895    1.01%
    768   192    45416.4711    20    45755.0000    45291.9271  1382350    1.01%
    776   194    45635.1264    18    45755.0000    45291.9271  1393112    1.01%
Elapsed time = 4586.47 sec. (1334346.20 ticks, tree = 21.58 MB, solutions = 7)
    780   194    45416.4711    18    45755.0000    45291.9271  1400016    1.01%
    992   206    45515.8476    34    45755.0000    45291.9271  1491452    1.01%
   1000   208    45515.8476    25    45755.0000    45291.9271  1502113    1.01%
   1004   208    45515.8476    30    45755.0000    45291.9271  1505497    1.01%
   1008   208        cutoff          45755.0000    45291.9271  1509460    1.01%
   1012   206        cutoff          45755.0000    45291.9271  1512210    1.01%
   1016   208    45515.8476    25    45755.0000    45291.9271  1517177    1.01%
   1020   208    45515.8476    32    45755.0000    45291.9271  1520043    1.01%
   1024   208        cutoff          45755.0000    45291.9271  1525179    1.01%
   1028   206        cutoff          45755.0000    45291.9271  1530176    1.01%
Elapsed time = 4828.82 sec. (1402119.12 ticks, tree = 21.58 MB, solutions = 7)
   1032   208    45515.8476    32    45755.0000    45291.9271  1537941    1.01%
   1036   208        cutoff          45755.0000    45291.9271  1539699    1.01%
   1040   210    45515.8476    33    45755.0000    45291.9271  1549563    1.01%
   1044   212    45522.9911    39    45755.0000    45291.9271  1551800    1.01%
   1208   228        cutoff          45755.0000    45291.9271  1654174    1.01%
   1210   229    45754.1400     2    45755.0000    45291.9271  1657467    1.01%
   1213   230    45687.3320    12    45755.0000    45291.9271  1664817    1.01%
   1216   231    45522.9911    29    45755.0000    45291.9271  1668512    1.01%
   1220   234    45522.9911    35    45755.0000    45291.9271  1672042    1.01%
   1224   234        cutoff          45755.0000    45291.9271  1674602    1.01%
Elapsed time = 5063.45 sec. (1469940.06 ticks, tree = 21.77 MB, solutions = 7)
   1228   236    45522.9911    31    45755.0000    45291.9271  1678822    1.01%
   1232   238    45522.9911    32    45755.0000    45291.9271  1680357    1.01%
   1236   238        cutoff          45755.0000    45291.9271  1685219    1.01%
   1240   238        cutoff          45755.0000    45291.9271  1688336    1.01%
   1244   240    45522.9911    32    45755.0000    45291.9271  1696769    1.01%
   1252   242    45522.9911    30    45755.0000    45291.9271  1706013    1.01%
   1256   242        cutoff          45755.0000    45291.9271  1708241    1.01%
   1260   244    45522.9911    31    45755.0000    45291.9271  1711280    1.01%
   1268   246    45522.9911    31    45755.0000    45291.9271  1714418    1.01%
   1276   248    45522.9911    32    45755.0000    45291.9271  1719512    1.01%
Elapsed time = 5230.08 sec. (1524167.03 ticks, tree = 21.77 MB, solutions = 7)
   1284   250    45522.9911    35    45755.0000    45291.9271  1729588    1.01%
   1292   252    45522.9911    31    45755.0000    45291.9271  1733303    1.01%
*  1339   259      integral     0    45659.0000    45291.9271  1771514    0.80%

Mixed integer rounding cuts applied:  408
Gomory fractional cuts applied:  2

Root node processing (before b&c):
  Real time             =  697.72 sec. (235097.74 ticks)
Parallel b&c, 4 threads:
  Real time             = 4554.79 sec. (1301403.79 ticks)
  Sync time (average)   =  406.92 sec.
  Wait time (average)   =  407.09 sec.
                          ------------
Total (root+branch&cut) = 5252.51 sec. (1536501.53 ticks)
optimal objective= 45659.0

artificial: false edgeIndexset: [576, 961, 419, 712, 234, 493, 146, 307, 565, 438, 503, 380, 924, 700, 925] start node= 1 start time= 34 capacity type= 2 edgeSet: [576, 961, 419, 712, 234, 493, 146, 307, 565, 438, 503, 380, 924, 700, 925] ifChargeSet: [961, 925]
(4,0)->(3,3)->(1,7)->(4,11)->(4,12)->(3,15)->(2,19)->(3,24)->(3,25)->(3,26)->(2,30)->(1,34)->(2,38)->(3,43)->(0,46)->(4,0):1

artificial: false edgeIndexset: [544, 225, 833, 66, 162, 198, 521, 943, 752, 53, 88, 184, 379, 508] start node= 1 start time= 33 capacity type= 2 edgeSet: [544, 225, 833, 66, 162, 198, 521, 943, 752, 53, 88, 184, 379, 508] ifChargeSet: [752, 943]
(0,2)->(0,3)->(3,8)->(1,12)->(0,16)->(3,21)->(1,25)->(2,29)->(1,33)->(1,34)->(0,38)->(3,43)->(3,44)->(1,48)->(0,2):1

artificial: false edgeIndexset: [34, 165, 837, 102, 838, 647, 11, 172, 814, 143, 19, 180, 26, 189, 829, 606] start node= 1 start time= 29 capacity type= 2 edgeSet: [34, 165, 837, 102, 838, 647, 11, 172, 814, 143, 19, 180, 26, 189, 829, 606] ifChargeSet: [838, 814]
(0,2)->(4,6)->(0,11)->(1,14)->(1,15)->(0,19)->(1,22)->(0,26)->(1,29)->(1,30)->(0,34)->(1,37)->(1,38)->(1,39)->(0,43)->(4,47)->(0,2):1

artificial: false edgeIndexset: [416, 739, 358, 135, 204, 784, 212, 629, 246, 472, 921, 125, 350, 542] start node= 1 start time= 12 capacity type= 2 edgeSet: [416, 739, 358, 135, 204, 784, 212, 629, 246, 472, 921, 125, 350, 542] ifChargeSet: [784, 921]
(2,0)->(1,4)->(2,8)->(1,12)->(2,16)->(3,21)->(3,22)->(0,25)->(4,29)->(0,34)->(0,35)->(4,39)->(3,42)->(1,46)->(2,0):2

artificial: false edgeIndexset: [419, 3, 868, 806, 711, 232, 648, 491, 144, 307, 436, 564, 378, 574] start node= 4 start time= 48 capacity type= 1 edgeSet: [419, 3, 868, 806, 711, 232, 648, 491, 144, 307, 436, 564, 378, 574] ifChargeSet: [868, 806]
(0,3)->(1,6)->(1,7)->(4,11)->(3,14)->(2,18)->(2,19)->(3,24)->(2,28)->(1,32)->(2,36)->(3,41)->(0,44)->(4,48)->(0,3):1

artificial: false edgeIndexset: [387, 582, 363, 427, 876, 304, 658, 341, 886, 695, 317, 350, 671] start node= 1 start time= 17 capacity type= 2 edgeSet: [387, 582, 363, 427, 876, 304, 658, 341, 886, 695, 317, 350, 671] ifChargeSet: [886, 876]
(2,0)->(1,4)->(4,8)->(2,13)->(1,17)->(4,21)->(2,26)->(2,27)->(3,32)->(2,36)->(2,37)->(1,41)->(4,45)->(2,0):1

artificial: false edgeIndexset: [896, 324, 357, 678, 552, 337, 370, 691, 311, 856, 665, 383, 447] start node= 1 start time= 37 capacity type= 2 edgeSet: [896, 324, 357, 678, 552, 337, 370, 691, 311, 856, 665, 383, 447] ifChargeSet: [896, 856]
(3,2)->(2,6)->(2,7)->(1,11)->(4,15)->(2,20)->(1,24)->(4,28)->(2,33)->(1,37)->(4,41)->(2,46)->(2,47)->(3,2):1

artificial: false edgeIndexset: [486, 743, 457, 906, 715, 139, 111, 496, 625, 468, 149, 760, 121, 283, 30, 703] start node= 1 start time= 33 capacity type= 2 edgeSet: [486, 743, 457, 906, 715, 139, 111, 496, 625, 468, 149, 760, 121, 283, 30, 703] ifChargeSet: [760, 906]
(4,3)->(3,6)->(3,7)->(0,10)->(0,11)->(4,15)->(3,18)->(0,21)->(4,25)->(0,30)->(1,33)->(3,36)->(0,39)->(4,43)->(3,46)->(0,49)->(4,3):1

artificial: false edgeIndexset: [800, 289, 483, 36, 261, 454, 8, 492, 45, 271, 464, 848, 849, 18, 757, 280, 474, 27, 251, 767] start node= 1 start time= 48 capacity type= 2 edgeSet: [800, 289, 483, 36, 261, 454, 8, 492, 45, 271, 464, 848, 849, 18, 757, 280, 474, 27, 251, 767] ifChargeSet: [757, 767]
(1,0)->(1,1)->(3,4)->(0,7)->(0,8)->(1,11)->(3,14)->(0,17)->(0,18)->(1,21)->(3,24)->(0,27)->(1,30)->(3,33)->(0,36)->(1,39)->(3,42)->(0,45)->(1,48)->(1,49)->(1,0):1

Total time= 5898408
Solve for test7_5_15_50_400B.txt
number of service arcs=750
number of holding arcs=250

Time of first LP solve= 610080

There are 4814 columns added to the model.

Tried aggregator 2 times.
MIP Presolve eliminated 16752 rows and 31 columns.
Aggregator did 2768 substitutions.
Reduced MIP has 81745 rows, 307218 columns, and 885994 nonzeros.
Reduced MIP has 0 binaries, 4798 generals, 0 SOSs, and 0 indicators.
Presolve time = 0.53 sec. (370.45 ticks)
Tried aggregator 1 time.
MIP Presolve eliminated 1824 rows and 6882 columns.
Reduced MIP has 79921 rows, 300336 columns, and 867110 nonzeros.
Reduced MIP has 0 binaries, 4798 generals, 0 SOSs, and 0 indicators.
Presolve time = 0.82 sec. (374.19 ticks)
MIP emphasis: balance optimality and feasibility.
MIP search method: dynamic search.
Parallel mode: deterministic, using up to 4 threads.
Root relaxation solution time = 216.63 sec. (61640.22 ticks)

        Nodes                                         Cuts/
   Node  Left     Objective  IInf  Best Integer    Best Bound    ItCnt     Gap

      0     0    57307.6133   146                  57307.6133       60         
*     0+    0                        94482.0000    57307.6133            39.35%
      0     0    57307.6133   130    94482.0000     Cuts: 929    20715   39.35%
      0     0    57307.6133   130    94482.0000     Cuts: 897    46573   39.35%
      0     0    57307.6133   141    94482.0000  MIRcuts: 882    71619   39.35%
*     0+    0                        66171.0000    57307.6133            13.39%
Heuristic still looking.
Heuristic still looking.
Heuristic still looking.
      0     2    57307.6133   141    66171.0000    57307.6133    71619   13.39%
Elapsed time = 1623.34 sec. (670653.77 ticks, tree = 0.00 MB, solutions = 2)
      1     3    57307.6133   157    66171.0000    57307.6133    71741   13.39%
      2     4    57355.5467   120    66171.0000    57307.6133   131036   13.39%
      3     5    57307.6133   156    66171.0000    57307.6133   131438   13.39%
      4     6    57355.5467   131    66171.0000    57307.6133   149457   13.39%
      8    10    57307.6133   146    66171.0000    57307.6133   172448   13.39%
*    11+   11                        64254.0000    57307.6133            10.81%
*    11+   11                        63397.0000    57307.6133             9.61%
*    11+   11                        63289.0000    57307.6133             9.45%
*    11+   11                        63039.0000    57307.6133             9.09%
*    11+   11                        63035.0000    57307.6133             9.09%
     11    13    57355.5467   120    63035.0000    57307.6133   221025    9.09%
     12    14    57307.6133   139    63035.0000    57307.6133   256186    9.09%
     22    24    57467.6467   102    63035.0000    57307.6133   443014    9.09%
     23    25    57466.7667   119    63035.0000    57307.6133   486103    9.09%
     27    29    57355.5467    80    63035.0000    57307.6133   487358    9.09%
Elapsed time = 3875.37 sec. (1606186.73 ticks, tree = 0.00 MB, solutions = 7)
     28    30    57307.6133   141    63035.0000    57307.6133   487687    9.09%
     30    32    57466.7667   113    63035.0000    57307.6133   519206    9.09%
     43    45    57766.1467    49    63035.0000    57307.6133   764437    9.09%
     47    49    57913.2667    92    63035.0000    57307.6133   812572    9.09%
     48    50    57466.7667    77    63035.0000    57307.6133   819309    9.09%
     52    54    57913.2667    66    63035.0000    57307.6133   833340    9.09%
     56    58    57466.7667    80    63035.0000    57307.6133   882432    9.09%
     60    62    57913.2667    71    63035.0000    57307.6133   918045    9.09%
     64    66    57466.7667    80    63035.0000    57307.6133   926421    9.09%
     67    69    57355.5467    77    63035.0000    57307.6133   958578    9.09%
Elapsed time = 5782.98 sec. (2073060.23 ticks, tree = 0.00 MB, solutions = 7)
*    95+   95                        60436.0000    57307.6133             5.18%
    113   115    57466.7667    86    60436.0000    57307.6133  1693248    5.18%
    117   119    57913.2667    72    60436.0000    57307.6133  1743371    5.18%
*   119+  119                        58782.0000    57307.6133             2.51%
    125   127    57913.2667    72    58782.0000    57307.6133  1800248    2.51%
    129   131    57466.7667    85    58782.0000    57307.6133  1827491    2.51%
    133   135    57913.2667    72    58782.0000    57307.6133  1840548    2.51%
    141   143    57913.2667    65    58782.0000    57307.6133  1905196    2.51%
*   142+  142                        58278.0000    57307.6133             1.67%
    145   147    57466.7667    82    58278.0000    57307.6133  1917046    1.67%
    149   151    57913.2667    72    58278.0000    57307.6133  1937125    1.67%
    153   155    57466.7667    79    58278.0000    57307.6133  1984061    1.67%
    157   159    57913.2667    70    58278.0000    57307.6133  2013354    1.67%
Elapsed time = 7066.04 sec. (2297223.11 ticks, tree = 1.58 MB, solutions = 8)
    161   163    57466.7667    74    58278.0000    57307.6133  2033584    1.67%
    165   167    57913.2667    71    58278.0000    57307.6133  2064579    1.67%
    169   171    57466.7667    77    58278.0000    57307.6133  2108943    1.67%
    173   175    57913.2667    74    58278.0000    57307.6133  2133054    1.67%

Mixed integer rounding cuts applied:  546

Root node processing (before b&c):
  Real time             = 1623.15 sec. (670586.02 ticks)
Parallel b&c, 4 threads:
  Real time             = 5577.07 sec. (1648566.34 ticks)
  Sync time (average)   =  933.97 sec.
  Wait time (average)   =  934.07 sec.
                          ------------
Total (root+branch&cut) = 7200.23 sec. (2319152.37 ticks)
optimal objective= 58278.0

artificial: false edgeIndexset: [992, 450, 35, 8, 488, 681, 654, 47, 980, 820, 565, 693, 821, 822, 411, 476, 223] start node= 1 start time= 20 capacity type= 2 edgeSet: [992, 450, 35, 8, 488, 681, 654, 47, 980, 820, 565, 693, 821, 822, 411, 476, 223] ifChargeSet: [992, 980]
(2,0)->(4,4)->(0,8)->(2,11)->(3,15)->(1,20)->(1,21)->(1,22)->(1,23)->(2,26)->(4,30)->(4,31)->(0,35)->(2,38)->(4,42)->(4,43)->(0,47)->(2,0):1

artificial: false edgeIndexset: [482, 675, 997, 6, 998, 999, 40, 459, 651, 493, 686, 18, 755, 950, 471, 663, 29, 767] start node= 4 start time= 47 capacity type= 2 edgeSet: [482, 675, 997, 6, 998, 999, 40, 459, 651, 493, 686, 18, 755, 950, 471, 663, 29, 767] ifChargeSet: [755, 767]
(4,0)->(4,1)->(0,5)->(0,6)->(2,9)->(4,13)->(0,17)->(0,18)->(2,21)->(4,25)->(0,29)->(2,32)->(4,36)->(0,40)->(2,43)->(4,47)->(4,48)->(4,49)->(4,0):1

artificial: false edgeIndexset: [528, 752, 547, 84, 53, 518, 294, 73, 508, 589, 783, 63] start node= 1 start time= 44 capacity type= 2 edgeSet: [528, 752, 547, 84, 53, 518, 294, 73, 508, 589, 783, 63] ifChargeSet: [752, 783]
(0,2)->(0,3)->(3,8)->(0,13)->(3,18)->(0,23)->(3,28)->(0,33)->(0,34)->(3,39)->(1,44)->(3,47)->(0,2):1

artificial: false edgeIndexset: [416, 193, 554, 588, 780, 13, 47, 400, 176, 434, 920, 571, 31, 159] start node= 1 start time= 9 capacity type= 2 edgeSet: [416, 193, 554, 588, 780, 13, 47, 400, 176, 434, 920, 571, 31, 159] ifChargeSet: [920, 780]
(2,0)->(3,4)->(1,9)->(0,13)->(2,16)->(3,20)->(3,21)->(1,26)->(0,30)->(0,31)->(2,34)->(3,38)->(1,43)->(0,47)->(2,0):1

artificial: false edgeIndexset: [64, 529, 689, 404, 134, 998, 519, 74, 908, 509, 749, 143] start node= 4 start time= 39 capacity type= 2 edgeSet: [64, 529, 689, 404, 134, 998, 519, 74, 908, 509, 749, 143] ifChargeSet: [998, 908]
(2,4)->(3,8)->(3,9)->(0,14)->(3,19)->(0,24)->(3,29)->(0,34)->(4,39)->(0,43)->(4,48)->(4,49)->(2,4):1

artificial: false edgeIndexset: [81, 721, 355, 291, 644, 999, 376, 616, 760, 586, 700, 61] start node= 1 start time= 41 capacity type= 2 edgeSet: [81, 721, 355, 291, 644, 999, 376, 616, 760, 586, 700, 61] ifChargeSet: [999, 760]
(4,0)->(2,5)->(0,10)->(0,11)->(3,16)->(4,21)->(2,26)->(0,31)->(3,36)->(1,41)->(3,44)->(4,49)->(4,0):1

artificial: false edgeIndexset: [368, 962, 389, 629, 773, 599, 713, 74, 94, 734, 254, 607] start node= 1 start time= 4 capacity type= 2 edgeSet: [368, 962, 389, 629, 773, 599, 713, 74, 94, 734, 254, 607] ifChargeSet: [962, 773]
(1,4)->(3,7)->(4,12)->(4,13)->(2,18)->(0,23)->(0,24)->(3,29)->(4,34)->(2,39)->(0,44)->(3,49)->(1,4):1

artificial: false edgeIndexset: [50, 739, 70, 710, 280, 633, 394, 988, 365, 605, 575, 799] start node= 1 start time= 30 capacity type= 2 edgeSet: [50, 739, 70, 710, 280, 633, 394, 988, 365, 605, 575, 799] ifChargeSet: [988, 799]
(0,0)->(3,5)->(4,10)->(2,15)->(0,20)->(3,25)->(1,30)->(3,33)->(4,38)->(4,39)->(2,44)->(0,49)->(0,0):1

artificial: false edgeIndexset: [448, 578, 807, 424, 552, 233, 590, 208, 915, 436, 245, 566, 411, 221] start node= 1 start time= 45 capacity type= 2 edgeSet: [448, 578, 807, 424, 552, 233, 590, 208, 915, 436, 245, 566, 411, 221] ifChargeSet: [915, 807]
(3,2)->(1,7)->(1,8)->(2,11)->(3,15)->(3,16)->(1,21)->(2,24)->(3,28)->(1,33)->(2,36)->(3,40)->(1,45)->(2,48)->(3,2):1

artificial: false edgeIndexset: [833, 578, 424, 554, 234, 941, 400, 592, 209, 437, 566, 247, 412, 221] start node= 1 start time= 21 capacity type= 2 edgeSet: [833, 578, 424, 554, 234, 941, 400, 592, 209, 437, 566, 247, 412, 221] ifChargeSet: [833, 941]
(2,0)->(3,4)->(1,9)->(2,12)->(3,16)->(1,21)->(2,24)->(3,28)->(1,33)->(1,34)->(2,37)->(3,41)->(3,42)->(1,47)->(2,0):1

artificial: false edgeIndexset: [929, 930, 581, 425, 555, 236, 401, 593, 210, 439, 567, 248, 413, 222] start node= 1 start time= 10 capacity type= 2 edgeSet: [929, 930, 581, 425, 555, 236, 401, 593, 210, 439, 567, 248, 413, 222] ifChargeSet: [929, 930]
(2,1)->(3,5)->(1,10)->(2,13)->(3,17)->(1,22)->(2,25)->(3,29)->(3,30)->(3,31)->(1,36)->(2,39)->(3,43)->(1,48)->(2,1):1

artificial: false edgeIndexset: [673, 648, 777, 653, 78, 688, 817, 562, 792, 57, 633, 93, 318] start node= 1 start time= 17 capacity type= 2 edgeSet: [673, 648, 777, 653, 78, 688, 817, 562, 792, 57, 633, 93, 318] ifChargeSet: [792, 777]
(4,3)->(0,7)->(3,12)->(1,17)->(1,18)->(4,23)->(0,27)->(0,28)->(3,33)->(4,38)->(0,42)->(0,43)->(3,48)->(4,3):1

artificial: false edgeIndexset: [582, 651, 428, 877, 337, 722, 562, 146, 755, 756, 692, 57, 317] start node= 1 start time= 37 capacity type= 2 edgeSet: [582, 651, 428, 877, 337, 722, 562, 146, 755, 756, 692, 57, 317] ifChargeSet: [755, 756]
(4,1)->(0,5)->(0,6)->(0,7)->(3,12)->(1,17)->(4,22)->(2,27)->(2,28)->(3,32)->(1,37)->(4,42)->(0,46)->(4,1):1

Total time= 7811467
