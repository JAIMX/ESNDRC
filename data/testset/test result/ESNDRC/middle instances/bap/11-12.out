Sovle for test12_10_50_30_100D.txt
number of service arcs=1500
number of holding arcs=300

root node bound= 20336.48999999999
Before intensification, we have 40864 columns
After pick up:
==================Intensification===================
We add 445 columns to cplex.
Tried aggregator 2 times.
MIP Presolve eliminated 16634 rows and 20572 columns.
Aggregator did 2813 substitutions.
Reduced MIP has 12683 rows, 41478 columns, and 117771 nonzeros.
Reduced MIP has 403 binaries, 42 generals, 0 SOSs, and 0 indicators.
Presolve time = 0.13 sec. (77.65 ticks)
Probing fixed 0 vars, tightened 6 bounds.
Probing time = 0.07 sec. (3.79 ticks)
Tried aggregator 1 time.
MIP Presolve eliminated 0 rows and 5 columns.
Reduced MIP has 12683 rows, 41473 columns, and 117754 nonzeros.
Reduced MIP has 403 binaries, 42 generals, 0 SOSs, and 0 indicators.
Presolve time = 0.08 sec. (45.18 ticks)
Probing time = 0.14 sec. (3.66 ticks)
Clique table members: 102.
MIP emphasis: balance optimality and feasibility.
MIP search method: dynamic search.
Parallel mode: deterministic, using up to 4 threads.
Root relaxation solution time = 3.53 sec. (1370.86 ticks)

        Nodes                                         Cuts/
   Node  Left     Objective  IInf  Best Integer    Best Bound    ItCnt     Gap

      0     0    20343.8167    42                  20343.8167     9977         
*     0+    0                        48176.0000    20343.8167            57.77%
      0     0    20589.2434    57    48176.0000     Cuts: 759    15216   57.26%
      0     0    20763.8382    73    48176.0000     Cuts: 962    19634   56.90%
*     0+    0                        26119.0000    20763.8382            20.50%
      0     0    20948.6669    80    26119.0000    Cuts: 1153    24666   19.80%
*     0+    0                        25951.0000    20948.6669            19.28%
      0     0    21115.4322    80    25951.0000    Cuts: 1169    30222   18.63%
      0     0    21272.2184    80    25951.0000    Cuts: 1079    34505   18.03%
*     0+    0                        24837.0000    21272.2184            14.35%
      0     0    21361.4315    79    24837.0000     Cuts: 982    39085   13.99%
      0     0    21453.0556    77    24837.0000     Cuts: 983    44443   13.62%
      0     0    21488.5557    79    24837.0000     Cuts: 852    46488   13.48%
      0     0    21531.3314    77    24837.0000     Cuts: 771    50247   13.31%
      0     0    21559.5427    67    24837.0000     Cuts: 826    53516   13.20%
      0     0    21580.1697    73    24837.0000     Cuts: 664    56181   13.11%
      0     0    21591.2037    67    24837.0000     Cuts: 624    57671   13.07%
      0     0    21594.0832    60    24837.0000     Cuts: 449    58702   13.06%
      0     0    21599.4508    70    24837.0000     Cuts: 389    60164   13.04%
      0     0    21603.0374    74    24837.0000     Cuts: 421    61653   13.02%
      0     0    21607.2015    80    24837.0000     Cuts: 541    62746   13.00%
      0     0    21609.8463    68    24837.0000     Cuts: 487    64060   12.99%
*     0+    0                        24520.0000    21609.8463            11.87%
      0     0    21610.9744    65    24520.0000     Cuts: 457    65039   11.86%
*     0+    0                        24160.0000    21610.9744            10.55%
*     0+    0                        23436.0000    21610.9744             7.79%
*     0+    0                        23115.0000    21610.9744             6.51%
Heuristic still looking.
      0     2    21610.9744    65    23115.0000    21610.9744    65039    6.51%
Elapsed time = 158.52 sec. (90979.13 ticks, tree = 0.00 MB, solutions = 8)
      1     3    21615.5922    66    23115.0000    21610.9744    66075    6.51%
      2     4    21626.9164    74    23115.0000    21610.9744    70318    6.51%
      3     5    21619.5477    65    23115.0000    21615.5951    71187    6.49%
      4     6    21644.4984    64    23115.0000    21615.5951    74071    6.49%
      7     9    21668.6658    75    23115.0000    21615.5951    80364    6.49%
      9    11    21652.5069    66    23115.0000    21615.5951    84976    6.49%
     11    13    21659.2606    63    23115.0000    21619.5844    89521    6.47%
     14    16    21695.6871    66    23115.0000    21619.5844    99242    6.47%
     16    18    21690.9049    63    23115.0000    21619.5844   109445    6.47%
     18    20    21641.3669    67    23115.0000    21629.2044   121132    6.43%
Elapsed time = 217.55 sec. (116552.70 ticks, tree = 0.00 MB, solutions = 8)
     22    24    21658.9245    61    23115.0000    21629.2044   139532    6.43%
     23    25    21733.9020    64    23115.0000    21629.2044   146343    6.43%
     26    28    21688.6610    63    23115.0000    21629.2044   158981    6.43%
     30    32    21719.6465    68    23115.0000    21629.2044   166117    6.43%
     32    34    21680.5937    75    23115.0000    21629.2044   173881    6.43%
     34    36    21713.5496    67    23115.0000    21629.2044   177470    6.43%
     35    37    21740.2745    68    23115.0000    21629.2044   180503    6.43%
     38    40    21716.7104    69    23115.0000    21629.2044   187921    6.43%
     39    41    21769.5628    66    23115.0000    21629.2044   191008    6.43%
     43    45    21728.5527    63    23115.0000    21629.2044   204515    6.43%
Elapsed time = 282.52 sec. (138420.48 ticks, tree = 0.00 MB, solutions = 8)
     47    49    21740.3742    67    23115.0000    21629.2044   220663    6.43%
     49    51    21708.0868    65    23115.0000    21629.2044   229892    6.43%
     51    53    21752.9504    52    23115.0000    21629.2044   239180    6.43%
     55    57    21768.0761    56    23115.0000    21629.2044   252230    6.43%
     56    58    21773.4356    58    23115.0000    21629.2044   255699    6.43%
     57    59    22005.7618    47    23115.0000    21629.2044   263103    6.43%
     58    60    21807.8421    64    23115.0000    21629.2044   268352    6.43%
     62    64    21801.0272    65    23115.0000    21629.2044   276080    6.43%
     66    68    21784.6370    52    23115.0000    21629.2044   284242    6.43%
     70    72    21802.7240    57    23115.0000    21629.2044   295051    6.43%
Elapsed time = 366.65 sec. (166113.30 ticks, tree = 0.00 MB, solutions = 8)
     74    76    21808.6710    50    23115.0000    21629.2044   306886    6.43%
     78    80    21931.9896    53    23115.0000    21629.2044   320155    6.43%
     82    84    21864.5763    47    23115.0000    21629.2044   330604    6.43%
     83    85    21974.3338    42    23115.0000    21629.2044   336916    6.43%
     93    95    21908.1556    40    23115.0000    21629.2044   371616    6.43%
     95    97    21765.7102    63    23115.0000    21629.2044   376409    6.43%
     99   101    21806.7025    62    23115.0000    21629.2044   382405    6.43%
    101   103    22042.5537    41    23115.0000    21629.2044   390779    6.43%
    102   104    22112.3590    34    23115.0000    21629.2044   398010    6.43%
    106   108    22166.8738    32    23115.0000    21629.2044   406581    6.43%
Elapsed time = 430.55 sec. (185862.98 ticks, tree = 0.74 MB, solutions = 8)
    110   112    22213.5859    29    23115.0000    21629.2044   427635    6.43%
    113   115    21947.5802    44    23115.0000    21629.2044   435231    6.43%
    117   119    22245.5884    28    23115.0000    21629.2044   447742    6.43%
    130   132    22330.3536    28    23115.0000    21629.2044   492719    6.43%
    133   135    21955.2224    44    23115.0000    21629.2044   500054    6.43%
    137   139    22211.2975    40    23115.0000    21629.2044   506317    6.43%
    145   147    21979.4279    43    23115.0000    21629.2044   517236    6.43%
    146   148    22810.8931    20    23115.0000    21629.2044   521335    6.43%
    150   152    22368.1090    27    23115.0000    21629.2044   526003    6.43%
    154   156    22373.1625    29    23115.0000    21629.2044   530179    6.43%
Elapsed time = 532.94 sec. (217411.03 ticks, tree = 2.23 MB, solutions = 8)
    158   160    22554.2747    21    23115.0000    21629.2044   537246    6.43%
    162   164    22410.2145    29    23115.0000    21629.2044   543942    6.43%
    166   168    22578.9035    30    23115.0000    21629.2044   550248    6.43%
    170   172    22420.7952    34    23115.0000    21629.2044   554318    6.43%
    174   176    22836.2192    25    23115.0000    21629.2044   560271    6.43%
    182   184    22441.1302    38    23115.0000    21629.2044   568593    6.43%
    186   188    22748.7952    21    23115.0000    21629.2044   572060    6.43%
*   221+  215                        23093.0000    21629.2044             6.34%
    339   279    21871.9844    63    23093.0000    21629.2044   637848    6.34%
    343   283    21656.9916    68    23093.0000    21629.2044   641392    6.34%
    347   287    21911.8463    55    23093.0000    21629.2044   651499    6.34%
Elapsed time = 653.02 sec. (253292.62 ticks, tree = 26.33 MB, solutions = 9)
    351   291    21943.2350    61    23093.0000    21629.2044   655374    6.34%
    355   295    21982.8192    65    23093.0000    21629.2044   659130    6.34%
    371   307    21951.6050    55    23093.0000    21629.2044   664097    6.34%
    375   311    22000.9966    55    23093.0000    21629.2044   667145    6.34%
*   568+  334                        22892.0000    21629.2044             5.52%
*   568+  324                        22652.0000    21629.2044             4.52%
    569   206    22076.9935    64    22652.0000    21641.3982   714187    4.46%
    573   210    22362.1076    54    22652.0000    21641.3982   723679    4.46%
    584   221    22040.2100    47    22652.0000    21641.3982   739240    4.46%
    590   227    22143.2349    51    22652.0000    21641.3982   747462    4.46%
    592   229    22318.1895    37    22652.0000    21641.3982   750941    4.46%
    594   231    22538.6887    47    22652.0000    21641.3982   758269    4.46%
Elapsed time = 720.68 sec. (273871.53 ticks, tree = 10.77 MB, solutions = 11)
    598   235    22168.5210    52    22652.0000    21641.3982   763229    4.46%
    602   235    22244.3408    47    22652.0000    21641.3982   769744    4.46%
    606   239    22277.4643    49    22652.0000    21641.3982   772768    4.46%
    649   264    22372.6620    33    22652.0000    21641.3982   800570    4.46%
    657   268    22414.0282    36    22652.0000    21641.3982   805077    4.46%
    665   272    22530.1832    41    22652.0000    21641.3982   809936    4.46%
    673   274    22515.3361    35    22652.0000    21641.3982   813948    4.46%
    681   280    22615.0496    33    22652.0000    21641.3982   827500    4.46%
    684   281    21884.4683    60    22652.0000    21641.3982   830443    4.46%
    692   287    21904.4407    57    22652.0000    21641.3982   835022    4.46%
Elapsed time = 804.98 sec. (298086.09 ticks, tree = 19.18 MB, solutions = 11)
    700   291    21933.4088    54    22652.0000    21641.3982   839881    4.46%
    704   295    21942.0793    62    22652.0000    21641.3982   842260    4.46%
    754   313    21971.2814    56    22652.0000    21658.5838   866133    4.39%
    755   314    21902.7625    58    22652.0000    21658.5838   874074    4.39%
    775   334    21914.1791    59    22652.0000    21658.5838   885124    4.39%
    779   338    21914.7409    62    22652.0000    21658.5838   887074    4.39%
    783   342    21943.4044    56    22652.0000    21658.5838   890516    4.39%
    795   354    21954.6816    60    22652.0000    21658.5838   896162    4.39%
    803   362    22007.7903    60    22652.0000    21658.5838   900209    4.39%
    819   378    22014.9299    57    22652.0000    21658.5838   905276    4.39%
Elapsed time = 875.33 sec. (320296.24 ticks, tree = 25.89 MB, solutions = 11)
    829   388    21842.6523    67    22652.0000    21658.5838   910804    4.39%
    889   448    21857.2977    77    22652.0000    21658.5838   929855    4.39%
    906   465    22155.8711    61    22652.0000    21658.5838   934086    4.39%
    910   469    22179.4713    60    22652.0000    21658.5838   935733    4.39%
    917   476    21863.6269    75    22652.0000    21658.5838   938262    4.39%
    929   488    21914.2975    79    22652.0000    21658.5838   944013    4.39%
    936   495    22030.7269    75    22652.0000    21658.5838   946336    4.39%
    959   518    22121.0679    60    22652.0000    21658.5838   953058    4.39%
   1033   592    22363.6909    49    22652.0000    21658.5838   975875    4.39%
   1064   623    22375.8112    69    22652.0000    21658.5838   989923    4.39%
Elapsed time = 974.92 sec. (351387.75 ticks, tree = 73.63 MB, solutions = 11)
   1128   687    22458.8893    57    22652.0000    21658.5838  1009080    4.39%
   1176   735    22520.5746    53    22652.0000    21658.5838  1020760    4.39%
   1228   787    22635.4124    50    22652.0000    21658.5838  1038559    4.39%
   1264   810    21707.3820    62    22652.0000    21658.5838  1060186    4.39%
   1281   823    21630.0241    80    22652.0000    21660.7565  1106434    4.38%
   1284   825    21988.0911    55    22652.0000    21660.7565  1116723    4.38%
   1286   826    22038.6800    63    22652.0000    21660.7565  1121658    4.38%
   1288   827    22065.1378    69    22652.0000    21660.7565  1134654    4.38%
   1289   828    22015.8998    65    22652.0000    21660.7565  1145081    4.38%
   1290   829    22313.7997    75    22652.0000    21660.7565  1166770    4.38%
Elapsed time = 1233.75 sec. (479397.81 ticks, tree = 141.38 MB, solutions = 11)
   1293   830    22259.2900    66    22652.0000    21660.7565  1200725    4.38%
   1301   834    22091.1977    66    22652.0000    21660.7565  1235703    4.38%
   1303   835    21638.0152    79    22652.0000    21660.7565  1237294    4.38%
   1310   840    21992.4026    65    22652.0000    21660.7565  1270202    4.38%
   1318   846    21965.0820    57    22652.0000    21660.7565  1289927    4.38%
   1334   853    22024.5099    68    22652.0000    21660.7565  1304017    4.38%
   1338   852    22491.9188    61    22652.0000    21660.7565  1319433    4.38%
   1350   858    22501.0449    61    22652.0000    21660.7565  1339293    4.38%
   1392   821    22495.5593    62    22652.0000    21660.7565  1361252    4.38%
   1423   791    22028.3892    58    22652.0000    21660.7565  1377278    4.38%
Elapsed time = 1458.87 sec. (551329.81 ticks, tree = 118.57 MB, solutions = 11)
   1435   793    21763.3097    72    22652.0000    21660.7565  1385838    4.38%
   1525   741    21811.3389    69    22652.0000    21660.7565  1425750    4.38%
   1536   746    21731.5283    82    22652.0000    21660.7565  1436639    4.38%
   1548   748    21961.0653    59    22652.0000    21660.7565  1449506    4.38%
   1569   750    21829.8169    66    22652.0000    21660.7565  1469872    4.38%
   1573   752    22050.9621    60    22652.0000    21660.7565  1483399    4.38%
   1585   759    21947.6355    67    22652.0000    21660.7565  1494288    4.38%
   1608   771    22135.8718    67    22652.0000    21660.7565  1525345    4.38%
   1616   774    21823.8770    64    22652.0000    21660.7565  1534913    4.38%
   1621   778    22342.6850    56    22652.0000    21660.7565  1543425    4.38%
Elapsed time = 1605.33 sec. (598301.89 ticks, tree = 107.54 MB, solutions = 11)
   1642   790    22041.0805    52    22652.0000    21660.7565  1565545    4.38%
   1658   799    22332.0718    49    22652.0000    21660.7565  1578463    4.38%
   1666   800    22334.8031    49    22652.0000    21660.7565  1594391    4.38%
   1710   819    22597.3943    44    22652.0000    21660.7565  1620474    4.38%
   1732   822    21957.4804    60    22652.0000    21660.7565  1640206    4.38%
   1752   826    22014.2620    54    22652.0000    21660.7565  1653821    4.38%
   1792   839    21908.0165    51    22652.0000    21660.7565  1671820    4.38%
   1847   862    21932.2678    76    22652.0000    21660.7565  1693205    4.38%
   1870   873    21976.3451    50    22652.0000    21660.7565  1709747    4.38%
   1898   890    21961.6179    49    22652.0000    21660.7565  1726594    4.38%
Elapsed time = 1749.20 sec. (644165.13 ticks, tree = 113.64 MB, solutions = 11)
   1939   913    22207.6595    49    22652.0000    21660.7565  1745476    4.38%
   2009   948    22572.8444    55    22652.0000    21660.7565  1769403    4.38%
   2019   952    22021.9207    56    22652.0000    21660.7565  1774615    4.38%
   2047   963    22056.4160    59    22652.0000    21660.7565  1781875    4.38%
   2075   971    22219.8873    49    22652.0000    21660.7565  1791608    4.38%
   2137  1004    21766.5692    66    22652.0000    21660.7565  1816972    4.38%
   2229  1045    21786.9358    58    22652.0000    21660.7565  1836314    4.38%
   2306  1078    21752.1159    62    22652.0000    21660.7565  1861333    4.38%
   2326  1088    21802.9587    59    22652.0000    21660.7565  1872029    4.38%
   2334  1094    21873.4869    57    22652.0000    21660.7565  1878986    4.38%
Elapsed time = 1907.06 sec. (696316.45 ticks, tree = 144.63 MB, solutions = 11)
   2346  1101    22225.3598    41    22652.0000    21660.7565  1887477    4.38%
   2467  1142    21899.1714    61    22652.0000    21660.7565  1928195    4.38%
   2472  1143    21980.8310    41    22652.0000    21660.7565  1934130    4.38%
   2504  1159    22395.7483    39    22652.0000    21660.7565  1944531    4.38%
   2536  1169    21786.3942    59    22652.0000    21660.7565  1966896    4.38%
   2706  1261    22205.3582    39    22652.0000    21660.7565  2012290    4.38%
   2721  1272    21830.4292    68    22652.0000    21660.7565  2020261    4.38%
   2857  1352    21786.5171    65    22652.0000    21660.7565  2063255    4.38%
   2905  1389    21805.4923    65    22652.0000    21660.7565  2074424    4.38%
   2956  1431    21711.3835    77    22652.0000    21660.7565  2096988    4.38%
Elapsed time = 2080.39 sec. (752882.45 ticks, tree = 187.35 MB, solutions = 11)
   3012  1487    21739.2563    71    22652.0000    21660.7565  2116066    4.38%
   3042  1517    21847.7437    63    22652.0000    21660.7565  2126389    4.38%
   3119  1593    21787.6275    75    22652.0000    21660.7565  2145783    4.38%
   3191  1664    21804.0332    72    22652.0000    21660.7565  2163031    4.38%
   3192  1665    22117.2397    51    22652.0000    21660.7565  2163619    4.38%
   3201  1674    21931.2512    63    22652.0000    21660.7565  2167930    4.38%
   3318  1775    21753.3374    75    22652.0000    21660.7565  2200457    4.38%
   3366  1821    21768.2843    75    22652.0000    21660.7565  2214154    4.38%
   3400  1850    21718.7082    68    22652.0000    21660.7565  2228684    4.38%
   3424  1874    21754.8811    78    22652.0000    21660.7565  2240059    4.38%
Elapsed time = 2227.90 sec. (798095.83 ticks, tree = 247.53 MB, solutions = 11)
   3472  1922    21777.7874    71    22652.0000    21660.7565  2256026    4.38%
   3570  2018    21778.0290    68    22652.0000    21660.7565  2281707    4.38%
   3610  2056    21802.5810    71    22652.0000    21660.7565  2292894    4.38%
   3678  2120    21837.5626    81    22652.0000    21660.7565  2311733    4.38%
   3757  2184    21958.7071    65    22652.0000    21660.7565  2348245    4.38%
   3791  2218    22293.0340    59    22652.0000    21660.7565  2374061    4.38%
   3802  2229    22159.4565    44    22652.0000    21660.7565  2380454    4.38%
   3842  2269    22235.1197    30    22652.0000    21660.7565  2404497    4.38%
   3915  2325    22019.2849    68    22652.0000    21660.7565  2433419    4.38%
   4035  2436    22052.9080    69    22652.0000    21664.7550  2464414    4.36%
Elapsed time = 2452.27 sec. (868034.72 ticks, tree = 349.28 MB, solutions = 11)
   4075  2470    22099.7458    71    22652.0000    21664.7550  2488523    4.36%
   4213  2594    21978.0475    81    22652.0000    21664.7550  2546420    4.36%
   4225  2606    22034.2613    77    22652.0000    21664.7550  2556056    4.36%
   4249  2629    22595.0546    70    22652.0000    21664.7550  2568253    4.36%
   4273  2652    22154.8923    61    22652.0000    21664.7550  2582436    4.36%
   4285  2663    22396.9702    69    22652.0000    21664.7550  2588926    4.36%
   4441  2809    22086.4652    69    22652.0000    21664.7550  2658404    4.36%
   4449  2815    22269.7684    63    22652.0000    21664.7550  2667445    4.36%
   4457  2823    22180.2250    67    22652.0000    21664.7550  2674531    4.36%
   4473  2838    22183.5758    58    22652.0000    21664.7550  2681964    4.36%
Elapsed time = 2617.20 sec. (920447.57 ticks, tree = 408.00 MB, solutions = 11)
   4481  2845    22194.7010    58    22652.0000    21664.7550  2688688    4.36%
   4497  2857    22265.0096    54    22652.0000    21664.7550  2701552    4.36%
   4509  2866    22470.2998    48    22652.0000    21664.7550  2721144    4.36%
   4668  3003    22383.0049    44    22652.0000    21672.8846  2790962    4.32%
   4692  3027    22297.2041    55    22652.0000    21672.8846  2803940    4.32%
   4712  3047    22431.7336    44    22652.0000    21672.8846  2815733    4.32%
   4776  3104    22453.0299    43    22652.0000    21672.8846  2833082    4.32%
   4848  3168    22633.4323    42    22652.0000    21672.8846  2852200    4.32%
   4900  3212    22032.1643    76    22652.0000    21672.8846  2867354    4.32%
   5102  3390    22043.3782    86    22652.0000    21677.3955  2912884    4.30%
Elapsed time = 2762.27 sec. (969215.07 ticks, tree = 470.18 MB, solutions = 11)
   5140  3426    21806.9968    84    22652.0000    21677.3955  2925141    4.30%
   5164  3450    21866.8523    73    22652.0000    21677.3955  2935914    4.30%
   5206  3492    22134.6712    73    22652.0000    21677.3955  2945688    4.30%
   5238  3519    22192.4125    61    22652.0000    21677.3955  2957556    4.30%
   5298  3579    22227.7798    62    22652.0000    21677.3955  2980541    4.30%
   5488  3764    22228.6662    60    22652.0000    21677.3955  3030094    4.30%
   5564  3835    22288.8642    55    22652.0000    21677.3955  3046510    4.30%
   5610  3875    22172.5944    90    22652.0000    21677.3955  3064917    4.30%
   5663  3924    22400.6226    63    22652.0000    21677.3955  3078654    4.30%
   5712  3966    22385.0294    56    22652.0000    21677.3955  3098698    4.30%
Elapsed time = 2934.20 sec. (1021809.84 ticks, tree = 525.59 MB, solutions = 11)
   5745  3997    22012.9409    85    22652.0000    21677.3955  3110829    4.30%
   5813  4060    22044.1813    95    22652.0000    21677.3955  3128138    4.30%
   5914  4153    22211.0012    69    22652.0000    21677.3955  3158732    4.30%
   5943  4175    22586.0359    58    22652.0000    21679.5245  3167723    4.29%
   5986  4209    22333.6435    67    22652.0000    21679.5245  3181824    4.29%
   5995  4214    21840.9785    78    22652.0000    21679.5245  3192802    4.29%
   6039  4258    21905.6479    78    22652.0000    21679.5245  3204629    4.29%
   6079  4298    21972.9711    76    22652.0000    21679.5245  3215384    4.29%
   6123  4339    22009.3943    81    22652.0000    21679.5245  3227181    4.29%
   6175  4391    22045.6303    78    22652.0000    21679.5245  3240068    4.29%
Elapsed time = 3069.40 sec. (1063389.62 ticks, tree = 590.15 MB, solutions = 11)
   6235  4447    22085.3601    66    22652.0000    21679.5245  3255399    4.29%
   6380  4561    22559.7589    66    22652.0000    21679.5245  3299328    4.29%
   6396  4577    22210.9249    56    22652.0000    21679.5245  3313183    4.29%
   6408  4588    22541.1677    49    22652.0000    21679.5245  3321903    4.29%
   6452  4624    22597.0536    55    22652.0000    21679.5245  3342032    4.29%
   6484  4642    22054.1107    65    22652.0000    21679.5245  3363510    4.29%
   6508  4666    22137.8764    57    22652.0000    21679.5245  3386443    4.29%
   6671  4825    22198.8326    75    22652.0000    21685.1401  3459491    4.27%
   6693  4847    22058.5371    61    22652.0000    21685.1401  3473169    4.27%
   6701  4855    22578.1861    65    22652.0000    21685.1401  3481460    4.27%
Elapsed time = 3261.94 sec. (1121542.26 ticks, tree = 692.49 MB, solutions = 11)
   6725  4879    22038.5145    63    22652.0000    21685.1401  3489899    4.27%
   6757  4910    22347.0284    53    22652.0000    21685.1401  3507618    4.27%
   6765  4918    22073.9600    57    22652.0000    21685.1401  3509203    4.27%
   6988  5108    22169.7487    56    22652.0000    21685.1401  3610120    4.27%
   7004  5121    22192.2404    56    22652.0000    21685.1401  3623591    4.27%
   7022  5137    22620.3922    58    22652.0000    21685.1401  3637437    4.27%
   7036  5149        cutoff          22652.0000    21685.1401  3644071    4.27%
   7056  5164    22409.3681    52    22652.0000    21685.1401  3655949    4.27%
   7080  5179    22639.8370    40    22652.0000    21685.1401  3664686    4.27%
   7100  5191    22227.4414    68    22652.0000    21685.1401  3681851    4.27%
Elapsed time = 3448.27 sec. (1178014.25 ticks, tree = 737.71 MB, solutions = 11)
   7124  5214    22290.2202    60    22652.0000    21685.1401  3688259    4.27%
   7148  5235    22348.4428    71    22652.0000    21685.1401  3699846    4.27%
   7188  5267    22396.9103    66    22652.0000    21685.1401  3709164    4.27%
   7447  5485    22438.7520    72    22652.0000    21691.7066  3787154    4.24%
   7495  5532    22488.8834    69    22652.0000    21691.7066  3798362    4.24%
   7547  5580    22536.0133    69    22652.0000    21691.7066  3812629    4.24%
   7556  5587    22047.5286    69    22652.0000    21691.7066  3824036    4.24%
   7592  5622    22112.9596    75    22652.0000    21691.7066  3837943    4.24%
   7640  5665    22195.9487    57    22652.0000    21691.7066  3858926    4.24%
   7692  5717    22239.2188    57    22652.0000    21691.7066  3876289    4.24%
Elapsed time = 3589.38 sec. (1220198.44 ticks, tree = 794.04 MB, solutions = 11)
   7740  5760    22311.3381    56    22652.0000    21691.7066  3899011    4.24%
   7819  5833    22102.3951    60    22652.0000    21691.7066  3925990    4.24%
   7883  5894    22163.0961    62    22652.0000    21691.7066  3937328    4.24%
   7967  5974    22217.5756    59    22652.0000    21691.7066  3973369    4.24%
   8058  6062    22253.1642    54    22652.0000    21697.1433  3995492    4.22%
   8134  6133    22404.4644    45    22652.0000    21697.1433  4015172    4.22%
   8206  6201    22535.5110    44    22652.0000    21697.1433  4041972    4.22%
   8247  6236    22212.8255    68    22652.0000    21697.1433  4054016    4.22%
   8253  6239    21786.4781    66    22652.0000    21697.1433  4060999    4.22%
   8273  6250    22182.6829    62    22652.0000    21697.1433  4072708    4.22%
Elapsed time = 3745.52 sec. (1268723.57 ticks, tree = 880.25 MB, solutions = 11)
   8289  6266    21885.1001    67    22652.0000    21697.1433  4085672    4.22%
   8309  6286    22013.0395    63    22652.0000    21697.1433  4093465    4.22%
   8329  6302    21978.0040    60    22652.0000    21697.1433  4103691    4.22%
   8622  6589    22643.3771    59    22652.0000    21699.6056  4181566    4.20%
   8635  6595    22225.1355    38    22652.0000    21699.6056  4188639    4.20%
   8650  6604    22392.6991    72    22652.0000    21699.6056  4212572    4.20%
   8666  6619    22628.0858    64    22652.0000    21699.6056  4223618    4.20%
   8706  6649    21923.5455    89    22652.0000    21699.6056  4240003    4.20%
   8738  6676    21994.9721    75    22652.0000    21699.6056  4249658    4.20%
   8770  6706    22034.8008    80    22652.0000    21699.6056  4260140    4.20%
Elapsed time = 3897.88 sec. (1316549.43 ticks, tree = 968.94 MB, solutions = 11)
   8814  6746    22098.5208    76    22652.0000    21699.6056  4272631    4.20%
   8846  6775    22178.1729    61    22652.0000    21699.6056  4284282    4.20%
   8926  6847    22205.8077    57    22652.0000    21699.6056  4308302    4.20%
   8962  6878    22313.8038    51    22652.0000    21699.6056  4318124    4.20%
   9018  6929    22340.7349    47    22652.0000    21699.6056  4330984    4.20%
   9232  7120    22396.2124    69    22652.0000    21700.6078  4402751    4.20%
   9284  7170    22425.8843    66    22652.0000    21700.6078  4418080    4.20%
   9334  7215    21800.2476    71    22652.0000    21700.6078  4430513    4.20%
   9342  7223    22300.2330    63    22652.0000    21700.6078  4436957    4.20%
   9370  7248    22465.9010    48    22652.0000    21700.6078  4449175    4.20%
Elapsed time = 4037.53 sec. (1359363.14 ticks, tree = 1044.56 MB, solutions = 11)
   9426  7295    22492.1772    49    22652.0000    21700.6078  4467227    4.20%
   9450  7315    22544.4617    53    22652.0000    21700.6078  4474864    4.20%
   9494  7354    22574.7205    40    22652.0000    21700.6078  4484357    4.20%
   9562  7411    22632.0645    44    22652.0000    21700.6078  4503359    4.20%
   9594  7431    21891.8595    65    22652.0000    21700.6078  4523779    4.20%
   9614  7451    21913.2906    63    22652.0000    21700.6078  4535200    4.20%
   9877  7683    21976.0711    71    22652.0000    21700.6078  4634078    4.20%
   9900  7701    21981.1275    75    22652.0000    21705.2546  4652556    4.18%
   9913  7714    22297.8572    58    22652.0000    21705.2546  4663652    4.18%
   9937  7736    22366.7081    62    22652.0000    21705.2546  4673452    4.18%
Elapsed time = 4196.98 sec. (1409692.61 ticks, tree = 1139.64 MB, solutions = 11)
   9976  7773    22137.4229    61    22652.0000    21705.2546  4690785    4.18%
  10040  7830    22155.1913    55    22652.0000    21705.2546  4712079    4.18%
  10084  7870    22512.7337    36    22652.0000    21705.2546  4731860    4.18%
  10128  7911    22574.3226    41    22652.0000    21705.2546  4746081    4.18%
  10180  7953    21880.0237    81    22652.0000    21705.2546  4767845    4.18%
  10212  7981    21927.3422    76    22652.0000    21705.2546  4779139    4.18%
  10244  8007    21992.1142    72    22652.0000    21705.2546  4796833    4.18%
  10293  8051    21864.9933    69    22652.0000    21705.2546  4821143    4.18%
  10305  8063    22091.1451    73    22652.0000    21705.2546  4827582    4.18%
  10528  8265    22083.3969    60    22652.0000    21707.1929  4898088    4.17%
Elapsed time = 4352.47 sec. (1458497.14 ticks, tree = 1228.91 MB, solutions = 11)
  10544  8281    22429.5885    56    22652.0000    21707.1929  4909875    4.17%
  10573  8302    22148.7843    59    22652.0000    21707.1929  4922278    4.17%
  10609  8338    22241.2427    73    22652.0000    21707.1929  4934017    4.17%
  10673  8401    22305.0570    67    22652.0000    21707.1929  4951701    4.17%
  10713  8440    22367.0266    68    22652.0000    21707.1929  4966590    4.17%
  10769  8491    22441.2196    54    22652.0000    21707.1929  4987895    4.17%
  10790  8504    22516.7003    64    22652.0000    21707.1929  5003067    4.17%
  10846  8556    22553.9547    60    22652.0000    21707.1929  5023497    4.17%
  10906  8599    21828.6862    70    22652.0000    21707.1929  5051352    4.17%
  10934  8626    21867.4848    66    22652.0000    21707.1929  5058391    4.17%
Elapsed time = 4492.62 sec. (1501670.59 ticks, tree = 1228.91 MB, solutions = 11)
  10998  8688    21906.1368    68    22652.0000    21707.1929  5079208    4.17%
  11058  8742    21960.4763    73    22652.0000    21707.1929  5100481    4.17%
  11110  8791    21992.6228    64    22652.0000    21707.1929  5121032    4.17%
  11150  8829    22046.7445    57    22652.0000    21707.1929  5139404    4.17%
  11321  8993    22322.8021    50    22652.0000    21711.9379  5192541    4.15%
  11375  9044    22098.2372    47    22652.0000    21711.9379  5206616    4.15%
  11419  9088    22128.1892    54    22652.0000    21711.9379  5215497    4.15%
  11479  9143    22146.4343    57    22652.0000    21711.9379  5231150    4.15%
  11519  9179    22217.3051    46    22652.0000    21711.9379  5243971    4.15%
  11595  9250    22288.5016    44    22652.0000    21711.9379  5261092    4.15%
Elapsed time = 4627.97 sec. (1541707.88 ticks, tree = 1349.01 MB, solutions = 11)
  11652  9296    21965.0968    85    22652.0000    21711.9379  5280336    4.15%
  11680  9321    22526.3756    76    22652.0000    21711.9379  5292711    4.15%
  11724  9355    22583.1589    56    22652.0000    21711.9379  5301840    4.15%
  11764  9380    21885.2186    75    22652.0000    21711.9379  5320710    4.15%
  11800  9409    21917.1369    69    22652.0000    21711.9379  5331284    4.15%
  11840  9436    21959.1033    74    22652.0000    21711.9379  5341369    4.15%
  11920  9496    21986.2778    63    22652.0000    21711.9379  5383338    4.15%
  11972  9544    22030.2484    52    22652.0000    21711.9379  5406492    4.15%
  12065  9622    21994.1726    75    22652.0000    21711.9379  5445678    4.15%
  12176  9733    22075.3899    73    22652.0000    21713.5198  5473749    4.14%
Elapsed time = 4788.08 sec. (1592650.19 ticks, tree = 1471.49 MB, solutions = 11)
  12240  9796    22124.0193    66    22652.0000    21713.5198  5489731    4.14%
  12328  9881    22198.4717    56    22652.0000    21713.5198  5505784    4.14%
  12396  9946    22275.2639    61    22652.0000    21713.5198  5520103    4.14%
  12439  9983    21959.9678    79    22652.0000    21713.5198  5533207    4.14%
  12471 10015    22000.0140    82    22652.0000    21713.5198  5542272    4.14%
  12507 10051    22042.4830    75    22652.0000    21713.5198  5555821    4.14%
  12563 10105    22102.2153    72    22652.0000    21713.5198  5569329    4.14%
  12647 10187    22159.7275    68    22652.0000    21713.5198  5588956    4.14%
  12735 10268    22215.2390    65    22652.0000    21713.5198  5603557    4.14%
  12752 10281    22115.5842    70    22652.0000    21713.5198  5613963    4.14%
Elapsed time = 4924.78 sec. (1633287.88 ticks, tree = 1471.49 MB, solutions = 11)
  12788 10317    22186.9049    76    22652.0000    21713.5198  5624558    4.14%
  12832 10356    22260.6197    79    22652.0000    21713.5198  5637100    4.14%
  12916 10429    22318.4040    79    22652.0000    21713.5198  5657529    4.14%
  12992 10501    22381.7198    70    22652.0000    21713.5198  5682477    4.14%
  13210 10708    21843.8295    76    22652.0000    21713.5198  5743800    4.14%
  13250 10746    21934.9017    73    22652.0000    21715.9801  5759867    4.13%
  13290 10785    21981.6468    70    22652.0000    21715.9801  5770917    4.13%
  13314 10808    22022.8326    70    22652.0000    21715.9801  5780935    4.13%
  13358 10847    22050.8380    65    22652.0000    21715.9801  5796677    4.13%
  13402 10888    22082.8943    55    22652.0000    21715.9801  5806921    4.13%
Elapsed time = 5058.67 sec. (1675568.55 ticks, tree = 1647.74 MB, solutions = 11)
  13450 10923    22108.3347    59    22652.0000    21715.9801  5829615    4.13%
  13492 10964    21831.4882    76    22652.0000    21715.9801  5847242    4.13%
  13520 10992    21849.7396    72    22652.0000    21715.9801  5858267    4.13%
  13592 11057    21870.0023    47    22652.0000    21715.9801  5877869    4.13%
  13640 11105    21899.1972    54    22652.0000    21715.9801  5910197    4.13%
  13665 11127    22436.8287    59    22652.0000    21715.9801  5927447    4.13%
  13705 11162    22572.0628    67    22652.0000    21715.9801  5939819    4.13%
  13797 11235    22280.6689    70    22652.0000    21715.9801  5974899    4.13%
  13895 11327    22087.4733    59    22652.0000    21718.6417  6017480    4.12%
  13911 11343    22331.5193    73    22652.0000    21718.6417  6029657    4.12%
Elapsed time = 5240.92 sec. (1730941.81 ticks, tree = 1745.81 MB, solutions = 11)
  13979 11405    22518.7121    56    22652.0000    21718.6417  6047704    4.12%
  14035 11459    22571.5584    45    22652.0000    21718.6417  6063566    4.12%
  14103 11519    22603.6248    32    22652.0000    21718.6417  6087071    4.12%
  14154 11561    22629.3881    53    22652.0000    21718.6417  6100728    4.12%
  14198 11596    22162.8111    73    22652.0000    21718.6417  6122050    4.12%
  14228 11617    21932.4123    58    22652.0000    21718.6417  6150049    4.12%
  14248 11637    21978.9272    55    22652.0000    21718.6417  6158859    4.12%
  14268 11657    22227.1271    45    22652.0000    21718.6417  6171374    4.12%
  14280 11669    22336.3500    55    22652.0000    21718.6417  6180160    4.12%
  14304 11693    22036.6739    57    22652.0000    21718.6417  6191653    4.12%
Elapsed time = 5411.81 sec. (1776845.55 ticks, tree = 1745.81 MB, solutions = 11)
  14316 11705    22355.9214    44    22652.0000    21718.6417  6199204    4.12%
  14610 11975    22238.8263    46    22652.0000    21721.1180  6296045    4.11%
  14626 11990    22243.5862    46    22652.0000    21721.1180  6303707    4.11%
  14662 12022    22316.7480    37    22652.0000    21721.1180  6323674    4.11%
  14690 12050    22395.6429    38    22652.0000    21721.1180  6339663    4.11%
  14779 12122    22475.4898    70    22652.0000    21721.1180  6374283    4.11%
  14800 12141    22633.4682    44    22652.0000    21721.1180  6388661    4.11%
  14832 12163    21919.2283    81    22652.0000    21721.1180  6406251    4.11%
  14856 12181    21972.2203    64    22652.0000    21721.1180  6415958    4.11%
  14908 12219    22007.0601    69    22652.0000    21721.1180  6437351    4.11%
Elapsed time = 5594.22 sec. (1830232.96 ticks, tree = 1857.02 MB, solutions = 11)
  14992 12296    22038.8788    72    22652.0000    21721.1180  6464537    4.11%
  15047 12348    21974.7978    66    22652.0000    21721.1180  6482571    4.11%
  15087 12387    22002.3134    69    22652.0000    21721.1180  6493970    4.11%
  15298 12574    22132.3278    61    22652.0000    21721.1180  6557247    4.11%
  15318 12594    22161.8005    72    22652.0000    21722.5414  6565328    4.10%
  15346 12622    22198.6507    74    22652.0000    21722.5414  6572710    4.10%
  15382 12658    22265.6258    82    22652.0000    21722.5414  6584851    4.10%
  15422 12697    22334.4840    62    22652.0000    21722.5414  6596696    4.10%
  15502 12775    22387.6226    59    22652.0000    21722.5414  6621356    4.10%
  15564 12836    22269.4138    60    22652.0000    21722.5414  6638665    4.10%
Elapsed time = 5730.51 sec. (1875359.89 ticks, tree = 1961.79 MB, solutions = 11)
  15584 12854    22638.4404    58    22652.0000    21722.5414  6650135    4.10%
  15612 12875    22034.6362    72    22652.0000    21722.5414  6662450    4.10%
  15656 12916    22071.8993    77    22652.0000    21722.5414  6674831    4.10%
  15696 12951    22118.9802    68    22652.0000    21722.5414  6685353    4.10%
  15764 13010    22161.2458    60    22652.0000    21722.5414  6718014    4.10%
  15797 13035    22487.0617    55    22652.0000    21722.5414  6743520    4.10%
  15805 13043    22248.8537    68    22652.0000    21722.5414  6752369    4.10%
  15821 13059    22455.6999    57    22652.0000    21722.5414  6759114    4.10%
  15977 13211    22449.7227    69    22652.0000    21727.1713  6827706    4.08%
  15987 13221    22278.4869    58    22652.0000    21727.1713  6828419    4.08%
Elapsed time = 5888.12 sec. (1923852.61 ticks, tree = 2068.52 MB, solutions = 11)
Nodefile size = 20.83 MB (16.21 MB after compression)
  16001 13235    22483.0783    64    22652.0000    21727.1713  6841662    4.08%
  16029 13263    22284.4851    63    22652.0000    21727.1713  6852293    4.08%
  16049 13283    22627.2618    58    22652.0000    21727.1713  6862756    4.08%
  16061 13294    22383.0036    59    22652.0000    21727.1713  6871608    4.08%
  16093 13326    22388.1736    49    22652.0000    21727.1713  6881734    4.08%
  16109 13340    22445.4401    46    22652.0000    21727.1713  6891105    4.08%
  16125 13355    22423.5127    48    22652.0000    21727.1713  6899551    4.08%
  16137 13367    22554.3538    49    22652.0000    21727.1713  6906322    4.08%
  16217 13437    22609.5726    44    22652.0000    21727.1713  6923002    4.08%
  16293 13502    21796.8634    75    22652.0000    21727.1713  6944279    4.08%
Elapsed time = 6048.41 sec. (1972612.49 ticks, tree = 2068.52 MB, solutions = 11)
Nodefile size = 20.83 MB (16.21 MB after compression)
  16349 13557    21828.0070    84    22652.0000    21727.1713  6957682    4.08%
  16659 13847    21879.8132    69    22652.0000    21730.2240  7091357    4.07%
  16694 13875    21981.7830    84    22652.0000    21730.2240  7114207    4.07%
  16720 13897    22520.9787    58    22652.0000    21730.2240  7122664    4.07%
  16762 13935    22026.3582    71    22652.0000    21730.2240  7137236    4.07%
  16818 13984    22068.0307    58    22652.0000    21730.2240  7151939    4.07%
  16866 14027    22087.4078    53    22652.0000    21730.2240  7163585    4.07%
  16926 14079    22151.5385    51    22652.0000    21730.2240  7187992    4.07%
  16986 14138    22201.4402    52    22652.0000    21730.2240  7203442    4.07%
  17064 14215    21859.1950    81    22652.0000    21730.2240  7222391    4.07%
Elapsed time = 6206.00 sec. (2018430.32 ticks, tree = 2178.24 MB, solutions = 11)
Nodefile size = 130.67 MB (101.96 MB after compression)
  17108 14259    21902.2099    69    22652.0000    21730.2240  7234065    4.07%
  17176 14324    21969.2318    75    22652.0000    21730.2240  7252464    4.07%
  17228 14368    22028.5451    67    22652.0000    21730.2240  7273191    4.07%
  17280 14419    22099.4461    56    22652.0000    21730.2240  7283443    4.07%
  17344 14478    22158.8718    55    22652.0000    21730.2240  7296345    4.07%
  17456 14569    22390.4379    68    22652.0000    21734.7777  7352954    4.05%
  17464 14577    21969.7625    57    22652.0000    21734.7777  7360568    4.05%
  17488 14601    21986.0554    56    22652.0000    21734.7777  7376839    4.05%
  17504 14615    22043.1893    50    22652.0000    21734.7777  7384617    4.05%
  17544 14651    22308.7410    49    22652.0000    21734.7777  7405710    4.05%
Elapsed time = 6356.34 sec. (2063217.11 ticks, tree = 2302.20 MB, solutions = 11)
Nodefile size = 254.79 MB (199.00 MB after compression)
  17584 14687    22411.4638    41    22652.0000    21734.7777  7426405    4.05%
  17608 14707    22495.7675    38    22652.0000    21734.7777  7447196    4.05%
  17640 14737    22338.4230    45    22652.0000    21734.7777  7457711    4.05%
  17700 14786        cutoff          22652.0000    21734.7777  7477254    4.05%
  17764 14834    22454.3039    48    22652.0000    21734.7777  7502543    4.05%
  17812 14876    22649.3326    39    22652.0000    21734.7777  7516399    4.05%
  17836 14895    22172.2537    59    22652.0000    21734.7777  7528812    4.05%
  17884 14943    22229.4725    69    22652.0000    21734.7777  7543238    4.05%
* 17916+14964                        22507.0000    21734.7777             3.43%
  17916 14966    22247.8018    68    22507.0000    21734.7777  7551752    3.43%
  18095 12437    22095.8989    81    22507.0000    21737.3552  7632276    3.42%
Elapsed time = 6511.05 sec. (2107667.31 ticks, tree = 1947.63 MB, solutions = 12)
* 18097+12437                        22500.0000    21737.3552             3.39%
  18119 12461    22178.6938    81    22500.0000    21737.3552  7652509    3.39%
  18172 12514    22258.3742    71    22500.0000    21737.3552  7667361    3.39%
* 18179+12519                        22455.0000    21737.3552             3.20%
  18199 12539    22281.1900    73    22455.0000    21737.3552  7681440    3.20%
  18261 12599    22052.6117    59    22455.0000    21737.3552  7698801    3.20%
  18297 12635    22112.2728    70    22455.0000    21737.3552  7711127    3.20%
  18357 12688    22143.4265    74    22455.0000    21737.3552  7737573    3.20%
  18393 12719    22153.0395    63    22455.0000    21737.3552  7749963    3.20%
  18435 12761    21897.6283    73    22455.0000    21737.3552  7764384    3.20%
  18482 12807    22470.4589    44    22455.0000    21737.3552  7777951    3.20%
  18526 12841    21942.7458    67    22455.0000    21737.3552  7801876    3.20%
Elapsed time = 6682.24 sec. (2161167.20 ticks, tree = 1947.63 MB, solutions = 12)
  18530 12844    22486.3487    63    22455.0000    21737.3552  7808404    3.20%
  18709 12010    22061.1492    80    22455.0000    21739.2604  7857760    3.19%
  18733 12027    22103.9776    85    22455.0000    21739.2604  7872205    3.19%
  18748 12042    21864.0966    81    22455.0000    21739.2604  7880640    3.19%
  18756 12050    22199.8137    60    22455.0000    21739.2604  7887808    3.19%
  18764 12058    22135.0135    75    22455.0000    21739.2604  7895665    3.19%
  18780 12074    22146.9420    73    22455.0000    21739.2604  7905970    3.19%
  18800 12093    22355.8939    59    22455.0000    21739.2604  7918498    3.19%
  18816 12107    22405.8891    57    22455.0000    21739.2604  7928986    3.19%
  18840 12125    22019.9245    81    22455.0000    21739.2604  7943296    3.19%
Elapsed time = 6849.92 sec. (2213121.28 ticks, tree = 1877.83 MB, solutions = 14)
  18880 12162    22051.9452    76    22455.0000    21739.2604  7961086    3.19%
  18920 12198    22087.0308    70    22455.0000    21739.2604  7975996    3.19%
  18968 12239    22125.3900    71    22455.0000    21739.2604  8000220    3.19%
  19060 12310    21832.5802    74    22455.0000    21741.2211  8047355    3.18%
  19092 12342    21915.7172    71    22455.0000    21741.2211  8059525    3.18%
  19147 12393    22014.4738    77    22455.0000    21741.2211  8082580    3.18%
  19167 12413    22034.3307    72    22455.0000    21741.2211  8088624    3.18%
  19195 12441    22090.5985    78    22455.0000    21741.2211  8098509    3.18%
  19255 12501    22119.7325    84    22455.0000    21741.2211  8116495    3.18%
  19299 12545    22213.7419    68    22455.0000    21741.2211  8129734    3.18%
Elapsed time = 7057.56 sec. (2288533.88 ticks, tree = 1929.01 MB, solutions = 14)
  19414 12652    22396.8541    42    22455.0000    21741.2211  8172160    3.18%
  19543 12770    22285.7474    73    22455.0000    21741.2211  8213018    3.18%
  19555 12782    21905.7323    89    22455.0000    21741.2211  8220805    3.18%
  19563 12790    22041.3891    80    22455.0000    21741.2211  8227158    3.18%
  19575 12802    22157.9872    76    22455.0000    21741.2211  8234876    3.18%
  19591 12816    22007.4617    70    22455.0000    21741.2211  8243184    3.18%
  19607 12823    22369.7038    62    22455.0000    21741.2211  8261226    3.18%

Implied bound cuts applied:  369
Flow cuts applied:  695
Mixed integer rounding cuts applied:  212
Flow path cuts applied:  15
Lift and project cuts applied:  32

Root node processing (before b&c):
  Real time             =  158.29 sec. (90966.31 ticks)
Parallel b&c, 4 threads:
  Real time             = 7043.64 sec. (2243995.39 ticks)
  Sync time (average)   =  179.76 sec.
  Wait time (average)   =  181.45 sec.
                          ------------
Total (root+branch&cut) = 7201.93 sec. (2334961.69 ticks)
We use intensification finding a better solution: 22455.0
================ Solution ================
BAP terminated with objective : 22455
Total Number of iterations: 143
Total Number of processed nodes: 5
Total Time spent on master problems: 1887374 Total time spent on pricing problems: 33490
Best bound : 20356.026666666665
[1, 22, 64, 72, 88, 93, 111, 134, 147, 238, 249, 338, 390, 399, 442, 485, 493, 495, 506, 507, 530, 548, 565, 604, 618, 641, 675, 706, 721, 729, 742, 764, 766, 782, 785, 795, 844, 861, 881, 922, 958, 980, 982, 1005, 1035, 1056, 1060, 1079, 1083, 1088, 1094, 1101, 1121, 1125, 1130, 1134, 1146, 1161, 1167, 1204, 1209, 1218, 1229, 1236, 1253, 1265, 1284, 1309, 1395, 1408, 1424, 1437, 1445, 1498]
The number of service edges used= 74

Solution is optimal: false
Columns (only non-zero columns are returned):
artificial: false edgeIndexset: [1, 1253, 1574, 249, 1500, 495] start node= 1 start time= 9 capacity type= 2 ifChargeSet: [1500]
(0,0)->charge(0,1)->(1,9)->(2,14)->(2,15)->(9,23)->(0,0):1.0
Fix cost= 300 variable cost= 122

artificial: false edgeIndexset: [338, 1079, 1738, 922, 604, 766] start node= 1 start time= 8 capacity type= 2 ifChargeSet: [1738]
(4,4)->(1,8)->(5,16)->(6,22)->(7,28)->charge(7,29)->(4,4):1.0
Fix cost= 300 variable cost= 126

artificial: false edgeIndexset: [1424, 721, 565, 485, 1783, 861] start node= 5 start time= 1 capacity type= 2 ifChargeSet: [1783]
(5,1)->(2,5)->(9,13)->charge(9,14)->(6,21)->(3,25)->(5,1):1.0
Fix cost= 350 variable cost= 126

artificial: false edgeIndexset: [548, 1796, 980, 844, 764, 1437] start node= 5 start time= 14 capacity type= 2 ifChargeSet: [1796]
(6,4)->(3,8)->(5,14)->(6,20)->(9,26)->charge(9,27)->(6,4):1.0
Fix cost= 350 variable cost= 126

artificial: false edgeIndexset: [881, 1766, 442, 618, 1690, 93, 1167] start node= 8 start time= 26 capacity type= 1 ifChargeSet: [1690]
(0,3)->(6,10)->charge(6,11)->(4,18)->(1,22)->(8,26)->(8,27)->(0,3):1.0
Fix cost= 120 variable cost= 122

artificial: false edgeIndexset: [1121, 1586, 1395, 1445, 742, 507] start node= 7 start time= 11 capacity type= 1 ifChargeSet: [1586]
(9,5)->(7,11)->(9,15)->(5,22)->(2,26)->charge(2,27)->(9,5):1.0
Fix cost= 110 variable cost= 126

artificial: false edgeIndexset: [675, 1204, 1060, 1701, 982, 1498] start node= 7 start time= 10 capacity type= 1 ifChargeSet: [1701]
(8,4)->(7,10)->(4,15)->(6,21)->charge(6,22)->(9,28)->(8,4):1.0
Fix cost= 110 variable cost= 126

artificial: false edgeIndexset: [1265, 1125, 506, 1724, 1309, 1774, 399] start node= 7 start time= 14 capacity type= 1 ifChargeSet: [1774]
(9,4)->charge(9,5)->(1,9)->(7,14)->(7,15)->(9,19)->(2,26)->(9,4):1.0
Fix cost= 110 variable cost= 122

artificial: false edgeIndexset: [1744, 1745, 706, 72, 1146, 958, 1743, 111] start node= 5 start time= 16 capacity type= 2 ifChargeSet: [1745]
(8,3)->(8,4)->(8,5)->charge(8,6)->(0,12)->(5,16)->(0,21)->(6,28)->(8,3):1.0
Fix cost= 350 variable cost= 118

artificial: false edgeIndexset: [530, 1747, 147, 1748, 1609, 1209, 1083, 1035] start node= 8 start time= 8 capacity type= 1 ifChargeSet: [1609]
(7,3)->(8,7)->(8,8)->(8,9)->(7,15)->(3,19)->charge(3,20)->(0,27)->(7,3):1.0
Fix cost= 120 variable cost= 118

artificial: false edgeIndexset: [64, 1792, 1793, 1284, 729, 1658, 493, 238, 1791] start node= 9 start time= 21 capacity type= 1 ifChargeSet: [1658]
(0,4)->(5,8)->charge(5,9)->(2,13)->(9,21)->(9,22)->(9,23)->(9,24)->(1,28)->(0,4):1.0
Fix cost= 130 variable cost= 114

artificial: false edgeIndexset: [1408, 785, 1218, 1094, 1721, 1722, 1723, 1134] start node= 7 start time= 24 capacity type= 1 ifChargeSet: [1723]
(5,5)->(7,11)->(7,12)->(7,13)->charge(7,14)->(8,18)->(7,24)->(9,28)->(5,5):1.0
Fix cost= 110 variable cost= 118

artificial: false edgeIndexset: [1056, 641, 1715, 1765, 1766, 1767, 1768, 795, 1101, 1229] start node= 8 start time= 29 capacity type= 1 ifChargeSet: [1715]
(7,5)->charge(7,6)->(4,11)->(5,15)->(7,21)->(8,25)->(8,26)->(8,27)->(8,28)->(8,29)->(7,5):1.0
Fix cost= 120 variable cost= 110

artificial: false edgeIndexset: [390, 1005, 1715, 1716, 1717, 1718, 22, 1719, 1720, 1721, 1722, 1723, 1724] start node= 7 start time= 13 capacity type= 1 ifChargeSet: []
(1,0)->(7,5)->(7,6)->(7,7)->(7,8)->(7,9)->(7,10)->(7,11)->(7,12)->(7,13)->(7,14)->(7,15)->(0,22)->(1,0):1.0
Fix cost= 110 variable cost= 80

artificial: false edgeIndexset: [1088, 1760, 1161, 782, 1527, 1752, 88, 1753, 1754, 1755, 1756, 1757, 1758, 1759] start node= 8 start time= 20 capacity type= 1 ifChargeSet: []
(5,2)->(7,8)->(8,12)->(8,13)->(8,14)->(8,15)->(8,16)->(8,17)->(8,18)->(8,19)->(8,20)->(8,21)->(0,27)->(0,28)->(5,2):1.0
Fix cost= 120 variable cost= 80

artificial: false edgeIndexset: [1794, 1795, 1796, 1797, 134, 1798, 1799, 1513, 1130, 1770, 1771, 1772, 1773, 1774, 1775, 1236] start node= 9 start time= 24 capacity type= 0 ifChargeSet: []
(9,0)->(9,1)->(9,2)->(9,3)->(9,4)->(9,5)->(9,6)->(0,13)->(0,14)->(7,20)->(9,24)->(9,25)->(9,26)->(9,27)->(9,28)->(9,29)->(9,0):1.0
Fix cost= 80 variable cost= 68

fix cost+variable cost+commodity cost= 2890+1802+17763.0=22455.0

vehicle dowork= 27490 commodity dowork= 17763.0
no load ratio= 0.35383775918515825

Total vehicles used= 16

vehicleCoverServiceEdge information:
{1408=1, 1=1, 641=1, 1284=1, 390=1, 134=1, 1161=1, 1035=1, 782=1, 1167=1, 399=1, 1424=1, 785=1, 530=1, 147=1, 22=1, 922=1, 795=1, 1437=1, 1309=1, 1056=1, 675=1, 548=1, 1060=1, 1445=1, 1204=1, 565=1, 1079=1, 1209=1, 442=1, 1083=1, 958=1, 64=1, 1088=1, 706=1, 1218=1, 1094=1, 72=1, 844=1, 1101=1, 1229=1, 721=1, 338=1, 980=1, 1236=1, 982=1, 88=1, 729=1, 1498=1, 604=1, 861=1, 93=1, 1121=1, 1253=1, 485=1, 1125=1, 742=1, 618=1, 1130=1, 493=1, 1005=1, 238=1, 1134=1, 495=1, 111=1, 881=1, 1265=1, 1395=1, 249=1, 506=1, 1146=1, 507=1, 764=1, 766=1}

commodityFlowIntoTerminal information:
100 0 0 24 17 0 0 0 0 0 0 0 88 20 0 0 0 0 0 0 0 58 37 0 0 0 0 71 0 0 
19 0 0 0 0 0 0 0 100 103 0 0 0 0 0 0 0 0 0 0 0 0 23 0 0 0 0 0 50 0 
0 0 0 0 0 30 0 0 0 0 0 0 0 50 68 0 0 0 0 0 0 0 0 0 0 0 90 0 0 0 
0 0 0 0 0 0 0 0 80 0 0 0 0 0 0 0 0 0 0 50 0 0 0 0 0 46 0 0 0 0 
0 0 0 0 79 0 0 0 0 0 0 46 0 0 0 50 0 0 22 0 0 0 0 0 0 0 0 0 0 0 
0 100 3 0 0 50 0 0 50 0 0 0 0 0 100 50 165 0 0 0 0 0 50 0 0 0 0 0 0 0 
0 0 0 0 40 0 0 0 0 0 23 0 0 0 0 0 0 0 0 0 44 107 0 0 0 0 0 0 41 0 
0 0 0 50 0 58 0 0 50 0 29 83 0 0 50 0 0 0 0 0 13 45 0 0 34 0 0 0 33 0 
0 0 0 18 50 0 0 10 0 0 0 0 0 0 0 0 0 0 21 0 0 0 0 0 0 40 30 0 0 0 
0 0 0 0 0 45 0 0 0 0 0 0 0 19 0 50 0 0 0 44 0 50 0 63 0 0 29 0 96 0 

vehicle pattern information:
[1, 0, 0, 0, 0, 0, 0, 0, 1, 0, 0, 0, 0, 0, 0, 0, 1, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 1, 0, 0, 0, 0, 0, 0, 0, 0]
[0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 1, 0, 0, 0, 0, 0, 0, 0, 0, 1, 0, 0, 0, 0, 1, 0, 0, 0, 0, 1, 0, 0, 0, 0, 1, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0]
[0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 1, 0, 1, 0, 0, 0, 0, 0, 1, 0, 0, 0, 1, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 1, 0, 0]
[0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 1, 0, 0, 0, 0, 0, 0, 1, 0, 0, 1, 0, 0, 0, 1, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 1, 0, 0]
[0, 0, 0, 1, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 1, 0, 0, 0, 0, 0, 1, 0, 0, 0, 0, 0, 0, 0, 0, 1, 0, 0, 0, 0, 0, 0, 0, 0, 1, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0]
[0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 1, 0, 0, 0, 0, 0, 0, 0, 1, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 1, 0, 0, 0, 0, 0, 0, 0, 0, 1, 0, 1, 0]
[0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 1, 0, 0, 0, 0, 0, 0, 0, 0, 0, 1, 0, 0, 1, 0, 0, 0, 0, 1, 0, 0, 0, 0, 0, 0, 0, 0, 1]
[0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 1, 0, 0, 1, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 1, 0, 0, 0, 0, 1, 1, 0, 0, 0, 0, 0, 0]
[0, 0, 1, 1, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 1, 0, 0, 0, 0, 0, 0, 0, 1, 0, 0, 0, 0, 0, 0, 1, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0]
[0, 0, 0, 0, 1, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 1, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 1, 0, 1, 0, 0, 0, 1, 0, 0, 0, 0, 0, 0, 0, 0, 0]
[0, 0, 1, 0, 0, 0, 0, 1, 0, 0, 0, 0, 0, 0, 0, 0, 1, 0, 0, 0, 0, 0, 0, 0, 1, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 1, 0, 0, 0, 0, 0, 0, 0]
[0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 1, 0, 0, 0, 0, 0, 0, 0, 0, 0, 1, 1, 0, 0, 1, 0, 0, 0, 0, 0, 1, 0, 0, 0]
[0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 1, 0, 0, 0, 0, 1, 0, 0, 0, 0, 0, 0, 0, 0, 1, 1, 0, 0, 0, 1, 0, 0, 0, 0, 0, 0, 0, 0, 0]
[1, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 1, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 1, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0]
[0, 0, 1, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 1, 0, 0, 0, 0, 0, 0, 0, 0, 0, 1, 0, 1, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0]
[0, 0, 0, 0, 1, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 1, 0, 0, 0, 1, 0, 0, 0, 0, 0, 0, 0, 0]
x[0]:8,29->7,5= 23.0 6
total cost= 138.0

x[1]:6,22->7,28= 19.0 6
total cost= 114.0

x[2]:7,15->0,22= 18.0 7
total cost= 126.0

x[3]:6,21->3,25= 19.0 4
x[3]:9,14->6,21= 19.0 7
x[3]:2,5->9,13= 19.0 8
total cost= 361.0

x[4]:9,23->0,0= 30.0 7
x[4]:2,15->9,23= 30.0 8
total cost= 450.0

x[5]:1,9->7,14= 29.0 5
total cost= 145.0

x[6]:4,18->1,22= 17.0 4
total cost= 68.0

x[7]:3,25->5,1= 22.0 6
x[7]:5,2->7,8= 22.0 6
total cost= 264.0

x[8]:1,0->7,5= 7.0 5
x[8]:1,9->7,14= 16.0 5
total cost= 115.0

x[9]:0,12->5,16= 28.0 4
x[9]:8,6->0,12= 28.0 6
x[9]:5,22->2,26= 28.0 4
total cost= 392.0

x[10]:0,1->1,9= 17.0 8
total cost= 136.0

x[11]:2,13->9,21= 15.0 8
total cost= 120.0

x[12]:6,22->7,28= 14.0 6
total cost= 84.0

x[13]:7,15->9,19= 13.0 4
total cost= 52.0

x[14]:7,11->9,15= 8.0 4
x[14]:7,24->9,28= 7.0 4
x[14]:8,18->7,24= 15.0 6
total cost= 150.0

x[15]:3,20->0,27= 15.0 7
total cost= 105.0

x[16]:8,6->0,12= 16.0 6
total cost= 96.0

x[17]:7,29->4,4= 1.9999999999999858 5
x[17]:7,15->9,19= 10.000000000000014 4
x[17]:9,5->1,9= 9.000000000000014 4
x[17]:9,24->1,28= 1.0 4
x[17]:4,4->1,8= 1.9999999999999858 4
total cost= 97.99999999999999

x[18]:1,9->2,14= 24.0 5
total cost= 120.0

x[19]:0,4->5,8= 26.0 4
x[19]:8,21->0,27= 26.0 6
total cost= 260.0

x[20]:0,12->5,16= 20.0 4
x[20]:8,6->0,12= 20.0 6
x[20]:5,22->2,26= 20.0 4
total cost= 280.0

x[21]:4,4->1,8= 23.000000000000014 4
x[21]:4,18->1,22= 6.999999999999986 4
total cost= 120.0

x[22]:9,19->2,26= 29.0 7
total cost= 203.0

x[23]:1,22->8,26= 4.0 4
x[23]:9,5->1,9= 4.0 4
x[23]:9,28->8,4= 14.0 6
total cost= 116.0

x[24]:6,4->3,8= 10.0 4
total cost= 40.0

x[25]:9,23->0,0= 26.0 7
total cost= 182.0

x[26]:3,25->5,1= 18.0 6
x[26]:6,21->3,25= 18.0 4
total cost= 180.0

x[27]:9,15->5,22= 16.0 7
x[27]:2,27->9,5= 16.0 8
total cost= 240.0

x[28]:7,6->4,11= 25.0 5
x[28]:0,27->7,3= 25.0 6
total cost= 275.0

x[29]:7,29->4,4= 26.0 5
x[29]:4,4->1,8= 26.0 4
total cost= 234.0

x[30]:0,21->6,28= 30.0 7
x[30]:6,4->3,8= 30.0 4
total cost= 330.0

x[31]:0,3->6,10= 23.0 7
total cost= 161.0

x[32]:4,11->5,15= 19.0 4
total cost= 76.0

x[33]:7,11->9,15= 13.0 4
x[33]:7,15->9,19= 8.0 4
x[33]:5,5->7,11= 21.0 6
total cost= 210.0

x[34]:0,21->6,28= 11.0 7
x[34]:6,4->3,8= 11.0 4
total cost= 121.0

x[35]:9,15->5,22= 5.0 7
x[35]:9,28->5,5= 18.0 7
total cost= 161.0

x[36]:1,9->2,14= 14.0 5
x[36]:4,4->1,8= 14.0 4
total cost= 126.0

x[37]:1,28->0,4= 17.0 6
total cost= 102.0

x[38]:0,4->5,8= 12.0 4
x[38]:8,27->0,3= 12.0 6
x[38]:5,9->2,13= 12.0 4
total cost= 168.0

x[39]:3,25->5,1= 30.0 6
x[39]:5,1->2,5= 7.0 4
x[39]:5,9->2,13= 23.0 4
total cost= 300.0

x[40]:6,11->4,18= 22.0 7
total cost= 154.0

x[41]:7,10->4,15= 13.0 5
x[41]:3,25->5,1= 13.0 6
x[41]:5,2->7,8= 13.0 6
total cost= 221.0

x[42]:7,29->4,4= 14.0 5
x[42]:5,15->7,21= 14.0 6
total cost= 154.0

x[43]:7,15->3,19= 21.0 4
x[43]:9,5->7,11= 21.0 6
total cost= 210.0

x[44]:9,15->5,22= 29.0 7
x[44]:2,27->9,5= 29.0 8
total cost= 435.0

x[45]:7,6->4,11= 6.0 5
x[45]:7,10->4,15= 22.0 5
x[45]:1,0->7,5= 28.0 5
total cost= 280.0

x[46]:0,12->5,16= 4.0 4
x[46]:7,21->8,25= 4.0 4
x[46]:7,24->9,28= 12.0 4
x[46]:8,6->0,12= 4.0 6
x[46]:9,28->5,5= 12.0 7
total cost= 188.0

x[47]:1,8->5,16= 26.0 8
total cost= 208.0

x[48]:9,24->1,28= 20.0 4
total cost= 80.0

x[49]:1,9->2,14= 11.0 5
x[49]:4,4->1,8= 11.0 4
total cost= 99.0

x[50]:6,22->9,28= 29.0 6
total cost= 174.0

x[51]:9,5->7,11= 19.0 6
total cost= 114.0

x[52]:9,27->6,4= 27.0 7
x[52]:2,15->9,23= 27.0 8
total cost= 405.0

x[53]:0,12->5,16= 20.0 4
x[53]:8,6->0,12= 20.0 6
total cost= 200.0

x[54]:7,15->9,19= 13.0 4
x[54]:9,27->6,4= 13.0 7
total cost= 143.0

x[55]:9,23->0,0= 24.0 7
total cost= 168.0

x[56]:1,9->7,14= 5.0 5
x[56]:4,4->1,8= 5.0 4
x[56]:4,11->5,15= 10.0 4
x[56]:5,16->0,21= 10.0 5
x[56]:7,15->0,22= 5.0 7
total cost= 170.0

x[57]:9,28->8,4= 15.0 6
total cost= 90.0

x[58]:9,6->0,13= 20.0 7
total cost= 140.0

x[59]:7,21->8,25= 16.0 4
total cost= 64.0

x[60]:9,23->0,0= 20.0 7
total cost= 140.0

x[61]:7,24->9,28= 17.0 4
x[61]:5,15->7,21= 17.0 6
total cost= 170.0

x[62]:7,15->3,19= 28.0 4
total cost= 112.0

x[63]:3,8->5,14= 18.0 6
x[63]:3,25->5,1= 2.0 6
x[63]:5,14->6,20= 20.0 6
total cost= 240.0

x[64]:4,15->6,21= 17.0 6
x[64]:6,22->9,28= 17.0 6
total cost= 204.0

x[65]:7,29->4,4= 19.0 5
x[65]:1,9->2,14= 19.0 5
x[65]:4,4->1,8= 19.0 4
total cost= 266.0

x[66]:7,3->8,7= 10.0 4
total cost= 40.0

x[67]:3,8->5,14= 24.0 6
x[67]:5,14->6,20= 24.0 6
total cost= 288.0

x[68]:4,11->5,15= 21.0 4
total cost= 84.0

x[69]:9,28->5,5= 20.0 7
x[69]:2,13->9,21= 20.0 8
total cost= 300.0

x[70]:0,4->5,8= 11.999999999999998 4
x[70]:0,28->5,2= 3.0000000000000018 4
x[70]:8,21->0,27= 3.0000000000000018 6
x[70]:8,27->0,3= 11.999999999999998 6
x[70]:5,9->2,13= 15.0 4
total cost= 210.0

x[71]:9,19->2,26= 13.0 7
total cost= 91.0

x[72]:9,14->6,21= 13.0 7
total cost= 91.0

x[73]:6,28->8,3= 18.0 5
total cost= 90.0

x[74]:9,14->6,21= 21.0 7
total cost= 147.0

x[75]:1,8->5,16= 16.0 8
total cost= 128.0

x[76]:4,15->6,21= 28.0 6
total cost= 168.0

x[77]:7,21->8,25= 20.0 4
total cost= 80.0

x[78]:0,12->5,16= 23.0 4
x[78]:5,1->2,5= 23.0 4
total cost= 184.0

x[79]:0,22->1,0= 19.0 8
x[79]:5,16->0,21= 19.0 5
total cost= 247.0

x[80]:7,14->8,18= 21.0 4
x[80]:5,5->7,11= 21.0 6
total cost= 210.0

x[81]:0,1->1,9= 25.0 8
total cost= 200.0

x[82]:5,16->0,21= 29.0 5
total cost= 145.0

x[83]:3,20->0,27= 15.0 7
x[83]:7,6->4,11= 15.0 5
x[83]:7,10->4,15= 15.0 5
x[83]:3,25->5,1= 15.0 6
x[83]:0,27->7,3= 15.0 6
x[83]:5,2->7,8= 15.0 6
total cost= 525.0

x[84]:9,5->1,9= 11.0 4
total cost= 44.0

x[85]:6,21->3,25= 9.0 4
x[85]:7,15->3,19= 1.0 4
x[85]:9,14->6,21= 9.0 7
x[85]:9,5->7,11= 1.0 6
total cost= 109.0

x[86]:0,1->1,9= 11.0 8
total cost= 88.0

x[87]:9,28->8,4= 21.0 6
x[87]:2,13->9,21= 15.0 8
x[87]:2,15->9,23= 6.0 8
total cost= 294.0

x[88]:3,20->0,27= 12.99999999999999 7
total cost= 90.99999999999993

x[89]:7,24->9,28= 14.0 4
x[89]:3,8->5,14= 14.0 6
x[89]:5,15->7,21= 14.0 6
total cost= 224.0

x[90]:3,8->5,14= 15.0 6
total cost= 90.0

x[91]:6,20->9,26= 29.0 6
total cost= 174.0

x[92]:1,8->5,16= 10.0 8
total cost= 80.0

x[93]:1,22->8,26= 26.0 4
x[93]:9,5->1,9= 26.0 4
total cost= 208.0

x[94]:1,8->5,16= 18.0 8
total cost= 144.0

x[95]:3,8->5,14= 29.0 6
x[95]:6,4->3,8= 29.0 4
total cost= 290.0

x[96]:7,29->4,4= 19.0 5
x[96]:8,18->7,24= 19.0 6
total cost= 209.0

x[97]:7,15->0,22= 14.0 7
total cost= 98.0

x[98]:0,14->7,20= 13.0 6
x[98]:0,27->7,3= 10.0 6
total cost= 138.0

x[99]:7,11->9,15= 29.0 4
x[99]:8,4->7,10= 29.0 6
x[99]:9,24->1,28= 29.0 4
total cost= 406.0

Total time= 9131476

Sovle for test12_10_50_30_100A.txt
number of service arcs=1500
number of holding arcs=300

root node bound= 8816.92
Before intensification, we have 29056 columns
After pick up:
==================Intensification===================
We add 688 columns to cplex.
Tried aggregator 2 times.
MIP Presolve eliminated 13724 rows and 11701 columns.
Aggregator did 1569 substitutions.
Reduced MIP has 16837 rows, 62230 columns, and 176798 nonzeros.
Reduced MIP has 644 binaries, 44 generals, 0 SOSs, and 0 indicators.
Presolve time = 0.16 sec. (94.50 ticks)
Probing fixed 0 vars, tightened 1 bounds.
Probing time = 0.12 sec. (4.84 ticks)
Tried aggregator 1 time.
MIP Presolve eliminated 0 rows and 1 columns.
Reduced MIP has 16837 rows, 62229 columns, and 176794 nonzeros.
Reduced MIP has 644 binaries, 44 generals, 0 SOSs, and 0 indicators.
Presolve time = 0.14 sec. (67.26 ticks)
Probing time = 0.18 sec. (4.79 ticks)
Clique table members: 164.
MIP emphasis: balance optimality and feasibility.
MIP search method: dynamic search.
Parallel mode: deterministic, using up to 4 threads.
Root relaxation solution time = 8.11 sec. (3842.36 ticks)

        Nodes                                         Cuts/
   Node  Left     Objective  IInf  Best Integer    Best Bound    ItCnt     Gap

*     0+    0                        24978.0000    -8032.0000           132.16%
*     0+    0                        24526.0000    -8032.0000           132.75%
*     0+    0                        21464.0000    -8032.0000           137.42%
*     0+    0                        20725.0000    -8032.0000           138.76%
*     0+    0                        20491.0000    -8032.0000           139.20%
*     0+    0                        20267.0000    -8032.0000           139.63%
*     0+    0                        20091.0000    -8032.0000           139.98%
*     0+    0                        19752.0000    -8032.0000           140.66%
      0     0     8817.1883    45    19752.0000     8817.1883    15800   55.36%
*     0+    0                        12974.0000     8817.1883            32.04%
      0     0     8839.1917    54    12974.0000    Cuts: 1154    26943   31.87%
      0     0     8880.5714    70    12974.0000    Cuts: 1269    39658   31.55%
      0     0     8948.9021    74    12974.0000    Cuts: 1637    51023   31.02%
*     0+    0                        12819.0000     8948.9021            30.19%
*     0+    0                        12745.0000     8948.9021            29.78%
      0     0     9047.8445    78    12745.0000    Cuts: 1720    69807   29.01%
      0     0     9185.6842    93    12745.0000    Cuts: 1640    91231   27.93%
      0     0     9337.7009   107    12745.0000    Cuts: 1916   111711   26.73%
      0     0     9464.8907   108    12745.0000    Cuts: 2061   136045   25.74%
      0     0     9586.4810   126    12745.0000    Cuts: 1694   160881   24.78%
      0     0     9681.8061   125    12745.0000    Cuts: 2061   180221   24.03%
      0     0     9740.0601   104    12745.0000    Cuts: 1570   197252   23.58%
      0     0     9782.3000   110    12745.0000    Cuts: 1532   211160   23.25%
*     0+    0                        12257.0000     9782.3000            20.19%
      0     0     9830.0378   118    12257.0000    Cuts: 1574   226407   19.80%
*     0+    0                        11083.0000     9830.0378            11.31%
      0     0     9854.8460   111    11083.0000    Cuts: 1505   239223   11.08%
      0     0     9880.9077   115    11083.0000    Cuts: 1603   252589   10.85%
      0     0     9897.3631   101    11083.0000    Cuts: 1338   264911   10.70%
      0     0     9910.1142   118    11083.0000    Cuts: 1139   274324   10.58%
      0     0     9921.5539   103    11083.0000    Cuts: 1233   281589   10.48%
      0     0     9927.1050    99    11083.0000    Cuts: 1103   286902   10.43%
      0     0     9932.0695    83    11083.0000     Cuts: 902   292109   10.38%
      0     0     9934.3396   101    11083.0000     Cuts: 738   296132   10.36%
      0     0     9940.5249   104    11083.0000     Cuts: 934   302841   10.31%
      0     0     9944.1063   116    11083.0000     Cuts: 938   308341   10.28%
      0     0     9945.7557   103    11083.0000     Cuts: 971   311576   10.26%
      0     0     9949.1179   111    11083.0000     Cuts: 883   316795   10.23%
      0     0     9951.0661   109    11083.0000     Cuts: 812   320549   10.21%
Heuristic still looking.
Heuristic still looking.
      0     2     9951.0661   109    11083.0000     9951.0661   320549   10.21%
Elapsed time = 1314.58 sec. (670251.98 ticks, tree = 0.00 MB, solutions = 13)
      1     3    10247.5187    86    11083.0000     9951.0661   338482   10.21%
      2     4     9952.6491   107    11083.0000     9951.0661   341929   10.21%
      3     5     9952.7235   105    11083.0000     9952.6494   343103   10.20%
      4     6    10247.5760    90    11083.0000     9952.6494   345576   10.20%
      5     7    10502.7347    82    11083.0000     9952.6494   360165   10.20%
      7     9    10512.3291    90    11083.0000     9952.6494   374280   10.20%
      8    10    10538.2431    78    11083.0000     9952.6494   384979   10.20%
      9    11     9956.9587    98    11083.0000     9952.7235   393733   10.20%
     10    12    10277.7500    90    11083.0000     9952.7235   404285   10.20%
     14    16     9978.6417    89    11083.0000     9952.7235   435355   10.20%
Elapsed time = 1583.40 sec. (803531.88 ticks, tree = 0.00 MB, solutions = 13)
     22    24     9961.0240    99    11083.0000     9956.9589   485759   10.16%
     23    25    10365.0211    80    11083.0000     9956.9589   497654   10.16%
     26    28    10124.5357    70    11083.0000     9956.9589   541732   10.16%
     37    39     9963.2349   101    11083.0000     9961.0249   608225   10.12%
     38    40    10465.0069    71    11083.0000     9961.0249   635233   10.12%
     40    42    10701.8239    61    11083.0000     9961.0249   698570   10.12%
     42    44    10451.7274    50    11083.0000     9961.0249   722539   10.12%
     44    46    10706.6584    60    11083.0000     9961.0249   740446   10.12%
     45    47     9973.9003   104    11083.0000     9961.0249   749048   10.12%
     48    50    10877.9929    30    11083.0000     9961.0249   775608   10.12%
Elapsed time = 1951.30 sec. (916649.77 ticks, tree = 0.00 MB, solutions = 13)
     49    51     9985.1937    93    11083.0000     9963.2359   801395   10.10%
     53    55     9994.5304    88    11083.0000     9963.2359   879845   10.10%
     57    59    10010.7972    96    11083.0000     9963.2359   935391   10.10%
     61    63    10027.5645    67    11083.0000     9963.2359   974842   10.10%
     74    76    10038.1150    80    11083.0000     9965.2465  1063637   10.09%
     78    80    10115.9262    61    11083.0000     9965.2465  1099208   10.09%
     82    84    10040.3988    78    11083.0000     9965.2465  1120351   10.09%
     83    85    10805.7211    12    11083.0000     9965.2465  1128926   10.09%
     86    86    10047.4612    80    11083.0000     9965.2465  1139780   10.09%
     87    87    10614.5448    27    11083.0000     9965.2465  1145507   10.09%
Elapsed time = 2476.07 sec. (1071348.78 ticks, tree = 0.00 MB, solutions = 13)
     90    90    10070.9958    80    11083.0000     9965.2465  1173043   10.09%
     94    94    10058.0106    83    11083.0000     9965.2465  1194308   10.09%
     98    98    10134.0525    66    11083.0000     9965.2465  1223995   10.09%
    133   117    10139.6878    66    11083.0000     9965.2465  1335996   10.09%
    134   118    10635.8655    30    11083.0000     9965.2465  1339166   10.09%
    135   119    10100.2240    67    11083.0000     9965.2465  1365014   10.09%
    139   123    10004.3725    83    11083.0000     9965.2465  1392330   10.09%
    143   127    10033.0102    76    11083.0000     9965.2465  1415662   10.09%
    147   131    10015.6965    93    11083.0000     9965.2465  1435929   10.09%
    151   135    10094.8942    60    11083.0000     9965.2465  1473541   10.09%
Elapsed time = 3080.45 sec. (1275691.58 ticks, tree = 5.30 MB, solutions = 13)
    181   165    10276.4770    34    11083.0000     9965.2465  1591266   10.09%
    185   169    10576.8349    23    11083.0000     9965.2465  1630509   10.09%
    189   173    10281.0340    37    11083.0000     9965.2465  1659077   10.09%
    191   175    10147.2246    47    11083.0000     9965.2465  1673702   10.09%
*   195+  177                        11043.0000     9965.2465             9.76%
    195   179    10155.4784    51    11043.0000     9965.2465  1698285    9.76%
    199   183    10173.7867    50    11043.0000     9965.2465  1712652    9.76%
    203   187    10157.4284    54    11043.0000     9965.2465  1720457    9.76%
    207   191    10417.8151    53    11043.0000     9965.2465  1737822    9.76%
    211   195    10164.8417    53    11043.0000     9965.2465  1757409    9.76%
    215   199    10210.9532    45    11043.0000     9965.2465  1776543    9.76%
Elapsed time = 3528.09 sec. (1402060.94 ticks, tree = 14.42 MB, solutions = 13)
    258   229    10382.2153    25    11043.0000     9965.2465  1904011    9.76%
    260   231    10178.3136    60    11043.0000     9965.2465  1911686    9.76%
    264   235    10182.9292    45    11043.0000     9965.2465  1928100    9.76%
    268   239    10197.2234    59    11043.0000     9965.2465  1940703    9.76%
    272   243    10237.3414    45    11043.0000     9965.2465  1953297    9.76%
    273   244    10259.8249    63    11043.0000     9965.2465  1956585    9.76%
    276   247    10237.3823    40    11043.0000     9965.2465  1962701    9.76%
    280   251    10244.3425    48    11043.0000     9965.2465  1982942    9.76%
    284   255    10283.6719    33    11043.0000     9965.2465  1992356    9.76%
    288   257    10285.1633    35    11043.0000     9965.2465  1996033    9.76%
Elapsed time = 3869.02 sec. (1495934.76 ticks, tree = 27.15 MB, solutions = 14)
*   290+  257                        11041.0000     9965.2465             9.74%
    292   261    10410.3154    27    11041.0000     9965.2465  2004547    9.74%
    296   265    10303.9519    42    11041.0000     9965.2465  2021539    9.74%
    300   269    10563.2249    29    11041.0000     9965.2465  2036438    9.74%
    304   273    10304.3660    45    11041.0000     9965.2465  2041421    9.74%
    308   277    10708.7724    36    11041.0000     9965.2465  2056403    9.74%
    382   325    10304.9730    45    11041.0000     9965.2465  2190644    9.74%
    383   326    10370.8227    52    11041.0000     9965.2465  2192842    9.74%
    386   329    10461.7130    36    11041.0000     9965.2465  2200941    9.74%
    390   333    10305.2563    35    11041.0000     9965.2465  2213224    9.74%
    391   334    10678.6080    53    11041.0000     9965.2465  2231546    9.74%
Elapsed time = 4088.04 sec. (1561571.03 ticks, tree = 48.79 MB, solutions = 15)
    398   339    10647.1026    27    11041.0000     9965.2465  2263265    9.74%
    402   341    10306.1826    41    11041.0000     9965.2465  2264908    9.74%
    406   345    10308.0770    47    11041.0000     9965.2465  2284189    9.74%
    410   349    10525.4077    19    11041.0000     9965.2465  2294800    9.74%
    418   355    10644.9778    31    11041.0000     9965.2465  2318357    9.74%
    426   361    10704.7135    36    11041.0000     9965.2465  2346727    9.74%
    461   392    10413.0918    40    11041.0000     9965.2465  2427176    9.74%
    479   406    10771.5696    13    11041.0000     9965.2465  2472689    9.74%
    480   407    10466.0584    17    11041.0000     9965.2465  2473336    9.74%
    481   408    10878.5233    20    11041.0000     9965.2465  2474269    9.74%
Elapsed time = 4489.18 sec. (1681635.39 ticks, tree = 62.36 MB, solutions = 15)
    489   414    10878.9157    18    11041.0000     9965.2465  2489086    9.74%
    495   420    10444.3793    37    11041.0000     9965.2465  2504920    9.74%
    499   424    10730.4362    25    11041.0000     9965.2465  2515417    9.74%
    507   432    10781.5531    23    11041.0000     9965.2465  2530983    9.74%
    515   438    10447.4259    37    11041.0000     9965.2465  2535667    9.74%
    519   442    10453.7870    42    11041.0000     9965.2465  2540684    9.74%
    523   444    10800.8574    19    11041.0000     9965.2465  2544745    9.74%
    526   447    10626.9644    33    11041.0000     9965.2465  2553283    9.74%
    531   452    10881.3302    33    11041.0000     9965.2465  2563739    9.74%
    535   454    10454.5400    40    11041.0000     9965.2465  2566970    9.74%
Elapsed time = 4701.92 sec. (1739682.85 ticks, tree = 62.36 MB, solutions = 15)
    538   457    10669.0542    29    11041.0000     9965.2465  2580400    9.74%
    539   458    10469.0941    42    11041.0000     9965.2465  2583620    9.74%
    543   462    10521.4393    30    11041.0000     9965.2465  2589022    9.74%
    546   465    10458.8552    43    11041.0000     9965.2465  2603134    9.74%
    551   468    10670.4248    19    11041.0000     9965.2465  2612947    9.74%
    559   472    10965.7601    26    11041.0000     9965.2465  2624157    9.74%
    562   475    10642.4962    31    11041.0000     9965.2465  2635014    9.74%
    572   483    10593.8784    23    11041.0000     9965.2465  2646046    9.74%
    649   518    10320.1247    38    11041.0000     9965.2465  2711061    9.74%
    657   524    10682.6905    38    11041.0000     9965.2465  2722499    9.74%
Elapsed time = 4866.68 sec. (1787973.55 ticks, tree = 88.12 MB, solutions = 15)
    673   538    10692.6662    34    11041.0000     9965.2465  2745577    9.74%
    677   540    10320.7578    38    11041.0000     9965.2465  2746141    9.74%
    681   544    10679.8331    22    11041.0000     9965.2465  2754472    9.74%
    689   550    10615.9026    36    11041.0000     9965.2465  2774186    9.74%
    701   562    10335.3717    39    11041.0000     9965.2465  2789041    9.74%
    705   564    10686.7215    31    11041.0000     9965.2465  2794742    9.74%
    717   574    10498.1980    40    11041.0000     9965.2465  2813215    9.74%
    729   584    10791.2832    39    11041.0000     9965.2465  2831033    9.74%
    741   594    10625.3567    27    11041.0000     9965.2465  2845176    9.74%
*   790+  617                        10953.0000     9965.2465             9.02%
*   790+  605                        10751.0000     9965.2465             7.31%
*   888+  633                        10710.0000     9965.2465             6.95%
*   888+  633                        10660.0000     9965.2465             6.52%
    890   637    10585.7388    82    10660.0000     9965.2465  2975349    6.52%
Elapsed time = 5223.70 sec. (1898212.43 ticks, tree = 88.12 MB, solutions = 15)
    896   351    10582.6677    80    10660.0000     9976.9357  3006280    6.41%
    900   355    10283.6641    86    10660.0000     9976.9357  3011686    6.41%
    904   353    10554.1057    78    10660.0000     9976.9357  3033659    6.41%
    912   361    10286.3704    88    10660.0000     9976.9357  3040217    6.41%
    916   361    10582.2278    67    10660.0000     9976.9357  3055609    6.41%
   1121   457    10351.0036    47    10660.0000     9976.9357  3238702    6.41%
   1123   459    10007.1161    75    10660.0000     9976.9357  3242860    6.41%
   1127   459    10251.6165    58    10660.0000     9976.9357  3265028    6.41%
   1135   467    10452.6749    66    10660.0000     9976.9357  3286041    6.41%
   1143   475    10381.5806    81    10660.0000     9976.9357  3303660    6.41%
Elapsed time = 5945.95 sec. (2120547.77 ticks, tree = 69.91 MB, solutions = 22)
   1254   552    10256.7869    66    10660.0000     9976.9357  3422290    6.41%
   1262   560    10418.5928    76    10660.0000     9976.9357  3439147    6.41%
   1282   576    10017.3953    70    10660.0000     9976.9357  3461127    6.41%
   1286   580    10189.9256    54    10660.0000     9976.9357  3477895    6.41%
   1294   584    10186.4851    64    10660.0000     9976.9357  3499566    6.41%
   1310   594    10037.6358    70    10660.0000     9976.9357  3514702    6.41%
   1314   598    10103.7012    55    10660.0000     9976.9357  3528331    6.41%
   1511   738    10316.9119    79    10660.0000     9978.4416  3727559    6.39%
   1523   750    10038.4272    68    10660.0000     9978.4416  3741268    6.39%
   1527   754    10346.8859    68    10660.0000     9978.4416  3759922    6.39%
Elapsed time = 6563.71 sec. (2297998.86 ticks, tree = 133.88 MB, solutions = 22)
   1538   763    10282.0986    79    10660.0000     9978.4416  3785651    6.39%
   1558   781    10284.0707    68    10660.0000     9978.4416  3816684    6.39%
   1559   782    10511.8883    57    10660.0000     9978.4416  3832158    6.39%
   1563   784    10042.9005    61    10660.0000     9978.4416  3833881    6.39%
   1571   790    10529.2160    66    10660.0000     9978.4416  3859466    6.39%
   1724   893    10241.4403    57    10660.0000     9978.4416  3960045    6.39%

Implied bound cuts applied:  626
Flow cuts applied:  3239
Mixed integer rounding cuts applied:  702
Flow path cuts applied:  52

Root node processing (before b&c):
  Real time             = 1314.51 sec. (670230.85 ticks)
Parallel b&c, 4 threads:
  Real time             = 5885.55 sec. (1829680.71 ticks)
  Sync time (average)   =  255.94 sec.
  Wait time (average)   =  256.05 sec.
                          ------------
Total (root+branch&cut) = 7200.06 sec. (2499911.56 ticks)
We use intensification finding a better solution: 10660.0
================ Solution ================
BAP terminated with objective : 10660
Total Number of iterations: 82
Total Number of processed nodes: 4
Total Time spent on master problems: 2454687 Total time spent on pricing problems: 17927
Best bound : 8834.920000000006
[1, 4, 48, 55, 83, 88, 101, 173, 195, 215, 294, 329, 376, 405, 429, 439, 487, 522, 586, 594, 602, 656, 676, 720, 743, 777, 800, 814, 838, 861, 878, 899, 939, 953, 1023, 1078, 1113, 1154, 1161, 1169, 1175, 1181, 1190, 1212, 1269, 1292, 1304, 1313, 1339, 1417, 1429, 1448, 1456, 1498]
The number of service edges used= 54

Solution is optimal: false
Columns (only non-zero columns are returned):
artificial: false edgeIndexset: [656, 800, 1, 1575, 215, 376, 1181] start node= 1 start time= 5 capacity type= 2 ifChargeSet: [1575]
(0,1)->(1,5)->(7,11)->(2,15)->charge(2,16)->(5,20)->(4,26)->(0,1):1.0
Fix cost= 300 variable cost= 126

artificial: false edgeIndexset: [1456, 1682, 294, 1190, 88, 878, 1023] start node= 7 start time= 20 capacity type= 1 ifChargeSet: [1682]
(6,2)->charge(6,3)->(5,8)->(9,16)->(7,20)->(2,24)->(0,28)->(6,2):1.0
Fix cost= 110 variable cost= 126

artificial: false edgeIndexset: [195, 1701, 1702, 487, 329, 953, 1596] start node= 6 start time= 23 capacity type= 0 ifChargeSet: [1596]
(3,6)->charge(3,7)->(1,15)->(6,21)->(6,22)->(6,23)->(2,29)->(3,6):1.0
Fix cost= 100 variable cost= 118

artificial: false edgeIndexset: [720, 1649, 1730, 405, 55, 1161, 939, 814] start node= 7 start time= 20 capacity type= 1 ifChargeSet: [1649]
(4,0)->(5,4)->(6,9)->(2,15)->(7,20)->(7,21)->(0,25)->(4,29)->charge(4,0):1.0
Fix cost= 110 variable cost= 122

artificial: false edgeIndexset: [1777, 899, 676, 1448, 1212, 173, 1678] start node= 9 start time= 7 capacity type= 1 ifChargeSet: [1678]
(9,7)->(9,8)->(7,12)->(4,16)->(1,23)->(5,28)->charge(5,29)->(9,7):1.0
Fix cost= 130 variable cost= 122

artificial: false edgeIndexset: [48, 1154, 1748, 1269, 743, 777, 602, 1642] start node= 7 start time= 14 capacity type= 1 ifChargeSet: [1642]
(3,2)->(8,8)->(8,9)->(7,14)->(0,18)->(4,22)->charge(4,23)->(5,27)->(3,2):1.0
Fix cost= 110 variable cost= 122

artificial: false edgeIndexset: [1776, 1313, 1797, 439, 1417, 1498, 522, 1292] start node= 9 start time= 7 capacity type= 1 ifChargeSet: [1797]
(8,2)->(9,6)->(9,7)->(3,12)->(2,19)->(8,23)->(9,27)->charge(9,28)->(8,2):1.0
Fix cost= 130 variable cost= 122

artificial: false edgeIndexset: [83, 1078, 1175, 1304, 1753, 1707, 1339, 1788, 429] start node= 7 start time= 5 capacity type= 1 ifChargeSet: [1753]
(7,5)->(2,9)->(8,13)->charge(8,14)->(9,18)->(9,19)->(0,23)->(6,27)->(6,28)->(7,5):1.0
Fix cost= 110 variable cost= 118

artificial: false edgeIndexset: [1169, 1538, 1539, 1540, 4, 101, 1670, 1738, 586, 861, 1503] start node= 7 start time= 29 capacity type= 1 ifChargeSet: [1503]
(0,3)->charge(0,4)->(1,8)->(1,9)->(1,10)->(1,11)->(3,16)->(5,20)->(5,21)->(7,28)->(7,29)->(0,3):1.0
Fix cost= 110 variable cost= 106

artificial: false edgeIndexset: [838, 594, 1779, 1780, 1429, 1781, 1782, 1783, 1784, 1113, 1785, 1786, 1787, 1788] start node= 9 start time= 11 capacity type= 1 ifChargeSet: []
(6,3)->(9,9)->(9,10)->(9,11)->(9,12)->(9,13)->(9,14)->(9,15)->(9,16)->(9,17)->(9,18)->(9,19)->(3,24)->(5,28)->(6,3):1.0
Fix cost= 130 variable cost= 80

fix cost+variable cost+commodity cost= 1340+1162+8157.999999999999=10660.0

vehicle dowork= 14040 commodity dowork= 8158.0
no load ratio= 0.41894586894586894

Total vehicles used= 10

vehicleCoverServiceEdge information:
{1=1, 1154=1, 899=1, 4=1, 1161=1, 777=1, 1417=1, 522=1, 1292=1, 656=1, 1169=1, 405=1, 1429=1, 1175=1, 1304=1, 1181=1, 800=1, 1313=1, 676=1, 294=1, 1190=1, 1448=1, 939=1, 173=1, 429=1, 814=1, 1456=1, 48=1, 1078=1, 55=1, 439=1, 953=1, 1339=1, 1212=1, 195=1, 838=1, 329=1, 586=1, 720=1, 594=1, 83=1, 215=1, 88=1, 1113=1, 602=1, 1498=1, 861=1, 101=1, 487=1, 743=1, 878=1, 1269=1, 376=1, 1023=1}

commodityFlowIntoTerminal information:
0 29 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 33 0 0 0 0 50 0 41 0 0 50 0 
0 0 0 0 0 84 0 0 27 0 0 0 0 0 0 13 0 0 0 0 0 0 0 50 0 0 0 0 0 0 
0 0 0 0 0 0 0 0 0 30 0 0 0 0 0 87 0 0 0 8 0 0 0 0 34 0 0 0 0 10 
0 0 18 0 0 0 10 0 0 0 0 0 30 0 0 0 18 0 0 0 0 0 0 0 37 0 0 0 0 0 
0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 28 0 0 0 0 0 6 0 0 0 42 0 0 8 
0 0 0 0 43 0 0 0 33 0 0 0 0 0 0 0 0 0 0 0 65 0 0 0 0 0 0 50 73 0 
0 0 27 28 0 0 0 0 0 49 0 0 0 0 0 0 0 0 0 0 0 20 0 0 0 0 0 23 0 0 
0 0 0 0 0 32 0 0 0 0 0 94 28 0 39 0 0 0 0 0 24 0 0 0 0 0 0 0 0 0 
0 0 18 0 0 0 0 0 43 0 0 0 0 11 0 0 0 0 0 0 0 0 0 38 0 0 0 0 0 0 
0 0 0 0 0 0 35 30 0 33 0 0 0 0 0 0 28 0 44 0 0 0 0 0 0 0 0 19 0 0 

vehicle pattern information:
[1, 0, 0, 0, 0, 0, 0, 1, 0, 0, 0, 0, 1, 0, 0, 0, 0, 0, 0, 0, 0, 1, 0, 0, 0, 0, 1, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 1, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0]
[0, 0, 1, 0, 0, 0, 0, 0, 0, 1, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 1, 0, 0, 0, 0, 1, 0, 0, 0, 0, 1, 0, 0, 0, 0, 0, 0, 0, 0, 1, 0]
[0, 0, 0, 0, 0, 0, 1, 0, 0, 0, 1, 0, 0, 0, 0, 0, 1, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 1, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0]
[0, 1, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 1, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 1, 0, 0, 1, 0, 0, 0, 1, 0, 0, 0, 0, 0, 0, 1, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0]
[0, 0, 0, 0, 0, 1, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 1, 0, 0, 0, 0, 0, 0, 1, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 1, 0, 0, 0, 0, 0, 0, 0, 1, 0]
[0, 1, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 1, 0, 0, 0, 1, 1, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 1, 0, 0, 0, 1, 0, 0, 0, 0, 0, 0, 0]
[0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 1, 0, 0, 1, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 2, 0, 0, 0, 1, 0, 1]
[0, 0, 1, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 1, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 1, 0, 0, 0, 1, 0, 0, 0, 1, 1, 0, 0, 0, 0, 0]
[1, 0, 0, 1, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 1, 0, 0, 0, 0, 0, 0, 0, 0, 1, 0, 0, 0, 0, 0, 0, 0, 0, 0, 1, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0]
[0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 1, 0, 0, 0, 0, 0, 0, 0, 1, 0, 0, 0, 0, 0, 0, 0, 0, 0, 1, 0, 0, 0, 0, 0, 0, 0, 0, 0, 1, 0, 0]
x[0]:7,12->4,16= 10.0 4
x[0]:9,8->7,12= 10.0 4
total cost= 80.0

x[1]:5,27->3,2= 12.0 5
total cost= 60.0

x[2]:6,28->7,5= 12.0 7
total cost= 84.0

x[3]:7,20->2,24= 10.0 4
x[3]:8,9->7,14= 10.0 5
total cost= 90.0

x[4]:3,16->5,20= 3.0 4
x[4]:3,24->5,28= 9.0 4
x[4]:9,7->3,12= 3.0 5
x[4]:9,19->3,24= 9.0 5
total cost= 108.0

x[5]:8,2->9,6= 7.0 4
x[5]:9,7->3,12= 7.0 5
x[5]:3,16->5,20= 7.0 4
total cost= 91.0

x[6]:0,1->1,5= 3.0 4
x[6]:4,26->0,1= 3.0 5
x[6]:4,16->1,23= 10.0 7
total cost= 97.0

x[7]:2,15->7,20= 13.0 5
total cost= 65.0

x[8]:5,4->6,9= 8.0 5
x[8]:6,9->2,15= 8.0 6
total cost= 88.0

x[9]:8,14->9,18= 7.0 4
x[9]:3,2->8,8= 7.0 6
total cost= 70.0

x[10]:4,23->5,27= 13.0 4
total cost= 52.0

x[11]:9,28->8,2= 13.0 4
total cost= 52.0

x[12]:7,12->4,16= 5.0 4
x[12]:9,8->7,12= 5.0 4
x[12]:4,16->1,23= 5.0 7
total cost= 75.0

x[13]:7,5->2,9= 6.0 4
x[13]:8,14->9,18= 6.0 4
x[13]:2,9->8,13= 6.0 4
total cost= 72.0

x[14]:1,23->5,28= 11.0 5
total cost= 55.0

x[15]:5,20->4,26= 7.0 6
total cost= 42.0

x[16]:3,2->8,8= 12.0 6
total cost= 72.0

x[17]:0,1->1,5= 12.0 4
total cost= 48.0

x[18]:4,26->0,1= 6.0 5
total cost= 30.0

x[19]:4,26->0,1= 10.0 5
x[19]:5,20->4,26= 10.0 6
total cost= 110.0

x[20]:7,11->2,15= 12.0 4
x[20]:2,19->8,23= 12.0 4
total cost= 96.0

x[21]:2,29->3,6= 10.0 7
x[21]:7,20->2,24= 10.0 4
total cost= 110.0

x[22]:0,1->1,5= 9.0 4
x[22]:7,21->0,25= 0.9999999999999503 4
x[22]:2,24->0,28= 8.00000000000005 4
x[22]:2,15->7,20= 0.9999999999999503 5
total cost= 76.99999999999974

x[23]:0,1->1,5= 6.0 4
total cost= 24.0

x[24]:0,4->1,8= 9.0 4
x[24]:4,26->0,1= 9.0 5
x[24]:5,20->4,26= 9.0 6
total cost= 135.0

x[25]:0,18->4,22= 6.0 4
x[25]:4,23->5,27= 6.0 4
x[25]:5,27->3,2= 6.0 5
total cost= 78.0

x[26]:7,20->2,24= 14.0 4
x[26]:8,9->7,14= 14.0 5
total cost= 126.0

x[27]:8,14->9,18= 11.0 4
x[27]:9,19->3,24= 11.0 5
total cost= 99.0

x[28]:6,3->5,8= 12.0 5
total cost= 60.0

x[29]:9,28->8,2= 5.0 4
total cost= 20.0

x[30]:5,8->9,16= 11.0 8
total cost= 88.0

x[31]:4,0->5,4= 12.0 4
total cost= 48.0

x[32]:3,24->5,28= 14.0 4
x[32]:5,29->9,7= 14.0 8
total cost= 168.0

x[33]:0,1->1,5= 15.0 4
x[33]:7,21->0,25= 6.0 4
x[33]:9,19->0,23= 9.0 4
x[33]:9,16->7,20= 6.0 4
total cost= 144.0

x[34]:6,28->7,5= 14.0 7
x[34]:0,23->6,27= 14.0 4
x[34]:7,5->2,9= 14.0 4
total cost= 210.0

x[35]:6,3->9,9= 13.0 6
x[35]:9,19->0,23= 13.0 4
total cost= 130.0

x[36]:8,2->9,6= 9.0 4
total cost= 36.0

x[37]:7,12->4,16= 13.0 4
x[37]:8,2->9,6= 13.0 4
x[37]:9,8->7,12= 13.0 4
x[37]:4,16->1,23= 13.0 7
total cost= 247.0

x[38]:0,4->1,8= 12.0 4
x[38]:1,11->3,16= 12.0 5
total cost= 108.0

x[39]:7,21->0,25= 12.0 4
total cost= 48.0

x[40]:0,1->1,5= 13.0 4
x[40]:1,5->7,11= 13.0 6
total cost= 130.0

x[41]:9,19->0,23= 14.0 4
total cost= 56.0

x[42]:7,11->2,15= 13.0 4
x[42]:1,5->7,11= 13.0 6
total cost= 130.0

x[43]:5,28->6,3= 13.0 5
total cost= 65.0

x[44]:3,12->2,19= 5.0 7
total cost= 35.0

x[45]:0,28->6,2= 13.0 4
x[45]:7,21->0,25= 13.0 4
total cost= 104.0

x[46]:1,5->7,11= 15.0 6
x[46]:7,14->0,18= 15.0 4
total cost= 150.0

x[47]:6,3->5,8= 10.0 5
total cost= 50.0

x[48]:1,11->3,16= 6.999999999999952 5
x[48]:3,16->5,20= 6.999999999999952 4
x[48]:5,20->4,26= 6.999999999999952 6
total cost= 104.99999999999929

x[49]:2,24->0,28= 15.0 4
total cost= 60.0

x[50]:0,28->6,2= 14.0 4
total cost= 56.0

x[51]:0,23->6,27= 9.0 4
x[51]:6,3->9,9= 9.0 6
total cost= 90.0

x[52]:3,16->5,20= 8.0 4
x[52]:5,20->4,26= 8.0 6
total cost= 80.0

x[53]:3,16->5,20= 9.0 4
total cost= 36.0

x[54]:1,5->7,11= 10.0 6
x[54]:4,16->1,23= 10.0 7
total cost= 130.0

x[55]:8,23->9,27= 5.0 4
x[55]:2,19->8,23= 5.0 4
total cost= 40.0

x[56]:6,3->9,9= 11.0 6
total cost= 66.0

x[57]:5,4->6,9= 12.0 5
total cost= 60.0

x[58]:0,1->1,5= 8.0 4
x[58]:1,5->7,11= 8.0 6
total cost= 80.0

x[59]:5,8->9,16= 9.0 8
total cost= 72.0

x[60]:4,23->5,27= 15.0 4
x[60]:5,28->6,3= 15.0 5
total cost= 135.0

x[61]:0,1->1,5= 9.0 4
x[61]:2,24->0,28= 9.0 4
x[61]:6,9->2,15= 9.0 6
total cost= 126.0

x[62]:1,5->7,11= 11.0 6
x[62]:2,19->8,23= 11.0 4
x[62]:7,11->2,15= 11.0 4
total cost= 154.0

x[63]:1,23->5,28= 10.0 5
total cost= 50.0

x[64]:9,7->3,12= 14.0 5
total cost= 70.0

x[65]:7,5->2,9= 5.0 4
x[65]:8,14->9,18= 5.0 4
x[65]:2,9->8,13= 5.0 4
total cost= 60.0

x[66]:7,11->2,15= 15.0 4
x[66]:1,5->7,11= 15.0 6
total cost= 150.0

x[67]:4,0->5,4= 5.0 4
x[67]:5,4->6,9= 5.0 5
x[67]:6,9->2,15= 5.0 6
total cost= 75.0

x[68]:1,23->5,28= 2.0 5
x[68]:1,15->6,21= 10.0 6
x[68]:5,4->6,9= 2.0 5
total cost= 80.0

x[69]:1,5->7,11= 9.0 6
total cost= 54.0

x[70]:4,0->5,4= 8.0 4
x[70]:5,8->9,16= 8.0 8
total cost= 96.0

x[71]:3,16->5,20= 15.0 4
total cost= 60.0

x[72]:2,24->0,28= 5.0 4
total cost= 20.0

x[73]:0,1->1,5= 9.0 4
x[73]:2,24->0,28= 9.0 4
total cost= 72.0

x[74]:6,28->7,5= 6.0 7
total cost= 42.0

x[75]:8,23->9,27= 14.0 4
x[75]:3,2->8,8= 14.0 6
total cost= 140.0

x[76]:4,16->1,23= 12.0 7
total cost= 84.0

x[77]:4,0->5,4= 5.0 4
x[77]:4,23->5,27= 10.0 4
total cost= 60.0

x[78]:7,14->0,18= 7.0 4
total cost= 28.0

x[79]:8,2->9,6= 6.0 4
x[79]:9,7->3,12= 6.0 5
total cost= 54.0

x[80]:5,4->6,9= 8.0 5
total cost= 40.0

x[81]:1,15->6,21= 10.0 6
x[81]:6,23->2,29= 10.0 6
total cost= 120.0

x[82]:8,9->7,14= 5.0 5
x[82]:3,2->8,8= 5.0 6
total cost= 55.0

x[83]:5,4->6,9= 14.0 5
x[83]:6,9->2,15= 14.0 6
total cost= 154.0

x[84]:4,0->5,4= 13.0 4
total cost= 52.0

x[85]:2,24->0,28= 3.999999999999952 4
x[85]:3,12->2,19= 3.999999999999952 7
x[85]:3,16->5,20= 1.000000000000048 4
x[85]:4,26->0,1= 1.000000000000048 5
x[85]:5,20->4,26= 1.000000000000048 6
total cost= 59.0000000000002

x[86]:3,7->1,15= 13.0 8
total cost= 104.0

x[87]:3,24->5,28= 8.0 4
x[87]:9,19->3,24= 8.0 5
total cost= 72.0

x[88]:3,24->5,28= 10.0 4
x[88]:5,29->9,7= 10.0 8
total cost= 120.0

x[89]:0,25->4,29= 8.0 4
x[89]:9,19->0,23= 8.0 4
total cost= 64.0

x[90]:8,14->9,18= 9.0 4
x[90]:9,19->3,24= 9.0 5
x[90]:3,24->5,28= 9.0 4
total cost= 117.0

x[91]:0,4->1,8= 6.0 4
x[91]:8,14->9,18= 6.0 4
x[91]:9,19->0,23= 6.0 4
total cost= 72.0

x[92]:6,3->5,8= 11.0 5
total cost= 55.0

x[93]:2,16->5,20= 15.0 4
total cost= 60.0

x[94]:7,14->0,18= 11.0 4
total cost= 44.0

x[95]:7,5->2,9= 5.0 4
x[95]:9,16->7,20= 5.0 4
total cost= 40.0

x[96]:7,21->0,25= 10.0 4
x[96]:8,9->7,14= 10.0 5
total cost= 90.0

x[97]:4,23->5,27= 6.0 4
x[97]:5,29->9,7= 6.0 8
total cost= 72.0

x[98]:2,19->8,23= 10.0 4
total cost= 40.0

x[99]:3,2->8,8= 5.0 6
total cost= 30.0

Total time= 9676839

Sovle for test11_10_40_30_200B.txt
number of service arcs=1200
number of holding arcs=300

root node bound= 59029.14000000004
Before intensification, we have 22557 columns
After pick up:
==================Intensification===================
We add 200 columns to cplex.
Infeasibility row 'c9089':  0  = 23.
Presolve time = 0.04 sec. (19.32 ticks)

Root node processing (before b&c):
  Real time             =    0.06 sec. (33.79 ticks)
Parallel b&c, 4 threads:
  Real time             =    0.00 sec. (0.00 ticks)
  Sync time (average)   =    0.00 sec.
  Wait time (average)   =    0.00 sec.
                          ------------
Total (root+branch&cut) =    0.06 sec. (33.79 ticks)
ilog.cplex.CpxException: CPLEX Error  1217: No solution exists.

	at ilog.cplex.CplexI.CALL(CplexI.java:4714)
	at ilog.cplex.CplexI._getObjValue(CplexI.java:5983)
	at ilog.cplex.CplexI.getObjValue(CplexI.java:3114)
	at ilog.cplex.IloCplex.getObjValue(IloCplex.java:5309)
	at bap.BranchAndPriceA.Intensification(BranchAndPriceA.java:913)
	at bap.BranchAndPriceA.runBranchAndPrice(BranchAndPriceA.java:437)
	at SNDRCSolver.<init>(SNDRCSolver.java:124)
	at SNDRCSolver.main(SNDRCSolver.java:502)
Before intensification, we have 6870 columns
After pick up:
==================Intensification===================
We add 200 columns to cplex.
Infeasible column 'x151,181,182'.
Presolve time = 0.04 sec. (19.62 ticks)

Root node processing (before b&c):
  Real time             =    0.06 sec. (34.08 ticks)
Parallel b&c, 4 threads:
  Real time             =    0.00 sec. (0.00 ticks)
  Sync time (average)   =    0.00 sec.
  Wait time (average)   =    0.00 sec.
                          ------------
Total (root+branch&cut) =    0.06 sec. (34.08 ticks)
ilog.cplex.CpxException: CPLEX Error  1217: No solution exists.

	at ilog.cplex.CplexI.CALL(CplexI.java:4714)
	at ilog.cplex.CplexI._getObjValue(CplexI.java:5983)
	at ilog.cplex.CplexI.getObjValue(CplexI.java:3114)
	at ilog.cplex.IloCplex.getObjValue(IloCplex.java:5309)
	at bap.BranchAndPriceA.Intensification(BranchAndPriceA.java:913)
	at bap.BranchAndPriceA.runBranchAndPrice(BranchAndPriceA.java:437)
	at SNDRCSolver.<init>(SNDRCSolver.java:124)
	at SNDRCSolver.main(SNDRCSolver.java:502)
Before intensification, we have 7519 columns
After pick up:
==================Intensification===================
We add 200 columns to cplex.
Infeasible column 'x151,85,86'.
Presolve time = 0.04 sec. (19.63 ticks)

Root node processing (before b&c):
  Real time             =    0.06 sec. (34.08 ticks)
Parallel b&c, 4 threads:
  Real time             =    0.00 sec. (0.00 ticks)
  Sync time (average)   =    0.00 sec.
  Wait time (average)   =    0.00 sec.
                          ------------
Total (root+branch&cut) =    0.06 sec. (34.08 ticks)
ilog.cplex.CpxException: CPLEX Error  1217: No solution exists.

	at ilog.cplex.CplexI.CALL(CplexI.java:4714)
	at ilog.cplex.CplexI._getObjValue(CplexI.java:5983)
	at ilog.cplex.CplexI.getObjValue(CplexI.java:3114)
	at ilog.cplex.IloCplex.getObjValue(IloCplex.java:5309)
	at bap.BranchAndPriceA.Intensification(BranchAndPriceA.java:913)
	at bap.BranchAndPriceA.runBranchAndPrice(BranchAndPriceA.java:437)
	at SNDRCSolver.<init>(SNDRCSolver.java:124)
	at SNDRCSolver.main(SNDRCSolver.java:502)
Before intensification, we have 5448 columns
After pick up:
==================Intensification===================
We add 200 columns to cplex.
Infeasibility row 'c9089':  0  = 23.
Presolve time = 0.04 sec. (19.35 ticks)

Root node processing (before b&c):
  Real time             =    0.06 sec. (33.79 ticks)
Parallel b&c, 4 threads:
  Real time             =    0.00 sec. (0.00 ticks)
  Sync time (average)   =    0.00 sec.
  Wait time (average)   =    0.00 sec.
                          ------------
Total (root+branch&cut) =    0.06 sec. (33.79 ticks)
ilog.cplex.CpxException: CPLEX Error  1217: No solution exists.

	at ilog.cplex.CplexI.CALL(CplexI.java:4714)
	at ilog.cplex.CplexI._getObjValue(CplexI.java:5983)
	at ilog.cplex.CplexI.getObjValue(CplexI.java:3114)
	at ilog.cplex.IloCplex.getObjValue(IloCplex.java:5309)
	at bap.BranchAndPriceA.Intensification(BranchAndPriceA.java:913)
	at bap.BranchAndPriceA.runBranchAndPrice(BranchAndPriceA.java:437)
	at SNDRCSolver.<init>(SNDRCSolver.java:124)
	at SNDRCSolver.main(SNDRCSolver.java:502)
Before intensification, we have 6960 columns
After pick up:
==================Intensification===================
We add 200 columns to cplex.
Infeasibility row 'c118270':  0  = 16.
Presolve time = 0.05 sec. (21.34 ticks)

Root node processing (before b&c):
  Real time             =    0.07 sec. (35.78 ticks)
Parallel b&c, 4 threads:
  Real time             =    0.00 sec. (0.00 ticks)
  Sync time (average)   =    0.00 sec.
  Wait time (average)   =    0.00 sec.
                          ------------
Total (root+branch&cut) =    0.07 sec. (35.78 ticks)
ilog.cplex.CpxException: CPLEX Error  1217: No solution exists.

	at ilog.cplex.CplexI.CALL(CplexI.java:4714)
	at ilog.cplex.CplexI._getObjValue(CplexI.java:5983)
	at ilog.cplex.CplexI.getObjValue(CplexI.java:3114)
	at ilog.cplex.IloCplex.getObjValue(IloCplex.java:5309)
	at bap.BranchAndPriceA.Intensification(BranchAndPriceA.java:913)
	at bap.BranchAndPriceA.runBranchAndPrice(BranchAndPriceA.java:437)
	at SNDRCSolver.<init>(SNDRCSolver.java:124)
	at SNDRCSolver.main(SNDRCSolver.java:502)
Before intensification, we have 7056 columns
After pick up:
==================Intensification===================
We add 200 columns to cplex.
Infeasibility row 'c9089':  0  = 23.
Presolve time = 0.04 sec. (19.33 ticks)

Root node processing (before b&c):
  Real time             =    0.06 sec. (33.76 ticks)
Parallel b&c, 4 threads:
  Real time             =    0.00 sec. (0.00 ticks)
  Sync time (average)   =    0.00 sec.
  Wait time (average)   =    0.00 sec.
                          ------------
Total (root+branch&cut) =    0.06 sec. (33.76 ticks)
ilog.cplex.CpxException: CPLEX Error  1217: No solution exists.

	at ilog.cplex.CplexI.CALL(CplexI.java:4714)
	at ilog.cplex.CplexI._getObjValue(CplexI.java:5983)
	at ilog.cplex.CplexI.getObjValue(CplexI.java:3114)
	at ilog.cplex.IloCplex.getObjValue(IloCplex.java:5309)
	at bap.BranchAndPriceA.Intensification(BranchAndPriceA.java:913)
	at bap.BranchAndPriceA.runBranchAndPrice(BranchAndPriceA.java:437)
	at SNDRCSolver.<init>(SNDRCSolver.java:124)
	at SNDRCSolver.main(SNDRCSolver.java:502)
Before intensification, we have 1534 columns
After pick up:
==================Intensification===================
We add 200 columns to cplex.
Infeasibility row 'c90684':  0  = 22.
Presolve time = 0.04 sec. (19.31 ticks)

Root node processing (before b&c):
  Real time             =    0.06 sec. (33.75 ticks)
Parallel b&c, 4 threads:
  Real time             =    0.00 sec. (0.00 ticks)
  Sync time (average)   =    0.00 sec.
  Wait time (average)   =    0.00 sec.
                          ------------
Total (root+branch&cut) =    0.06 sec. (33.75 ticks)
ilog.cplex.CpxException: CPLEX Error  1217: No solution exists.

	at ilog.cplex.CplexI.CALL(CplexI.java:4714)
	at ilog.cplex.CplexI._getObjValue(CplexI.java:5983)
	at ilog.cplex.CplexI.getObjValue(CplexI.java:3114)
	at ilog.cplex.IloCplex.getObjValue(IloCplex.java:5309)
	at bap.BranchAndPriceA.Intensification(BranchAndPriceA.java:913)
	at bap.BranchAndPriceA.runBranchAndPrice(BranchAndPriceA.java:437)
	at SNDRCSolver.<init>(SNDRCSolver.java:124)
	at SNDRCSolver.main(SNDRCSolver.java:502)
Before intensification, we have 8186 columns
After pick up:
==================Intensification===================
We add 200 columns to cplex.
Infeasibility row 'c9089':  0  = 23.
Presolve time = 0.04 sec. (19.27 ticks)

Root node processing (before b&c):
  Real time             =    0.06 sec. (33.72 ticks)
Parallel b&c, 4 threads:
  Real time             =    0.00 sec. (0.00 ticks)
  Sync time (average)   =    0.00 sec.
  Wait time (average)   =    0.00 sec.
                          ------------
Total (root+branch&cut) =    0.06 sec. (33.72 ticks)
ilog.cplex.CpxException: CPLEX Error  1217: No solution exists.

	at ilog.cplex.CplexI.CALL(CplexI.java:4714)
	at ilog.cplex.CplexI._getObjValue(CplexI.java:5983)
	at ilog.cplex.CplexI.getObjValue(CplexI.java:3114)
	at ilog.cplex.IloCplex.getObjValue(IloCplex.java:5309)
	at bap.BranchAndPriceA.Intensification(BranchAndPriceA.java:913)
	at bap.BranchAndPriceA.runBranchAndPrice(BranchAndPriceA.java:437)
	at SNDRCSolver.<init>(SNDRCSolver.java:124)
	at SNDRCSolver.main(SNDRCSolver.java:502)
Before intensification, we have 7816 columns
After pick up:
==================Intensification===================
We add 200 columns to cplex.
Infeasibility row 'c90684':  0  = 22.
Presolve time = 0.04 sec. (19.33 ticks)

Root node processing (before b&c):
  Real time             =    0.06 sec. (33.78 ticks)
Parallel b&c, 4 threads:
  Real time             =    0.00 sec. (0.00 ticks)
  Sync time (average)   =    0.00 sec.
  Wait time (average)   =    0.00 sec.
                          ------------
Total (root+branch&cut) =    0.06 sec. (33.78 ticks)
ilog.cplex.CpxException: CPLEX Error  1217: No solution exists.

	at ilog.cplex.CplexI.CALL(CplexI.java:4714)
	at ilog.cplex.CplexI._getObjValue(CplexI.java:5983)
	at ilog.cplex.CplexI.getObjValue(CplexI.java:3114)
	at ilog.cplex.IloCplex.getObjValue(IloCplex.java:5309)
	at bap.BranchAndPriceA.Intensification(BranchAndPriceA.java:913)
	at bap.BranchAndPriceA.runBranchAndPrice(BranchAndPriceA.java:437)
	at SNDRCSolver.<init>(SNDRCSolver.java:124)
	at SNDRCSolver.main(SNDRCSolver.java:502)
Before intensification, we have 7166 columns
After pick up:
==================Intensification===================
We add 200 columns to cplex.
Infeasibility row 'c9089':  0  = 23.
Presolve time = 0.04 sec. (19.37 ticks)

Root node processing (before b&c):
  Real time             =    0.06 sec. (33.82 ticks)
Parallel b&c, 4 threads:
  Real time             =    0.00 sec. (0.00 ticks)
  Sync time (average)   =    0.00 sec.
  Wait time (average)   =    0.00 sec.
                          ------------
Total (root+branch&cut) =    0.06 sec. (33.82 ticks)
ilog.cplex.CpxException: CPLEX Error  1217: No solution exists.

	at ilog.cplex.CplexI.CALL(CplexI.java:4714)
	at ilog.cplex.CplexI._getObjValue(CplexI.java:5983)
	at ilog.cplex.CplexI.getObjValue(CplexI.java:3114)
	at ilog.cplex.IloCplex.getObjValue(IloCplex.java:5309)
	at bap.BranchAndPriceA.Intensification(BranchAndPriceA.java:913)
	at bap.BranchAndPriceA.runBranchAndPrice(BranchAndPriceA.java:437)
	at SNDRCSolver.<init>(SNDRCSolver.java:124)
	at SNDRCSolver.main(SNDRCSolver.java:502)
Before intensification, we have 7171 columns
After pick up:
==================Intensification===================
We add 200 columns to cplex.
Infeasibility row 'c90684':  0  = 22.
Presolve time = 0.04 sec. (19.39 ticks)

Root node processing (before b&c):
  Real time             =    0.06 sec. (33.83 ticks)
Parallel b&c, 4 threads:
  Real time             =    0.00 sec. (0.00 ticks)
  Sync time (average)   =    0.00 sec.
  Wait time (average)   =    0.00 sec.
                          ------------
Total (root+branch&cut) =    0.06 sec. (33.83 ticks)
ilog.cplex.CpxException: CPLEX Error  1217: No solution exists.

	at ilog.cplex.CplexI.CALL(CplexI.java:4714)
	at ilog.cplex.CplexI._getObjValue(CplexI.java:5983)
	at ilog.cplex.CplexI.getObjValue(CplexI.java:3114)
	at ilog.cplex.IloCplex.getObjValue(IloCplex.java:5309)
	at bap.BranchAndPriceA.Intensification(BranchAndPriceA.java:913)
	at bap.BranchAndPriceA.runBranchAndPrice(BranchAndPriceA.java:437)
	at SNDRCSolver.<init>(SNDRCSolver.java:124)
	at SNDRCSolver.main(SNDRCSolver.java:502)
Before intensification, we have 7093 columns
After pick up:
==================Intensification===================
We add 200 columns to cplex.
Infeasibility row 'c90684':  0  = 22.
Presolve time = 0.04 sec. (19.35 ticks)

Root node processing (before b&c):
  Real time             =    0.06 sec. (33.80 ticks)
Parallel b&c, 4 threads:
  Real time             =    0.00 sec. (0.00 ticks)
  Sync time (average)   =    0.00 sec.
  Wait time (average)   =    0.00 sec.
                          ------------
Total (root+branch&cut) =    0.06 sec. (33.80 ticks)
ilog.cplex.CpxException: CPLEX Error  1217: No solution exists.

	at ilog.cplex.CplexI.CALL(CplexI.java:4714)
	at ilog.cplex.CplexI._getObjValue(CplexI.java:5983)
	at ilog.cplex.CplexI.getObjValue(CplexI.java:3114)
	at ilog.cplex.IloCplex.getObjValue(IloCplex.java:5309)
	at bap.BranchAndPriceA.Intensification(BranchAndPriceA.java:913)
	at bap.BranchAndPriceA.runBranchAndPrice(BranchAndPriceA.java:437)
	at SNDRCSolver.<init>(SNDRCSolver.java:124)
	at SNDRCSolver.main(SNDRCSolver.java:502)
Before intensification, we have 6889 columns
After pick up:
==================Intensification===================
We add 200 columns to cplex.
Infeasibility row 'c9089':  0  = 23.
Presolve time = 0.04 sec. (19.35 ticks)

Root node processing (before b&c):
  Real time             =    0.06 sec. (33.80 ticks)
Parallel b&c, 4 threads:
  Real time             =    0.00 sec. (0.00 ticks)
  Sync time (average)   =    0.00 sec.
  Wait time (average)   =    0.00 sec.
                          ------------
Total (root+branch&cut) =    0.06 sec. (33.80 ticks)
ilog.cplex.CpxException: CPLEX Error  1217: No solution exists.

	at ilog.cplex.CplexI.CALL(CplexI.java:4714)
	at ilog.cplex.CplexI._getObjValue(CplexI.java:5983)
	at ilog.cplex.CplexI.getObjValue(CplexI.java:3114)
	at ilog.cplex.IloCplex.getObjValue(IloCplex.java:5309)
	at bap.BranchAndPriceA.Intensification(BranchAndPriceA.java:913)
	at bap.BranchAndPriceA.runBranchAndPrice(BranchAndPriceA.java:437)
	at SNDRCSolver.<init>(SNDRCSolver.java:124)
	at SNDRCSolver.main(SNDRCSolver.java:502)
Before intensification, we have 6615 columns
After pick up:
==================Intensification===================
We add 200 columns to cplex.
Infeasibility row 'c90684':  0  = 22.
Presolve time = 0.04 sec. (19.29 ticks)

Root node processing (before b&c):
  Real time             =    0.06 sec. (33.73 ticks)
Parallel b&c, 4 threads:
  Real time             =    0.00 sec. (0.00 ticks)
  Sync time (average)   =    0.00 sec.
  Wait time (average)   =    0.00 sec.
                          ------------
Total (root+branch&cut) =    0.06 sec. (33.73 ticks)
ilog.cplex.CpxException: CPLEX Error  1217: No solution exists.

	at ilog.cplex.CplexI.CALL(CplexI.java:4714)
	at ilog.cplex.CplexI._getObjValue(CplexI.java:5983)
	at ilog.cplex.CplexI.getObjValue(CplexI.java:3114)
	at ilog.cplex.IloCplex.getObjValue(IloCplex.java:5309)
	at bap.BranchAndPriceA.Intensification(BranchAndPriceA.java:913)
	at bap.BranchAndPriceA.runBranchAndPrice(BranchAndPriceA.java:437)
	at SNDRCSolver.<init>(SNDRCSolver.java:124)
	at SNDRCSolver.main(SNDRCSolver.java:502)
Before intensification, we have 6924 columns
After pick up:
==================Intensification===================
We add 200 columns to cplex.
Infeasibility row 'c9089':  0  = 23.
Presolve time = 0.04 sec. (19.29 ticks)

Root node processing (before b&c):
  Real time             =    0.06 sec. (33.73 ticks)
Parallel b&c, 4 threads:
  Real time             =    0.00 sec. (0.00 ticks)
  Sync time (average)   =    0.00 sec.
  Wait time (average)   =    0.00 sec.
                          ------------
Total (root+branch&cut) =    0.06 sec. (33.73 ticks)
ilog.cplex.CpxException: CPLEX Error  1217: No solution exists.

	at ilog.cplex.CplexI.CALL(CplexI.java:4714)
	at ilog.cplex.CplexI._getObjValue(CplexI.java:5983)
	at ilog.cplex.CplexI.getObjValue(CplexI.java:3114)
	at ilog.cplex.IloCplex.getObjValue(IloCplex.java:5309)
	at bap.BranchAndPriceA.Intensification(BranchAndPriceA.java:913)
	at bap.BranchAndPriceA.runBranchAndPrice(BranchAndPriceA.java:437)
	at SNDRCSolver.<init>(SNDRCSolver.java:124)
	at SNDRCSolver.main(SNDRCSolver.java:502)
Before intensification, we have 6760 columns
After pick up:
==================Intensification===================
We add 200 columns to cplex.
Infeasibility row 'c9089':  0  = 23.
Presolve time = 0.04 sec. (19.29 ticks)

Root node processing (before b&c):
  Real time             =    0.06 sec. (33.76 ticks)
Parallel b&c, 4 threads:
  Real time             =    0.00 sec. (0.00 ticks)
  Sync time (average)   =    0.00 sec.
  Wait time (average)   =    0.00 sec.
                          ------------
Total (root+branch&cut) =    0.06 sec. (33.76 ticks)
ilog.cplex.CpxException: CPLEX Error  1217: No solution exists.

	at ilog.cplex.CplexI.CALL(CplexI.java:4714)
	at ilog.cplex.CplexI._getObjValue(CplexI.java:5983)
	at ilog.cplex.CplexI.getObjValue(CplexI.java:3114)
	at ilog.cplex.IloCplex.getObjValue(IloCplex.java:5309)
	at bap.BranchAndPriceA.Intensification(BranchAndPriceA.java:913)
	at bap.BranchAndPriceA.runBranchAndPrice(BranchAndPriceA.java:437)
	at SNDRCSolver.<init>(SNDRCSolver.java:124)
	at SNDRCSolver.main(SNDRCSolver.java:502)
Before intensification, we have 6839 columns
After pick up:
==================Intensification===================
We add 200 columns to cplex.
Infeasibility row 'c9089':  0  = 23.
Presolve time = 0.04 sec. (19.36 ticks)

Root node processing (before b&c):
  Real time             =    0.06 sec. (33.82 ticks)
Parallel b&c, 4 threads:
  Real time             =    0.00 sec. (0.00 ticks)
  Sync time (average)   =    0.00 sec.
  Wait time (average)   =    0.00 sec.
                          ------------
Total (root+branch&cut) =    0.06 sec. (33.82 ticks)
ilog.cplex.CpxException: CPLEX Error  1217: No solution exists.

	at ilog.cplex.CplexI.CALL(CplexI.java:4714)
	at ilog.cplex.CplexI._getObjValue(CplexI.java:5983)
	at ilog.cplex.CplexI.getObjValue(CplexI.java:3114)
	at ilog.cplex.IloCplex.getObjValue(IloCplex.java:5309)
	at bap.BranchAndPriceA.Intensification(BranchAndPriceA.java:913)
	at bap.BranchAndPriceA.runBranchAndPrice(BranchAndPriceA.java:437)
	at SNDRCSolver.<init>(SNDRCSolver.java:124)
	at SNDRCSolver.main(SNDRCSolver.java:502)
Before intensification, we have 6560 columns
After pick up:
==================Intensification===================
We add 200 columns to cplex.
Infeasibility row 'c9089':  0  = 23.
Presolve time = 0.04 sec. (19.31 ticks)

Root node processing (before b&c):
  Real time             =    0.06 sec. (33.76 ticks)
Parallel b&c, 4 threads:
  Real time             =    0.00 sec. (0.00 ticks)
  Sync time (average)   =    0.00 sec.
  Wait time (average)   =    0.00 sec.
                          ------------
Total (root+branch&cut) =    0.06 sec. (33.76 ticks)
ilog.cplex.CpxException: CPLEX Error  1217: No solution exists.

	at ilog.cplex.CplexI.CALL(CplexI.java:4714)
	at ilog.cplex.CplexI._getObjValue(CplexI.java:5983)
	at ilog.cplex.CplexI.getObjValue(CplexI.java:3114)
	at ilog.cplex.IloCplex.getObjValue(IloCplex.java:5309)
	at bap.BranchAndPriceA.Intensification(BranchAndPriceA.java:913)
	at bap.BranchAndPriceA.runBranchAndPrice(BranchAndPriceA.java:437)
	at SNDRCSolver.<init>(SNDRCSolver.java:124)
	at SNDRCSolver.main(SNDRCSolver.java:502)
Before intensification, we have 7042 columns
After pick up:
==================Intensification===================
We add 200 columns to cplex.
Infeasibility row 'c9089':  0  = 23.
Presolve time = 0.04 sec. (19.29 ticks)

Root node processing (before b&c):
  Real time             =    0.06 sec. (33.74 ticks)
Parallel b&c, 4 threads:
  Real time             =    0.00 sec. (0.00 ticks)
  Sync time (average)   =    0.00 sec.
  Wait time (average)   =    0.00 sec.
                          ------------
Total (root+branch&cut) =    0.06 sec. (33.74 ticks)
ilog.cplex.CpxException: CPLEX Error  1217: No solution exists.

	at ilog.cplex.CplexI.CALL(CplexI.java:4714)
	at ilog.cplex.CplexI._getObjValue(CplexI.java:5983)
	at ilog.cplex.CplexI.getObjValue(CplexI.java:3114)
	at ilog.cplex.IloCplex.getObjValue(IloCplex.java:5309)
	at bap.BranchAndPriceA.Intensification(BranchAndPriceA.java:913)
	at bap.BranchAndPriceA.runBranchAndPrice(BranchAndPriceA.java:437)
	at SNDRCSolver.<init>(SNDRCSolver.java:124)
	at SNDRCSolver.main(SNDRCSolver.java:502)
Before intensification, we have 6033 columns
After pick up:
==================Intensification===================
We add 200 columns to cplex.
Row 'c90878' infeasible, all entries at implied bounds.
Presolve time = 0.04 sec. (19.07 ticks)

Root node processing (before b&c):
  Real time             =    0.06 sec. (33.52 ticks)
Parallel b&c, 4 threads:
  Real time             =    0.00 sec. (0.00 ticks)
  Sync time (average)   =    0.00 sec.
  Wait time (average)   =    0.00 sec.
                          ------------
Total (root+branch&cut) =    0.06 sec. (33.52 ticks)
ilog.cplex.CpxException: CPLEX Error  1217: No solution exists.

	at ilog.cplex.CplexI.CALL(CplexI.java:4714)
	at ilog.cplex.CplexI._getObjValue(CplexI.java:5983)
	at ilog.cplex.CplexI.getObjValue(CplexI.java:3114)
	at ilog.cplex.IloCplex.getObjValue(IloCplex.java:5309)
	at bap.BranchAndPriceA.Intensification(BranchAndPriceA.java:913)
	at bap.BranchAndPriceA.runBranchAndPrice(BranchAndPriceA.java:437)
	at SNDRCSolver.<init>(SNDRCSolver.java:124)
	at SNDRCSolver.main(SNDRCSolver.java:502)
Before intensification, we have 4656 columns
After pick up:
==================Intensification===================
We add 200 columns to cplex.
Infeasibility row 'c90684':  0  = 22.
Presolve time = 0.04 sec. (19.32 ticks)

Root node processing (before b&c):
  Real time             =    0.06 sec. (33.77 ticks)
Parallel b&c, 4 threads:
  Real time             =    0.00 sec. (0.00 ticks)
  Sync time (average)   =    0.00 sec.
  Wait time (average)   =    0.00 sec.
                          ------------
Total (root+branch&cut) =    0.06 sec. (33.77 ticks)
ilog.cplex.CpxException: CPLEX Error  1217: No solution exists.

	at ilog.cplex.CplexI.CALL(CplexI.java:4714)
	at ilog.cplex.CplexI._getObjValue(CplexI.java:5983)
	at ilog.cplex.CplexI.getObjValue(CplexI.java:3114)
	at ilog.cplex.IloCplex.getObjValue(IloCplex.java:5309)
	at bap.BranchAndPriceA.Intensification(BranchAndPriceA.java:913)
	at bap.BranchAndPriceA.runBranchAndPrice(BranchAndPriceA.java:437)
	at SNDRCSolver.<init>(SNDRCSolver.java:124)
	at SNDRCSolver.main(SNDRCSolver.java:502)
javax.naming.TimeLimitExceededException
	at cg.master.Master.solveMasterProblem(Master.java:517)
	at org.jorlib.frameworks.columnGeneration.master.AbstractMaster.solve(AbstractMaster.java:152)
	at org.jorlib.frameworks.columnGeneration.colgenMain.ColGen.invokeMaster(ColGen.java:271)
	at org.jorlib.frameworks.columnGeneration.colgenMain.ColGen.solve(ColGen.java:224)
	at org.jorlib.frameworks.columnGeneration.branchAndPrice.AbstractBranchAndPrice.solveBAPNode(AbstractBranchAndPrice.java:342)
	at bap.BranchAndPriceA.runBranchAndPrice(BranchAndPriceA.java:252)
	at SNDRCSolver.<init>(SNDRCSolver.java:124)
	at SNDRCSolver.main(SNDRCSolver.java:502)
================ Solution ================
BAP terminated with objective : 2147483647
Total Number of iterations: 484
Total Number of processed nodes: 25
Total Time spent on master problems: 7077955 Total time spent on pricing problems: 91161
Best bound : 59078.545826086905
[]
The number of service edges used= 0

Exception in thread "main" java.lang.NullPointerException
	at SNDRCSolver.<init>(SNDRCSolver.java:235)
	at SNDRCSolver.main(SNDRCSolver.java:502)
Sovle for test12_10_50_30_100D.txt
Colmun limit=1000
number of service arcs=1500
number of holding arcs=300

root node bound= 20336.48999999999
Before intensification, we have 40864 columns
After pick up:
==================Intensification===================
We add 1000 columns to cplex.
Tried aggregator 2 times.
MIP Presolve eliminated 15480 rows and 10037 columns.
Aggregator did 1930 substitutions.
Reduced MIP has 14720 rows, 53451 columns, and 155177 nonzeros.
Reduced MIP has 915 binaries, 85 generals, 0 SOSs, and 0 indicators.
Presolve time = 0.14 sec. (86.69 ticks)
Probing fixed 0 vars, tightened 4 bounds.
Probing time = 0.10 sec. (4.91 ticks)
Tried aggregator 1 time.
MIP Presolve eliminated 0 rows and 2 columns.
Reduced MIP has 14720 rows, 53449 columns, and 155169 nonzeros.
Reduced MIP has 915 binaries, 85 generals, 0 SOSs, and 0 indicators.
Presolve time = 0.11 sec. (59.30 ticks)
Probing time = 0.13 sec. (4.85 ticks)
Clique table members: 191.
MIP emphasis: balance optimality and feasibility.
MIP search method: dynamic search.
Parallel mode: deterministic, using up to 4 threads.
Root relaxation solution time = 9.01 sec. (3128.54 ticks)

        Nodes                                         Cuts/
   Node  Left     Objective  IInf  Best Integer    Best Bound    ItCnt     Gap

      0     0    20340.5700    51                  20340.5700    14432         
*     0+    0                        44644.0000    20340.5700            54.44%
      0     0    20436.4275    66    44644.0000     Cuts: 995    22658   54.22%
      0     0    20557.4755    62    44644.0000    Cuts: 1163    30339   53.95%
      0     0    20690.9797    72    44644.0000    Cuts: 1074    36867   53.65%
*     0+    0                        26753.0000    20690.9797            22.66%
*     0+    0                        26323.0000    20690.9797            21.40%
*     0+    0                        25525.0000    20690.9797            18.94%
*     0+    0                        25112.0000    20690.9797            17.61%
*     0+    0                        24912.0000    20690.9797            16.94%
      0     0    20762.5557    81    24912.0000    Cuts: 1110    41860   16.66%
      0     0    20876.5833    86    24912.0000    Cuts: 1312    48827   16.20%
      0     0    20978.3067    91    24912.0000    Cuts: 1403    56772   15.79%
      0     0    21034.6719    81    24912.0000    Cuts: 1134    62566   15.56%
*     0+    0                        23672.0000    21034.6719            11.14%
      0     0    21100.9195   104    23672.0000     Cuts: 929    67821   10.86%
*     0+    0                        23315.0000    21100.9195             9.50%
      0     0    21193.0206    94    23315.0000    Cuts: 1083    75235    9.10%
      0     0    21223.1841    89    23315.0000     Cuts: 943    79853    8.97%
      0     0    21246.5518    81    23315.0000    Cuts: 1002    84419    8.87%
      0     0    21260.1810    93    23315.0000     Cuts: 823    87807    8.81%
      0     0    21272.6027    84    23315.0000     Cuts: 871    90967    8.76%
      0     0    21276.4320    90    23315.0000     Cuts: 787    92513    8.74%
      0     0    21281.5737    79    23315.0000     Cuts: 639    94382    8.72%
      0     0    21286.3398    87    23315.0000     Cuts: 591    95916    8.70%
      0     0    21287.8312    72    23315.0000     Cuts: 545    96694    8.69%
      0     0    21289.5241    87    23315.0000     Cuts: 415    97876    8.69%
Heuristic still looking.
Heuristic still looking.
Heuristic still looking.
*     0+    0                        23247.0000    21289.5241             8.42%
      0     2    21289.5241    87    23247.0000    21289.5241    97876    8.42%
Elapsed time = 313.56 sec. (173794.11 ticks, tree = 0.00 MB, solutions = 9)
      1     3    21322.3645    88    23247.0000    21289.5241   101175    8.42%
      2     4    21296.3432    84    23247.0000    21289.5241   104209    8.42%
      3     5    21298.1994    81    23247.0000    21296.3439   105502    8.39%
      4     6    21337.1132    71    23247.0000    21296.3439   109103    8.39%
      6     8    21347.6257    88    23247.0000    21296.3439   112184    8.39%
      8    10    21345.7850    83    23247.0000    21296.3439   114952    8.39%
      9    11    21308.7920    78    23247.0000    21296.3439   122254    8.39%
     11    13    21354.4287    75    23247.0000    21296.3439   141287    8.39%
     12    14    21375.0430    76    23247.0000    21296.3439   151822    8.39%
     13    15    21319.6930    80    23247.0000    21296.3439   157251    8.39%
Elapsed time = 392.25 sec. (208779.15 ticks, tree = 0.00 MB, solutions = 9)
     17    19    21313.7611    83    23247.0000    21296.3439   169821    8.39%
     19    21    21376.3181    73    23247.0000    21296.3439   185873    8.39%
     22    24    21322.8055    92    23247.0000    21296.3439   211506    8.39%
     26    28    21313.7611    82    23247.0000    21296.3439   226470    8.39%
     27    29    21418.6032    51    23247.0000    21296.3439   245443    8.39%
     30    32    21318.6260    77    23247.0000    21296.3439   275147    8.39%
     33    35    21326.8885    82    23247.0000    21296.3439   298320    8.39%
     34    36    21486.4504    48    23247.0000    21296.3439   304480    8.39%
     38    40    21483.5981    55    23247.0000    21296.3439   322202    8.39%
     42    44    21502.1485    48    23247.0000    21296.3439   329506    8.39%
Elapsed time = 561.07 sec. (259794.96 ticks, tree = 0.00 MB, solutions = 9)
     53    55    21566.7351    50    23247.0000    21296.3439   355044    8.39%
     57    59    21384.1168    70    23247.0000    21296.3439   370884    8.39%
     58    60    21566.1311    57    23247.0000    21296.3439   392178    8.39%
     62    64    21518.2719    49    23247.0000    21296.3439   414043    8.39%
     65    67    21403.7058    65    23247.0000    21296.3439   444023    8.39%
     66    68    21657.5308    44    23247.0000    21296.3439   468286    8.39%
     74    76    21454.4897    62    23247.0000    21296.3439   512336    8.39%
     77    79    21645.0409    45    23247.0000    21296.3439   521761    8.39%
     81    83    21650.3451    40    23247.0000    21296.3439   536023    8.39%
     85    87    21662.4583    42    23247.0000    21296.3439   549842    8.39%
Elapsed time = 776.58 sec. (331196.70 ticks, tree = 0.00 MB, solutions = 9)
     88    90    21615.2774    51    23247.0000    21296.3439   562869    8.39%
     89    91    21927.8452    41    23247.0000    21296.3439   567841    8.39%
     90    92    21475.9007    57    23247.0000    21296.3439   577772    8.39%
     94    96    21485.3336    59    23247.0000    21296.3439   592614    8.39%
     96    98    21833.9289    41    23247.0000    21296.3439   602814    8.39%
     98   100    21615.7766    51    23247.0000    21296.3439   617825    8.39%
    105   107    21491.1146    64    23247.0000    21296.3439   640151    8.39%
    107   109    21690.1838    36    23247.0000    21296.3439   651154    8.39%
    108   110    21729.2629    45    23247.0000    21296.3439   654645    8.39%
    112   114    21949.1813    30    23247.0000    21296.3439   689713    8.39%
Elapsed time = 1031.73 sec. (408543.80 ticks, tree = 2.52 MB, solutions = 9)
    116   118    21746.1603    42    23247.0000    21296.3439   706554    8.39%
    120   122    21763.9584    46    23247.0000    21296.3439   756518    8.39%
    128   130    21684.5587    50    23247.0000    21296.3439   830528    8.39%
    130   132    21707.3162    48    23247.0000    21296.3439   861053    8.39%
    132   134    21605.4088    50    23247.0000    21296.3439   880864    8.39%
    135   137    22022.5878    38    23247.0000    21296.3439   887957    8.39%
    136   138    21846.3540    54    23247.0000    21296.3439   901303    8.39%
    140   142    21609.3212    51    23247.0000    21296.3439   921125    8.39%
    141   143    21620.3698    60    23247.0000    21296.3439   923300    8.39%
    144   146    21860.1462    58    23247.0000    21296.3439   932229    8.39%
Elapsed time = 1187.72 sec. (457755.10 ticks, tree = 3.98 MB, solutions = 9)
    148   150    21622.9636    51    23247.0000    21296.3439   940814    8.39%
    152   154    21638.6809    41    23247.0000    21296.3439   954922    8.39%
    153   155    21834.9396    37    23247.0000    21296.3439   965905    8.39%
    157   159    21651.8914    46    23247.0000    21296.3439   976813    8.39%
*   159+  159                        22363.0000    21296.3439             4.77%
    160   162    21820.3392    37    22363.0000    21296.3439   988869    4.77%
    164   166    21653.3585    42    22363.0000    21296.3439  1001483    4.77%
    168   170    21696.7991    37    22363.0000    21296.3439  1014044    4.77%
    173   175    21899.2138    36    22363.0000    21296.3439  1023210    4.77%
    177   179    21757.4184    51    22363.0000    21296.3439  1030815    4.77%
    181   183    21834.0152    36    22363.0000    21296.3439  1040815    4.77%
Elapsed time = 1317.65 sec. (495934.58 ticks, tree = 3.98 MB, solutions = 9)
    194   194    21742.3275    39    22363.0000    21296.3439  1071510    4.77%
    198   198    21801.3863    30    22363.0000    21296.3439  1078652    4.77%
    199   199    21863.4281    29    22363.0000    21296.3439  1081588    4.77%
    203   203    21879.9049    28    22363.0000    21296.3439  1086889    4.77%
    204   204    21939.1417    46    22363.0000    21296.3439  1092351    4.77%
    206   206    21960.1172    30    22363.0000    21296.3439  1098610    4.77%
    207   207    22016.7909    33    22363.0000    21296.3439  1103833    4.77%
    208   208    21808.7020    47    22363.0000    21296.3439  1104934    4.77%
    212   212    22104.6133    34    22363.0000    21296.3439  1114465    4.77%
    216   214    21812.4071    50    22363.0000    21296.3439  1121541    4.77%
Elapsed time = 1456.58 sec. (534927.31 ticks, tree = 13.28 MB, solutions = 10)
    220   218    21991.3534    43    22363.0000    21296.3439  1126344    4.77%
    228   224    21826.8298    44    22363.0000    21296.3439  1138947    4.77%
    232   228    21833.0405    44    22363.0000    21296.3439  1141705    4.77%
    236   230    21915.8206    33    22363.0000    21296.3439  1148445    4.77%
    240   234    21925.5318    32    22363.0000    21296.3439  1155862    4.77%
    248   238    22166.7477    28    22363.0000    21296.3439  1163891    4.77%
    252   240    21933.0512    33    22363.0000    21296.3439  1167252    4.77%
    256   244    21962.6687    28    22363.0000    21296.3439  1172226    4.77%
    260   246    21980.0963    35    22363.0000    21296.3439  1179292    4.77%
    264   250    22089.3536    34    22363.0000    21296.3439  1185997    4.77%
Elapsed time = 1542.14 sec. (562061.28 ticks, tree = 13.28 MB, solutions = 10)
*   269+  251                        22151.0000    21296.3439             3.86%
    606   254    21334.0087    69    22151.0000    21296.3439  1261092    3.86%
    610   258    21340.1799    77    22151.0000    21296.3439  1265488    3.86%
    614   260    21501.2274    75    22151.0000    21296.3439  1276644    3.86%
    622   262    21525.0286    70    22151.0000    21296.3439  1286632    3.86%
    634   268    21667.2617    73    22151.0000    21296.3439  1297404    3.86%
    646   276    21346.2703    76    22151.0000    21296.3439  1303205    3.86%
    650   278    21393.7393    76    22151.0000    21296.3439  1307264    3.86%
    821   333    21500.4869    74    22151.0000    21296.3439  1366663    3.86%
   1080   400    21332.6361    80    22151.0000    21296.3439  1392071    3.86%
   1084   404    21373.6678    88    22151.0000    21296.3439  1397329    3.86%
Elapsed time = 1722.04 sec. (616865.07 ticks, tree = 49.67 MB, solutions = 12)
   1088   406    21398.4710    81    22151.0000    21296.3439  1408618    3.86%
   1094   410    21413.8104    75    22151.0000    21296.3439  1425040    3.86%
   1100   416    21575.2877    75    22151.0000    21296.3439  1432218    3.86%
   1130   440    21645.4925    61    22151.0000    21296.3439  1475676    3.86%
   1134   444    21497.8237    66    22151.0000    21296.3439  1484187    3.86%
   1170   456    21382.4792    76    22151.0000    21296.3439  1520245    3.86%
   1172   458    21349.6758    68    22151.0000    21315.3376  1520758    3.77%
   1176   462    21535.7160    81    22151.0000    21315.3376  1531469    3.77%
   1180   466    21352.8663    67    22151.0000    21315.3376  1534016    3.77%
   1188   474    21553.0765    68    22151.0000    21315.3376  1568371    3.77%
Elapsed time = 1939.15 sec. (684730.86 ticks, tree = 57.38 MB, solutions = 12)
   1196   482    21500.3394    57    22151.0000    21315.3376  1597632    3.77%
   1208   494    21528.4459    72    22151.0000    21315.3376  1628236    3.77%
   1227   511    21708.6410    62    22151.0000    21315.3376  1663946    3.77%
   1239   523    21559.2229    71    22151.0000    21315.3376  1697626    3.77%
   1251   535    21669.4522    68    22151.0000    21315.3376  1727339    3.77%
   1253   537    21699.7956    58    22151.0000    21315.3376  1738343    3.77%
   1265   549    21446.6918    70    22151.0000    21315.3376  1762979    3.77%
   1302   576    21559.8119    59    22151.0000    21315.3376  1821279    3.77%
   1310   582    21789.2063    63    22151.0000    21315.3376  1839518    3.77%
   1313   585    21553.0143    73    22151.0000    21315.3376  1850663    3.77%
Elapsed time = 2248.59 sec. (779693.01 ticks, tree = 76.28 MB, solutions = 12)
   1321   589    21495.8143    67    22151.0000    21315.3376  1859333    3.77%
   1329   595    21616.8247    78    22151.0000    21315.3376  1888830    3.77%
   1337   603    21415.0023    74    22151.0000    21315.3376  1910991    3.77%
   1369   635    21540.3297    77    22151.0000    21315.3376  1968367    3.77%
   1377   643    21504.0286    71    22151.0000    21315.3376  1984518    3.77%
   1385   651    21522.9171    67    22151.0000    21315.3376  1994100    3.77%
   1393   659    21588.3659    72    22151.0000    21315.3376  2012282    3.77%
   1405   669    21455.7238    64    22151.0000    21315.3376  2029114    3.77%
   1417   681    21433.3062    64    22151.0000    21315.3376  2048239    3.77%
   1429   693    21619.0574    63    22151.0000    21315.3376  2063986    3.77%
Elapsed time = 2544.99 sec. (868188.42 ticks, tree = 87.81 MB, solutions = 12)
   1506   770    21530.1822    69    22151.0000    21315.3376  2139385    3.77%
   1514   778    21617.4472    63    22151.0000    21315.3376  2160349    3.77%
   1526   790    21600.2991    62    22151.0000    21315.3376  2175618    3.77%
   1534   798    21387.8456    61    22151.0000    21315.3376  2186747    3.77%
   1542   806    21426.1817    73    22151.0000    21315.3376  2191522    3.77%
   1544   808    21785.7512    34    22151.0000    21315.3376  2200429    3.77%
   1552   814        cutoff          22151.0000    21315.3376  2213533    3.77%
   1562   824    21468.3203    68    22151.0000    21315.3376  2232896    3.77%
   1661   923    22083.0940    50    22151.0000    21315.3376  2291330    3.77%
   1672   934    21623.5087    67    22151.0000    21315.3376  2312112    3.77%
Elapsed time = 2803.28 sec. (942338.27 ticks, tree = 146.11 MB, solutions = 12)
   1684   944    21903.8515    61    22151.0000    21315.3376  2327222    3.77%
   1692   950    21502.2903    58    22151.0000    21315.3376  2343184    3.77%
   1704   960    21587.1224    74    22151.0000    21315.3376  2357707    3.77%
   1708   964    21399.8090    62    22151.0000    21315.3376  2359389    3.77%
   1716   970    21431.9652    63    22151.0000    21315.3376  2372057    3.77%
   1728   980    21451.7540    65    22151.0000    21315.3376  2386663    3.77%
   1737   989    22035.9677    30    22151.0000    21315.3376  2405225    3.77%
   1895  1131    21400.3830    61    22151.0000    21315.3376  2484264    3.77%
   1900  1136    21888.0320    52    22151.0000    21315.3376  2491731    3.77%
   1907  1143    21466.8904    66    22151.0000    21315.3376  2504428    3.77%
Elapsed time = 3006.56 sec. (1001455.31 ticks, tree = 189.59 MB, solutions = 12)
   1920  1154    21826.4465    45    22151.0000    21315.3376  2517155    3.77%
   1922  1156    21533.4493    55    22151.0000    21315.3376  2518064    3.77%
   1935  1165    21413.7537    60    22151.0000    21315.3376  2541987    3.77%
   1943  1173    21482.7859    62    22151.0000    21315.3376  2557082    3.77%
   1951  1179    21465.2160    62    22151.0000    21315.3376  2565622    3.77%
   1963  1187    21539.8712    72    22151.0000    21315.3376  2585863    3.77%
   2058  1264    21790.7443    49    22151.0000    21315.3376  2685173    3.77%
   2064  1268    21525.3366    62    22151.0000    21315.3376  2693520    3.77%
   2072  1274    21609.5657    54    22151.0000    21315.3376  2712944    3.77%
   2084  1282    21730.5944    57    22151.0000    21315.3376  2733451    3.77%
Elapsed time = 3302.09 sec. (1086898.56 ticks, tree = 215.62 MB, solutions = 12)
   2093  1289    21640.9284    59    22151.0000    21315.3376  2753071    3.77%
   2101  1297    21849.5921    59    22151.0000    21315.3376  2773293    3.77%
   2109  1303    21634.4407    63    22151.0000    21315.3376  2780981    3.77%
   2125  1317    21866.4095    57    22151.0000    21315.3376  2811217    3.77%
   2133  1323    21769.5279    50    22151.0000    21315.3376  2832932    3.77%
   2264  1381    21503.2168    76    22151.0000    21315.3376  2934802    3.77%
   2266  1383    21937.1643    58    22151.0000    21315.3376  2947225    3.77%
   2282  1399    21543.3388    60    22151.0000    21315.3376  2966961    3.77%
   2297  1414    22016.2891    49    22151.0000    21315.3376  2990733    3.77%
   2298  1415    21763.9060    67    22151.0000    21315.3376  2999637    3.77%
Elapsed time = 3554.17 sec. (1162329.14 ticks, tree = 238.52 MB, solutions = 12)
   2305  1420    21731.1996    57    22151.0000    21315.3376  3010844    3.77%
   2310  1425    21474.8546    60    22151.0000    21315.3376  3023757    3.77%
   2314  1429    22038.6733    50    22151.0000    21315.3376  3039417    3.77%
   2322  1435    21603.4498    48    22151.0000    21315.3376  3049401    3.77%
   2333  1446    21625.9245    58    22151.0000    21315.3376  3072040    3.77%
   2345  1458    21793.8520    46    22151.0000    21315.3376  3091138    3.77%
   2346  1459    21754.9485    62    22151.0000    21315.3376  3101624    3.77%
   2438  1531    21322.8905    75    22151.0000    21322.8905  3200590    3.74%
   2441  1533    21366.0610    85    22151.0000    21322.9145  3211149    3.74%
   2442  1534    21375.5959    83    22151.0000    21322.9145  3219355    3.74%
Elapsed time = 4035.82 sec. (1370713.07 ticks, tree = 326.13 MB, solutions = 12)
   2443  1535    21397.5622    91    22151.0000    21322.9145  3224059    3.74%
   2446  1537    21402.2824    87    22151.0000    21322.9380  3233562    3.74%
   2447  1537    21569.2645    75    22151.0000    21322.9380  3257416    3.74%
   2450  1540    21376.4513    76    22151.0000    21323.1887  3327666    3.74%
   2454  1543    21367.5109    85    22151.0000    21323.1887  3466499    3.74%
   2456  1545    21477.5643    76    22151.0000    21323.1887  3507605    3.74%
   2457  1546    21687.1609    73    22151.0000    21323.1887  3549641    3.74%
   2458  1547    21530.4298    62    22151.0000    21323.1887  3579064    3.74%
   2460  1548    21367.8826    85    22151.0000    21323.1887  3617521    3.74%
   2465  1552    21444.8388    66    22151.0000    21323.1887  3638861    3.74%
Elapsed time = 4501.59 sec. (1543561.38 ticks, tree = 325.06 MB, solutions = 12)
   2468  1553    21367.9385    85    22151.0000    21323.1887  3644309    3.74%
   2472  1556    21423.4991    70    22151.0000    21323.1887  3671333    3.74%
   2479  1559    21530.1097    77    22151.0000    21323.1887  3719446    3.74%
   2481  1559    21447.6653    84    22151.0000    21323.1887  3771258    3.74%
   2484  1561    21870.4532    71    22151.0000    21323.1887  3805682    3.74%
   2498  1570    21474.8559    64    22151.0000    21323.1887  3944850    3.74%
   2502  1573    21453.7656    80    22151.0000    21323.1887  3955110    3.74%
   2510  1578    21454.0638    82    22151.0000    21323.1887  3979886    3.74%
   2521  1586    21377.9375    79    22151.0000    21323.1887  4011310    3.74%
   2525  1589    21390.0700    77    22151.0000    21323.1887  4027530    3.74%
Elapsed time = 5122.70 sec. (1725651.78 ticks, tree = 320.36 MB, solutions = 12)
   2530  1590    21665.0037    79    22151.0000    21323.1887  4063920    3.74%
   2533  1591    21562.6903    76    22151.0000    21323.1887  4074792    3.74%
   2550  1601    21456.2855    78    22151.0000    21323.1887  4123640    3.74%
   2562  1605    21459.3539    75    22151.0000    21323.1887  4142840    3.74%
   2566  1605    21752.1243    79    22151.0000    21323.1887  4161938    3.74%
   2570  1607    21464.2860    70    22151.0000    21323.1887  4167467    3.74%
   2582  1612    21464.5085    73    22151.0000    21323.1887  4187136    3.74%
   2586  1614    21592.6764    64    22151.0000    21323.1887  4211350    3.74%
   2594  1605    21594.0456    57    22151.0000    21323.1887  4235745    3.74%
   2633  1624    21527.8517    64    22151.0000    21323.1887  4294160    3.74%
Elapsed time = 5550.11 sec. (1844883.43 ticks, tree = 307.90 MB, solutions = 12)
   2644  1629    21854.0414    59    22151.0000    21323.1887  4314749    3.74%
   2652  1633    21716.2405    55    22151.0000    21323.1887  4340284    3.74%
   2671  1642    21539.5941    81    22151.0000    21323.1887  4361034    3.74%
   2679  1646    21640.1671    69    22151.0000    21323.1887  4380598    3.74%
   2699  1658    21636.2693    63    22151.0000    21323.1887  4426633    3.74%
   2743  1677    21993.7993    54    22151.0000    21323.1887  4481593    3.74%
   2746  1679    21651.8152    64    22151.0000    21323.1887  4490627    3.74%
   2757  1684    21931.4104    56    22151.0000    21323.1887  4503504    3.74%
   2778  1694    21633.8435    65    22151.0000    21323.1887  4519510    3.74%
   2786  1698    21435.1312    61    22151.0000    21323.1887  4524918    3.74%
Elapsed time = 5946.20 sec. (1954953.41 ticks, tree = 328.96 MB, solutions = 12)
   2790  1701    21443.9059    71    22151.0000    21323.1887  4538510    3.74%
   2806  1696    21484.1934    59    22151.0000    21323.1887  4554093    3.74%
   2814  1695    21721.7741    65    22151.0000    21323.1887  4573303    3.74%
   2826  1700    21439.9160    63    22151.0000    21323.1887  4592292    3.74%
   2830  1700    21500.5026    69    22151.0000    21323.1887  4604476    3.74%
   2924  1701    21472.4464    73    22151.0000    21323.1887  4679350    3.74%
   2930  1704    21677.7743    49    22151.0000    21323.1887  4686635    3.74%
   2936  1709    21480.9903    60    22151.0000    21323.1887  4696609    3.74%
   2948  1700    21450.4647    58    22151.0000    21323.1887  4705273    3.74%
   2964  1705    21514.3504    59    22151.0000    21323.1887  4729379    3.74%
Elapsed time = 6319.77 sec. (2064938.35 ticks, tree = 332.63 MB, solutions = 12)
   3056  1725    21438.2307    73    22151.0000    21357.3532  4797714    3.58%
   3060  1728    21634.7427    65    22151.0000    21357.3532  4807198    3.58%
   3063  1728    21682.6070    61    22151.0000    21357.3532  4823748    3.58%
   3064  1729    21438.4769    80    22151.0000    21357.3532  4824696    3.58%
   3068  1731    21638.3055    63    22151.0000    21357.3532  4843433    3.58%
   3084  1739    21578.1443    70    22151.0000    21357.3532  4870761    3.58%
   3173  1786    21893.9600    59    22151.0000    21357.3532  4951940    3.58%
   3209  1806    21680.4044    62    22151.0000    21357.3532  4972215    3.58%
   3225  1812    21505.6357    72    22151.0000    21357.3532  4991282    3.58%
   3237  1816    21607.1385    74    22151.0000    21357.3532  5007904    3.58%
Elapsed time = 6687.28 sec. (2175837.04 ticks, tree = 330.40 MB, solutions = 12)
   3257  1827    21647.4225    65    22151.0000    21357.3532  5027320    3.58%
   3269  1833    21605.5204    74    22151.0000    21357.3532  5042465    3.58%
*  3273+ 1467                        22088.0000    21357.3532             3.31%
   3382  1522    21467.6445    64    22088.0000    21357.3532  5122924    3.31%
*  3386+ 1279                        22053.0000    21357.3532             3.15%
*  3386+ 1127                        21979.0000    21357.3532             2.83%
   3386  1129    21467.6542    63    21979.0000    21357.3532  5123257    2.83%
   3400  1137    21822.9053    65    21979.0000    21357.3532  5146006    2.83%
   3412  1141    21790.1321    67    21979.0000    21357.3532  5167603    2.83%
   3431  1147    21529.9833    46    21979.0000    21357.3532  5179324    2.83%
   3455  1158    21562.0171    57    21979.0000    21357.3532  5197718    2.83%
   3568  1129    21582.8379    62    21979.0000    21357.3532  5267455    2.83%
   3577  1136    21596.8547    61    21979.0000    21357.3532  5273025    2.83%
Elapsed time = 7200.02 sec. (2290466.04 ticks, tree = 187.50 MB, solutions = 15)
   3580  1135    21596.8547    61    21979.0000    21357.3532  5279570    2.83%
   3599  1149    21528.0855    50    21979.0000    21357.3532  5291511    2.83%
   3605  1150    21600.2401    51    21979.0000    21357.3532  5296992    2.83%
   3611  1155    21589.5028    49    21979.0000    21357.3532  5307073    2.83%

Implied bound cuts applied:  323
Flow cuts applied:  3382
Mixed integer rounding cuts applied:  1288
Flow path cuts applied:  29
Lift and project cuts applied:  30
Gomory fractional cuts applied:  1

Root node processing (before b&c):
  Real time             =  313.50 sec. (173775.17 ticks)
Parallel b&c, 4 threads:
  Real time             = 6886.54 sec. (2182925.77 ticks)
  Sync time (average)   =  357.45 sec.
  Wait time (average)   =  357.65 sec.
                          ------------
Total (root+branch&cut) = 7200.04 sec. (2356700.95 ticks)
We use intensification finding a better solution: 21979.0
================ Solution ================
BAP terminated with objective : 21979
Total Number of iterations: 143
Total Number of processed nodes: 5
Total Time spent on master problems: 1908329 Total time spent on pricing problems: 31634
Best bound : 20356.026666666665
[1, 40, 64, 75, 91, 134, 145, 187, 238, 249, 302, 338, 399, 489, 493, 495, 499, 500, 506, 516, 556, 558, 565, 567, 604, 639, 646, 674, 710, 725, 729, 734, 757, 766, 781, 801, 802, 805, 830, 852, 877, 922, 945, 968, 981, 1022, 1043, 1059, 1079, 1084, 1101, 1102, 1107, 1111, 1122, 1125, 1136, 1138, 1141, 1144, 1148, 1165, 1182, 1220, 1226, 1228, 1253, 1265, 1284, 1288, 1309, 1337, 1380, 1394, 1410, 1412, 1455, 1457, 1475, 1497]
The number of service edges used= 80

Solution is optimal: false
Columns (only non-zero columns are returned):
artificial: false edgeIndexset: [1, 1253, 1574, 249, 1500, 495] start node= 1 start time= 9 capacity type= 2 ifChargeSet: [1500]
(0,0)->charge(0,1)->(1,9)->(2,14)->(2,15)->(9,23)->(0,0):1.0
Fix cost= 300 variable cost= 122

artificial: false edgeIndexset: [338, 1079, 1738, 922, 604, 766] start node= 1 start time= 8 capacity type= 2 ifChargeSet: [1738]
(4,4)->(1,8)->(5,16)->(6,22)->(7,28)->charge(7,29)->(4,4):1.0
Fix cost= 300 variable cost= 126

artificial: false edgeIndexset: [801, 1394, 1107, 1141, 1783, 187] start node= 7 start time= 27 capacity type= 1 ifChargeSet: [1783]
(8,1)->(0,7)->(9,13)->charge(9,14)->(5,21)->(7,27)->(8,1):1.0
Fix cost= 110 variable cost= 126

artificial: false edgeIndexset: [499, 40, 1144, 1497, 1578, 1743] start node= 8 start time= 4 capacity type= 1 ifChargeSet: [1578]
(8,3)->(8,4)->(0,10)->(2,18)->charge(2,19)->(9,27)->(8,3):1.0
Fix cost= 120 variable cost= 122

artificial: false edgeIndexset: [1784, 968, 91, 1101, 1165, 1455] start node= 8 start time= 25 capacity type= 1 ifChargeSet: [1784]
(0,1)->(6,8)->(9,14)->charge(9,15)->(7,21)->(8,25)->(0,1):1.0
Fix cost= 120 variable cost= 126

artificial: false edgeIndexset: [1669, 1514, 75, 1084, 1228, 1148, 830] start node= 8 start time= 8 capacity type= 1 ifChargeSet: [1669]
(7,4)->(8,8)->(0,14)->(0,15)->(5,19)->charge(5,20)->(8,28)->(7,4):1.0
Fix cost= 120 variable cost= 122

artificial: false edgeIndexset: [1457, 1043, 725, 1653, 1654, 567, 489] start node= 9 start time= 17 capacity type= 1 ifChargeSet: [1654]
(5,3)->(5,4)->charge(5,5)->(2,9)->(9,17)->(7,23)->(3,27)->(5,3):1.0
Fix cost= 130 variable cost= 122

artificial: false edgeIndexset: [1265, 1125, 506, 1724, 1309, 1774, 399] start node= 7 start time= 14 capacity type= 1 ifChargeSet: [1774]
(9,4)->charge(9,5)->(1,9)->(7,14)->(7,15)->(9,19)->(2,26)->(9,4):1.0
Fix cost= 110 variable cost= 122

artificial: false edgeIndexset: [500, 1288, 1578, 1579, 302, 734, 1663, 639] start node= 4 start time= 9 capacity type= 1 ifChargeSet: [1579]
(1,2)->(4,9)->(5,13)->(5,14)->(2,18)->(2,19)->charge(2,20)->(9,28)->(1,2):1.0
Fix cost= 150 variable cost= 118

artificial: false edgeIndexset: [1475, 805, 1111, 1751, 1674, 558, 1182] start node= 8 start time= 11 capacity type= 1 ifChargeSet: [1674]
(7,1)->(9,5)->(8,11)->(8,12)->(3,18)->(5,24)->charge(5,25)->(7,1):1.0
Fix cost= 120 variable cost= 122

artificial: false edgeIndexset: [1136, 945, 1220, 1380, 757, 1693, 1694] start node= 7 start time= 26 capacity type= 1 ifChargeSet: [1694]
(9,0)->(5,7)->(6,13)->(6,14)->charge(6,15)->(8,20)->(7,26)->(9,0):1.0
Fix cost= 110 variable cost= 122

artificial: false edgeIndexset: [1730, 1731, 516, 134, 1513, 1226, 1102, 1022] start node= 8 start time= 26 capacity type= 1 ifChargeSet: [1513]
(7,2)->(3,6)->(0,13)->charge(0,14)->(7,20)->(7,21)->(7,22)->(8,26)->(7,2):1.0
Fix cost= 120 variable cost= 118

artificial: false edgeIndexset: [1138, 802, 852, 1412, 1689, 1690, 1691, 556] start node= 5 start time= 22 capacity type= 1 ifChargeSet: [1691]
(9,2)->(6,9)->(6,10)->(6,11)->charge(6,12)->(3,16)->(5,22)->(7,28)->(9,2):1.0
Fix cost= 200 variable cost= 118

artificial: false edgeIndexset: [64, 1792, 1793, 1284, 729, 1658, 493, 238, 1791] start node= 9 start time= 21 capacity type= 1 ifChargeSet: [1658]
(0,4)->(5,8)->charge(5,9)->(2,13)->(9,21)->(9,22)->(9,23)->(9,24)->(1,28)->(0,4):1.0
Fix cost= 130 variable cost= 114

artificial: false edgeIndexset: [674, 1410, 1700, 1797, 981, 1798, 1799, 877] start node= 9 start time= 0 capacity type= 1 ifChargeSet: [1700]
(9,0)->(6,7)->(4,14)->(6,20)->charge(6,21)->(9,27)->(9,28)->(9,29)->(9,0):1.0
Fix cost= 130 variable cost= 114

artificial: false edgeIndexset: [1122, 565, 1717, 1718, 1719, 1720, 1337, 1721, 1786, 781] start node= 7 start time= 7 capacity type= 1 ifChargeSet: [1786]
(5,1)->(7,7)->(7,8)->(7,9)->(7,10)->(7,11)->(7,12)->(9,16)->charge(9,17)->(3,25)->(5,1):1.0
Fix cost= 110 variable cost= 106

artificial: false edgeIndexset: [1634, 1635, 1059, 710, 646, 1711, 1712, 145, 1713, 1714, 1715, 1716, 1717, 1718] start node= 7 start time= 3 capacity type= 1 ifChargeSet: []
(7,1)->(7,2)->(7,3)->(7,4)->(7,5)->(7,6)->(7,7)->(7,8)->(7,9)->(4,14)->(4,15)->(4,16)->(5,20)->(0,25)->(7,1):1.0
Fix cost= 110 variable cost= 80

fix cost+variable cost+commodity cost= 2490+2000+17489.0=21979.0

vehicle dowork= 25850 commodity dowork= 17489.0
no load ratio= 0.32344294003868473

Total vehicles used= 17

vehicleCoverServiceEdge information:
{1=1, 1410=1, 516=1, 1412=1, 1284=1, 134=1, 646=1, 1288=1, 1165=1, 781=1, 399=1, 145=1, 1043=1, 922=1, 1309=1, 1182=1, 801=1, 802=1, 674=1, 1059=1, 805=1, 40=1, 556=1, 302=1, 558=1, 1455=1, 1457=1, 945=1, 565=1, 1079=1, 567=1, 1337=1, 187=1, 1084=1, 830=1, 64=1, 1475=1, 1220=1, 710=1, 968=1, 1226=1, 75=1, 1228=1, 1101=1, 1102=1, 338=1, 1107=1, 852=1, 725=1, 981=1, 1111=1, 1497=1, 729=1, 91=1, 604=1, 734=1, 1122=1, 1380=1, 1253=1, 1125=1, 489=1, 493=1, 877=1, 238=1, 495=1, 1136=1, 1265=1, 1394=1, 1138=1, 499=1, 500=1, 1141=1, 757=1, 1144=1, 249=1, 506=1, 1148=1, 766=1, 1022=1, 639=1}

commodityFlowIntoTerminal information:
100 50 0 0 19 0 0 50 0 0 39 0 0 36 50 0 0 0 0 0 0 0 0 0 0 44 0 0 0 0 
0 0 43 0 0 0 0 0 50 98 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 48 0 
0 0 0 0 0 0 0 0 0 50 0 0 0 26 46 0 0 0 74 0 0 0 0 0 0 0 41 0 0 0 
0 0 0 0 0 0 25 0 0 0 0 0 0 0 0 0 50 0 0 0 0 0 0 0 0 50 0 44 0 0 
0 0 0 0 79 0 0 0 0 28 0 0 0 0 67 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 
0 50 0 50 0 0 0 43 50 0 0 0 0 50 0 0 70 0 0 44 50 45 50 0 50 0 0 0 0 0 
0 0 0 0 0 0 0 50 23 24 0 0 0 23 0 0 0 0 0 0 45 0 20 0 0 0 0 0 0 0 
0 92 23 0 29 0 0 32 0 0 0 0 0 0 50 0 0 0 0 0 49 0 0 19 0 0 34 38 63 0 
0 0 0 50 0 0 0 0 32 0 0 50 0 0 0 0 0 0 0 0 18 0 0 0 0 0 46 0 21 0 
23 0 50 0 45 39 0 0 0 0 0 0 0 0 29 0 50 19 0 36 0 45 0 20 0 0 0 94 0 0 

vehicle pattern information:
[1, 0, 0, 0, 0, 0, 0, 0, 1, 0, 0, 0, 0, 0, 0, 0, 1, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 1, 0, 0, 0, 0, 0, 0, 0, 0]
[0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 1, 0, 0, 0, 0, 0, 0, 0, 0, 1, 0, 0, 0, 0, 1, 0, 0, 0, 0, 1, 0, 0, 0, 0, 1, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0]
[0, 0, 0, 0, 0, 0, 1, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 1, 0, 0, 0, 0, 0, 0, 0, 0, 0, 1, 0, 1, 0, 0, 0, 0, 0, 0, 0, 1, 0, 0, 0]
[0, 1, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 1, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 1, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 1]
[0, 0, 0, 1, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 1, 0, 0, 0, 1, 0, 1, 0, 0, 0, 0, 0, 0, 0, 0, 0, 1, 0]
[0, 0, 1, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 1, 0, 0, 0, 0, 0, 0, 0, 0, 1, 0, 1, 0, 1, 0, 0, 0, 0, 0, 0, 0, 0, 0]
[0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 1, 0, 1, 0, 0, 0, 0, 0, 1, 0, 0, 0, 0, 0, 0, 0, 0, 0, 1, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 1, 0]
[0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 1, 0, 0, 1, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 1, 0, 0, 0, 0, 1, 1, 0, 0, 0, 0, 0, 0]
[0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 1, 0, 0, 0, 0, 0, 1, 0, 0, 0, 0, 1, 0, 0, 1, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 1, 0, 0, 0, 0, 0, 0, 0]
[0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 1, 0, 0, 0, 0, 0, 0, 0, 1, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 1, 0, 1, 0, 0, 0, 0, 0, 0, 0, 0, 0, 1]
[0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 1, 0, 0, 0, 0, 0, 1, 0, 0, 0, 0, 0, 1, 0, 0, 1, 0, 0, 0, 0, 0, 1, 0, 0, 0]
[0, 0, 0, 0, 1, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 1, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 1, 0, 1, 0, 0, 0, 1, 0, 0, 0, 0, 0, 0, 0, 0, 0]
[0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 1, 0, 0, 0, 0, 0, 0, 0, 1, 0, 1, 0, 0, 0, 0, 0, 0, 0, 0, 1, 0, 0, 0, 0, 0, 0, 0, 0, 0, 1, 0, 0]
[0, 0, 1, 0, 0, 0, 0, 1, 0, 0, 0, 0, 0, 0, 0, 0, 1, 0, 0, 0, 0, 0, 0, 0, 1, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 1, 0, 0, 0, 0, 0, 0, 0]
[0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 1, 0, 0, 0, 0, 0, 0, 1, 0, 0, 1, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 1, 0, 0]
[0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 1, 0, 0, 0, 0, 0, 0, 0, 1, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 1, 0, 0, 0, 0, 0, 0, 1, 0, 0, 0, 0, 0]
[0, 0, 0, 0, 1, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 1, 0, 1, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 1, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0]
x[0]:8,26->7,2= 23.0 6
total cost= 138.0

x[1]:6,22->7,28= 19.0 6
total cost= 114.0

x[2]:7,4->8,8= 18.0 4
x[2]:8,8->0,14= 18.0 6
total cost= 180.0

x[3]:9,17->3,25= 19.0 8
x[3]:2,9->9,17= 19.0 8
total cost= 304.0

x[4]:9,23->0,0= 30.0 7
x[4]:2,13->9,21= 30.0 8
total cost= 450.0

x[5]:0,14->7,20= 2.0 6
x[5]:1,28->0,4= 2.0 6
x[5]:1,9->7,14= 27.0 5
total cost= 159.0

x[6]:4,4->1,8= 17.0 4
total cost= 68.0

x[7]:3,18->5,24= 22.0 6
x[7]:5,25->7,1= 22.0 6
total cost= 264.0

x[8]:1,9->7,14= 23.0 5
total cost= 115.0

x[9]:0,10->2,18= 28.0 8
x[9]:8,4->0,10= 28.0 6
total cost= 392.0

x[10]:0,1->1,9= 17.0 8
total cost= 136.0

x[11]:2,13->9,21= 15.0 8
total cost= 120.0

x[12]:6,22->7,28= 13.999999999999998 6
total cost= 83.99999999999999

x[13]:7,12->9,16= 6.0 4
x[13]:7,15->9,19= 7.0 4
total cost= 52.0

x[14]:7,26->9,0= 15.0 4
x[14]:8,20->7,26= 15.0 6
total cost= 150.0

x[15]:3,6->0,13= 15.0 7
total cost= 105.0

x[16]:8,1->0,7= 16.0 6
total cost= 96.0

x[17]:7,12->9,16= 12.0 4
x[17]:9,28->1,2= 12.0 4
total cost= 96.0

x[18]:1,9->2,14= 23.99999999999999 5
total cost= 119.99999999999994

x[19]:0,4->5,8= 23.0 4
x[19]:0,15->5,19= 3.0 4
x[19]:8,1->0,7= 3.0 6
x[19]:8,25->0,1= 23.0 6
total cost= 260.0

x[20]:0,10->2,18= 20.0 8
x[20]:8,1->0,7= 20.0 6
total cost= 280.0

x[21]:4,4->1,8= 30.0 4
total cost= 120.0

x[22]:9,19->2,26= 29.0 7
total cost= 203.0

x[23]:9,5->8,11= 18.0 6
total cost= 108.0

x[24]:6,12->3,16= 10.0 4
total cost= 40.0

x[25]:9,23->0,0= 26.0 7
total cost= 182.0

x[26]:3,16->5,22= 18.000000000000004 6
x[26]:6,12->3,16= 18.0 4
total cost= 180.00000000000003

x[27]:9,14->5,21= 16.0 7
x[27]:2,26->9,4= 16.0 8
total cost= 240.0

x[28]:7,9->4,14= 25.0 5
x[28]:0,25->7,1= 25.0 6
total cost= 275.0

x[29]:7,28->9,2= 26.0 4
x[29]:9,5->1,9= 26.0 4
total cost= 208.0

x[30]:7,23->3,27= 16.0 4
x[30]:0,14->7,20= 16.0 6
x[30]:0,25->7,1= 14.0 6
x[30]:7,2->3,6= 14.0 4
total cost= 300.0

x[31]:0,1->6,8= 23.0 7
total cost= 161.0

x[32]:4,9->5,13= 19.0 4
total cost= 76.0

x[33]:7,1->9,5= 14.0 4
x[33]:7,28->9,2= 7.0 4
x[33]:5,21->7,27= 7.0 6
x[33]:5,25->7,1= 14.0 6
total cost= 210.0

x[34]:0,25->7,1= 11.0 6
x[34]:7,2->3,6= 11.0 4
total cost= 110.0

x[35]:9,0->5,7= 23.0 7
total cost= 161.0

x[36]:1,9->2,14= 3.0 5
x[36]:4,4->1,8= 3.0 4
x[36]:4,9->5,13= 11.0 4
x[36]:5,14->2,18= 11.0 4
total cost= 115.0

x[37]:1,28->0,4= 17.0 6
total cost= 102.0

x[38]:0,4->5,8= 12.0 4
x[38]:8,25->0,1= 12.0 6
x[38]:5,14->2,18= 12.0 4
total cost= 168.0

x[39]:3,27->5,3= 30.0 6
x[39]:5,5->2,9= 29.0 4
x[39]:5,14->2,18= 1.0 4
total cost= 300.0

x[40]:6,7->4,14= 22.0 7
total cost= 154.0

x[41]:7,9->4,14= 13.0 5
x[41]:3,25->5,1= 13.0 6
x[41]:5,1->7,7= 13.0 6
total cost= 221.0

x[42]:7,29->4,4= 14.0 5
x[42]:5,21->7,27= 14.0 6
total cost= 154.0

x[43]:9,17->3,25= 21.0 8
total cost= 168.0

x[44]:9,14->5,21= 29.0 7
x[44]:2,26->9,4= 29.0 8
total cost= 435.0

x[45]:1,2->4,9= 28.0 7
total cost= 196.0

x[46]:7,29->4,4= 16.0 5
x[46]:4,9->5,13= 16.0 4
total cost= 144.0

x[47]:1,8->5,16= 26.0 8
total cost= 208.0

x[48]:9,28->1,2= 20.0 4
total cost= 80.0

x[49]:4,16->5,20= 11.0 4
x[49]:5,9->2,13= 11.0 4
total cost= 88.0

x[50]:6,21->9,27= 29.0 6
total cost= 174.0

x[51]:9,17->7,23= 19.0 6
total cost= 114.0

x[52]:9,0->6,7= 24.0 7
x[52]:9,2->6,9= 3.0 7
x[52]:2,19->9,27= 27.0 8
total cost= 405.0

x[53]:0,15->5,19= 20.0 4
x[53]:8,1->0,7= 11.0 6
x[53]:8,8->0,14= 9.0 6
total cost= 200.0

x[54]:7,12->9,16= 13.0 4
x[54]:9,0->6,7= 13.0 7
total cost= 143.0

x[55]:9,23->0,0= 24.0 7
total cost= 168.0

x[56]:4,16->5,20= 15.0 4
x[56]:5,20->0,25= 15.0 5
total cost= 135.0

x[57]:9,5->8,11= 6.0 6
x[57]:9,27->8,3= 9.0 6
total cost= 90.0

x[58]:8,4->0,10= 11.0 6
x[58]:8,8->0,14= 9.0 6
x[58]:9,27->8,3= 20.0 6
total cost= 240.0

x[59]:7,22->8,26= 16.0 4
total cost= 64.0

x[60]:9,23->0,0= 20.0 7
total cost= 140.0

x[61]:7,28->9,2= 17.0 4
x[61]:5,21->7,27= 17.0 6
total cost= 170.0

x[62]:7,23->3,27= 28.0 4
total cost= 112.0

x[63]:3,27->5,3= 20.0 6
x[63]:5,16->6,22= 20.0 6
total cost= 240.0

x[64]:4,14->6,20= 17.0 6
x[64]:6,21->9,27= 17.0 6
total cost= 204.0

x[65]:7,1->9,5= 19.0 4
x[65]:9,5->1,9= 19.00000000000001 4
x[65]:1,9->2,14= 19.00000000000001 5
total cost= 247.0000000000001

x[66]:7,22->8,26= 10.0 4
total cost= 40.0

x[67]:3,25->5,1= 24.0 6
x[67]:5,7->6,13= 23.999999999999996 6
total cost= 288.0

x[68]:4,9->5,13= 4.0 4
x[68]:4,16->5,20= 17.0 4
total cost= 84.0

x[69]:9,0->5,7= 20.0 7
x[69]:2,15->9,23= 20.0 8
total cost= 300.0

x[70]:0,4->5,8= 15.0 4
x[70]:8,25->0,1= 15.0 6
x[70]:5,9->2,13= 15.0 4
total cost= 210.0

x[71]:9,19->2,26= 12.999999999999986 7
total cost= 90.9999999999999

x[72]:9,0->6,7= 13.0 7
total cost= 91.0

x[73]:6,15->8,20= 18.0 5
total cost= 90.0

x[74]:9,2->6,9= 21.0 7
total cost= 147.0

x[75]:1,8->5,16= 16.0 8
total cost= 128.0

x[76]:4,14->6,20= 28.0 6
total cost= 168.0

x[77]:7,22->8,26= 20.0 4
total cost= 80.0

x[78]:0,10->2,18= 2.0 8
x[78]:0,15->5,19= 21.0 4
x[78]:5,5->2,9= 21.0 4
total cost= 184.0

x[79]:7,12->9,16= 19.0 4
x[79]:9,24->1,28= 19.0 4
x[79]:5,1->7,7= 19.0 6
total cost= 266.0

x[80]:5,20->8,28= 21.0 8
total cost= 168.0

x[81]:0,1->1,9= 25.0 8
total cost= 200.0

x[82]:5,20->0,25= 29.0 5
total cost= 145.0

x[83]:3,16->5,22= 29.999999999999996 6
x[83]:7,29->4,4= 29.999999999999996 5
x[83]:5,22->7,28= 29.999999999999996 6
total cost= 509.9999999999999

x[84]:9,28->1,2= 11.0 4
total cost= 44.0

x[85]:9,17->3,25= 10.0 8
total cost= 80.0

x[86]:0,1->1,9= 11.0 8
total cost= 88.0

x[87]:9,27->8,3= 21.0 6
x[87]:2,19->9,27= 21.0 8
total cost= 294.0

x[88]:3,6->0,13= 13.0 7
total cost= 91.0

x[89]:7,1->9,5= 6.0 4
x[89]:7,26->9,0= 8.0 4
x[89]:0,14->7,20= 8.0 6
x[89]:3,6->0,13= 8.0 7
x[89]:3,18->5,24= 6.0 6
x[89]:5,25->7,1= 6.0 6
total cost= 232.0

x[90]:3,16->5,22= 2.0 6
x[90]:3,25->5,1= 13.0 6
total cost= 90.0

x[91]:6,8->9,14= 29.0 6
total cost= 174.0

x[92]:1,8->5,16= 10.0 8
total cost= 80.0

x[93]:9,5->8,11= 26.0 6
total cost= 156.0

x[94]:1,8->5,16= 18.0 8
total cost= 144.0

x[95]:3,18->5,24= 22.0 6
x[95]:4,16->5,20= 7.0 4
x[95]:6,12->3,16= 22.0 4
x[95]:6,7->4,14= 7.0 7
total cost= 297.0

x[96]:7,29->4,4= 19.0 5
x[96]:8,20->7,26= 19.0 6
total cost= 209.0

x[97]:7,4->8,8= 14.0 4
x[97]:8,8->0,14= 14.0 6
total cost= 140.0

x[98]:0,14->7,20= 23.0 6
total cost= 138.0

x[99]:7,15->9,19= 29.0 4
x[99]:8,28->7,4= 29.0 6
x[99]:9,24->1,28= 29.0 4
total cost= 406.0

Total time= 9149026

Sovle for test12_10_50_30_100A.txt
Colmun limit=1000
number of service arcs=1500
number of holding arcs=300

root node bound= 8816.92
Before intensification, we have 29056 columns
After pick up:
==================Intensification===================
We add 1000 columns to cplex.
Tried aggregator 2 times.
MIP Presolve eliminated 13515 rows and 8495 columns.
Aggregator did 1425 substitutions.
Reduced MIP has 17190 rows, 65892 columns, and 188748 nonzeros.
Reduced MIP has 927 binaries, 72 generals, 0 SOSs, and 0 indicators.
Presolve time = 0.16 sec. (97.75 ticks)
Probing time = 0.12 sec. (4.78 ticks)
Tried aggregator 1 time.
MIP Presolve eliminated 1 rows and 0 columns.
Reduced MIP has 17189 rows, 65892 columns, and 188735 nonzeros.
Reduced MIP has 927 binaries, 72 generals, 0 SOSs, and 0 indicators.
Presolve time = 0.14 sec. (73.87 ticks)
Probing time = 0.12 sec. (5.39 ticks)
Clique table members: 197.
MIP emphasis: balance optimality and feasibility.
MIP search method: dynamic search.
Parallel mode: deterministic, using up to 4 threads.
Root relaxation solution time = 10.89 sec. (4811.17 ticks)

        Nodes                                         Cuts/
   Node  Left     Objective  IInf  Best Integer    Best Bound    ItCnt     Gap

*     0+    0                        19482.0000    -8011.0000           141.12%
*     0+    0                        19266.0000    -8011.0000           141.58%
*     0+    0                        18390.0000    -8011.0000           143.56%
*     0+    0                        18190.0000    -8011.0000           144.04%
*     0+    0                        17946.0000    -8011.0000           144.64%
*     0+    0                        17258.0000    -8011.0000           146.42%
*     0+    0                        17208.0000    -8011.0000           146.55%
*     0+    0                        17014.0000    -8011.0000           147.08%
*     0+    0                        16987.0000    -8011.0000           147.16%
      0     0     8817.1883    52    16987.0000     8817.1883    17992   48.09%
*     0+    0                        14074.0000     8817.1883            37.35%
      0     0     8836.2307    58    14074.0000    Cuts: 1323    27987   37.22%
      0     0     8872.7669    72    14074.0000    Cuts: 1502    40602   36.96%
      0     0     8933.3519    77    14074.0000    Cuts: 1675    52124   36.53%
*     0+    0                        13754.0000     8933.3519            35.05%
      0     0     9023.8472    67    13754.0000    Cuts: 1808    71906   34.39%
      0     0     9112.5430    82    13754.0000    Cuts: 1544    92620   33.75%
*     0+    0                        13030.0000     9112.5430            30.06%
      0     0     9205.9665    97    13030.0000    Cuts: 2054   109278   29.35%
      0     0     9315.9516   104    13030.0000    Cuts: 2070   129657   28.50%
*     0+    0                        11950.0000     9315.9516            22.04%
      0     0     9439.9895   102    11950.0000    Cuts: 2168   148169   21.00%
      0     0     9516.3143   109    11950.0000    Cuts: 1852   167855   20.37%
      0     0     9608.5687   104    11950.0000    Cuts: 1982   190582   19.59%
      0     0     9671.2547   138    11950.0000    Cuts: 1869   233706   19.07%
*     0+    0                        11492.0000     9671.2547            15.84%
      0     0     9708.2847   118    11492.0000    Cuts: 1880   250880   15.52%
      0     0     9732.9407   112    11492.0000    Cuts: 1799   262310   15.31%
      0     0     9765.3040   129    11492.0000    Cuts: 1510   278238   15.03%
      0     0     9781.7821   121    11492.0000    Cuts: 1287   289010   14.88%
      0     0     9796.5506   131    11492.0000    Cuts: 1355   298891   14.75%
      0     0     9808.3923   117    11492.0000    Cuts: 1401   309935   14.65%
      0     0     9814.5289   107    11492.0000    Cuts: 1175   318041   14.60%
      0     0     9821.6322    97    11492.0000    Cuts: 1188   324239   14.54%
      0     0     9826.6081   103    11492.0000    Cuts: 1042   332412   14.49%
      0     0     9830.5416   124    11492.0000    Cuts: 1021   337251   14.46%
      0     0     9833.4763   102    11492.0000    Cuts: 1079   342294   14.43%
      0     0     9836.7801   101    11492.0000     Cuts: 986   348018   14.40%
      0     0     9839.3343    97    11492.0000     Cuts: 959   352339   14.38%
      0     0     9840.0697    92    11492.0000     Cuts: 849   361163   14.37%
      0     0     9840.8600    95    11492.0000     Cuts: 938   365250   14.37%
Heuristic still looking.
Heuristic still looking.
Heuristic still looking.
      0     2     9840.8600    95    11492.0000     9840.8600   365250   14.37%
Elapsed time = 1853.23 sec. (1048808.59 ticks, tree = 0.00 MB, solutions = 14)
      1     3    10218.5849    97    11492.0000     9840.8600   385821   14.37%
      2     4     9841.0616    97    11492.0000     9840.8600   389342   14.37%
      3     5     9841.0717    99    11492.0000     9841.0617   389705   14.37%
      4     6    10220.7495    92    11492.0000     9841.0617   397348   14.37%
      5     7    10833.5732    80    11492.0000     9841.0617   430965   14.37%
      6     8    10378.4789    85    11492.0000     9841.0617   462876   14.37%
      8    10    10840.6787    71    11492.0000     9841.0617   475660   14.37%
      9    11    10259.2730    87    11492.0000     9841.0617   502984   14.37%
     10    12     9844.4713   105    11492.0000     9841.0721   508667   14.37%
*    13+   13                        11403.0000     9841.0721            13.70%
*    13+   13                        11369.0000     9841.0721            13.44%
*    13+   13                        11301.0000     9841.0721            12.92%
     13    15    10393.4910   110    11301.0000     9841.0721   529124   12.92%
Elapsed time = 2253.56 sec. (1231296.47 ticks, tree = 0.00 MB, solutions = 14)
     17    19    10406.1105   103    11301.0000     9841.0721   570815   12.92%
     23    25     9870.3612    81    11301.0000     9844.4876   632780   12.89%
     27    29     9874.1870    90    11301.0000     9844.4876   671666   12.89%
     31    33    10040.1963    60    11301.0000     9844.4876   731036   12.89%
     37    39    10050.3491    75    11301.0000     9851.6922   816889   12.82%
     40    42    10496.1685    73    11301.0000     9851.6922   861283   12.82%
     41    43    10066.0604    62    11301.0000     9851.6922   893240   12.82%
     45    47    10486.8747    56    11301.0000     9851.6922   951432   12.82%
     49    51    10646.7331    66    11301.0000     9851.6922  1010740   12.82%
     55    57    10087.8602    61    11301.0000     9851.6922  1071615   12.82%
Elapsed time = 3113.32 sec. (1535696.26 ticks, tree = 0.00 MB, solutions = 17)
     59    61    10174.1948    54    11301.0000     9851.6922  1111276   12.82%
     63    65    10092.9857    61    11301.0000     9851.6922  1165311   12.82%
     67    69    10138.7289    59    11301.0000     9851.6922  1229533   12.82%
     71    73    10115.3322    64    11301.0000     9851.6922  1263094   12.82%
     75    77    10112.8371    60    11301.0000     9851.6922  1282407   12.82%
     79    81    10119.6754    63    11301.0000     9851.6922  1297369   12.82%
     83    85    10170.0790    51    11301.0000     9851.6922  1321988   12.82%
     87    89    10179.5510    43    11301.0000     9851.6922  1335720   12.82%
     99    97    10898.7748    49    11301.0000     9851.6922  1383977   12.82%
    100    98    11148.0825    19    11301.0000     9851.6922  1391879   12.82%
Elapsed time = 3561.03 sec. (1658958.62 ticks, tree = 0.00 MB, solutions = 17)
    105    99    10189.4650    51    11301.0000     9851.6922  1420395   12.82%
    107   101     9887.5121    95    11301.0000     9851.6922  1429342   12.82%
    109   103    10235.4999    39    11301.0000     9851.6922  1439865   12.82%
    111   105    10011.9773    79    11301.0000     9851.6922  1470714   12.82%
    115   109    10022.5811    71    11301.0000     9851.6922  1487882   12.82%
    119   113    10034.5281    67    11301.0000     9851.6922  1515044   12.82%
    123   115    10038.9689    77    11301.0000     9851.6922  1549404   12.82%
    125   117    10260.6154    33    11301.0000     9851.6922  1564505   12.82%
    127   119    10059.2374    61    11301.0000     9851.6922  1583061   12.82%
    131   123    10073.7081    63    11301.0000     9851.6922  1624392   12.82%
Elapsed time = 4075.69 sec. (1807773.57 ticks, tree = 1.72 MB, solutions = 17)
    135   127    10117.0492    58    11301.0000     9851.6922  1667721   12.82%
    167   145    11180.5635    18    11301.0000     9851.6922  1840176   12.82%
    168   146    10317.2823    18    11301.0000     9851.6922  1848231   12.82%
    171   147    10995.3986    27    11301.0000     9851.6922  1854816   12.82%
    174   150    10099.5754    50    11301.0000     9851.6922  1868169   12.82%
    175   151    11245.7651    26    11301.0000     9851.6922  1879391   12.82%
    179   155    10995.7240    26    11301.0000     9851.6922  1890214   12.82%
    183   159    10995.8544    26    11301.0000     9851.6922  1891979   12.82%
    187   163    11114.5547    22    11301.0000     9851.6922  1915529   12.82%
    190   166    10203.1592    43    11301.0000     9851.6922  1949672   12.82%
Elapsed time = 4614.74 sec. (1959097.89 ticks, tree = 5.44 MB, solutions = 17)
    194   168    10109.5253    60    11301.0000     9851.6922  1959826   12.82%
    198   172    10186.2207    39    11301.0000     9851.6922  1989657   12.82%
*   202+  174                        10950.0000     9851.6922            10.03%
    202   176    10208.8059    49    10950.0000     9851.6922  2004828   10.03%
    206   180    10249.2942    26    10950.0000     9851.6922  2014518   10.03%
    210   184    10249.6474    25    10950.0000     9851.6922  2037489   10.03%
    230   202    11056.1405    33    10950.0000     9851.6922  2116286   10.03%
    233   203    10354.8681    18    10950.0000     9851.6922  2120823   10.03%
    334   205     9998.0296    83    10950.0000     9851.6922  2201792   10.03%
    335   136    10809.7404    16    10950.0000     9858.2353  2208578    9.97%
    337   138    10903.8523    28    10950.0000     9858.2353  2219650    9.97%
Elapsed time = 4988.15 sec. (2080666.87 ticks, tree = 5.59 MB, solutions = 19)
    340   141    10327.9227    71    10950.0000     9858.2353  2239270    9.97%
    346   147     9864.3115   114    10950.0000     9858.2353  2257836    9.97%
    350   151    10162.2286   115    10950.0000     9858.2353  2276739    9.97%
    354   155     9866.3005   119    10950.0000     9858.2353  2311246    9.97%
    358   159    10037.3586    93    10950.0000     9858.2353  2336912    9.97%
    403   204    10363.6349    19    10950.0000     9858.2353  2441563    9.97%
    404   205    10246.8582    72    10950.0000     9858.2353  2459992    9.97%
    412   213     9999.3562    85    10950.0000     9858.2353  2480977    9.97%
    414   215    10054.2519   103    10950.0000     9858.2353  2508155    9.97%
    416   217    10243.3789    63    10950.0000     9858.2353  2524305    9.97%
Elapsed time = 5668.95 sec. (2287544.21 ticks, tree = 21.96 MB, solutions = 19)
    422   223    10000.3561   105    10950.0000     9858.2353  2562157    9.97%
    426   227     9868.3669   102    10950.0000     9858.2353  2588831    9.97%
    430   231     9868.3834   102    10950.0000     9858.2353  2596543    9.97%
    434   235    10016.9417   106    10950.0000     9858.2353  2632056    9.97%
    469   270    10716.2144    18    10950.0000     9858.2353  2749041    9.97%
    471   272    10302.7668    66    10950.0000     9858.2353  2760258    9.97%
    475   276    10254.9217    63    10950.0000     9858.2353  2768326    9.97%
    477   278    10047.2090   106    10950.0000     9858.2353  2793736    9.97%
    479   280    10469.6581    65    10950.0000     9858.2353  2811687    9.97%
    483   284    10255.7736    65    10950.0000     9858.2353  2826286    9.97%
Elapsed time = 6220.30 sec. (2447763.84 ticks, tree = 36.81 MB, solutions = 19)
    485   286     9890.2353    92    10950.0000     9858.2353  2841519    9.97%
    487   288    10491.0414    49    10950.0000     9858.2353  2865829    9.97%
    491   292    10257.8904    68    10950.0000     9858.2353  2871656    9.97%
    493   294    10178.4030    96    10950.0000     9858.2353  2917403    9.97%
    558   359    10918.1325    12    10950.0000     9858.2353  3106403    9.97%
    561   362    10614.1907    52    10950.0000     9858.2353  3121339    9.97%
    563   364    10462.8519    82    10950.0000     9858.2353  3145683    9.97%
    567   366    10463.0685    84    10950.0000     9858.2353  3155676    9.97%
*   666+  453                        10949.0000     9858.2353             9.96%
*   666+  451                        10928.0000     9858.2353             9.79%
    710   465    10720.9671    14    10928.0000     9858.2353  3435965    9.79%

Implied bound cuts applied:  409
Flow cuts applied:  4712
Mixed integer rounding cuts applied:  1051
Flow path cuts applied:  35
Gomory fractional cuts applied:  1

Root node processing (before b&c):
  Real time             = 1853.15 sec. (1048783.67 ticks)
Parallel b&c, 4 threads:
  Real time             = 5346.89 sec. (1688993.97 ticks)
  Sync time (average)   =  381.39 sec.
  Wait time (average)   =  381.47 sec.
                          ------------
Total (root+branch&cut) = 7200.04 sec. (2737777.65 ticks)
We use intensification finding a better solution: 10928.0
================ Solution ================
BAP terminated with objective : 10928
Total Number of iterations: 82
Total Number of processed nodes: 4
Total Time spent on master problems: 2453095 Total time spent on pricing problems: 18160
Best bound : 8834.920000000006
[4, 26, 58, 78, 83, 86, 101, 160, 195, 210, 294, 329, 374, 406, 429, 487, 517, 536, 562, 570, 586, 609, 651, 688, 693, 731, 748, 771, 795, 802, 812, 838, 845, 861, 874, 889, 953, 1020, 1043, 1078, 1087, 1113, 1154, 1162, 1169, 1175, 1182, 1190, 1206, 1238, 1263, 1275, 1302, 1304, 1310, 1311, 1339, 1412, 1426, 1434, 1449, 1486, 1499]
The number of service edges used= 63

Solution is optimal: false
Columns (only non-zero columns are returned):
artificial: false edgeIndexset: [210, 1206, 26, 651, 795, 731, 1630] start node= 1 start time= 0 capacity type= 2 ifChargeSet: [1630]
(1,0)->(7,6)->(4,10)->charge(4,11)->(5,15)->(4,21)->(0,26)->(1,0):1.0
Fix cost= 300 variable cost= 126

artificial: false edgeIndexset: [609, 693, 1622, 294, 1190, 58, 1275] start node= 7 start time= 20 capacity type= 1 ifChargeSet: [1622]
(4,2)->charge(4,3)->(3,9)->(8,15)->(7,20)->(2,24)->(0,28)->(4,2):1.0
Fix cost= 110 variable cost= 126

artificial: false edgeIndexset: [1731, 86, 406, 1162, 1020, 845, 1182] start node= 7 start time= 12 capacity type= 1 ifChargeSet: [1731]
(6,0)->(5,5)->(7,12)->(2,16)->(7,21)->charge(7,22)->(0,26)->(6,0):1.0
Fix cost= 110 variable cost= 126

artificial: false edgeIndexset: [195, 1701, 1702, 487, 329, 953, 1596] start node= 6 start time= 23 capacity type= 0 ifChargeSet: [1596]
(3,6)->charge(3,7)->(1,15)->(6,21)->(6,22)->(6,23)->(2,29)->(3,6):1.0
Fix cost= 100 variable cost= 118

artificial: false edgeIndexset: [562, 1426, 1302, 1611, 812, 748, 1087] start node= 8 start time= 12 capacity type= 1 ifChargeSet: [1611]
(5,2)->(6,7)->(8,12)->(9,16)->(3,21)->charge(3,22)->(4,28)->(5,2):1.0
Fix cost= 120 variable cost= 126

artificial: false edgeIndexset: [1154, 1043, 838, 1702, 1449, 1113, 1723, 78] start node= 7 start time= 13 capacity type= 1 ifChargeSet: [1702]
(6,3)->(9,9)->(7,13)->(7,14)->(0,18)->(6,22)->charge(6,23)->(5,28)->(6,3):1.0
Fix cost= 110 variable cost= 122

artificial: false edgeIndexset: [83, 1078, 1175, 1304, 1753, 1707, 1339, 1788, 429] start node= 7 start time= 5 capacity type= 1 ifChargeSet: [1753]
(7,5)->(2,9)->(8,13)->charge(8,14)->(9,18)->(9,19)->(0,23)->(6,27)->(6,28)->(7,5):1.0
Fix cost= 110 variable cost= 118

artificial: false edgeIndexset: [1169, 1538, 1539, 1540, 4, 101, 1670, 1738, 586, 861, 1503] start node= 7 start time= 29 capacity type= 1 ifChargeSet: [1503]
(0,3)->charge(0,4)->(1,8)->(1,9)->(1,10)->(1,11)->(3,16)->(5,20)->(5,21)->(7,28)->(7,29)->(0,3):1.0
Fix cost= 110 variable cost= 106

artificial: false edgeIndexset: [1668, 1412, 1797, 517, 1798, 374, 1799, 889, 1770, 1771] start node= 9 start time= 2 capacity type= 1 ifChargeSet: [1668]
(9,0)->(9,1)->(9,2)->(3,7)->(2,14)->(5,18)->charge(5,19)->(9,27)->(9,28)->(9,29)->(9,0):1.0
Fix cost= 130 variable cost= 106

artificial: false edgeIndexset: [1619, 1782, 1783, 1784, 1785, 874, 570, 1434, 1486, 1310] start node= 8 start time= 20 capacity type= 1 ifChargeSet: [1619]
(3,0)->(5,4)->(9,12)->(9,13)->(9,14)->(9,15)->(9,16)->(8,20)->(9,24)->(3,29)->charge(3,0):1.0
Fix cost= 120 variable cost= 110

artificial: false edgeIndexset: [160, 1536, 1537, 1665, 1538, 802, 1666, 1539, 1667, 1668, 1669, 1670, 1671, 688, 1535] start node= 5 start time= 15 capacity type= 0 ifChargeSet: []
(1,5)->(1,6)->(1,7)->(1,8)->(1,9)->(1,10)->(5,15)->(5,16)->(5,17)->(5,18)->(5,19)->(5,20)->(5,21)->(5,22)->(4,28)->(1,5):1.0
Fix cost= 75 variable cost= 72

artificial: false edgeIndexset: [1568, 1569, 1570, 1571, 771, 1668, 1572, 1669, 1573, 1670, 374, 536, 1563, 1564, 1565, 1566, 1567] start node= 5 start time= 20 capacity type= 0 ifChargeSet: []
(2,3)->(2,4)->(2,5)->(2,6)->(2,7)->(2,8)->(2,9)->(2,10)->(2,11)->(2,12)->(2,13)->(2,14)->(5,18)->(5,19)->(5,20)->(5,21)->(3,26)->(2,3):1.0
Fix cost= 75 variable cost= 64

artificial: false edgeIndexset: [1760, 1795, 1796, 1797, 1798, 1263, 1238, 1754, 1755, 1499, 1756, 1757, 1758, 1759, 1311] start node= 8 start time= 21 capacity type= 1 ifChargeSet: []
(8,3)->(7,8)->(8,14)->(8,15)->(8,16)->(8,17)->(8,18)->(8,19)->(8,20)->(8,21)->(9,25)->(9,26)->(9,27)->(9,28)->(9,29)->(8,3):1.0
Fix cost= 120 variable cost= 76

fix cost+variable cost+commodity cost= 1590+1396+7942.0=10928.0

vehicle dowork= 15820 commodity dowork= 7942.0
no load ratio= 0.4979772439949431

Total vehicles used= 13

vehicleCoverServiceEdge information:
{1154=1, 771=1, 4=1, 1412=1, 517=1, 1162=1, 651=1, 1169=1, 1426=1, 1043=1, 406=1, 1302=1, 1175=1, 1304=1, 536=1, 26=1, 1434=1, 795=1, 1182=1, 1310=1, 1311=1, 160=1, 802=1, 294=1, 1190=1, 1449=1, 812=1, 429=1, 688=1, 562=1, 693=1, 1206=1, 1078=1, 953=1, 58=1, 570=1, 1339=1, 1087=1, 195=1, 838=1, 329=1, 586=1, 845=1, 78=1, 1486=1, 210=1, 83=1, 86=1, 1238=1, 1113=1, 731=1, 1499=1, 861=1, 609=1, 101=1, 487=1, 874=1, 748=1, 1263=1, 374=2, 889=1, 1275=1, 1020=1}

commodityFlowIntoTerminal information:
0 0 0 30 0 0 0 0 0 0 0 0 0 0 0 0 0 0 50 0 0 0 0 50 0 0 46 0 43 0 
96 0 0 0 0 20 0 0 30 0 0 0 0 0 0 18 0 0 0 0 0 0 0 0 0 0 0 0 0 0 
0 0 0 15 0 0 0 0 0 14 0 0 0 0 10 0 28 0 0 0 0 0 0 0 47 0 0 0 0 14 
0 0 0 0 0 0 10 24 0 11 0 0 0 0 0 0 23 0 0 0 0 50 0 0 0 0 12 0 0 13 
0 0 14 0 0 0 0 0 0 0 7 0 0 0 0 0 0 0 0 0 0 29 0 0 0 0 0 0 15 0 
0 0 33 0 50 10 0 0 0 0 0 0 0 0 0 79 0 0 15 0 43 0 0 0 0 0 0 0 23 0 
0 0 0 33 0 0 0 15 0 0 0 0 0 0 0 0 0 0 0 0 0 12 27 0 0 0 0 23 0 0 
0 0 0 0 0 18 91 0 22 0 0 0 18 0 0 0 0 0 0 0 45 13 0 0 0 0 0 0 19 0 
0 0 0 0 0 0 0 0 0 0 0 0 9 15 34 50 0 0 0 0 18 0 0 0 0 0 0 0 0 0 
0 0 0 0 0 0 0 0 0 33 0 0 27 0 0 0 23 0 19 0 0 0 0 0 37 7 0 24 0 0 

vehicle pattern information:
[1, 0, 0, 0, 0, 0, 0, 1, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 1, 0, 0, 1, 0, 1, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 1, 0, 0, 0, 0, 0, 0, 0, 0, 0]
[0, 1, 0, 0, 0, 0, 0, 0, 0, 1, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 1, 0, 0, 1, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 1, 0, 0, 1, 0, 0, 0, 0, 0, 0, 0]
[0, 0, 1, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 1, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 1, 0, 0, 0, 0, 0, 1, 0, 0, 0, 1, 1, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0]
[0, 0, 0, 0, 0, 0, 1, 0, 0, 0, 1, 0, 0, 0, 0, 0, 1, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 1, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0]
[0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 1, 0, 0, 0, 0, 0, 1, 0, 0, 1, 0, 0, 0, 0, 0, 0, 0, 0, 1, 0, 0, 0, 0, 0, 0, 1, 0, 0, 0, 1, 0, 0]
[0, 0, 1, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 1, 0, 0, 0, 0, 0, 0, 1, 0, 0, 1, 1, 0, 0, 0, 0, 0, 0, 0, 0, 0, 1, 0]
[0, 0, 1, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 1, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 1, 0, 0, 0, 1, 0, 0, 0, 1, 1, 0, 0, 0, 0, 0]
[1, 0, 0, 1, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 1, 0, 0, 0, 0, 0, 0, 0, 0, 1, 0, 0, 0, 0, 0, 0, 0, 0, 0, 1, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0]
[0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 1, 0, 0, 0, 0, 1, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 1, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 1, 0, 0]
[0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 1, 0, 0, 0, 0, 0, 0, 0, 0, 0, 1, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 1, 0, 0, 0, 1, 0, 1]
[0, 0, 0, 0, 0, 1, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 1, 0, 0, 0, 1, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0]
[0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 1, 0, 0, 0, 0, 1, 0, 0, 0, 0, 0, 0, 0, 1, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0]
[0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 1, 1, 1, 0, 0, 0, 0, 0, 1]
x[0]:3,0->5,4= 10.0 4
x[0]:5,15->4,21= 10.0 6
x[0]:9,24->3,29= 10.0 5
total cost= 150.0

x[1]:5,21->3,26= 12.0 5
total cost= 60.0

x[2]:6,28->7,5= 12.0 7
total cost= 84.0

x[3]:7,20->2,24= 10.0 4
x[3]:8,15->7,20= 10.0 5
total cost= 90.0

x[4]:3,16->5,20= 12.0 4
x[4]:9,2->3,7= 12.0 5
total cost= 108.0

x[5]:8,21->9,25= 7.0 4
x[5]:9,2->3,7= 7.0 5
x[5]:3,16->5,20= 7.0 4
total cost= 91.0

x[6]:0,26->1,0= 5.000000000000001 4
x[6]:4,21->0,26= 5.000000000000001 5
x[6]:4,28->1,5= 7.999999999999998 7
total cost= 101.0

x[7]:2,16->7,21= 13.0 5
total cost= 65.0

x[8]:7,20->2,24= 8.0 4
x[8]:5,5->7,12= 8.0 7
total cost= 88.0

x[9]:8,20->9,24= 7.0 4
x[9]:3,9->8,15= 7.0 6
total cost= 70.0

x[10]:4,11->5,15= 13.0 4
total cost= 52.0

x[11]:9,16->8,20= 13.0 4
total cost= 52.0

x[12]:9,2->3,7= 5.0 5
x[12]:3,7->1,15= 5.0 8
total cost= 65.0

x[13]:7,8->8,14= 6.0 6
x[13]:8,20->9,24= 6.0 4
total cost= 60.0

x[14]:1,11->3,16= 1.0 5
x[14]:1,10->5,15= 10.0 5
x[14]:3,16->5,20= 1.0 4
total cost= 59.0

x[15]:5,22->4,28= 7.0 6
total cost= 42.0

x[16]:3,9->8,15= 12.0 6
total cost= 72.0

x[17]:0,26->1,0= 12.0 4
total cost= 48.0

x[18]:4,21->0,26= 6.0 5
total cost= 30.0

x[19]:4,21->0,26= 10.0 5
x[19]:5,15->4,21= 10.0 6
total cost= 110.0

x[20]:7,8->8,14= 12.0 6
total cost= 72.0

x[21]:2,29->3,6= 10.0 7
x[21]:7,20->2,24= 10.0 4
total cost= 110.0

x[22]:0,4->1,8= 9.0 4
x[22]:2,24->0,28= 9.0 4
total cost= 72.0

x[23]:0,26->1,0= 6.0 4
total cost= 24.0

x[24]:0,26->1,0= 9.0 4
x[24]:4,21->0,26= 9.0 5
x[24]:5,15->4,21= 9.0 6
total cost= 135.0

x[25]:0,28->4,2= 6.0 4
x[25]:4,3->3,9= 6.0 6
total cost= 60.0

x[26]:7,20->2,24= 14.0 4
x[26]:8,15->7,20= 14.0 5
total cost= 126.0

x[27]:8,12->9,16= 8.0 4
x[27]:8,20->9,24= 3.0 4
x[27]:9,16->3,21= 8.0 5
x[27]:9,24->3,29= 3.0 5
total cost= 99.0

x[28]:6,23->5,28= 12.0 5
total cost= 60.0

x[29]:9,16->8,20= 5.0 4
total cost= 20.0

x[30]:5,19->9,27= 11.0 8
total cost= 88.0

x[31]:4,11->5,15= 12.0 4
total cost= 48.0

x[32]:8,20->9,24= 14.0 4
x[32]:3,9->8,15= 14.0 6
total cost= 140.0

x[33]:0,26->1,0= 15.0 4
x[33]:9,19->0,23= 15.0 4
total cost= 120.0

x[34]:0,18->6,22= 14.0 4
x[34]:6,23->2,29= 14.0 6
total cost= 140.0

x[35]:6,3->9,9= 13.0 6
x[35]:9,19->0,23= 13.0 4
total cost= 130.0

x[36]:8,14->9,18= 9.0 4
total cost= 36.0

x[37]:0,26->1,0= 13.0 4
x[37]:7,14->0,18= 12.0 4
x[37]:7,22->0,26= 1.0 4
x[37]:8,3->7,8= 12.0 5
x[37]:8,15->7,20= 1.0 5
total cost= 169.0

x[38]:0,4->1,8= 12.0 4
x[38]:1,11->3,16= 12.0 5
total cost= 108.0

x[39]:7,29->0,3= 12.0 4
total cost= 48.0

x[40]:0,26->1,0= 13.0 4
x[40]:1,0->7,6= 13.0 6
total cost= 130.0

x[41]:9,19->0,23= 14.0 4
total cost= 56.0

x[42]:7,12->2,16= 13.0 4
x[42]:1,0->7,6= 13.0 6
total cost= 130.0

x[43]:5,28->6,3= 13.0 5
total cost= 65.0

x[44]:3,26->2,3= 5.0 7
total cost= 35.0

x[45]:0,18->6,22= 13.0 4
x[45]:7,14->0,18= 13.0 4
total cost= 104.0

x[46]:1,0->7,6= 15.0 6
x[46]:7,14->0,18= 15.0 4
total cost= 150.0

x[47]:6,0->5,5= 10.0 5
total cost= 50.0

x[48]:1,0->7,6= 7.0 6
x[48]:7,6->4,10= 7.0 4
total cost= 70.0

x[49]:2,24->0,28= 15.0 4
total cost= 60.0

x[50]:0,23->6,27= 14.0 4
total cost= 56.0

x[51]:0,23->6,27= 9.0 4
x[51]:6,3->9,9= 9.0 6
total cost= 90.0

x[52]:3,22->4,28= 8.0 6
total cost= 48.0

x[53]:3,0->5,4= 6.0 4
x[53]:3,16->5,20= 3.0 4
total cost= 36.0

x[54]:4,28->5,2= 10.0 4
x[54]:5,5->7,12= 10.0 7
total cost= 110.0

x[55]:8,14->9,18= 5.0 4
x[55]:2,9->8,13= 5.0 4
total cost= 40.0

x[56]:6,3->9,9= 11.0 6
total cost= 66.0

x[57]:5,28->6,3= 12.0 5
total cost= 60.0

x[58]:0,26->1,0= 8.0 4
x[58]:1,0->7,6= 8.0 6
total cost= 80.0

x[59]:5,4->9,12= 9.0 8
total cost= 72.0

x[60]:4,28->5,2= 15.0 4
x[60]:5,2->6,7= 15.0 5
total cost= 135.0

x[61]:0,26->1,0= 9.0 4
x[61]:6,7->8,12= 9.0 5
x[61]:7,22->0,26= 9.0 4
x[61]:8,15->7,20= 9.0 5
total cost= 162.0

x[62]:1,0->7,6= 11.0 6
x[62]:7,8->8,14= 11.0 6
total cost= 132.0

x[63]:1,10->5,15= 10.0 5
total cost= 50.0

x[64]:9,16->3,21= 14.0 5
total cost= 70.0

x[65]:7,8->8,14= 5.0 6
x[65]:8,14->9,18= 5.0 4
total cost= 50.0

x[66]:7,12->2,16= 15.0 4
x[66]:1,0->7,6= 15.0 6
total cost= 150.0

x[67]:7,20->2,24= 5.0 4
x[67]:8,15->7,20= 5.0 5
x[67]:3,9->8,15= 5.0 6
x[67]:4,3->3,9= 5.0 6
total cost= 105.0

x[68]:1,15->6,21= 12.0 6
total cost= 72.0

x[69]:1,0->7,6= 9.0 6
total cost= 54.0

x[70]:4,28->5,2= 8.0 4
x[70]:5,4->9,12= 8.0 8
total cost= 96.0

x[71]:3,16->5,20= 15.0 4
total cost= 60.0

x[72]:2,24->0,28= 5.0 4
total cost= 20.0

x[73]:0,4->1,8= 9.0 4
x[73]:2,24->0,28= 9.0 4
total cost= 72.0

x[74]:6,28->7,5= 6.0 7
total cost= 42.0

x[75]:8,20->9,24= 7.0 4
x[75]:3,0->5,4= 7.0 4
x[75]:3,9->8,15= 7.0 6
x[75]:5,19->9,27= 7.0 8
total cost= 154.0

x[76]:4,28->1,5= 12.0 7
total cost= 84.0

x[77]:4,11->5,15= 15.0 4
total cost= 60.0

x[78]:7,29->0,3= 7.0 4
total cost= 28.0

x[79]:8,12->9,16= 6.0 4
x[79]:9,16->3,21= 6.0 5
total cost= 54.0

x[80]:5,28->6,3= 8.0 5
total cost= 40.0

x[81]:1,11->3,16= 10.0 5
x[81]:3,26->2,3= 10.0 7
total cost= 120.0

x[82]:3,16->5,20= 5.0 4
x[82]:5,21->7,28= 5.0 7
total cost= 55.0

x[83]:7,5->2,9= 14.0 4
x[83]:5,21->7,28= 14.0 7
total cost= 154.0

x[84]:4,11->5,15= 13.0 4
total cost= 52.0

x[85]:2,24->0,28= 5.0 4
x[85]:3,7->2,14= 5.0 7
total cost= 55.0

x[86]:3,7->1,15= 13.0 8
total cost= 104.0

x[87]:3,0->5,4= 8.0 4
x[87]:9,16->3,21= 8.0 5
total cost= 72.0

x[88]:3,0->5,4= 10.0 4
x[88]:5,4->9,12= 10.0 8
total cost= 120.0

x[89]:0,28->4,2= 8.0 4
x[89]:9,19->0,23= 8.0 4
total cost= 64.0

x[90]:8,12->9,16= 9.0 4
x[90]:9,16->3,21= 9.0 5
x[90]:3,0->5,4= 9.0 4
total cost= 117.0

x[91]:0,26->1,0= 6.0 4
x[91]:7,22->0,26= 6.0 4
x[91]:8,15->7,20= 6.0 5
total cost= 78.0

x[92]:6,23->5,28= 11.0 5
total cost= 55.0

x[93]:2,14->5,18= 15.0 4
total cost= 60.0

x[94]:7,29->0,3= 11.0 4
total cost= 44.0

x[95]:9,16->3,21= 5.0 5
x[95]:3,7->2,14= 5.0 7
total cost= 60.0

x[96]:7,14->0,18= 10.0 4
x[96]:8,3->7,8= 10.0 5
total cost= 90.0

x[97]:4,11->5,15= 6.0 4
x[97]:5,19->9,27= 6.0 8
total cost= 72.0

x[98]:2,9->8,13= 10.0 4
total cost= 40.0

x[99]:3,9->8,15= 5.0 6
total cost= 30.0

Total time= 9675550

Sovle for test11_10_40_30_200B.txt
Colmun limit=1000
number of service arcs=1200
number of holding arcs=300

root node bound= 59029.14000000004
Before intensification, we have 22557 columns
After pick up:
==================Intensification===================
We add 1000 columns to cplex.
Tried aggregator 2 times.
MIP Presolve eliminated 38996 rows and 15501 columns.
Aggregator did 5121 substitutions.
Reduced MIP has 17713 rows, 55510 columns, and 173766 nonzeros.
Reduced MIP has 882 binaries, 112 generals, 0 SOSs, and 0 indicators.
Presolve time = 0.21 sec. (121.25 ticks)
Probing fixed 0 vars, tightened 17 bounds.
Probing time = 0.13 sec. (4.76 ticks)
Tried aggregator 1 time.
Reduced MIP has 17713 rows, 55510 columns, and 173766 nonzeros.
Reduced MIP has 882 binaries, 112 generals, 0 SOSs, and 0 indicators.
Presolve time = 0.14 sec. (64.91 ticks)
Probing time = 0.11 sec. (4.84 ticks)
Clique table members: 174.
MIP emphasis: balance optimality and feasibility.
MIP search method: dynamic search.
Parallel mode: deterministic, using up to 4 threads.
Root relaxation solution time = 11.86 sec. (3261.78 ticks)

        Nodes                                         Cuts/
   Node  Left     Objective  IInf  Best Integer    Best Bound    ItCnt     Gap

      0     0    59496.3462    73                  59496.3462    23014         
*     0+    0                        96209.0000    59496.3462            38.16%
      0     0    59656.2132    90    96209.0000    Cuts: 1172    30683   37.99%
      0     0    59763.3845    94    96209.0000    Cuts: 1236    39247   37.88%
      0     0    59810.9011    90    96209.0000    Cuts: 1271    45310   37.83%
*     0+    0                        67386.0000    59810.9011            11.24%
      0     0    59841.9492    94    67386.0000    Cuts: 1229    50601   11.20%
      0     0    59880.2671    94    67386.0000    Cuts: 1037    56020   11.14%
      0     0    59920.9490    89    67386.0000    Cuts: 1064    62359   11.08%
      0     0    59965.6647    98    67386.0000    Cuts: 1095    69537   11.01%
      0     0    59987.3217   102    67386.0000    Cuts: 1046    73675   10.98%
      0     0    60004.8745    89    67386.0000    Cuts: 1000    78539   10.95%
      0     0    60026.1722   101    67386.0000     Cuts: 841    82475   10.92%
      0     0    60036.7647    92    67386.0000     Cuts: 997    88050   10.91%
      0     0    60043.6190    89    67386.0000     Cuts: 872    93275   10.90%
      0     0    60047.2579    85    67386.0000     Cuts: 901    95980   10.89%
Heuristic still looking.
Heuristic still looking.
Heuristic still looking.
      0     2    60047.2579    85    67386.0000    60047.2579    95980   10.89%
Elapsed time = 285.85 sec. (151586.19 ticks, tree = 0.00 MB, solutions = 2)
      1     3    60117.8072    82    67386.0000    60047.2579   121948   10.89%
      2     4    60053.6645    77    67386.0000    60047.2579   129550   10.89%
      3     5    60055.4167    89    67386.0000    60053.6777   132166   10.88%
*     4+    4                        63804.0000    60053.6777             5.88%
*     4+    4                        63779.0000    60053.6777             5.84%
*     4+    4                        63281.0000    60053.6777             5.10%
      4     6    60120.2132    80    63281.0000    60053.6777   134994    5.10%
      5     7    60413.6835    90    63281.0000    60053.6777   152066    5.10%
      8    10    60421.5959    91    63281.0000    60053.6777   175780    5.10%
      9    11    60157.8372    75    63281.0000    60053.6777   192754    5.10%
     10    12    60474.8253    89    63281.0000    60053.6777   205531    5.10%
     11    13    60098.5947    85    63281.0000    60055.4174   272545    5.10%
     15    17    60059.8851    78    63281.0000    60055.4174   511278    5.10%
Elapsed time = 550.41 sec. (266042.46 ticks, tree = 0.00 MB, solutions = 7)
     17    19    60443.0054    92    63281.0000    60055.4174   563914    5.10%
     19    21    60059.8851    79    63281.0000    60059.8851   600350    5.09%
     21    23    60473.2279    90    63281.0000    60059.8851   621872    5.09%
     23    25    60081.9405    71    63281.0000    60059.8851   637280    5.09%
     25    27    60451.9045   101    63281.0000    60059.8851   642419    5.09%
     27    29    60111.4042    85    63281.0000    60059.8851   667587    5.09%
     32    34    60091.9114    57    63281.0000    60059.8851   704380    5.09%
     36    38    60092.0640    59    63281.0000    60059.8851   715790    5.09%
     40    42    60105.6948    73    63281.0000    60059.8851   725235    5.09%
     44    46    60092.3015    60    63281.0000    60059.8851   737133    5.09%
Elapsed time = 737.81 sec. (321967.42 ticks, tree = 0.00 MB, solutions = 7)
     48    50    60097.1994    61    63281.0000    60059.8851   757438    5.09%
     51    53    60452.9988    62    63281.0000    60059.8851   793036    5.09%
     55    57    60320.6052    71    63281.0000    60059.8851   800427    5.09%
     56    58    60235.5669    80    63281.0000    60059.8851   836971    5.09%
     78    80    60096.1316    70    63281.0000    60059.8851   880834    5.09%
     82    84    60118.9712    78    63281.0000    60059.8851   893456    5.09%
     84    86    60624.3601    62    63281.0000    60059.8851   904425    5.09%
     86    88    60118.3047    78    63281.0000    60059.8851   912444    5.09%
     90    92    60161.7588    74    63281.0000    60059.8851   925771    5.09%
    132   134    60532.1666    29    63281.0000    60059.8851  1036344    5.09%
Elapsed time = 1028.89 sec. (414087.46 ticks, tree = 0.00 MB, solutions = 7)
    135   137    60170.1033    83    63281.0000    60059.8851  1043368    5.09%
    137   139    61187.1912    43    63281.0000    60059.8851  1052705    5.09%
    139   141    60225.5103    89    63281.0000    60059.8851  1064149    5.09%
    143   145    60179.6569    79    63281.0000    60059.8851  1086597    5.09%
    146   148    60867.1783    42    63281.0000    60059.8851  1096707    5.09%
    149   151    60863.7573    52    63281.0000    60059.8851  1102367    5.09%
    153   155    61098.6836    47    63281.0000    60059.8851  1113099    5.09%
*   160+  160                        62546.0000    60059.8851             3.97%
    188   190    60421.2432    71    62546.0000    60059.8851  1184381    3.97%
    196   198    60368.7211    62    62546.0000    60059.8851  1201292    3.97%
    200   202    60374.7484    66    62546.0000    60059.8851  1208887    3.97%
Elapsed time = 1253.98 sec. (476243.28 ticks, tree = 21.91 MB, solutions = 8)
    201   203    60845.0202    27    62546.0000    60059.8851  1213458    3.97%
    204   206    60384.2305    74    62546.0000    60059.8851  1219258    3.97%
    208   210    60488.3208    45    62546.0000    60059.8851  1231441    3.97%
    213   215    60736.6589    33    62546.0000    60059.8851  1241856    3.97%
    216   218    60773.6105    53    62546.0000    60059.8851  1257240    3.97%
    220   222    60524.7005    51    62546.0000    60059.8851  1270702    3.97%
    224   226    60517.3474    49    62546.0000    60059.8851  1282153    3.97%
    228   230    60530.8119    54    62546.0000    60059.8851  1288139    3.97%
    230   232    60998.1996    50    62546.0000    60059.8851  1290594    3.97%
    234   236    61123.5042    39    62546.0000    60059.8851  1298346    3.97%
Elapsed time = 1396.59 sec. (514751.00 ticks, tree = 21.91 MB, solutions = 8)
    238   240    61135.3522    42    62546.0000    60059.8851  1304123    3.97%
    240   242    60770.2953    53    62546.0000    60059.8851  1313794    3.97%
    244   246    60561.8637    47    62546.0000    60059.8851  1322550    3.97%
    250   252    61573.5261    29    62546.0000    60059.8851  1328568    3.97%
    252   254    60709.7696    53    62546.0000    60059.8851  1334397    3.97%
*   263+  263                        61990.0000    60059.8851             3.11%
    295   297    60575.6654    44    61990.0000    60059.8851  1377995    3.11%
    299   301    60586.1759    44    61990.0000    60059.8851  1382499    3.11%
    303   305    60868.9710    35    61990.0000    60059.8851  1389334    3.11%
    307   309    60590.7129    49    61990.0000    60059.8851  1391889    3.11%
    311   313    60878.8328    38    61990.0000    60059.8851  1398417    3.11%
Elapsed time = 1486.87 sec. (542167.47 ticks, tree = 43.90 MB, solutions = 9)
    315   317    60608.6132    51    61990.0000    60059.8851  1402041    3.11%
    319   321    60878.9986    51    61990.0000    60059.8851  1412817    3.11%
    323   323    60608.6132    50    61990.0000    60059.8851  1414339    3.11%
    327   327    60616.8450    57    61990.0000    60059.8851  1418371    3.11%
    331   331    60629.7877    47    61990.0000    60059.8851  1420528    3.11%
    335   335    60657.2304    45    61990.0000    60059.8851  1424989    3.11%
    460   447    60199.4724    69    61990.0000    60059.8851  1513204    3.11%
*   474+  442                        61768.0000    60059.8851             2.77%
    505   456    60170.6182    71    61768.0000    60059.8851  1548486    2.77%
    507   432    60081.1926    64    61768.0000    60059.9265  1549966    2.77%
    508   433    60078.9437    73    61768.0000    60059.9265  1552873    2.77%
Elapsed time = 1734.19 sec. (615027.97 ticks, tree = 72.45 MB, solutions = 10)
    512   437    60081.0612    70    61768.0000    60059.9265  1562348    2.77%
    515   440    60090.9659    76    61768.0000    60059.9265  1579499    2.77%
    519   444    60097.8787    66    61768.0000    60059.9265  1586063    2.77%
    523   448    60104.7512    64    61768.0000    60059.9265  1600286    2.77%
    527   452    60253.4819    74    61768.0000    60059.9265  1634340    2.77%
    535   460    60108.6498    68    61768.0000    60059.9265  1669305    2.77%
    537   462    60291.4909    66    61768.0000    60059.9265  1674507    2.77%
    539   464    60132.4268    65    61768.0000    60059.9265  1684729    2.77%
    540   465    60167.5565    76    61768.0000    60059.9265  1694994    2.77%
    544   469    60118.9588    54    61768.0000    60059.9265  1705674    2.77%
Elapsed time = 1886.74 sec. (664988.64 ticks, tree = 77.02 MB, solutions = 10)
    547   472    60272.8055    76    61768.0000    60059.9265  1722293    2.77%
    551   476    60118.6474    57    61768.0000    60059.9265  1733328    2.77%
    555   480    60122.1644    62    61768.0000    60059.9265  1746192    2.77%
    556   481    60131.6124    69    61768.0000    60059.9265  1750960    2.77%
    559   484    60275.0472    55    61768.0000    60059.9265  1766882    2.77%
    563   488    60133.3541    65    61768.0000    60059.9265  1779866    2.77%
    567   492    60222.4867    70    61768.0000    60059.9265  1796978    2.77%
    592   517    61136.1045    33    61768.0000    60059.9265  1854864    2.77%
    596   521    61475.9725    31    61768.0000    60059.9265  1868491    2.77%
    602   527    60300.3951    60    61768.0000    60059.9265  1887488    2.77%
Elapsed time = 2065.38 sec. (718146.80 ticks, tree = 89.99 MB, solutions = 10)
    606   531    60311.9657    55    61768.0000    60059.9265  1894438    2.77%
    610   535    60321.7178    63    61768.0000    60059.9265  1902488    2.77%
    614   539    60360.9464    56    61768.0000    60059.9265  1912182    2.77%
    626   551    60371.8170    57    61768.0000    60059.9265  1935707    2.77%
    630   555    60366.5433    56    61768.0000    60059.9265  1940747    2.77%
    634   559    60371.5412    59    61768.0000    60059.9265  1949376    2.77%
    638   563    60485.5607    64    61768.0000    60059.9265  1964260    2.77%
    695   618    61398.9537    24    61768.0000    60059.9265  2018817    2.77%
    700   623    60278.1820    44    61768.0000    60059.9265  2023175    2.77%
    702   625    60690.3923    49    61768.0000    60059.9265  2025885    2.77%
Elapsed time = 2358.49 sec. (796532.75 ticks, tree = 112.29 MB, solutions = 10)
    710   631    60702.8716    45    61768.0000    60059.9265  2044817    2.77%
    718   637    60753.4184    45    61768.0000    60059.9265  2059681    2.77%
    783   687    60083.1208    70    61768.0000    60059.9265  2170299    2.77%
    789   693    60594.7684    52    61768.0000    60059.9265  2178432    2.77%
    802   706    60917.9742    38    61768.0000    60059.9265  2201466    2.77%
    807   711    60176.3354    68    61768.0000    60059.9265  2222082    2.77%
    815   718    60418.1049    75    61768.0000    60059.9265  2247022    2.77%
    819   722    60143.6087    82    61768.0000    60059.9265  2264865    2.77%
*   820+  721                        61335.0000    60059.9265             2.08%
    827   728    60107.1956    77    61335.0000    60059.9265  2275686    2.08%
    831   732    60241.4140    58    61335.0000    60059.9265  2287507    2.08%
Elapsed time = 2601.78 sec. (866010.49 ticks, tree = 127.24 MB, solutions = 10)
    890   611    60778.0555    19    61335.0000    60059.9265  2356172    2.08%
    893   614    60639.4215    51    61335.0000    60059.9265  2364261    2.08%
    901   622    60592.2352    76    61335.0000    60059.9265  2393651    2.08%
    909   630    60265.3738    58    61335.0000    60059.9265  2408600    2.08%
    917   638    60294.2295    49    61335.0000    60059.9265  2423051    2.08%
    925   646    60398.2575    59    61335.0000    60059.9265  2437378    2.08%
    937   656    60318.8950    48    61335.0000    60059.9265  2457636    2.08%
    941   660    60426.4367    46    61335.0000    60059.9265  2462826    2.08%
   1078   739    60319.8954    48    61335.0000    60059.9265  2567928    2.08%
   1082   743    60398.5125    59    61335.0000    60059.9265  2579807    2.08%
Elapsed time = 2884.60 sec. (945518.82 ticks, tree = 133.46 MB, solutions = 12)
   1090   751    60461.0862    58    61335.0000    60059.9265  2602097    2.08%
   1103   764    61126.7136    16    61335.0000    60059.9265  2620138    2.08%
   1111   772    61180.8594    24    61335.0000    60059.9265  2640045    2.08%
   1119   780    61019.2181    17    61335.0000    60059.9265  2651924    2.08%
   1127   788    61222.2732    12    61335.0000    60059.9265  2664037    2.08%
   1128   789    60214.1419    80    61335.0000    60059.9265  2664941    2.08%
   1191   852    60474.1678    37    61335.0000    60059.9265  2752690    2.08%
   1200   861    61221.3854    20    61335.0000    60059.9265  2760984    2.08%
   1212   873    61006.1116    16    61335.0000    60059.9265  2777806    2.08%
   1228   889    61102.8582    18    61335.0000    60059.9265  2796353    2.08%
Elapsed time = 3152.13 sec. (1017781.67 ticks, tree = 157.60 MB, solutions = 12)
   1251   912    60579.1092    32    61335.0000    60059.9265  2817317    2.08%
   1266   925    60327.2168    76    61335.0000    60059.9265  2843855    2.08%
   1274   933    60340.6962    74    61335.0000    60059.9265  2855100    2.08%
   1283   942    60818.7970    26    61335.0000    60059.9265  2872556    2.08%
   1299   958    60684.5871    22    61335.0000    60059.9265  2886962    2.08%
   1303   962    60893.5458    37    61335.0000    60059.9265  2897032    2.08%
   1307   966    60812.7602    31    61335.0000    60059.9265  2907452    2.08%
   1315   974    61029.5630    36    61335.0000    60059.9265  2914784    2.08%
   1323   982    61052.9088    30    61335.0000    60059.9265  2926035    2.08%
   1445  1077    60150.2939    89    61335.0000    60059.9265  2978239    2.08%
Elapsed time = 3324.57 sec. (1067136.24 ticks, tree = 157.60 MB, solutions = 12)
*  1447+ 1077                        60864.0000    60067.4047             1.31%
*  1447+ 1077                        60857.0000    60067.4047             1.30%
*  1447+ 1077                        60851.0000    60067.4047             1.29%
   1447  1079    60069.1883    87    60851.0000    60067.4047  2983018    1.29%
   1455  1087    60075.1235    75    60851.0000    60067.4047  2994764    1.29%
   1467  1097    60083.3587    78    60851.0000    60067.4047  3013217    1.29%
   1483  1113    60085.3328    81    60851.0000    60067.4047  3025335    1.29%
   1495  1125    60085.5133    72    60851.0000    60067.4047  3030684    1.29%
   1499  1129    60088.6384    76    60851.0000    60067.4047  3035952    1.29%
   1507  1137    60102.3963    76    60851.0000    60067.4047  3045362    1.29%
   1523  1153    60113.4560    71    60851.0000    60067.4047  3055229    1.29%
   1547  1177    60119.4104    80    60851.0000    60067.4047  3064928    1.29%
   1699  1295    60321.8430    73    60851.0000    60067.4047  3152191    1.29%
Elapsed time = 3579.78 sec. (1138035.89 ticks, tree = 208.66 MB, solutions = 12)
   1734   830    60123.6675    73    60851.0000    60069.3555  3183730    1.28%
   1738   834    60168.0340    85    60851.0000    60069.3555  3196965    1.28%
   1758   854    60180.3116    72    60851.0000    60069.3555  3221415    1.28%
   1782   878    60189.0034    87    60851.0000    60069.3555  3230129    1.28%
   1794   890    60204.9778    72    60851.0000    60069.3555  3242894    1.28%
   1802   898    60213.1691    70    60851.0000    60069.3555  3248013    1.28%
   1822   918    60221.8458    75    60851.0000    60069.3555  3266246    1.28%
   1830   926    60290.5910    65    60851.0000    60069.3555  3273824    1.28%
   1874   967    60296.5471    63    60851.0000    60069.3555  3301160    1.28%
   1893   982    60104.3435    77    60851.0000    60069.3555  3319814    1.28%
Elapsed time = 3775.83 sec. (1191960.28 ticks, tree = 142.54 MB, solutions = 15)
   1897   985    60137.8653    79    60851.0000    60069.3555  3329984    1.28%
   1906   994    60094.8682    71    60851.0000    60069.3555  3347018    1.28%
   1914  1000    60097.8237    63    60851.0000    60069.3555  3359798    1.28%
   1930  1014    60294.8730    80    60851.0000    60069.3555  3411966    1.28%
   1953  1037    60200.7013    74    60851.0000    60073.7827  3436639    1.28%
   1959  1043    60254.1588    84    60851.0000    60073.7827  3445421    1.28%
   1965  1049    60245.7284    80    60851.0000    60073.7827  3456693    1.28%
   1973  1057    60215.4366    72    60851.0000    60073.7827  3465140    1.28%
   1977  1061    60279.6847    56    60851.0000    60073.7827  3476722    1.28%
   1989  1073    60412.4324    62    60851.0000    60073.7827  3493530    1.28%
Elapsed time = 3966.49 sec. (1250239.72 ticks, tree = 186.37 MB, solutions = 15)
   2001  1085    60318.3477    58    60851.0000    60073.7827  3510098    1.28%
   2005  1089    60318.5099    56    60851.0000    60073.7827  3510830    1.28%
   2017  1101    60538.3416    54    60851.0000    60073.7827  3520595    1.28%
   2025  1109    60583.2774    59    60851.0000    60073.7827  3532586    1.28%
   2162  1245    60379.1231    67    60851.0000    60073.7827  3626165    1.28%
   2170  1253    60386.2275    60    60851.0000    60073.7827  3633643    1.28%
   2178  1261    60539.5182    53    60851.0000    60073.7827  3641846    1.28%
   2186  1269    60830.0608    42    60851.0000    60073.7827  3651002    1.28%
   2214  1295    60635.8521    51    60851.0000    60073.7827  3667353    1.28%
   2246  1326    60587.2015    47    60851.0000    60073.7827  3681000    1.28%
Elapsed time = 4251.38 sec. (1329442.72 ticks, tree = 231.16 MB, solutions = 15)
   2250  1330    60763.1208    44    60851.0000    60073.7827  3693196    1.28%
   2266  1342    60588.7933    49    60851.0000    60073.7827  3702234    1.28%
   2270  1346    60717.5982    45    60851.0000    60073.7827  3715517    1.28%
   2286  1362    60725.1199    46    60851.0000    60073.7827  3735738    1.28%
   2294  1370    60640.1934    41    60851.0000    60073.7827  3742181    1.28%
   2330  1400    60661.6123    40    60851.0000    60073.7827  3768122    1.28%
   2350  1418    60702.5187    38    60851.0000    60073.7827  3784493    1.28%
   2374  1438    60754.5263    26    60851.0000    60073.7827  3797640    1.28%
   2398  1458    60762.0761    27    60851.0000    60073.7827  3816702    1.28%
   2469  1524    60189.1580   118    60851.0000    60189.1580  4046022    1.09%
Elapsed time = 5145.64 sec. (1709876.20 ticks, tree = 362.87 MB, solutions = 15)
   2471  1526    60189.2312   114    60851.0000    60189.1934  4047742    1.09%
   2472  1526    60333.8091    93    60851.0000    60189.1934  4063306    1.09%
   2474  1527    60379.5559    84    60851.0000    60189.1934  4072644    1.09%
   2475  1528    60189.3613   110    60851.0000    60189.2312  4075427    1.09%
   2477  1529    60379.6170    85    60851.0000    60189.2312  4076848    1.09%
   2478  1530    60508.5436    76    60851.0000    60189.2312  4098587    1.09%
   2482  1532    60356.3606    93    60851.0000    60189.3668  4182604    1.09%
   2486  1534    60349.1480    88    60851.0000    60189.3668  4255120    1.09%
   2490  1536    60321.0537    97    60851.0000    60189.7559  4311846    1.09%
   2494  1535    60355.1618    86    60851.0000    60189.7559  4357087    1.09%
Elapsed time = 5528.10 sec. (1869859.97 ticks, tree = 359.77 MB, solutions = 15)
   2496  1537    60198.5974   101    60851.0000    60189.7559  4375650    1.09%
   2497  1537    60467.5172    73    60851.0000    60189.7559  4388590    1.09%
   2500  1537    60203.7499   112    60851.0000    60189.7559  4395609    1.09%
   2504  1539    60199.6124    95    60851.0000    60189.7559  4414385    1.09%
   2510  1498    60336.0091    80    60851.0000    60189.7559  4440754    1.09%
   2515  1500    60200.3507    98    60851.0000    60195.6127  4457374    1.08%
   2519  1501    60200.6084    98    60851.0000    60195.6127  4472124    1.08%
   2522  1502    60344.1401    72    60851.0000    60195.6127  4487069    1.08%
   2524  1503    60374.9304    74    60851.0000    60195.6127  4508066    1.08%
   2526  1504    60358.4239    72    60851.0000    60195.6127  4519495    1.08%
Elapsed time = 5769.80 sec. (1943689.46 ticks, tree = 345.71 MB, solutions = 15)
   2531  1507    60234.3586    93    60851.0000    60195.6127  4545535    1.08%
   2535  1507    60683.7673    91    60851.0000    60195.6127  4609338    1.08%
   2540  1511    60441.9873    76    60851.0000    60195.6127  4615038    1.08%
   2547  1516    60384.8576    78    60851.0000    60195.6127  4632608    1.08%
   2553  1519    60659.5130    68    60851.0000    60195.6127  4648826    1.08%
   2559  1524    60509.8533    78    60851.0000    60195.6127  4670640    1.08%
   2569  1529    60550.0312    74    60851.0000    60195.6127  4703314    1.08%
   2576  1534    60375.6416    78    60851.0000    60195.6127  4722687    1.08%
   2579  1537    60224.8257    91    60851.0000    60195.6127  4734946    1.08%
   2580  1537    60413.3371    76    60851.0000    60195.6127  4743772    1.08%
Elapsed time = 6295.02 sec. (2105018.02 ticks, tree = 343.75 MB, solutions = 15)
   2619  1561    60597.5401    74    60851.0000    60195.6127  4886905    1.08%
   2622  1563    60443.4015    85    60851.0000    60195.6127  4932370    1.08%
   2626  1565    60278.5581    73    60851.0000    60195.6127  4949940    1.08%
   2634  1568    60286.2236    65    60851.0000    60195.6127  4978008    1.08%
   2642  1571    60286.9981    64    60851.0000    60195.6127  5009233    1.08%
   2646  1573    60292.4303    64    60851.0000    60195.6127  5031406    1.08%
   2653  1575    60428.5788    66    60851.0000    60195.6127  5037491    1.08%
   2658  1579    60296.0116    71    60851.0000    60195.6127  5056853    1.08%
   2661  1581    60468.3977    67    60851.0000    60195.6127  5063574    1.08%
   2665  1584    60663.6164    59    60851.0000    60195.6127  5080328    1.08%
Elapsed time = 6626.21 sec. (2200371.45 ticks, tree = 347.44 MB, solutions = 15)
   2673  1579    60470.5258    69    60851.0000    60195.6127  5084288    1.08%
   2689  1588    60478.2964    60    60851.0000    60195.6127  5117260    1.08%
   2701  1591    60519.2167    56    60851.0000    60195.6127  5139000    1.08%
   2705  1594    60471.9797    61    60851.0000    60195.6127  5159532    1.08%
   2709  1588    60542.1754    68    60851.0000    60195.6127  5171880    1.08%
   2723  1582    60353.2376    73    60851.0000    60195.6127  5230470    1.08%
   2728  1585    60435.3589    72    60851.0000    60195.6127  5240634    1.08%
   2736  1581    60651.5983    79    60851.0000    60195.6127  5271577    1.08%
   2759  1594    60315.3480    60    60851.0000    60195.6127  5296890    1.08%
   2763  1594    60699.7167    71    60851.0000    60195.6127  5320111    1.08%
Elapsed time = 6988.69 sec. (2301940.33 ticks, tree = 341.66 MB, solutions = 15)
   2776  1600    60493.6477    59    60851.0000    60195.6127  5371075    1.08%
   2796  1608    60689.5325    54    60851.0000    60195.6127  5414563    1.08%
   2804  1613    60481.5637    56    60851.0000    60195.6127  5429255    1.08%
   2812  1613    60750.8894    68    60851.0000    60195.6127  5458642    1.08%
   2828  1618    60752.8324    58    60851.0000    60195.6127  5468006    1.08%
   2844  1608    60760.8141    54    60851.0000    60195.6127  5483369    1.08%

Cover cuts applied:  4
Implied bound cuts applied:  180
Flow cuts applied:  1606
Mixed integer rounding cuts applied:  1127
Flow path cuts applied:  24
Lift and project cuts applied:  13
Gomory fractional cuts applied:  1

Root node processing (before b&c):
  Real time             =  285.80 sec. (151568.08 ticks)
Parallel b&c, 4 threads:
  Real time             = 6914.24 sec. (2212722.59 ticks)
  Sync time (average)   =  368.65 sec.
  Wait time (average)   =  368.81 sec.
                          ------------
Total (root+branch&cut) = 7200.03 sec. (2364290.67 ticks)
We use intensification finding a better solution: 60851.0
================ Solution ================
BAP terminated with objective : 60851
Total Number of iterations: 91
Total Number of processed nodes: 4
Total Time spent on master problems: 978211 Total time spent on pricing problems: 17092
Best bound : 59056.86999999998
[4, 21, 68, 102, 107, 120, 125, 156, 166, 171, 175, 183, 215, 219, 224, 232, 236, 238, 241, 245, 250, 256, 257, 265, 278, 285, 296, 329, 366, 382, 389, 391, 400, 423, 428, 430, 431, 438, 442, 444, 456, 469, 478, 482, 489, 495, 496, 497, 503, 510, 515, 518, 520, 527, 528, 534, 546, 557, 577, 582, 583, 586, 594, 595, 596, 608, 622, 623, 624, 629, 636, 644, 687, 705, 728, 732, 754, 771, 781, 782, 791, 797, 799, 806, 828, 838, 840, 841, 852, 856, 860, 862, 875, 882, 888, 891, 899, 914, 919, 923, 927, 931, 937, 938, 949, 962, 980, 983, 991, 998, 1003, 1012, 1016, 1023, 1034, 1046, 1052, 1061, 1070, 1078, 1079, 1081, 1087, 1152, 1178, 1188]
The number of service edges used= 126

Solution is optimal: false
Columns (only non-zero columns are returned):
artificial: false edgeIndexset: [1216, 4, 1079, 107, 219, 622] start node= 9 start time= 29 capacity type= 1 ifChargeSet: [1216]
(0,4)->(1,9)->(0,16)->charge(0,17)->(4,22)->(9,29)->(0,4):1.0
Fix cost= 130 variable cost= 126

artificial: false edgeIndexset: [224, 21, 456, 296, 1294, 1295] start node= 1 start time= 26 capacity type= 2 ifChargeSet: [1295]
(3,4)->(3,5)->charge(3,6)->(1,14)->(0,21)->(1,26)->(3,4):1.0
Fix cost= 300 variable cost= 122

artificial: false edgeIndexset: [102, 838, 636, 382, 1407, 527] start node= 4 start time= 17 capacity type= 2 ifChargeSet: [1407]
(5,6)->(0,12)->(4,17)->(1,22)->(6,27)->charge(6,28)->(5,6):1.0
Fix cost= 400 variable cost= 126

artificial: false edgeIndexset: [577, 852, 949, 534, 329, 1326] start node= 7 start time= 19 capacity type= 1 ifChargeSet: [1326]
(4,6)->charge(4,7)->(6,12)->(7,19)->(4,24)->(1,29)->(4,6):1.0
Fix cost= 110 variable cost= 126

artificial: false edgeIndexset: [241, 1267, 856, 923, 428, 1230] start node= 7 start time= 23 capacity type= 2 ifChargeSet: [1267]
(1,0)->(1,1)->(2,7)->charge(2,8)->(6,16)->(7,23)->(1,0):1.0
Fix cost= 450 variable cost= 122

artificial: false edgeIndexset: [1344, 595, 582, 840, 937, 797] start node= 7 start time= 7 capacity type= 1 ifChargeSet: [1344]
(6,0)->(7,7)->(4,12)->(6,17)->(4,24)->charge(4,25)->(6,0):1.0
Fix cost= 110 variable cost= 126

artificial: false edgeIndexset: [1234, 245, 1399, 860, 927, 431] start node= 1 start time= 4 capacity type= 2 ifChargeSet: [1399]
(1,4)->(1,5)->(2,11)->(6,19)->charge(6,20)->(7,27)->(1,4):1.0
Fix cost= 300 variable cost= 122

artificial: false edgeIndexset: [596, 1398, 583, 841, 938, 799] start node= 7 start time= 8 capacity type= 1 ifChargeSet: [1398]
(6,1)->(7,8)->(4,13)->(6,18)->charge(6,19)->(4,26)->(6,1):1.0
Fix cost= 110 variable cost= 126

artificial: false edgeIndexset: [1476, 629, 503, 1244, 285, 1087] start node= 4 start time= 29 capacity type= 1 ifChargeSet: [1244]
(9,6)->(9,7)->(1,14)->charge(1,15)->(3,23)->(4,29)->(9,6):1.0
Fix cost= 150 variable cost= 122

artificial: false edgeIndexset: [497, 278, 1081, 1306, 1470, 623] start node= 1 start time= 8 capacity type= 2 ifChargeSet: [1306]
(9,0)->(9,1)->(1,8)->(3,16)->charge(3,17)->(4,23)->(9,0):1.0
Fix cost= 300 variable cost= 122

artificial: false edgeIndexset: [771, 1078, 183, 1370, 1034, 1178] start node= 9 start time= 8 capacity type= 2 ifChargeSet: [1370]
(0,3)->(9,8)->(8,14)->(5,20)->charge(5,21)->(9,28)->(0,3):1.0
Fix cost= 350 variable cost= 126

artificial: false edgeIndexset: [1205, 469, 1257, 1003, 1452, 156, 238] start node= 8 start time= 13 capacity type= 1 ifChargeSet: [1257]
(0,5)->(0,6)->(8,12)->(8,13)->(3,19)->(1,27)->charge(1,28)->(0,5):1.0
Fix cost= 120 variable cost= 118

artificial: false edgeIndexset: [914, 1251, 728, 120, 232, 1357, 1229] start node= 1 start time= 21 capacity type= 2 ifChargeSet: [1229]
(0,0)->(5,7)->(5,8)->(7,14)->(1,21)->(1,22)->(0,29)->charge(0,0):1.0
Fix cost= 300 variable cost= 118

artificial: false edgeIndexset: [1203, 1428, 1204, 919, 732, 236, 125] start node= 7 start time= 19 capacity type= 1 ifChargeSet: [1204]
(0,3)->(0,4)->charge(0,5)->(5,12)->(7,18)->(7,19)->(1,26)->(0,3):1.0
Fix cost= 110 variable cost= 118

artificial: false edgeIndexset: [1061, 1462, 166, 1479, 391, 983, 1480] start node= 9 start time= 11 capacity type= 1 ifChargeSet: [1462]
(1,1)->(9,9)->(9,10)->(9,11)->(0,16)->(8,22)->charge(8,23)->(1,1):1.0
Fix cost= 130 variable cost= 118

artificial: false edgeIndexset: [400, 1488, 1441, 1489, 962, 1070, 175] start node= 9 start time= 18 capacity type= 1 ifChargeSet: [1441]
(8,1)->charge(8,2)->(1,10)->(9,18)->(9,19)->(9,20)->(0,25)->(8,1):1.0
Fix cost= 130 variable cost= 118

artificial: false edgeIndexset: [528, 1253, 1254, 791, 423, 265, 1261, 1262] start node= 1 start time= 23 capacity type= 2 ifChargeSet: [1262]
(2,1)->(2,2)->charge(2,3)->(6,11)->(4,18)->(1,23)->(1,24)->(1,25)->(2,1):1.0
Fix cost= 300 variable cost= 114

artificial: false edgeIndexset: [882, 1460, 1012, 1461, 366, 478, 1391] start node= 8 start time= 22 capacity type= 1 ifChargeSet: [1391]
(1,6)->(6,11)->charge(6,12)->(8,20)->(8,21)->(8,22)->(3,28)->(1,6):1.0
Fix cost= 120 variable cost= 118

artificial: false edgeIndexset: [257, 1329, 1283, 520, 444, 1245, 782, 1246] start node= 4 start time= 9 capacity type= 1 ifChargeSet: [1283]
(6,2)->(4,9)->(4,10)->(1,15)->(1,16)->(1,17)->(2,23)->charge(2,24)->(6,2):1.0
Fix cost= 150 variable cost= 114

artificial: false edgeIndexset: [256, 1380, 518, 442, 1243, 1244, 1245, 781] start node= 2 start time= 22 capacity type= 0 ifChargeSet: [1380]
(6,0)->charge(6,1)->(4,8)->(1,13)->(1,14)->(1,15)->(1,16)->(2,22)->(6,0):1.0
Fix cost= 100 variable cost= 114

artificial: false edgeIndexset: [515, 806, 438, 250, 1323, 1276, 1324, 1277] start node= 2 start time= 18 capacity type= 2 ifChargeSet: [1324]
(4,3)->(4,4)->charge(4,5)->(1,10)->(2,16)->(2,17)->(2,18)->(6,26)->(4,3):1.0
Fix cost= 600 variable cost= 114

artificial: false edgeIndexset: [705, 546, 1410, 931, 1364, 862, 1439] start node= 7 start time= 29 capacity type= 1 ifChargeSet: [1364]
(7,0)->(7,1)->(4,6)->(5,14)->charge(5,15)->(6,22)->(7,29)->(7,0):1.0
Fix cost= 110 variable cost= 118

artificial: false edgeIndexset: [1152, 754, 1046, 888, 1352, 1481, 1353] start node= 5 start time= 2 capacity type= 2 ifChargeSet: [1481]
(5,2)->(5,3)->(5,4)->(9,11)->charge(9,12)->(6,18)->(8,26)->(5,2):1.0
Fix cost= 350 variable cost= 118

artificial: false edgeIndexset: [1376, 1265, 1266, 1267, 1268, 1269, 828, 430, 687] start node= 5 start time= 26 capacity type= 2 ifChargeSet: [1269]
(2,5)->(2,6)->(2,7)->(2,8)->(2,9)->charge(2,10)->(6,18)->(5,26)->(5,27)->(2,5):1.0
Fix cost= 350 variable cost= 106

artificial: false edgeIndexset: [594, 899, 998, 1447, 1304, 1341, 1342, 495, 1343] start node= 4 start time= 22 capacity type= 1 ifChargeSet: [1304]
(8,7)->(8,8)->(3,14)->charge(3,15)->(4,21)->(4,22)->(4,23)->(4,24)->(6,29)->(8,7):1.0
Fix cost= 150 variable cost= 110

artificial: false edgeIndexset: [1440, 1297, 1298, 1335, 489, 586, 891, 1469, 991] start node= 8 start time= 0 capacity type= 1 ifChargeSet: [1298]
(8,0)->(8,1)->(3,7)->(3,8)->charge(3,9)->(4,15)->(4,16)->(6,21)->(8,29)->(8,0):1.0
Fix cost= 120 variable cost= 110

artificial: false edgeIndexset: [624, 496, 68, 1207, 1304, 1305, 1052, 1342, 1471, 1343] start node= 9 start time= 2 capacity type= 2 ifChargeSet: [1207]
(9,1)->(9,2)->(0,7)->charge(0,8)->(3,14)->(3,15)->(3,16)->(4,22)->(4,23)->(4,24)->(9,1):1.0
Fix cost= 350 variable cost= 106

artificial: false edgeIndexset: [608, 482, 1188, 1016, 1464, 1465, 1485, 1486, 1487] start node= 9 start time= 18 capacity type= 2 ifChargeSet: [1465]
(3,2)->(4,8)->(9,15)->(9,16)->(9,17)->(9,18)->(8,24)->(8,25)->charge(8,26)->(3,2):1.0
Fix cost= 350 variable cost= 110

artificial: false edgeIndexset: [1456, 1457, 1458, 1459, 980, 389, 1384, 1258, 875, 1453, 1454, 1455] start node= 8 start time= 20 capacity type= 1 ifChargeSet: [1258]
(6,4)->(6,5)->(8,13)->(8,14)->(8,15)->(8,16)->(8,17)->(8,18)->(8,19)->(8,20)->(1,28)->charge(1,29)->(6,4):1.0
Fix cost= 120 variable cost= 94

artificial: false edgeIndexset: [1376, 1377, 1378, 1379, 102, 1350, 1351, 1352, 1353, 1354, 1355, 557, 636, 1375] start node= 5 start time= 25 capacity type= 1 ifChargeSet: []
(5,0)->(5,1)->(5,2)->(5,3)->(5,4)->(5,5)->(5,6)->(0,12)->(4,17)->(5,25)->(5,26)->(5,27)->(5,28)->(5,29)->(5,0):1.0
Fix cost= 200 variable cost= 76

artificial: false edgeIndexset: [1344, 1345, 1346, 1347, 1348, 1349, 102, 215, 1337, 1338, 1339, 1340, 1341, 1342, 510, 1343] start node= 4 start time= 0 capacity type= 0 ifChargeSet: []
(4,0)->(1,5)->(0,12)->(4,17)->(4,18)->(4,19)->(4,20)->(4,21)->(4,22)->(4,23)->(4,24)->(4,25)->(4,26)->(4,27)->(4,28)->(4,29)->(4,0):1.0
Fix cost= 50 variable cost= 68

artificial: false edgeIndexset: [1440, 1441, 1442, 1220, 644, 171, 1359, 1360, 1361, 1362, 1363, 1467, 1468, 1469, 1023] start node= 8 start time= 27 capacity type= 1 ifChargeSet: []
(8,0)->(8,1)->(8,2)->(8,3)->(5,9)->(5,10)->(5,11)->(5,12)->(5,13)->(5,14)->(0,20)->(0,21)->(8,27)->(8,28)->(8,29)->(8,0):1.0
Fix cost= 120 variable cost= 72

fix cost+variable cost+commodity cost= 7040+3618+50193.0=60851.0

vehicle dowork= 57760 commodity dowork= 50193.0
no load ratio= 0.13100761772853187

Total vehicles used= 32

vehicleCoverServiceEdge information:
{256=1, 257=1, 771=1, 515=1, 4=1, 518=1, 520=1, 265=1, 1034=1, 781=1, 782=1, 527=1, 528=1, 21=1, 534=1, 278=1, 1046=1, 791=1, 1052=1, 797=1, 285=1, 799=1, 546=1, 1061=1, 806=1, 296=1, 557=1, 1070=1, 1078=1, 1079=1, 1081=1, 828=1, 1087=1, 577=1, 68=1, 838=1, 582=1, 583=1, 840=1, 329=1, 841=1, 586=1, 594=1, 595=1, 852=1, 596=1, 856=1, 860=1, 862=1, 608=1, 102=3, 107=1, 875=1, 622=1, 366=1, 623=1, 624=1, 882=1, 629=1, 120=1, 888=1, 891=1, 636=2, 125=1, 382=1, 1152=1, 899=1, 644=1, 389=1, 391=1, 400=1, 914=1, 919=1, 1178=1, 923=1, 156=1, 927=1, 931=1, 1188=1, 166=1, 423=1, 937=1, 938=1, 171=1, 428=1, 430=1, 431=1, 175=1, 687=1, 949=1, 438=1, 183=1, 442=1, 444=1, 705=1, 962=1, 456=1, 980=1, 469=1, 983=1, 215=1, 728=1, 219=1, 732=1, 478=1, 991=1, 224=1, 482=1, 998=1, 232=1, 489=1, 1003=1, 236=1, 238=1, 495=1, 496=1, 241=1, 497=1, 754=1, 1012=1, 245=1, 503=1, 1016=1, 250=1, 510=1, 1023=1}

commodityFlowIntoTerminal information:
0 0 0 94 16 50 0 40 0 0 0 0 64 0 0 0 81 0 0 0 50 100 0 0 0 37 0 0 0 100 
100 50 0 0 97 4 50 0 93 50 132 0 0 20 94 50 0 0 0 0 0 100 69 100 0 0 150 38 50 28 
0 100 0 0 0 85 0 100 0 0 0 100 0 0 0 0 100 0 0 0 0 0 20 50 0 0 0 0 0 0 
0 0 88 0 42 0 0 38 0 0 0 0 0 0 117 0 22 0 0 42 0 0 0 39 0 0 0 0 38 0 
0 0 0 100 0 0 66 0 120 50 0 0 50 50 0 50 0 170 100 0 0 50 150 100 100 0 50 0 0 50 
0 0 100 0 0 0 95 100 0 50 0 0 50 0 42 0 0 0 0 0 100 0 0 0 0 50 94 0 0 0 
67 50 50 0 50 0 0 0 0 0 0 121 34 0 0 0 87 50 228 67 0 50 50 0 0 0 100 42 0 50 
0 0 0 0 0 0 0 50 50 0 0 0 0 0 47 0 0 0 40 50 0 0 0 100 0 0 0 100 0 50 
0 49 0 0 0 0 0 50 0 0 0 0 50 50 44 0 0 0 0 0 50 0 39 0 98 0 100 50 0 44 
100 100 0 0 0 0 50 0 95 8 0 78 0 0 0 100 0 0 29 0 0 0 0 0 0 0 0 0 82 50 

vehicle pattern information:
[1, 0, 0, 1, 0, 0, 0, 1, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 1, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 1, 0, 0, 0, 0]
[1, 0, 0, 0, 0, 0, 0, 1, 0, 1, 0, 0, 0, 0, 0, 1, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0]
[0, 0, 0, 1, 0, 0, 0, 0, 0, 0, 0, 0, 1, 0, 0, 0, 0, 1, 0, 0, 0, 1, 0, 0, 0, 0, 0, 1, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0]
[0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 1, 0, 0, 0, 0, 0, 0, 1, 0, 1, 0, 0, 0, 0, 0, 0, 0, 0, 1, 0, 0, 1, 0, 0, 0, 0, 0, 0, 0, 0]
[0, 0, 0, 0, 0, 0, 0, 0, 1, 0, 0, 0, 0, 0, 1, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 1, 0, 1, 0, 0, 0, 0, 0, 0, 0, 0, 0]
[0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 2, 0, 0, 0, 0, 0, 0, 1, 0, 1, 0, 0, 1, 0, 0, 0, 0, 0, 0, 0, 0]
[0, 0, 0, 0, 0, 0, 0, 0, 0, 1, 0, 0, 0, 0, 0, 0, 1, 0, 0, 0, 1, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 1, 0, 0, 0]
[0, 0, 0, 0, 0, 0, 1, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 1, 0, 0, 0, 0, 0, 0, 0, 0, 1, 1, 0, 0, 0, 1]
[0, 0, 0, 0, 0, 1, 0, 1, 0, 0, 0, 0, 0, 0, 0, 1, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 1, 0, 0, 0, 0, 0, 0]
[0, 0, 0, 0, 1, 0, 0, 1, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 1, 0, 0, 0, 0, 0, 1, 0, 0, 0, 0, 0, 0, 0, 0, 0]
[0, 0, 0, 0, 0, 1, 0, 0, 0, 0, 0, 0, 0, 1, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 1, 0, 0, 1, 0, 0, 0, 0]
[0, 0, 0, 0, 0, 0, 0, 0, 1, 0, 0, 0, 0, 0, 1, 0, 0, 1, 0, 0, 0, 0, 0, 0, 0, 0, 1, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0]
[0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 1, 0, 0, 1, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 1, 0, 0, 0, 1, 0, 0, 0, 0, 0, 0]
[0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 1, 0, 0, 0, 0, 1, 0, 0, 0, 0, 1, 0, 0, 1, 0, 0, 0, 0, 0, 0, 0, 0]
[0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 1, 0, 0, 0, 1, 0, 0, 0, 0, 1, 0, 0, 0, 1, 0]
[0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 1, 0, 0, 0, 0, 0, 0, 0, 1, 0, 0, 0, 0, 1, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0]
[0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 1, 0, 0, 1, 0, 0, 0, 0, 0, 0, 0, 0, 0, 1, 0, 0, 0, 1, 0, 0, 0, 0, 0, 0]
[0, 0, 1, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 1, 0, 0, 0, 1, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 1, 0, 0, 0, 0]
[0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 1, 0, 0, 0, 1, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 1, 0, 0, 0, 0, 0, 1]
[0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 1, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 1, 0, 0, 1, 0, 0, 0, 0, 0, 0, 0]
[0, 0, 0, 1, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 1, 0, 0, 1, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0]
[0, 0, 0, 1, 0, 0, 0, 1, 0, 0, 0, 0, 0, 0, 0, 0, 0, 1, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0]
[0, 0, 0, 0, 0, 1, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 1, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 1, 0, 0, 0, 0, 0]
x[0]:4,29->9,6= 22.0 7
total cost= 154.0

x[1]:0,17->4,22= 23.0 5
x[1]:4,7->6,12= 8.0 5
x[1]:4,24->6,29= 15.0 5
total cost= 230.0

x[2]:6,20->7,27= 23.0 7
x[2]:2,11->6,19= 23.0 8
total cost= 345.0

x[3]:6,18->8,26= 28.0 8
x[3]:8,26->3,2= 28.0 6
total cost= 392.0

x[4]:4,13->6,18= 15.0 5
x[4]:4,16->6,21= 10.0 5
x[4]:6,18->8,26= 15.0 8
x[4]:6,21->8,29= 10.0 8
x[4]:7,8->4,13= 25.0 5
total cost= 450.0

x[5]:0,12->4,17= 29.0 5
x[5]:5,6->0,12= 29.0 6
total cost= 319.0

x[6]:1,10->2,16= 22.0 6
x[6]:3,28->1,6= 22.0 8
total cost= 308.0

x[7]:4,24->9,1= 16.0 7
x[7]:9,18->8,24= 16.0 6
total cost= 208.0

x[8]:6,26->4,3= 30.0 7
total cost= 210.0

x[9]:0,6->8,12= 9.0 6
x[9]:0,21->8,27= 19.0 6
total cost= 168.0

x[10]:6,16->7,23= 16.0 7
total cost= 112.0

x[11]:0,16->8,22= 16.0 6
x[11]:1,9->0,16= 16.0 7
x[11]:7,23->1,0= 16.0 7
total cost= 320.0

x[12]:0,0->5,7= 12.0 7
x[12]:0,5->5,12= 4.0 7
total cost= 112.0

x[13]:7,27->1,4= 17.0 7
total cost= 119.0

x[14]:6,22->7,29= 19.0 7
total cost= 133.0

x[15]:6,29->8,7= 23.0 8
x[15]:2,18->6,26= 23.0 8
x[15]:8,8->3,14= 23.0 6
total cost= 506.0

x[16]:4,13->6,18= 14.0 5
x[16]:4,8->9,15= 3.0 7
x[16]:9,18->8,24= 3.0 6
x[16]:6,21->8,29= 14.0 8
x[16]:7,1->4,6= 3.0 5
x[16]:7,7->4,12= 14.0 5
total cost= 306.0

x[17]:0,12->4,17= 18.0 5
total cost= 90.0

x[18]:8,20->1,28= 10.0 8
x[18]:8,23->1,1= 7.0 8
total cost= 136.0

x[19]:2,11->6,19= 19.0 8
total cost= 152.0

x[20]:9,11->0,16= 20.0 5
total cost= 100.0

x[21]:4,8->1,13= 5.0 5
x[21]:4,10->1,15= 18.0 5
x[21]:6,26->4,3= 23.0 7
total cost= 276.0

x[22]:8,2->1,10= 25.0 8
x[22]:8,20->1,28= 3.0 8
total cost= 224.0

x[23]:9,1->1,8= 18.0 7
x[23]:1,17->2,23= 18.0 6
total cost= 234.0

x[24]:9,2->0,7= 24.0 5
x[24]:4,24->9,1= 24.0 7
total cost= 288.0

x[25]:1,25->2,1= 19.0 6
x[25]:3,6->1,14= 19.0 8
total cost= 266.0

x[26]:0,0->5,7= 25.0 7
total cost= 175.0

x[27]:6,20->7,27= 10.0 7
x[27]:6,22->7,29= 9.0 7
total cost= 133.0

x[28]:6,12->8,20= 2.0 8
x[28]:6,18->8,26= 14.0 8
x[28]:8,22->3,28= 2.0 6
x[28]:8,26->3,2= 14.0 6
total cost= 224.0

x[29]:4,24->1,29= 12.0 5
x[29]:6,17->4,24= 12.0 7
x[29]:6,16->7,23= 6.0 7
x[29]:7,23->1,0= 6.0 7
total cost= 228.0

x[30]:8,26->5,2= 29.0 6
total cost= 174.0

x[31]:9,18->8,24= 16.0 6
total cost= 96.0

x[32]:0,21->1,26= 24.0 5
x[32]:1,1->2,7= 24.0 6
total cost= 264.0

x[33]:4,17->5,25= 21.0 8
x[33]:4,16->6,21= 2.0 5
x[33]:6,28->5,6= 2.0 8
x[33]:3,9->4,15= 23.0 6
total cost= 332.0

x[34]:1,25->2,1= 21.0 6
total cost= 126.0

x[35]:4,8->9,15= 13.0 7
x[35]:1,10->9,18= 8.0 8
x[35]:3,28->1,6= 8.0 8
x[35]:3,2->4,8= 13.0 6
total cost= 297.0

x[36]:9,20->0,25= 15.0 5
x[36]:0,0->5,7= 15.0 7
total cost= 180.0

x[37]:8,14->5,20= 29.0 6
x[37]:5,21->9,28= 29.0 7
total cost= 377.0

x[38]:5,4->9,11= 21.0 7
total cost= 147.0

x[39]:4,24->6,29= 20.0 5
x[39]:4,26->6,1= 9.0 5
x[39]:6,0->7,7= 20.0 7
x[39]:6,1->7,8= 9.0 7
x[39]:3,15->4,21= 29.0 6
total cost= 522.0

x[40]:6,11->4,18= 21.0 7
x[40]:6,19->4,26= 3.0 7
total cost= 168.0

x[41]:0,4->1,9= 18.0 5
total cost= 90.0

x[42]:8,26->5,2= 15.0 6
x[42]:5,4->9,11= 15.0 7
x[42]:1,1->9,9= 8.0 8
x[42]:8,20->1,28= 8.0 8
total cost= 323.0

x[43]:3,16->4,22= 17.0 6
x[43]:8,1->3,7= 12.0 6
x[43]:8,8->3,14= 4.999999999999999 6
total cost= 204.0

x[44]:0,0->5,7= 19.0 7
total cost= 133.0

x[45]:0,6->8,12= 13.0 6
x[45]:1,14->0,21= 13.0 7
x[45]:1,22->6,27= 5.0 5
x[45]:6,29->8,7= 5.0 8
total cost= 234.0

x[46]:4,10->1,15= 16.0 5
x[46]:1,15->3,23= 16.0 8
total cost= 208.0

x[47]:9,12->6,18= 18.0 6
total cost= 108.0

x[48]:0,21->8,27= 9.0 6
x[48]:0,25->8,1= 21.0 6
total cost= 180.0

x[49]:5,27->2,5= 20.0 8
x[49]:6,18->5,26= 20.0 8
total cost= 320.0

x[50]:1,10->9,18= 17.0 8
total cost= 136.0

x[51]:6,2->4,9= 20.0 7
x[51]:6,11->4,18= 9.0 7
total cost= 203.0

x[52]:5,27->2,5= 15.0 8
total cost= 120.0

x[53]:1,26->3,4= 19.0 8
x[53]:7,19->1,26= 19.0 7
total cost= 285.0

x[54]:4,18->1,23= 15.0 5
x[54]:6,11->4,18= 15.0 7
x[54]:6,12->7,19= 3.0 7
x[54]:7,19->1,26= 3.0 7
x[54]:2,3->6,11= 18.0 8
total cost= 366.0

x[55]:4,6->5,14= 25.999999999999996 8
total cost= 207.99999999999997

x[56]:2,3->6,11= 23.0 8
x[56]:6,12->8,20= 23.0 8
x[56]:8,22->3,28= 23.0 6
total cost= 506.0

x[57]:6,18->5,26= 27.0 8
total cost= 216.0

x[58]:3,19->1,27= 10.0 8
x[58]:3,28->1,6= 20.0 8
total cost= 240.0

x[59]:5,4->9,11= 18.0 7
x[59]:6,18->5,26= 18.0 8
total cost= 270.0

x[60]:6,19->4,26= 29.0 7
total cost= 203.0

x[61]:6,1->7,8= 19.0 7
total cost= 133.0

x[62]:1,10->2,16= 18.0 6
x[62]:8,2->1,10= 18.0 8
total cost= 252.0

x[63]:7,27->1,4= 17.0 7
total cost= 119.0

x[64]:9,20->0,25= 22.0 5
x[64]:0,8->3,14= 22.0 6
total cost= 242.0

x[65]:6,28->5,6= 16.0 8
x[65]:2,18->6,26= 16.0 8
total cost= 256.0

x[66]:6,16->7,23= 27.0 7
x[66]:2,8->6,16= 27.0 8
total cost= 405.0

x[67]:1,6->6,11= 17.0 5
x[67]:6,16->7,23= 9.0 7
x[67]:6,20->7,27= 8.0 7
total cost= 204.0

x[68]:4,8->9,15= 17.0 7
x[68]:9,18->8,24= 17.0 6
total cost= 221.0

x[69]:5,14->0,20= 21.0 6
x[69]:6,28->5,6= 21.000000000000004 8
total cost= 294.0

x[70]:9,1->1,8= 29.0 7
x[70]:1,10->2,16= 29.0 6
total cost= 377.0

x[71]:4,23->9,0= 25.0 7
x[71]:6,11->4,18= 25.0 7
total cost= 350.0

x[72]:1,5->2,11= 13.0 6
x[72]:1,16->2,22= 3.0 6
x[72]:8,2->1,10= 3.0 8
x[72]:8,23->1,1= 13.0 8
total cost= 224.0

x[73]:6,17->4,24= 20.0 7
x[73]:4,24->9,1= 20.0 7
x[73]:2,8->6,16= 20.0 8
total cost= 440.0

x[74]:9,7->1,14= 1.0 7
x[74]:9,12->6,18= 21.0 6
x[74]:1,22->6,27= 1.0 5
total cost= 138.0

x[75]:6,1->7,8= 4.0 7
x[75]:6,12->7,19= 22.0 7
x[75]:2,22->6,0= 17.0 8
x[75]:2,24->6,2= 9.0 8
total cost= 390.0

x[76]:5,15->6,22= 18.0 7
total cost= 126.0

x[77]:1,22->0,29= 17.0 7
x[77]:7,14->1,21= 17.0 7
total cost= 238.0

x[78]:1,22->0,29= 25.0 7
x[78]:1,26->0,3= 4.0 7
x[78]:7,14->1,21= 25.0 7
x[78]:7,19->1,26= 4.0 7
total cost= 406.0

x[79]:3,2->4,8= 21.0 6
x[79]:3,17->4,23= 8.0 6
total cost= 174.0

x[80]:4,25->6,0= 4.0 5
x[80]:4,24->9,1= 26.0 7
x[80]:9,8->8,14= 26.0 6
x[80]:6,5->8,13= 4.0 8
x[80]:7,19->4,24= 30.0 5
total cost= 540.0

x[81]:4,18->1,23= 24.0 5
x[81]:6,1->4,8= 20.0 7
x[81]:6,26->4,3= 4.0 7
total cost= 288.0

x[82]:6,17->4,24= 18.0 7
x[82]:2,8->6,16= 18.0 8
total cost= 270.0

x[83]:0,5->5,12= 15.0 7
x[83]:5,12->7,18= 15.0 6
total cost= 195.0

x[84]:0,3->9,8= 29.0 5
total cost= 145.0

x[85]:5,27->2,5= 24.0 8
total cost= 192.0

x[86]:1,14->0,21= 30.0 7
x[86]:4,5->1,10= 30.0 5
total cost= 360.0

x[87]:0,17->4,22= 26.0 5
x[87]:4,25->6,0= 3.0 5
x[87]:4,26->6,1= 23.0 5
total cost= 260.0

x[88]:9,12->6,18= 16.0 6
x[88]:6,20->7,27= 16.0 7
total cost= 208.0

x[89]:9,7->1,14= 16.0 7
total cost= 112.0

x[90]:0,16->8,22= 16.0 6
total cost= 96.0

x[91]:4,8->9,15= 29.0 7
x[91]:9,18->8,24= 29.0 6
x[91]:7,1->4,6= 29.0 5
total cost= 522.0

x[92]:4,26->6,1= 18.0 5
x[92]:6,1->7,8= 18.0 7
x[92]:3,17->4,23= 18.0 6
total cost= 324.0

x[93]:1,22->0,29= 24.0 7
x[93]:7,14->1,21= 24.0 7
total cost= 336.0

x[94]:0,21->1,26= 22.0 5
x[94]:1,29->6,4= 22.0 5
total cost= 220.0

x[95]:4,5->1,10= 1.0 5
x[95]:4,10->1,15= 16.0 5
x[95]:1,17->2,23= 17.0 6
total cost= 187.0

x[96]:4,24->6,29= 15.0 5
x[96]:3,16->4,22= 15.0 6
total cost= 165.0

x[97]:6,18->5,26= 29.0 8
total cost= 232.0

x[98]:0,3->9,8= 19.0 5
total cost= 95.0

x[99]:0,16->8,22= 7.0 6
x[99]:0,21->8,27= 22.0 6
x[99]:1,9->0,16= 7.0 7
x[99]:1,14->0,21= 22.0 7
total cost= 377.0

x[100]:8,26->5,2= 24.0 6
x[100]:5,4->9,11= 24.0 7
total cost= 312.0

x[101]:0,5->5,12= 2.0 7
x[101]:1,26->0,3= 2.0 7
x[101]:1,29->6,4= 19.0 5
x[101]:5,12->7,18= 2.0 6
x[101]:6,16->7,23= 19.0 7
total cost= 268.0

x[102]:4,8->1,13= 15.0 5
x[102]:1,17->2,23= 15.0 6
total cost= 165.0

x[103]:2,8->6,16= 22.0 8
x[103]:6,18->8,26= 22.0 8
x[103]:8,26->3,2= 22.0 6
total cost= 484.0

x[104]:4,23->9,0= 18.0 7
x[104]:9,8->8,14= 18.0 6
total cost= 234.0

x[105]:2,11->6,19= 7.0 8
x[105]:2,18->6,26= 10.0 8
total cost= 136.0

x[106]:0,21->1,26= 24.0 5
x[106]:1,1->2,7= 24.0 6
total cost= 264.0

x[107]:5,15->6,22= 26.0 7
total cost= 182.0

x[108]:6,18->8,26= 16.0 8
x[108]:2,10->6,18= 16.0 8
total cost= 256.0

x[109]:7,8->4,13= 2.0 5
x[109]:7,19->4,24= 18.0 5
total cost= 100.0

x[110]:8,26->5,2= 17.0 6
x[110]:9,18->8,24= 17.0 6
total cost= 204.0

x[111]:4,8->9,15= 18.0 7
x[111]:7,1->4,6= 18.0 5
total cost= 216.0

x[112]:0,5->5,12= 29.0 7
total cost= 203.0

x[113]:1,25->2,1= 28.0 6
x[113]:7,14->1,21= 28.0 7
total cost= 364.0

x[114]:4,12->6,17= 24.0 5
x[114]:6,20->7,27= 24.0 7
x[114]:3,2->4,8= 24.0 6
total cost= 432.0

x[115]:1,22->6,27= 30.0 5
x[115]:3,6->1,14= 30.0 8
total cost= 390.0

x[116]:1,5->2,11= 16.0 6
x[116]:7,27->1,4= 16.0 7
total cost= 208.0

x[117]:5,12->7,18= 23.0 6
x[117]:8,3->5,9= 23.0 6
total cost= 276.0

x[118]:1,28->0,5= 28.0 7
x[118]:3,19->1,27= 28.0 8
total cost= 420.0

x[119]:8,14->5,20= 26.0 6
x[119]:5,27->2,5= 26.0 8
x[119]:1,1->2,7= 1.0 6
x[119]:8,20->1,28= 1.0 8
total cost= 378.0

x[120]:1,29->4,6= 16.0 7
total cost= 112.0

x[121]:9,29->0,4= 16.0 5
x[121]:0,8->3,14= 16.0 6
total cost= 176.0

x[122]:3,16->4,22= 24.0 6
x[122]:8,26->3,2= 24.0 6
total cost= 288.0

x[123]:0,12->4,17= 26.0 5
total cost= 130.0

x[124]:0,25->8,1= 28.0 6
x[124]:1,14->0,21= 28.0 7
x[124]:3,6->1,14= 28.0 8
total cost= 588.0

x[125]:9,12->6,18= 22.0 6
total cost= 132.0

x[126]:5,21->9,28= 24.0 7
x[126]:1,10->9,18= 4.0 8
x[126]:8,2->1,10= 4.0 8
x[126]:8,3->5,9= 24.0 6
total cost= 376.0

x[127]:0,12->4,17= 17.0 5
total cost= 85.0

x[128]:6,28->5,6= 27.0 8
total cost= 216.0

x[129]:6,26->4,3= 25.0 7
x[129]:2,10->6,18= 25.0 8
total cost= 375.0

x[130]:0,6->8,12= 28.0 6
x[130]:1,26->0,3= 6.0 7
x[130]:1,28->0,5= 22.0 7
total cost= 364.0

x[131]:1,1->2,7= 22.0 6
total cost= 132.0

x[132]:0,12->4,17= 18.0 5
x[132]:0,17->4,22= 1.0 5
x[132]:5,6->0,12= 19.0 6
x[132]:5,8->7,14= 2.0 6
x[132]:7,19->4,24= 2.0 5
total cost= 231.0

x[133]:1,5->2,11= 14.0 6
x[133]:1,10->2,16= 11.0 6
x[133]:7,27->1,4= 25.0 7
total cost= 325.0

x[134]:4,22->9,29= 20.0 7
x[134]:3,16->4,22= 20.0 6
total cost= 260.0

x[135]:3,23->4,29= 29.0 6
total cost= 174.0

x[136]:4,7->6,12= 16.0 5
x[136]:4,13->6,18= 9.0 5
total cost= 125.0

x[137]:9,1->1,8= 26.0 7
x[137]:1,25->2,1= 26.0 6
total cost= 338.0

x[138]:3,9->4,15= 5.0 6
x[138]:3,15->4,21= 21.0 6
x[138]:8,1->3,7= 26.0 6
total cost= 312.0

x[139]:6,19->4,26= 18.0 7
x[139]:2,10->6,18= 18.0 8
total cost= 270.0

x[140]:1,6->6,11= 8.0 5
x[140]:1,29->6,4= 9.0 5
x[140]:3,2->4,8= 13.0 6
x[140]:4,12->6,17= 1.0 5
x[140]:4,13->6,18= 12.0 5
x[140]:8,20->1,28= 9.0 8
x[140]:8,23->1,1= 8.0 8
x[140]:8,22->3,28= 13.0 6
total cost= 442.0

x[141]:3,17->4,23= 18.0 6
x[141]:3,23->4,29= 3.0 6
total cost= 126.0

x[142]:1,9->0,16= 21.0 7
x[142]:7,23->1,0= 21.0 7
total cost= 294.0

x[143]:4,23->9,0= 24.0 7
x[143]:3,16->4,22= 24.0 6
total cost= 312.0

x[144]:4,25->6,0= 30.0 5
x[144]:6,0->7,7= 30.0 7
x[144]:3,17->4,23= 30.0 6
total cost= 540.0

x[145]:4,16->6,21= 22.0 5
x[145]:6,22->7,29= 22.0 7
x[145]:3,9->4,15= 22.0 6
total cost= 396.0

x[146]:1,26->3,4= 23.0 8
x[146]:7,19->1,26= 23.0 7
total cost= 345.0

x[147]:8,14->5,20= 29.0 6
x[147]:5,21->9,28= 29.0 7
total cost= 377.0

x[148]:4,18->1,23= 21.0 5
x[148]:1,1->2,7= 15.0 6
x[148]:1,5->2,11= 4.0 6
x[148]:1,25->2,1= 6.0 6
x[148]:4,0->1,5= 4.0 5
total cost= 275.0

x[149]:4,12->6,17= 25.0 5
x[149]:6,18->8,26= 5.0 8
x[149]:6,21->8,29= 20.0 8
x[149]:7,7->4,12= 25.0 5
total cost= 450.0

x[150]:9,28->0,3= 17.0 5
x[150]:0,12->4,17= 17.0 5
total cost= 170.0

x[151]:6,29->8,7= 22.0 8
x[151]:2,18->6,26= 22.0 8
x[151]:8,8->3,14= 22.0 6
total cost= 484.0

x[152]:0,8->3,14= 29.0 6
x[152]:5,14->0,20= 29.0 6
total cost= 348.0

x[153]:1,14->0,21= 7.0 7
x[153]:1,22->0,29= 14.0 7
total cost= 147.0

x[154]:7,23->1,0= 22.0 7
total cost= 154.0

x[155]:4,18->1,23= 30.0 5
x[155]:6,11->4,18= 30.0 7
x[155]:2,3->6,11= 30.0 8
total cost= 600.0

x[156]:4,24->1,29= 16.0 5
x[156]:1,5->2,11= 16.0 6
total cost= 176.0

x[157]:1,8->3,16= 22.0 8
x[157]:7,27->1,4= 22.0 7
total cost= 330.0

x[158]:0,12->4,17= 25.0 5
total cost= 125.0

x[159]:0,21->1,26= 16.0 5
x[159]:5,6->0,12= 16.0 6
x[159]:5,8->7,14= 7.0 6
x[159]:7,19->1,26= 1.0 7
x[159]:7,23->1,0= 6.0 7
total cost= 267.0

x[160]:7,23->1,0= 29.0 7
total cost= 203.0

x[161]:4,7->6,12= 10.0 5
x[161]:4,25->6,0= 13.0 5
x[161]:6,16->7,23= 23.0 7
total cost= 276.0

x[162]:1,22->0,29= 20.0 7
x[162]:1,26->0,3= 10.0 7
x[162]:4,17->1,22= 20.0 5
x[162]:4,18->1,23= 10.0 5
total cost= 360.0

x[163]:9,11->0,16= 17.0 5
total cost= 85.0

x[164]:8,13->3,19= 26.0 6
total cost= 156.0

x[165]:6,5->8,13= 25.0 8
x[165]:2,24->6,2= 25.0 8
total cost= 400.0

x[166]:0,3->9,8= 24.0 5
total cost= 120.0

x[167]:1,6->6,11= 25.0 5
x[167]:6,12->7,19= 25.0 7
total cost= 300.0

x[168]:4,23->9,0= 22.0 7
total cost= 154.0

x[169]:8,20->1,28= 19.0 8
total cost= 152.0

x[170]:8,14->5,20= 16.0 6
x[170]:8,3->5,9= 3.0 6
total cost= 114.0

x[171]:0,12->4,17= 20.0 5
total cost= 100.0

x[172]:1,22->6,27= 6.0 5
x[172]:4,16->6,21= 16.0 5
x[172]:7,14->1,21= 6.0 7
x[172]:7,7->4,12= 11.0 5
x[172]:7,8->4,13= 5.0 5
total cost= 232.0

x[173]:6,28->5,6= 29.0 8
x[173]:2,18->6,26= 29.0 8
total cost= 464.0

x[174]:4,22->9,29= 5.0 7
x[174]:4,23->9,0= 11.0 7
x[174]:4,24->9,1= 14.0 7
x[174]:6,2->4,9= 30.0 7
total cost= 420.0

x[175]:0,0->5,7= 6.0 7
x[175]:9,12->6,18= 23.0 6
x[175]:0,3->9,8= 23.0 5
x[175]:5,15->6,22= 6.0 7
total cost= 337.0

x[176]:0,0->5,7= 23.0 7
x[176]:5,8->7,14= 23.0 6
total cost= 299.0

x[177]:4,6->5,14= 16.0 8
total cost= 128.0

x[178]:1,1->2,7= 14.0 6
x[178]:1,5->2,11= 15.0 6
total cost= 174.0

x[179]:4,17->1,22= 30.0 5
total cost= 150.0

x[180]:8,26->5,2= 15.0 6
x[180]:5,8->7,14= 15.0 6
total cost= 180.0

x[181]:0,4->1,9= 15.0 5
x[181]:0,21->1,26= 14.0 5
total cost= 145.0

x[182]:9,2->0,7= 16.0 5
total cost= 80.0

x[183]:4,8->9,15= 2.0 7
x[183]:4,29->9,6= 28.0 7
total cost= 210.0

x[184]:4,17->1,22= 19.0 5
total cost= 95.0

x[185]:1,5->2,11= 22.0 6
x[185]:8,23->1,1= 22.0 8
total cost= 308.0

x[186]:7,8->4,13= 18.0 5
total cost= 90.0

x[187]:6,20->7,27= 19.0 7
x[187]:2,10->6,18= 19.0 8
total cost= 285.0

x[188]:4,17->5,25= 29.0 8
x[188]:3,2->4,8= 29.0 6
total cost= 406.0

x[189]:4,5->1,10= 23.0 5
x[189]:1,15->3,23= 23.0 8
total cost= 299.0

x[190]:6,5->8,13= 5.0 8
x[190]:6,12->8,20= 25.0 8
total cost= 240.0

x[191]:4,22->9,29= 25.0 7
total cost= 175.0

x[192]:0,4->1,9= 17.0 5
x[192]:1,16->2,22= 17.0 6
total cost= 187.0

x[193]:3,17->4,23= 26.0 6
total cost= 156.0

x[194]:9,28->0,3= 27.0 5
total cost= 135.0

x[195]:6,26->4,3= 18.0 7
x[195]:2,11->6,19= 18.0 8
total cost= 270.0

x[196]:9,1->1,8= 20.0 7
x[196]:1,10->2,16= 20.0 6
total cost= 260.0

x[197]:2,24->6,2= 16.0 8
x[197]:6,5->8,13= 16.0 8
x[197]:8,13->3,19= 16.0 6
total cost= 352.0

x[198]:4,8->9,15= 18.0 7
x[198]:3,23->4,29= 18.0 6
total cost= 234.0

x[199]:1,26->0,3= 28.0 7
x[199]:4,5->1,10= 28.0 5
total cost= 336.0

Total time= 8200491

Sovle for test11_10_40_30_200A.txt
Colmun limit=1000
number of service arcs=1200
number of holding arcs=300

root node bound= 26724.520000000004
Before intensification, we have 17735 columns
After pick up:
==================Intensification===================
We add 1000 columns to cplex.
Tried aggregator 2 times.
MIP Presolve eliminated 39692 rows and 11970 columns.
Aggregator did 6245 substitutions.
Reduced MIP has 15893 rows, 46884 columns, and 132106 nonzeros.
Reduced MIP has 7 binaries, 993 generals, 0 SOSs, and 0 indicators.
Presolve time = 0.15 sec. (91.43 ticks)
Probing time = 0.13 sec. (1.49 ticks)
Tried aggregator 1 time.
MIP Presolve eliminated 36 rows and 103 columns.
Reduced MIP has 15857 rows, 46781 columns, and 131817 nonzeros.
Reduced MIP has 7 binaries, 993 generals, 0 SOSs, and 0 indicators.
Presolve time = 0.11 sec. (53.94 ticks)
Probing time = 0.09 sec. (1.49 ticks)
Clique table members: 1.
MIP emphasis: balance optimality and feasibility.
MIP search method: dynamic search.
Parallel mode: deterministic, using up to 4 threads.
Root relaxation solution time = 8.23 sec. (2625.38 ticks)

        Nodes                                         Cuts/
   Node  Left     Objective  IInf  Best Integer    Best Bound    ItCnt     Gap

      0     0    26726.9700   105                  26726.9700       21         
*     0+    0                        61586.0000    26726.9700            56.60%
      0     0    26788.0068    82    61586.0000    Cuts: 1259    10048   56.50%
      0     0    26871.9469   105    61586.0000    Cuts: 1341    18283   56.37%
      0     0    26983.9844   108    61586.0000 MIRcuts: 1460    28924   56.18%
*     0+    0                        39216.0000    26983.9844            31.19%
*     0+    0                        37142.0000    26983.9844            27.35%
*     0+    0                        36895.0000    26983.9844            26.86%
      0     0    27136.1962   108    36895.0000    Cuts: 1483    43545   26.45%
      0     0    27272.6656   118    36895.0000    Cuts: 1442    56577   26.08%
      0     0    27413.1329   123    36895.0000    Cuts: 1708    73180   25.70%
      0     0    27489.2869   112    36895.0000    Cuts: 1725    85723   25.49%
      0     0    27542.5867   114    36895.0000 MIRcuts: 1752    94785   25.35%
      0     0    27617.2439   137    36895.0000 MIRcuts: 1632   109105   25.15%
*     0+    0                        32315.0000    27617.2439            14.54%
      0     0    27683.2610   143    32315.0000 MIRcuts: 1573   124535   14.33%
*     0+    0                        32045.0000    27683.2610            13.61%
      0     0    27732.6154   144    32045.0000 MIRcuts: 1838   135220   13.46%
      0     0    27780.6629   146    32045.0000 MIRcuts: 1616   145305   13.31%
      0     0    27825.6736   153    32045.0000 MIRcuts: 1608   157590   13.17%
      0     0    27857.8091   165    32045.0000 MIRcuts: 1548   166888   13.07%
      0     0    27886.4257   154    32045.0000 MIRcuts: 1641   173774   12.98%
      0     0    27904.4238   163    32045.0000    Cuts: 1385   180294   12.92%
      0     0    27921.9126   156    32045.0000    Cuts: 1462   188602   12.87%
      0     0    27934.7719   156    32045.0000    Cuts: 1679   196665   12.83%
      0     0    27943.7645   165    32045.0000 MIRcuts: 1464   201622   12.80%
      0     0    27954.2254   157    32045.0000    Cuts: 1452   206451   12.77%
      0     0    27963.2161   151    32045.0000 MIRcuts: 1398   210057   12.74%
      0     0    27970.5213   168    32045.0000 MIRcuts: 1275   213488   12.71%
      0     0    27977.3667   165    32045.0000 MIRcuts: 1440   218044   12.69%
      0     0    27981.8332   166    32045.0000 MIRcuts: 1557   221025   12.68%
*     0+    0                        31778.0000    27981.8332            11.95%
      0     0    27990.0398   164    31778.0000 MIRcuts: 1369   226909   11.92%
*     0+    0                        31345.0000    27990.0398            10.70%
      0     0    27992.8358   168    31345.0000 MIRcuts: 1451   229594   10.69%
Heuristic still looking.
Heuristic still looking.
Heuristic still looking.
*     0+    0                        30243.0000    27992.8358             7.44%
      0     2    27992.8358   168    30243.0000    27992.8358   229594    7.44%
Elapsed time = 960.59 sec. (523808.75 ticks, tree = 0.00 MB, solutions = 9)
      1     3    28003.3872   158    30243.0000    27992.8358   232911    7.44%
      2     4    28001.3058   167    30243.0000    27992.8358   237598    7.44%
      3     5    28009.5150   153    30243.0000    28001.3569   239649    7.41%
      4     6    28007.4289   168    30243.0000    28001.3569   242690    7.41%
      5     7    28031.6238   152    30243.0000    28001.3569   249989    7.41%
      7     9    28040.5305   149    30243.0000    28001.3569   258965    7.41%
      8    10    28034.9137   151    30243.0000    28001.3569   260874    7.41%
      9    11    28032.9945   158    30243.0000    28003.4053   268777    7.41%
     11    13    28061.0565   161    30243.0000    28003.4053   283652    7.41%
     12    14    28118.0638   151    30243.0000    28003.4053   296326    7.41%
Elapsed time = 1100.60 sec. (593588.49 ticks, tree = 0.00 MB, solutions = 9)
     13    15    28064.2227   151    30243.0000    28003.4053   309428    7.41%
     18    20    28183.0140   153    30243.0000    28003.4053   351734    7.41%
     19    21    28045.9484   156    30243.0000    28003.4053   357257    7.41%
     23    25    28067.4644   141    30243.0000    28003.4053   372947    7.41%
     30    32    28229.8671   148    30243.0000    28003.4053   404361    7.41%
     33    35    28082.5538   141    30243.0000    28003.4053   416363    7.41%
     34    36    28123.1160   140    30243.0000    28003.4053   425112    7.41%
     41    43    28088.8072   146    30243.0000    28003.4053   516647    7.41%
     43    45    28161.9460   125    30243.0000    28003.4053   522651    7.41%
     44    46    28290.4791   132    30243.0000    28003.4053   527308    7.41%
Elapsed time = 1446.41 sec. (705787.95 ticks, tree = 0.00 MB, solutions = 9)
     45    47    28147.5644   133    30243.0000    28003.4053   535632    7.41%
     47    49    28328.0634   111    30243.0000    28003.4053   548016    7.41%
     51    53    28167.8032   131    30243.0000    28003.4053   564220    7.41%
     53    55    28308.8024   116    30243.0000    28003.4053   584123    7.41%
     57    59    28314.0923   124    30243.0000    28003.4053   597435    7.41%
     59    61    28174.8673   126    30243.0000    28003.4053   608966    7.41%
     61    63    28378.9172   104    30243.0000    28003.4053   618042    7.41%
     71    73    28395.6247   105    30243.0000    28003.4053   658617    7.41%
     73    75    28390.1977   134    30243.0000    28003.4053   675927    7.41%
     77    79    28188.1356   127    30243.0000    28003.4053   701039    7.41%
Elapsed time = 1705.36 sec. (777536.93 ticks, tree = 0.00 MB, solutions = 9)
     81    83    28193.1279   137    30243.0000    28003.4053   714204    7.41%
     85    87    28232.8842   121    30243.0000    28003.4053   745340    7.41%
     89    91    28238.7185   135    30243.0000    28003.4053   766805    7.41%
     93    95    28278.9330   128    30243.0000    28003.4053   789670    7.41%
     96    98    28548.6577   108    30243.0000    28003.4053   802460    7.41%
    100   102    28556.7644   106    30243.0000    28003.4053   819286    7.41%
    101   103    28300.1104   122    30243.0000    28003.4053   821252    7.41%
    105   107    28431.2952   113    30243.0000    28003.4053   836951    7.41%
    117   119    28738.3405    74    30243.0000    28003.4053   866712    7.41%
    121   123    29022.9868    78    30243.0000    28003.4053   874595    7.41%
Elapsed time = 1882.21 sec. (829416.51 ticks, tree = 2.29 MB, solutions = 9)
    126   128    28605.2261    94    30243.0000    28003.4053   882752    7.41%
    128   130    28979.1215    86    30243.0000    28003.4053   892385    7.41%
    132   134    28719.2846    79    30243.0000    28003.4053   897945    7.41%
    134   136    28748.9858   103    30243.0000    28003.4053   908756    7.41%
    140   142    29053.4636    83    30243.0000    28003.4053   920950    7.41%
    144   146    28743.5868    94    30243.0000    28003.4053   936976    7.41%
    148   150    28772.3213    84    30243.0000    28003.4053   942759    7.41%
    155   157    28363.8236   105    30243.0000    28003.4053   956081    7.41%
    156   158    28849.4999    67    30243.0000    28003.4053   958042    7.41%
    159   161    28405.4574    99    30243.0000    28003.4053   972116    7.41%
Elapsed time = 2003.51 sec. (862579.15 ticks, tree = 2.29 MB, solutions = 9)
    163   165    28410.7047    96    30243.0000    28003.4053   977324    7.41%
    164   166    29041.9560    61    30243.0000    28003.4053   982543    7.41%
    168   170    28886.9380    69    30243.0000    28003.4053   992408    7.41%
    171   173    28426.5656   102    30243.0000    28003.4053   996827    7.41%
    175   177    28417.7940    99    30243.0000    28003.4053  1000383    7.41%
    179   181    28435.1628    93    30243.0000    28003.4053  1004500    7.41%
    187   189    28450.4526    76    30243.0000    28003.4053  1018701    7.41%
    191   193    28480.4234    83    30243.0000    28003.4053  1025898    7.41%
    194   196    28723.3607    90    30243.0000    28003.4053  1033898    7.41%
    195   197    28471.6703    75    30243.0000    28003.4053  1036316    7.41%
Elapsed time = 2071.89 sec. (880928.05 ticks, tree = 2.29 MB, solutions = 9)
    203   205    28478.9781    70    30243.0000    28003.4053  1043623    7.41%
    207   209    28480.8389    78    30243.0000    28003.4053  1048898    7.41%
    211   213    28503.9197    56    30243.0000    28003.4053  1054613    7.41%
    215   217    28513.6278    48    30243.0000    28003.4053  1062229    7.41%
    223   225    28572.8806    42    30243.0000    28003.4053  1073020    7.41%
    227   229    28538.9080    49    30243.0000    28003.4053  1079352    7.41%
    231   233    28719.1218    43    30243.0000    28003.4053  1085484    7.41%
    235   237    28540.9604    45    30243.0000    28003.4053  1091007    7.41%
    239   241    28548.9476    55    30243.0000    28003.4053  1098635    7.41%
    406   385    28786.3519    83    30243.0000    28003.4053  1143162    7.41%
Elapsed time = 2179.67 sec. (908634.02 ticks, tree = 63.30 MB, solutions = 9)
    410   389    28932.9702    73    30243.0000    28003.4053  1158013    7.41%
    415   392    28986.8543    46    30243.0000    28003.4053  1163881    7.41%
    418   395    28985.6605    80    30243.0000    28003.4053  1168879    7.41%
    419   396    28578.6607    45    30243.0000    28003.4053  1170049    7.41%
    423   398    28995.3112    38    30243.0000    28003.4053  1176914    7.41%
    431   406    29055.1444    49    30243.0000    28003.4053  1187419    7.41%
    439   412    28981.4339    44    30243.0000    28003.4053  1196361    7.41%
    443   416    28588.5653    48    30243.0000    28003.4053  1202493    7.41%
    447   418    28804.8138    31    30243.0000    28003.4053  1206410    7.41%
    451   422    28623.4053    50    30243.0000    28003.4053  1212188    7.41%
Elapsed time = 2327.44 sec. (946423.32 ticks, tree = 63.30 MB, solutions = 9)
    455   424    28903.6274    40    30243.0000    28003.4053  1214627    7.41%
    459   428    28623.5687    51    30243.0000    28003.4053  1215797    7.41%
    463   430    29104.1213    36    30243.0000    28003.4053  1222630    7.41%
    621   512    28094.9415   174    30243.0000    28003.4053  1308921    7.41%
    622   513    28483.6554   162    30243.0000    28003.4053  1320012    7.41%
    626   517    28484.5575   157    30243.0000    28003.4053  1329149    7.41%
    630   521    28494.3225   151    30243.0000    28003.4053  1347578    7.41%
    638   529    28732.9333   147    30243.0000    28003.4053  1380475    7.41%
    642   533    28739.4787   156    30243.0000    28003.4053  1390883    7.41%
    646   537    28908.8868   126    30243.0000    28003.4053  1408901    7.41%
Elapsed time = 2530.02 sec. (1010880.75 ticks, tree = 82.69 MB, solutions = 9)
    708   597    28972.6877   134    30243.0000    28003.4053  1531428    7.41%
    712   601    29099.0163   126    30243.0000    28003.4053  1544655    7.41%
    716   605    29101.4772   134    30243.0000    28003.4053  1547796    7.41%
    720   609    29196.1598   118    30243.0000    28003.4053  1555804    7.41%
    728   617    29200.1401   114    30243.0000    28003.4053  1565428    7.41%
    736   623    29202.6425   108    30243.0000    28003.4053  1570615    7.41%
    740   627    29206.8152   114    30243.0000    28003.4053  1574185    7.41%
    744   631    29237.6756   108    30243.0000    28003.4053  1579353    7.41%
    756   643    29241.5516   103    30243.0000    28003.4053  1586200    7.41%
    764   649    29243.4170    99    30243.0000    28003.4053  1594544    7.41%
Elapsed time = 2699.30 sec. (1053747.91 ticks, tree = 93.20 MB, solutions = 9)
    772   657    29352.9633    89    30243.0000    28003.4053  1603607    7.41%
    780   665    29817.2741    95    30243.0000    28003.4053  1612879    7.41%
    987   768    28439.5011   168    30243.0000    28003.4053  1704172    7.41%
    991   772    28065.1216   181    30243.0000    28003.4053  1709945    7.41%
    995   776    28613.5517   176    30243.0000    28003.4053  1732884    7.41%
   1007   788    28502.5054   163    30243.0000    28003.4053  1760861    7.41%
   1145   926    28220.1280   164    30243.0000    28003.4053  1893780    7.41%
   1153   934    28472.0544   144    30243.0000    28003.4053  1919221    7.41%
   1205   982    28472.0691   144    30243.0000    28003.4053  1952002    7.41%
   1209   984    29083.4622   150    30243.0000    28003.4053  1961394    7.41%
Elapsed time = 3117.48 sec. (1199461.94 ticks, tree = 182.98 MB, solutions = 9)
   1221   994    28649.3581   137    30243.0000    28003.4053  1979318    7.41%
   1229  1000    28802.6445   140    30243.0000    28003.4053  1995986    7.41%
   1237  1004    28820.1041   138    30243.0000    28003.4053  2013420    7.41%
   1507  1115    28125.9913   171    30243.0000    28007.4388  2152230    7.39%
   1523  1131    28130.1855   173    30243.0000    28007.4388  2198396    7.39%
   1524  1132    28233.1200   154    30243.0000    28007.4388  2210358    7.39%
   1538  1146    29201.4576   119    30243.0000    28007.4388  2239628    7.39%
   1540  1148    28242.6011   153    30243.0000    28007.4388  2251082    7.39%
   1723  1244    28108.0255   170    30243.0000    28007.4388  2317905    7.39%
   1724  1245    28175.0345   157    30243.0000    28007.4388  2323430    7.39%
Elapsed time = 3574.73 sec. (1331621.53 ticks, tree = 241.11 MB, solutions = 9)
   1729  1250    28619.8695   152    30243.0000    28007.4388  2344591    7.39%
   1730  1251    28374.1659   162    30243.0000    28007.4388  2362319    7.39%
   1738  1259    28545.7414   151    30243.0000    28007.4388  2381610    7.39%
   1746  1267    28958.9814   141    30243.0000    28007.4388  2406898    7.39%
   1821  1342    28405.1740   151    30243.0000    28007.4388  2500018    7.39%
   1829  1350    28368.0017   146    30243.0000    28007.4388  2535157    7.39%
   1837  1358    28274.8532   140    30243.0000    28007.4388  2547258    7.39%
   1841  1362    28089.6765   155    30243.0000    28007.4388  2554323    7.39%
   1849  1370    28673.4556   142    30243.0000    28007.4388  2575439    7.39%
   1925  1446    28184.5373   152    30243.0000    28007.4388  2708791    7.39%
Elapsed time = 4106.29 sec. (1477121.97 ticks, tree = 279.90 MB, solutions = 9)
   1931  1452    29557.6047    90    30243.0000    28007.4388  2724940    7.39%
   1939  1460    29514.7366    85    30243.0000    28007.4388  2741378    7.39%
   1947  1468    29833.6791    86    30243.0000    28007.4388  2755402    7.39%
   1948  1469    28225.7019   148    30243.0000    28007.4388  2757537    7.39%
   1965  1486    28249.4029   154    30243.0000    28007.4388  2803957    7.39%
   2017  1536    30161.0084    82    30243.0000    28007.4388  2874986    7.39%
   2018  1537    28250.9038   146    30243.0000    28007.4388  2875164    7.39%
   2027  1546    28628.5098   130    30243.0000    28007.4388  2907172    7.39%
   2035  1552    28789.2210   132    30243.0000    28007.4388  2918303    7.39%
   2043  1558    28857.7192   114    30243.0000    28007.4388  2933634    7.39%
Elapsed time = 4538.61 sec. (1590902.40 ticks, tree = 300.00 MB, solutions = 9)
   2051  1564    29335.6144   115    30243.0000    28007.4388  2947392    7.39%
   2059  1572    29190.7217   115    30243.0000    28007.4388  2961835    7.39%
   2067  1578    29359.7249   124    30243.0000    28007.4388  2970463    7.39%
   2146  1639    29742.6593    64    30243.0000    28007.4388  3033708    7.39%
   2168  1659    29280.3053   124    30243.0000    28007.4388  3080015    7.39%
   2176  1667    29125.3506   106    30243.0000    28007.4388  3096781    7.39%
   2188  1679    29160.4702   105    30243.0000    28007.4388  3107742    7.39%
   2196  1687    29291.4385    84    30243.0000    28007.4388  3123665    7.39%
   2204  1695    29571.6889    76    30243.0000    28007.4388  3137892    7.39%
   2212  1703    29836.1594    74    30243.0000    28007.4388  3144639    7.39%
Elapsed time = 4835.58 sec. (1668566.46 ticks, tree = 328.36 MB, solutions = 9)
   2228  1719    29600.1297    67    30243.0000    28007.4388  3159422    7.39%
   2232  1723    29992.7767    80    30243.0000    28007.4388  3167126    7.39%
   2240  1731    29684.1325    71    30243.0000    28007.4388  3176871    7.39%
   2260  1751    29608.1224    70    30243.0000    28007.4388  3188488    7.39%
   2264  1755    29716.0728    76    30243.0000    28007.4388  3193203    7.39%
   2272  1763    29711.4618    62    30243.0000    28007.4388  3202552    7.39%
   2280  1771    30103.5197    67    30243.0000    28007.4388  3212288    7.39%
   2451  1898    28259.2790   162    30243.0000    28007.4388  3302953    7.39%
   2452  1899    28106.0865   168    30243.0000    28106.0865  3442511    7.07%
   2453  1900    28106.1779   168    30243.0000    28106.0865  3443196    7.07%
Elapsed time = 6133.33 sec. (2198976.30 ticks, tree = 450.32 MB, solutions = 9)
   2455  1901    28637.4017   146    30243.0000    28106.1780  3469038    7.07%
   2456  1901    28640.2265   154    30243.0000    28106.1780  3472957    7.07%
   2458  1902    28643.1823   153    30243.0000    28106.1957  3475898    7.07%
   2459  1902    28801.5934   114    30243.0000    28106.1957  3491203    7.07%
   2463  1905    28107.0697   168    30243.0000    28106.1957  3541264    7.07%
   2464  1906    28669.3979   164    30243.0000    28106.1957  3565363    7.07%
   2465  1907    28850.6772   138    30243.0000    28106.1957  3599517    7.07%
   2466  1907    28397.0690   161    30243.0000    28106.1957  3641209    7.07%
   2469  1908    28107.8857   166    30243.0000    28106.1957  3699668    7.07%
   2472  1910    28423.0052   161    30243.0000    28106.1957  3738549    7.07%
Elapsed time = 6754.94 sec. (2503892.25 ticks, tree = 448.18 MB, solutions = 9)
   2477  1914    28184.6667   155    30243.0000    28106.1957  3788654    7.07%
   2490  1921    28673.8026   151    30243.0000    28106.1957  3861924    7.07%
   2491  1922    28860.5388   136    30243.0000    28106.1957  3872692    7.07%
   2492  1923    28696.7221   137    30243.0000    28106.1957  3900896    7.07%
   2495  1924    29104.6833   138    30243.0000    28106.1957  3962077    7.07%
   2509  1930    28331.4686   156    30243.0000    28106.1957  4067485    7.07%
   2510  1930    28108.9470   172    30243.0000    28106.1957  4067515    7.07%
   2511  1931    28674.1543   144    30243.0000    28106.1957  4067675    7.07%

Mixed integer rounding cuts applied:  7136
Lift and project cuts applied:  11
Gomory fractional cuts applied:  2

Root node processing (before b&c):
  Real time             =  960.54 sec. (523791.24 ticks)
Parallel b&c, 4 threads:
  Real time             = 6239.50 sec. (2126512.95 ticks)
  Sync time (average)   =  586.31 sec.
  Wait time (average)   =  586.46 sec.
                          ------------
Total (root+branch&cut) = 7200.05 sec. (2650304.19 ticks)
We use intensification finding a better solution: 30243.0
================ Solution ================
BAP terminated with objective : 30243
Total Number of iterations: 84
Total Number of processed nodes: 4
Total Time spent on master problems: 564628 Total time spent on pricing problems: 19705
Best bound : 26735.844999999994
[8, 30, 38, 65, 88, 117, 130, 140, 145, 155, 170, 189, 198, 209, 214, 261, 274, 279, 295, 320, 325, 330, 332, 341, 398, 405, 408, 417, 422, 430, 433, 437, 438, 447, 448, 457, 500, 504, 509, 518, 522, 523, 548, 557, 570, 582, 605, 630, 647, 666, 674, 681, 686, 692, 708, 712, 725, 737, 750, 763, 783, 802, 809, 832, 843, 863, 895, 901, 916, 933, 943, 954, 977, 1000, 1032, 1044, 1058, 1073, 1102, 1112, 1118, 1122, 1146, 1153, 1167]
The number of service edges used= 85

Solution is optimal: false
Columns (only non-zero columns are returned):
artificial: false edgeIndexset: [448, 433, 170, 155] start node= 1 start time= 5 capacity type= 1 ifChargeSet: []
(1,5)->(3,13)->(1,20)->(3,28)->(1,5):1.0
Fix cost= 200 variable cost= 120

artificial: false edgeIndexset: [320, 214, 582, 447] start node= 5 start time= 12 capacity type= 2 ifChargeSet: []
(1,4)->(5,12)->(2,20)->(3,27)->(1,4):1.0
Fix cost= 350 variable cost= 120

artificial: false edgeIndexset: [977, 325, 422, 279] start node= 8 start time= 17 capacity type= 1 ifChargeSet: []
(3,2)->(1,9)->(8,17)->(2,25)->(3,2):1.0
Fix cost= 120 variable cost= 120

artificial: false edgeIndexset: [692, 189, 557, 895] start node= 4 start time= 17 capacity type= 1 ifChargeSet: []
(6,2)->(1,9)->(4,17)->(7,25)->(6,2):1.0
Fix cost= 150 variable cost= 120

artificial: false edgeIndexset: [737, 725, 630, 504, 522] start node= 5 start time= 0 capacity type= 2 ifChargeSet: []
(5,0)->(6,5)->(4,12)->(6,17)->(4,24)->(5,0):1.0
Fix cost= 350 variable cost= 120

artificial: false edgeIndexset: [1073, 1058, 916, 901] start node= 8 start time= 8 capacity type= 1 ifChargeSet: []
(7,1)->(8,8)->(7,16)->(8,23)->(7,1):1.0
Fix cost= 120 variable cost= 120

artificial: false edgeIndexset: [500, 341, 1270, 1339, 843, 686] start node= 5 start time= 26 capacity type= 2 ifChargeSet: []
(7,3)->(2,10)->(2,11)->(4,19)->(4,20)->(5,26)->(7,3):1.0
Fix cost= 350 variable cost= 112

artificial: false edgeIndexset: [130, 1239, 408, 1112, 954, 1277] start node= 9 start time= 2 capacity type= 1 ifChargeSet: []
(9,2)->(1,9)->(1,10)->(2,17)->(2,18)->(7,24)->(9,2):1.0
Fix cost= 130 variable cost= 112

artificial: false edgeIndexset: [1249, 417, 1122, 933, 1481, 140] start node= 1 start time= 20 capacity type= 2 ifChargeSet: []
(7,3)->(9,11)->(9,12)->(1,19)->(1,20)->(2,27)->(7,3):1.0
Fix cost= 300 variable cost= 112

artificial: false edgeIndexset: [1153, 65, 1204, 681, 809, 1438] start node= 7 start time= 28 capacity type= 1 ifChargeSet: []
(0,4)->(0,5)->(9,13)->(5,21)->(7,28)->(7,29)->(0,4):1.0
Fix cost= 110 variable cost= 112

artificial: false edgeIndexset: [674, 802, 1431, 88, 1146, 1227] start node= 7 start time= 21 capacity type= 1 ifChargeSet: []
(9,6)->(5,14)->(7,21)->(7,22)->(0,27)->(0,28)->(9,6):1.0
Fix cost= 110 variable cost= 112

artificial: false edgeIndexset: [1490, 1491, 518, 763, 30, 1102] start node= 4 start time= 8 capacity type= 2 ifChargeSet: []
(0,0)->(4,8)->(6,13)->(9,20)->(9,21)->(9,22)->(0,0):1.0
Fix cost= 400 variable cost= 112

artificial: false edgeIndexset: [145, 1330, 1331, 1332, 708, 523, 332] start node= 4 start time= 13 capacity type= 1 ifChargeSet: []
(2,2)->(4,10)->(4,11)->(4,12)->(4,13)->(6,18)->(1,25)->(2,2):1.0
Fix cost= 150 variable cost= 108

artificial: false edgeIndexset: [832, 209, 405, 1431, 457, 1274, 1258] start node= 7 start time= 21 capacity type= 1 ifChargeSet: []
(4,7)->(2,14)->(2,15)->(7,21)->(7,22)->(1,28)->(1,29)->(4,7):1.0
Fix cost= 110 variable cost= 108

artificial: false edgeIndexset: [1346, 1347, 1348, 198, 605, 509, 430, 1247] start node= 1 start time= 17 capacity type= 2 ifChargeSet: []
(5,5)->(3,10)->(1,17)->(1,18)->(4,26)->(4,27)->(4,28)->(4,29)->(5,5):1.0
Fix cost= 300 variable cost= 104

artificial: false edgeIndexset: [1424, 1425, 1379, 916, 1044, 1463, 570, 398] start node= 8 start time= 23 capacity type= 1 ifChargeSet: []
(5,0)->(2,8)->(7,14)->(7,15)->(7,16)->(8,23)->(8,24)->(5,29)->(5,0):1.0
Fix cost= 120 variable cost= 104

artificial: false edgeIndexset: [1232, 1233, 274, 647, 712, 1032, 1259, 1230, 1231] start node= 8 start time= 12 capacity type= 1 ifChargeSet: []
(1,0)->(1,1)->(1,2)->(1,3)->(1,4)->(8,12)->(5,17)->(6,22)->(1,29)->(1,0):1.0
Fix cost= 120 variable cost= 100

artificial: false edgeIndexset: [437, 1205, 117, 1206, 1254, 1207, 1255, 8, 1256, 1306] start node= 1 start time= 24 capacity type= 1 ifChargeSet: []
(0,5)->(0,6)->(0,7)->(0,8)->(3,16)->(3,17)->(1,24)->(1,25)->(1,26)->(1,27)->(0,5):1.0
Fix cost= 200 variable cost= 92

artificial: false edgeIndexset: [1426, 1427, 1428, 548, 1429, 1430, 1431, 1432, 330, 863] start node= 7 start time= 21 capacity type= 1 ifChargeSet: []
(2,0)->(4,8)->(7,16)->(7,17)->(7,18)->(7,19)->(7,20)->(7,21)->(7,22)->(7,23)->(2,0):1.0
Fix cost= 110 variable cost= 92

artificial: false edgeIndexset: [1443, 1444, 1445, 438, 1446, 295, 1447, 1000, 1448, 1449] start node= 8 start time= 3 capacity type= 1 ifChargeSet: []
(8,3)->(8,4)->(8,5)->(8,6)->(8,7)->(8,8)->(8,9)->(8,10)->(3,18)->(1,25)->(8,3):1.0
Fix cost= 120 variable cost= 92

artificial: false edgeIndexset: [1248, 1409, 1249, 1250, 1477, 261, 1245, 1118, 750, 1246, 1247] start node= 1 start time= 15 capacity type= 1 ifChargeSet: []
(6,0)->(9,7)->(9,8)->(1,15)->(1,16)->(1,17)->(1,18)->(1,19)->(1,20)->(1,21)->(6,29)->(6,0):1.0
Fix cost= 200 variable cost= 88

artificial: false edgeIndexset: [1491, 1492, 1493, 1494, 1495, 1496, 666, 1355, 943, 1167] start node= 9 start time= 22 capacity type= 0 ifChargeSet: []
(5,5)->(5,6)->(7,13)->(9,21)->(9,22)->(9,23)->(9,24)->(9,25)->(9,26)->(9,27)->(5,5):1.0
Fix cost= 80 variable cost= 92

artificial: false edgeIndexset: [1410, 1411, 1412, 38, 1336, 1435, 1436, 557, 1437, 1438, 783, 1439] start node= 7 start time= 25 capacity type= 1 ifChargeSet: []
(7,0)->(7,1)->(7,2)->(7,3)->(0,8)->(4,16)->(4,17)->(7,25)->(7,26)->(7,27)->(7,28)->(7,29)->(7,0):1.0
Fix cost= 110 variable cost= 84

fix cost+variable cost+commodity cost= 4310+2456+23477.0=30243.0

vehicle dowork= 38510 commodity dowork= 23477.0
no load ratio= 0.39036613866528175

Total vehicles used= 23

vehicleCoverServiceEdge information:
{1153=1, 130=1, 901=1, 261=1, 518=1, 647=1, 1032=1, 8=1, 522=1, 523=1, 140=1, 398=1, 1167=1, 783=1, 145=1, 274=1, 916=2, 1044=1, 405=1, 279=1, 408=1, 666=1, 155=1, 30=1, 417=1, 1058=1, 674=1, 802=1, 548=1, 933=1, 422=1, 38=1, 295=1, 681=1, 809=1, 170=1, 557=2, 686=1, 430=1, 943=1, 433=1, 1073=1, 692=1, 437=1, 438=1, 954=1, 570=1, 189=1, 447=1, 448=1, 320=1, 832=1, 65=1, 708=1, 325=1, 582=1, 198=1, 712=1, 457=1, 330=1, 843=1, 332=1, 1102=1, 977=1, 209=1, 725=1, 341=1, 214=1, 1112=1, 88=1, 605=1, 1118=1, 863=1, 737=1, 1122=1, 1000=1, 750=1, 500=1, 117=1, 630=1, 504=1, 1146=1, 763=1, 509=1, 895=1}

commodityFlowIntoTerminal information:
61 0 0 0 50 21 0 0 50 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 50 0 0 
0 0 0 0 21 13 0 0 0 99 0 0 0 0 0 40 0 100 0 88 14 0 0 0 25 89 0 0 19 48 
36 0 26 0 0 0 0 0 24 0 10 0 0 0 21 0 0 33 0 0 26 0 0 0 0 23 0 80 0 0 
0 0 30 0 0 0 0 0 0 0 100 0 0 28 0 0 50 0 33 0 0 0 0 0 0 0 0 27 38 0 
0 0 0 0 0 0 0 20 137 0 9 0 74 0 0 0 28 40 0 8 0 0 0 0 24 0 83 0 0 0 
16 0 0 0 0 64 0 0 0 0 0 0 41 0 34 0 0 41 0 0 0 40 0 0 0 0 16 0 0 50 
0 0 25 0 0 100 0 0 0 0 0 0 0 90 0 0 0 13 0 0 0 0 33 0 0 0 0 0 0 38 
0 50 0 132 0 0 0 0 0 0 0 0 0 18 50 0 26 0 0 0 0 46 0 0 50 50 0 0 50 0 
0 0 0 50 0 0 0 0 38 0 0 0 48 0 0 0 0 41 0 0 0 0 0 56 0 0 0 0 0 0 
0 0 17 0 0 0 33 49 0 0 0 100 0 23 0 0 0 0 0 0 63 1 0 0 0 0 0 0 0 0 

vehicle pattern information:
[0, 0, 0, 0, 0, 2, 0, 0, 0, 0, 0, 0, 0, 0, 2, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0]
[0, 0, 0, 0, 0, 0, 0, 1, 0, 0, 1, 0, 0, 0, 1, 0, 0, 0, 0, 1, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0]
[0, 0, 0, 0, 0, 0, 0, 0, 0, 1, 1, 0, 0, 0, 1, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 1, 0, 0, 0, 0, 0, 0, 0]
[0, 0, 0, 0, 0, 0, 1, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 1, 0, 0, 0, 0, 1, 0, 0, 0, 0, 0, 1, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0]
[0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 1, 1, 0, 0, 0, 1, 0, 0, 2, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0]
[0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 2, 0, 0, 0, 0, 2, 0, 0, 0, 0]
[0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 1, 0, 0, 0, 0, 1, 0, 0, 0, 0, 0, 1, 0, 0, 0, 0, 0, 1, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0]
[0, 0, 0, 0, 1, 0, 0, 0, 0, 0, 0, 0, 0, 1, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 1, 0, 0, 0, 0, 0, 1, 0, 0]
[0, 0, 1, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 1, 0, 0, 0, 1, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 1, 0]
[0, 1, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 1, 0, 0, 0, 0, 0, 0, 0, 1, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 1, 0, 0, 0]
[0, 0, 0, 0, 1, 0, 0, 0, 0, 0, 0, 1, 0, 0, 0, 0, 0, 1, 0, 0, 0, 0, 0, 1, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0]
[0, 0, 0, 0, 0, 0, 1, 0, 0, 0, 0, 0, 0, 1, 0, 1, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 1, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0]
[0, 0, 0, 0, 0, 0, 1, 0, 0, 0, 0, 0, 0, 0, 1, 0, 1, 0, 0, 0, 1, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0]
[0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 1, 0, 0, 0, 0, 0, 1, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 1, 0, 0, 0, 1, 0, 0, 0, 0, 0]
[0, 0, 0, 0, 0, 0, 0, 0, 0, 1, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 1, 0, 1, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 1, 0, 0, 0, 0, 0]
[1, 0, 0, 1, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 1, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0]
[0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 1, 0, 0, 0, 0, 0, 0, 1, 0, 0, 0, 0, 0, 0, 0, 0, 0, 1, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0]
[0, 0, 0, 0, 0, 0, 0, 0, 0, 1, 0, 0, 0, 0, 1, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 1, 0, 0, 0, 0, 0, 0]
[0, 0, 0, 0, 0, 0, 0, 0, 1, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 1, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 1, 0, 0]
[0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 1, 0, 0, 0, 0, 0, 0, 0, 0, 1, 0, 0, 0, 0, 0, 0, 1, 0]
[0, 1, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 1, 0, 0, 0, 0, 0, 0, 0, 1, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0]
x[0]:5,6->7,13= 5.0 7
x[0]:7,16->8,23= 5.0 7
total cost= 70.0

x[1]:7,23->2,0= 15.0 7
total cost= 105.0

x[2]:4,17->7,25= 14.0 8
x[2]:6,5->4,12= 14.0 7
total cost= 210.0

x[3]:5,26->7,3= 5.0 7
x[3]:7,3->0,8= 5.0 5
x[3]:4,20->5,26= 5.0 6
total cost= 90.0

x[4]:1,4->8,12= 12.0 8
x[4]:9,12->1,19= 12.0 7
total cost= 180.0

x[5]:8,23->7,1= 14.0 8
x[5]:7,3->9,11= 14.0 8
total cost= 224.0

x[6]:1,18->4,26= 9.0 8
total cost= 72.0

x[7]:0,0->4,8= 7.0 8
x[7]:4,8->7,16= 7.0 8
x[7]:7,16->8,23= 7.0 7
total cost= 161.0

x[8]:2,20->3,27= 13.0 7
total cost= 91.0

x[9]:0,28->9,6= 7.0 8
x[9]:9,8->1,15= 7.0 7
total cost= 105.0

x[10]:9,8->1,15= 12.0 7
x[10]:1,20->3,28= 12.0 8
total cost= 180.0

x[11]:6,0->9,7= 15.0 7
x[11]:1,21->6,29= 15.0 8
total cost= 225.0

x[12]:0,8->4,16= 15.0 8
x[12]:4,17->7,25= 15.0 8
total cost= 240.0

x[13]:5,14->7,21= 10.0 7
x[13]:7,22->0,27= 10.0 5
total cost= 120.0

x[14]:6,18->1,25= 12.0 7
total cost= 84.0

x[15]:1,18->4,26= 5.0 8
total cost= 40.0

x[16]:7,25->6,2= 7.0 7
total cost= 49.0

x[17]:7,3->2,10= 10.0 7
total cost= 70.0

x[18]:8,24->5,29= 11.0 5
x[18]:9,27->5,5= 1.0 8
x[18]:7,16->8,23= 11.0 7
x[18]:7,13->9,21= 1.0 8
total cost= 148.0

x[19]:4,8->6,13= 8.0 5
x[19]:0,0->4,8= 8.0 8
total cost= 104.0

x[20]:1,20->2,27= 6.0 7
x[20]:2,8->7,14= 2.0 6
x[20]:2,27->7,3= 4.0 6
total cost= 78.0

x[21]:1,20->2,27= 5.0 7
x[21]:2,27->7,3= 5.0 6
total cost= 65.0

x[22]:3,10->1,17= 13.0 7
x[22]:1,18->4,26= 13.0 8
total cost= 195.0

x[23]:9,22->0,0= 6.0 8
x[23]:6,13->9,20= 6.0 7
total cost= 90.0

x[24]:1,29->4,7= 14.0 8
total cost= 112.0

x[25]:2,8->7,14= 7.0 6
x[25]:7,16->8,23= 7.0 7
total cost= 91.0

x[26]:2,0->4,8= 7.0 8
x[26]:4,8->6,13= 7.0 5
total cost= 91.0

x[27]:4,8->7,16= 7.0 8
total cost= 56.0

x[28]:2,20->3,27= 7.0 7
x[28]:4,7->2,14= 7.0 7
x[28]:4,29->5,5= 3.0 6
x[28]:5,5->3,10= 3.0 5
total cost= 131.0

x[29]:3,10->1,17= 10.0 7
x[29]:5,5->3,10= 10.0 5
total cost= 120.0

x[30]:2,11->4,19= 8.0 8
total cost= 64.0

x[31]:4,8->6,13= 9.0 5
x[31]:0,0->4,8= 9.0 8
total cost= 117.0

x[32]:8,24->5,29= 6.0 5
x[32]:5,5->3,10= 6.0 5
x[32]:3,10->1,17= 6.0 7
total cost= 102.0

x[33]:4,8->6,13= 8.0 5
total cost= 40.0

x[34]:4,8->6,13= 6.0 5
x[34]:6,13->9,20= 6.0 7
total cost= 72.0

x[35]:5,21->7,28= 12.0 7
x[35]:5,26->7,3= 3.0 7
total cost= 105.0

x[36]:7,22->1,28= 5.0 6
total cost= 30.0

x[37]:8,23->7,1= 6.0 8
x[37]:7,3->9,11= 6.0 8
total cost= 96.0

x[38]:0,8->3,16= 14.0 8
x[38]:1,25->8,3= 14.0 8
x[38]:3,17->1,24= 14.0 7
total cost= 322.0

x[39]:7,22->1,28= 7.0 6
total cost= 42.0

x[40]:5,0->6,5= 12.0 5
total cost= 60.0

x[41]:5,5->3,10= 10.0 5
x[41]:9,27->5,5= 10.0 8
total cost= 130.0

x[42]:1,9->8,17= 15.0 8
total cost= 120.0

x[43]:6,17->4,24= 5.0 7
total cost= 35.0

x[44]:8,24->5,29= 5.0 5
x[44]:8,23->7,1= 3.0 8
x[44]:5,0->6,5= 5.0 5
x[44]:6,13->9,20= 5.0 7
x[44]:7,3->9,11= 3.0 8
total cost= 133.0

x[45]:1,20->2,27= 7.0 7
x[45]:2,27->7,3= 7.0 6
x[45]:3,10->1,17= 7.0 7
total cost= 140.0

x[46]:0,5->9,13= 8.0 8
total cost= 64.0

x[47]:3,2->1,9= 11.0 7
x[47]:1,9->4,17= 11.0 8
total cost= 165.0

x[48]:5,5->3,10= 14.0 5
total cost= 70.0

x[49]:5,14->7,21= 15.0 7
x[49]:7,3->0,8= 1.0 5
x[49]:7,22->0,27= 7.0 5
x[49]:7,29->0,4= 7.0 5
total cost= 180.0

x[50]:1,9->4,17= 5.0 8
x[50]:3,28->1,5= 5.0 7
total cost= 75.0

x[51]:9,12->1,19= 11.0 7
total cost= 77.0

x[52]:9,22->0,0= 6.0 8
total cost= 48.0

x[53]:9,13->5,21= 5.0 8
x[53]:2,27->7,3= 5.0 6
x[53]:7,3->9,11= 5.0 8
total cost= 110.0

x[54]:7,29->0,4= 12.0 5
total cost= 60.0

x[55]:4,29->5,5= 14.0 6
x[55]:5,5->3,10= 14.0 5
total cost= 154.0

x[56]:9,22->0,0= 12.0 8
total cost= 96.0

x[57]:8,12->5,17= 5.0 5
x[57]:5,5->3,10= 5.0 5
total cost= 50.0

x[58]:1,10->2,17= 12.0 7
x[58]:1,20->2,27= 1.0 7
x[58]:2,18->7,24= 12.0 6
x[58]:2,27->7,3= 1.0 6
total cost= 169.0

x[59]:3,2->1,9= 7.0 7
x[59]:3,28->1,5= 4.0 7
x[59]:1,18->4,26= 11.0 8
total cost= 165.0

x[60]:9,13->5,21= 12.0 8
x[60]:5,21->7,28= 12.0 7
total cost= 180.0

x[61]:1,5->3,13= 14.0 8
total cost= 112.0

x[62]:1,20->3,28= 15.0 8
x[62]:6,2->1,9= 15.0 7
total cost= 225.0

x[63]:4,12->6,17= 13.0 5
x[63]:6,22->1,29= 13.0 7
total cost= 156.0

x[64]:7,23->2,0= 5.0 7
total cost= 35.0

x[65]:8,24->5,29= 6.0 5
x[65]:5,0->6,5= 6.0 5
x[65]:6,5->4,12= 6.0 7
total cost= 102.0

x[66]:2,0->4,8= 14.0 8
x[66]:8,17->2,25= 14.0 8
total cost= 224.0

x[67]:4,29->5,5= 9.0 6
x[67]:5,5->3,10= 9.0 5
total cost= 99.0

x[68]:6,5->4,12= 11.0 7
x[68]:7,25->6,2= 11.0 7
total cost= 154.0

x[69]:3,10->1,17= 8.0 7
x[69]:1,18->4,26= 8.0 8
total cost= 120.0

x[70]:2,0->4,8= 9.0 8
x[70]:8,17->2,25= 9.0 8
total cost= 144.0

x[71]:8,23->7,1= 12.0 8
x[71]:7,3->9,11= 12.0 8
total cost= 192.0

x[72]:0,0->4,8= 13.0 8
total cost= 104.0

x[73]:4,8->6,13= 9.0 5
x[73]:6,13->9,20= 9.0 7
total cost= 108.0

x[74]:6,18->1,25= 7.0 7
total cost= 49.0

x[75]:1,20->2,27= 15.0 7
total cost= 105.0

x[76]:1,5->3,13= 14.0 8
total cost= 112.0

x[77]:5,17->6,22= 11.0 5
x[77]:6,0->9,7= 11.0 7
total cost= 132.0

x[78]:7,22->0,27= 5.0 5
total cost= 25.0

x[79]:8,23->7,1= 10.0 8
x[79]:7,3->9,11= 10.0 8
total cost= 160.0

x[80]:1,27->0,5= 6.0 8
total cost= 48.0

x[81]:1,4->5,12= 6.0 8
x[81]:3,27->1,4= 6.0 7
total cost= 90.0

x[82]:5,5->3,10= 12.0 5
total cost= 60.0

x[83]:1,25->8,3= 12.0 8
x[83]:9,12->1,19= 12.0 7
total cost= 180.0

x[84]:2,27->7,3= 12.0 6
total cost= 72.0

x[85]:9,13->5,21= 7.0 8
x[85]:5,21->7,28= 7.0 7
total cost= 105.0

x[86]:7,3->9,11= 11.0 8
x[86]:7,24->9,2= 3.0 8
total cost= 112.0

x[87]:9,12->1,19= 10.0 7
total cost= 70.0

x[88]:9,12->1,19= 12.0 7
total cost= 84.0

x[89]:2,8->7,14= 1.0 6
x[89]:2,15->7,21= 6.0 6
x[89]:7,25->6,2= 7.0 7
total cost= 91.0

x[90]:9,8->1,15= 6.0 7
total cost= 42.0

x[91]:4,8->6,13= 7.0 5
total cost= 35.0

x[92]:4,20->5,26= 11.0 6
total cost= 66.0

x[93]:9,13->5,21= 10.0 8
total cost= 80.0

x[94]:7,29->0,4= 14.0 5
x[94]:2,18->7,24= 14.0 6
total cost= 154.0

x[95]:1,20->2,27= 14.0 7
x[95]:2,8->7,14= 14.0 6
total cost= 182.0

x[96]:3,10->1,17= 12.0 7
x[96]:1,18->4,26= 12.0 8
total cost= 180.0

x[97]:6,0->9,7= 8.0 7
x[97]:1,21->6,29= 8.0 8
total cost= 120.0

x[98]:4,29->5,5= 5.0 6
x[98]:5,5->3,10= 5.0 5
total cost= 55.0

x[99]:9,6->5,14= 6.0 8
x[99]:5,21->7,28= 6.0 7
total cost= 90.0

x[100]:1,4->5,12= 7.0 8
x[100]:2,15->7,21= 7.0 6
x[100]:7,22->1,28= 7.0 6
total cost= 140.0

x[101]:4,29->5,5= 5.0 6
total cost= 30.0

x[102]:4,7->2,14= 7.0 7
total cost= 49.0

x[103]:5,0->2,8= 14.0 8
total cost= 112.0

x[104]:5,14->7,21= 8.0 7
x[104]:7,22->0,27= 8.0 5
total cost= 96.0

x[105]:1,4->8,12= 12.0 8
x[105]:1,25->8,3= 2.0 8
total cost= 112.0

x[106]:3,17->1,24= 6.0 7
x[106]:1,29->4,7= 6.0 8
total cost= 90.0

x[107]:2,8->7,14= 14.0 6
x[107]:7,24->9,2= 14.0 8
total cost= 196.0

x[108]:0,0->4,8= 8.0 8
total cost= 64.0

x[109]:4,17->7,25= 13.0 8
x[109]:6,5->4,12= 13.0 7
total cost= 195.0

x[110]:1,20->2,27= 8.0 7
x[110]:2,27->7,3= 8.0 6
x[110]:3,13->1,20= 8.0 7
total cost= 160.0

x[111]:0,8->3,16= 5.0 8
x[111]:3,17->1,24= 5.0 7
total cost= 75.0

x[112]:7,22->0,27= 11.0 5
total cost= 55.0

x[113]:1,4->5,12= 15.0 8
x[113]:3,27->1,4= 15.0 7
total cost= 225.0

x[114]:5,6->7,13= 13.0 7
x[114]:7,16->8,23= 13.0 7
total cost= 182.0

x[115]:4,8->6,13= 12.0 5
x[115]:0,0->4,8= 12.0 8
total cost= 156.0

x[116]:6,18->1,25= 13.0 7
total cost= 91.0

x[117]:5,0->6,5= 11.0 5
total cost= 55.0

x[118]:0,0->4,8= 5.0 8
total cost= 40.0

x[119]:2,25->3,2= 7.0 7
x[119]:4,7->2,14= 7.0 7
total cost= 98.0

x[120]:0,8->3,16= 4.0 8
x[120]:7,29->0,4= 4.0 5
x[120]:7,1->8,8= 10.0 7
x[120]:8,10->3,18= 10.0 8
total cost= 202.0

x[121]:4,8->6,13= 12.0 5
total cost= 60.0

x[122]:1,4->8,12= 13.0 8
x[122]:6,22->1,29= 13.0 7
total cost= 195.0

x[123]:9,6->5,14= 13.0 8
x[123]:5,21->7,28= 13.0 7
total cost= 195.0

x[124]:7,23->2,0= 7.0 7
total cost= 49.0

x[125]:9,13->5,21= 6.0 8
total cost= 48.0

x[126]:7,3->0,8= 9.0 5
x[126]:2,27->7,3= 9.0 6
total cost= 99.0

x[127]:1,25->8,3= 10.0 8
x[127]:6,18->1,25= 10.0 7
total cost= 150.0

x[128]:1,10->2,17= 8.0 7
x[128]:6,2->1,9= 8.0 7
total cost= 112.0

x[129]:9,12->1,19= 9.0 7
x[129]:1,20->2,27= 9.0 7
total cost= 126.0

x[130]:6,17->4,24= 5.0 7
x[130]:4,29->5,5= 5.0 6
total cost= 65.0

x[131]:7,3->0,8= 13.0 5
x[131]:2,27->7,3= 13.0 6
total cost= 143.0

x[132]:8,23->7,1= 5.0 8
x[132]:7,3->9,11= 5.0 8
total cost= 80.0

x[133]:3,10->1,17= 14.0 7
x[133]:1,18->4,26= 14.0 8
total cost= 210.0

x[134]:1,20->3,28= 6.0 8
total cost= 48.0

x[135]:3,2->1,9= 7.0 7
x[135]:3,28->1,5= 4.0 7
x[135]:1,18->4,26= 11.0 8
total cost= 165.0

x[136]:8,24->5,29= 15.0 5
x[136]:5,0->6,5= 15.0 5
x[136]:6,5->4,12= 15.0 7
total cost= 255.0

x[137]:9,12->1,19= 6.0 7
x[137]:1,20->2,27= 6.0 7
total cost= 84.0

x[138]:7,3->9,11= 9.0 8
total cost= 72.0

x[139]:3,2->1,9= 10.0 7
total cost= 70.0

x[140]:2,25->3,2= 5.0 7
total cost= 35.0

x[141]:8,12->5,17= 12.0 5
x[141]:7,1->8,8= 12.0 7
total cost= 144.0

x[142]:5,26->7,3= 11.0 7
x[142]:7,3->0,8= 11.0 5
total cost= 132.0

x[143]:8,10->3,18= 13.0 8
total cost= 104.0

x[144]:0,0->4,8= 12.0 8
x[144]:4,8->7,16= 12.0 8
total cost= 192.0

x[145]:8,12->5,17= 14.0 5
x[145]:5,17->6,22= 14.0 5
total cost= 140.0

x[146]:0,8->3,16= 12.0 8
x[146]:3,18->1,25= 12.0 7
total cost= 180.0

x[147]:1,9->4,17= 14.0 8
total cost= 112.0

x[148]:1,4->8,12= 11.0 8
total cost= 88.0

x[149]:8,12->5,17= 5.0 5
x[149]:7,1->8,8= 5.0 7
total cost= 60.0

x[150]:3,2->1,9= 10.0 7
x[150]:1,9->4,17= 10.0 8
total cost= 150.0

x[151]:1,4->5,12= 13.0 8
x[151]:3,18->1,25= 13.0 7
total cost= 195.0

x[152]:0,28->9,6= 10.0 8
x[152]:9,8->1,15= 10.0 7
total cost= 150.0

x[153]:9,22->0,0= 11.0 8
x[153]:6,13->9,20= 11.0 7
total cost= 165.0

x[154]:5,0->6,5= 14.0 5
total cost= 70.0

x[155]:5,0->6,5= 4.0 5
x[155]:5,17->6,22= 2.0 5
total cost= 30.0

x[156]:7,23->2,0= 9.0 7
total cost= 63.0

x[157]:2,20->3,27= 7.0 7
total cost= 49.0

x[158]:2,18->7,24= 13.0 6
total cost= 78.0

x[159]:2,25->3,2= 10.0 7
total cost= 70.0

x[160]:5,17->6,22= 6.0 5
total cost= 30.0

x[161]:1,9->8,17= 12.0 8
x[161]:9,2->1,9= 12.0 7
total cost= 180.0

x[162]:0,0->4,8= 9.0 8
x[162]:7,22->0,27= 9.0 5
total cost= 117.0

x[163]:8,12->5,17= 5.0 5
total cost= 25.0

x[164]:0,28->9,6= 11.0 8
x[164]:9,12->1,19= 11.0 7
total cost= 165.0

x[165]:0,0->4,8= 12.0 8
x[165]:9,22->0,0= 12.0 8
total cost= 192.0

x[166]:0,8->3,16= 15.0 8
total cost= 120.0

x[167]:8,24->5,29= 7.0 5
x[167]:5,0->6,5= 7.0 5
x[167]:6,5->4,12= 7.0 7
total cost= 119.0

x[168]:5,0->6,5= 14.0 5
x[168]:6,17->4,24= 14.0 7
total cost= 168.0

x[169]:1,21->6,29= 15.0 8
x[169]:3,10->1,17= 15.0 7
x[169]:6,0->9,7= 15.0 7
total cost= 330.0

x[170]:1,25->8,3= 12.0 8
x[170]:3,10->1,17= 6.0 7
x[170]:3,13->1,20= 6.0 7
total cost= 180.0

x[171]:5,12->2,20= 11.0 8
total cost= 88.0

x[172]:2,27->7,3= 13.0 6
x[172]:7,3->9,11= 13.0 8
total cost= 182.0

x[173]:9,6->5,14= 15.0 8
total cost= 120.0

x[174]:0,8->4,16= 13.0 8
x[174]:7,29->0,4= 13.0 5
total cost= 169.0

x[175]:0,28->9,6= 5.0 8
x[175]:9,12->1,19= 5.0 7
total cost= 75.0

x[176]:0,5->9,13= 15.0 8
x[176]:1,27->0,5= 15.0 8
total cost= 240.0

x[177]:2,2->4,10= 9.0 8
x[177]:4,24->5,0= 9.0 6
total cost= 126.0

x[178]:7,3->0,8= 11.0 5
x[178]:2,27->7,3= 11.0 6
total cost= 121.0

x[179]:2,8->7,14= 12.0 6
x[179]:1,25->2,2= 12.0 7
x[179]:3,18->1,25= 12.0 7
total cost= 240.0

x[180]:3,2->1,9= 5.0 7
total cost= 35.0

x[181]:2,0->4,8= 12.0 8
x[181]:4,8->6,13= 12.0 5
total cost= 156.0

x[182]:2,27->7,3= 12.0 6
x[182]:7,3->9,11= 12.0 8
total cost= 168.0

x[183]:6,22->1,29= 9.0 7
total cost= 63.0

x[184]:4,29->5,5= 12.0 6
x[184]:5,5->3,10= 12.0 5
total cost= 132.0

x[185]:5,0->2,8= 10.0 8
total cost= 80.0

x[186]:9,22->0,0= 14.0 8
x[186]:6,13->9,20= 14.0 7
total cost= 210.0

x[187]:1,20->2,27= 9.0 7
x[187]:3,10->1,17= 9.0 7
total cost= 126.0

x[188]:1,9->8,17= 14.0 8
x[188]:6,2->1,9= 14.0 7
total cost= 210.0

x[189]:4,24->5,0= 7.0 6
total cost= 42.0

x[190]:1,25->2,2= 14.0 7
total cost= 98.0

x[191]:5,12->2,20= 15.0 8
total cost= 120.0

x[192]:3,18->1,25= 10.0 7
x[192]:8,10->3,18= 10.0 8
total cost= 150.0

x[193]:9,8->1,15= 5.0 7
x[193]:1,20->3,28= 5.0 8
total cost= 75.0

x[194]:2,25->3,2= 8.0 7
total cost= 56.0

x[195]:1,10->2,17= 13.0 7
x[195]:6,22->1,29= 13.0 7
total cost= 182.0

x[196]:4,17->7,25= 8.0 8
x[196]:6,5->4,12= 8.0 7
total cost= 120.0

x[197]:5,26->7,3= 13.0 7
x[197]:7,16->8,23= 13.0 7
total cost= 182.0

x[198]:7,1->8,8= 11.0 7
x[198]:2,18->7,24= 11.0 6
total cost= 143.0

x[199]:5,0->6,5= 12.0 5
x[199]:6,13->9,20= 12.0 7
total cost= 144.0

Total time= 7788813

Sovle for test10_7_30_50_300C.txt
Colmun limit=1000
number of service arcs=1500
number of holding arcs=350

