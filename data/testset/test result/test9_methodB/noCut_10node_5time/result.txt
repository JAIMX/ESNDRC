-------------------------
test9_7_30_30_400A

BranchAndPriceB_M bap=new BranchAndPriceB_M(dataModel, master, pricingProblems, solvers, branchCreators,Double.MAX_VALUE,0.65,0.3,0.1,10,0.001,5,0.1,true,false);

number of service arcs=900
number of holding arcs=210

Yes
207

javax.naming.TimeLimitExceededException
	at cg.master.Master.solveMasterProblem(Master.java:414)
	at org.jorlib.frameworks.columnGeneration.master.AbstractMaster.solve(AbstractMaster.java:152)
	at org.jorlib.frameworks.columnGeneration.colgenMain.ColGen.invokeMaster(ColGen.java:271)
	at org.jorlib.frameworks.columnGeneration.colgenMain.ColGen.solve(ColGen.java:224)
	at org.jorlib.frameworks.columnGeneration.branchAndPrice.AbstractBranchAndPrice.solveBAPNode(AbstractBranchAndPrice.java:342)
	at bap.BranchAndPriceB_M.runBranchAndPrice(BranchAndPriceB_M.java:239)
	at bap.BranchAndPriceB_M.LearningUB(BranchAndPriceB_M.java:924)
	at bap.BranchAndPriceB_M.runBranchAndPrice(BranchAndPriceB_M.java:323)
	at SNDRCSolver.<init>(SNDRCSolver.java:93)
	at SNDRCSolver.main(SNDRCSolver.java:228)
javax.naming.TimeLimitExceededException
	at cg.master.Master.solveMasterProblem(Master.java:414)
	at org.jorlib.frameworks.columnGeneration.master.AbstractMaster.solve(AbstractMaster.java:152)
	at org.jorlib.frameworks.columnGeneration.colgenMain.ColGen.invokeMaster(ColGen.java:271)
	at org.jorlib.frameworks.columnGeneration.colgenMain.ColGen.solve(ColGen.java:224)
	at org.jorlib.frameworks.columnGeneration.branchAndPrice.AbstractBranchAndPrice.solveBAPNode(AbstractBranchAndPrice.java:342)
	at bap.BranchAndPriceB_M.runBranchAndPrice(BranchAndPriceB_M.java:239)
	at SNDRCSolver.<init>(SNDRCSolver.java:93)
	at SNDRCSolver.main(SNDRCSolver.java:228)
================ Solution ================
BAP terminated with objective : 23366
Total Number of iterations: 174
Total Number of processed nodes: 11
Total Time spent on master problems: 4164224 Total time spent on pricing problems: 2293
Best bound : 19169.59083333332
[0, 6, 13, 14, 19, 20, 22, 23, 24, 26, 27, 30, 32, 34, 38, 39, 42, 44, 56, 58, 63, 67, 73, 76, 78, 79, 81, 83, 84, 90, 95, 97, 99, 100, 103, 104, 109, 110, 112, 114, 116, 121, 125, 133, 135, 136, 142, 144, 145, 150, 151, 152, 153, 165, 166, 168, 169, 170, 171, 173, 175, 176, 180, 183, 188, 193, 196, 200, 203]
The number of service edges used= 69

Solution is optimal: false
Columns (only non-zero columns are returned):
artificial: false set: [372, 116, 373, 374, 327, 23, 231, 375, 328, 153, 170] start node= 4 start time= 2 capacity type= 0
(4,0)->(4,1)->(4,2)->(3,8)->(5,15)->(5,16)->(5,17)->(5,18)->(5,19)->(0,24)->(0,25)->(4,0):1.0

artificial: false set: [81, 99, 58, 188, 285, 269] start node= 1 start time= 26 capacity type= 1
(2,2)->(2,3)->(6,11)->(2,18)->(2,19)->(1,26)->(2,2):1.0

artificial: false set: [112, 272, 401, 355, 100, 152, 203] start node= 4 start time= 28 capacity type= 1
(2,5)->(2,6)->(6,14)->(6,15)->(3,23)->(4,28)->(4,29)->(2,5):1.0

artificial: false set: [211, 212, 213, 151, 76, 13, 110] start node= 4 start time= 20 capacity type= 1
(0,4)->(0,5)->(0,6)->(0,7)->(3,15)->(4,20)->(2,26)->(0,4):1.0

artificial: false set: [112, 165, 168, 361, 362, 219, 363, 220, 14, 319] start node= 4 start time= 28 capacity type= 1
(5,4)->(5,5)->(5,6)->(5,7)->(0,12)->(0,13)->(0,14)->(3,22)->(3,23)->(4,28)->(5,4):1.0

artificial: false set: [276, 277, 278, 6, 279, 135, 348, 349, 95, 207] start node= 4 start time= 21 capacity type= 1
(0,0)->(0,1)->(2,9)->(2,10)->(2,11)->(2,12)->(2,13)->(4,21)->(4,22)->(4,23)->(0,0):1.0

artificial: false set: [145, 24, 73, 171, 380, 30] start node= 4 start time= 4 capacity type= 1
(4,4)->(2,10)->(0,18)->(5,23)->(5,24)->(0,29)->(4,4):1.0

artificial: false set: [352, 353, 354, 19, 355, 339, 213, 133, 22, 136] start node= 4 start time= 12 capacity type= 1
(0,6)->(0,7)->(4,12)->(4,13)->(0,20)->(4,25)->(4,26)->(4,27)->(4,28)->(4,29)->(0,6):1.0

artificial: false set: [240, 83, 291, 20, 292, 150, 39, 343, 216, 344, 217] start node= 4 start time= 16 capacity type= 1
(1,3)->(1,4)->(0,9)->(0,10)->(0,11)->(4,16)->(4,17)->(4,18)->(2,24)->(2,25)->(2,26)->(1,3):1.0

artificial: false set: [196, 404, 84, 58, 125] start node= 1 start time= 26 capacity type= 2
(2,2)->(3,10)->(6,17)->(6,18)->(1,26)->(2,2):1.0

artificial: false set: [256, 145, 257, 114, 258, 330, 254, 255, 79, 63] start node= 1 start time= 19 capacity type= 2
(4,3)->(4,4)->(2,10)->(1,17)->(1,18)->(1,19)->(1,20)->(1,21)->(1,22)->(3,28)->(4,3):1.0

artificial: false set: [0, 67, 248, 265, 249, 44, 142] start node= 1 start time= 11 capacity type= 2
(0,4)->(1,11)->(1,12)->(1,13)->(4,21)->(1,28)->(1,29)->(0,4):1.0

artificial: false set: [193, 228, 229, 390, 38, 230, 391, 231, 392, 42, 251, 252] start node= 1 start time= 14 capacity type= 2
(6,3)->(6,4)->(6,5)->(6,6)->(1,14)->(1,15)->(1,16)->(0,21)->(0,22)->(0,23)->(0,24)->(0,25)->(6,3):1.0

artificial: false set: [144, 97, 327, 56, 251, 252, 78] start node= 1 start time= 14 capacity type= 2
(4,0)->(4,1)->(2,7)->(1,14)->(1,15)->(1,16)->(2,22)->(4,0):1.0

artificial: false set: [291, 308, 309, 150, 200, 104, 109] start node= 4 start time= 18 capacity type= 2
(6,3)->(3,11)->(3,12)->(3,13)->(4,18)->(2,24)->(2,25)->(6,3):1.0

artificial: false set: [32, 34, 212, 213, 214, 166, 183, 215] start node= 5 start time= 0 capacity type= 2
(5,0)->(0,5)->(0,6)->(0,7)->(0,8)->(0,9)->(6,17)->(0,25)->(5,0):1.0

artificial: false set: [416, 176, 180, 103, 27] start node= 5 start time= 13 capacity type= 2
(6,0)->(0,8)->(5,13)->(2,21)->(6,29)->(6,0):1.0

artificial: false set: [323, 121, 361, 90, 362, 363, 284, 364, 365, 175] start node= 5 start time= 4 capacity type= 2
(5,4)->(5,5)->(5,6)->(5,7)->(5,8)->(5,9)->(2,17)->(2,18)->(3,26)->(3,27)->(5,4):1.0

artificial: false set: [224, 169, 173, 208, 209, 210, 211, 212, 26, 380, 381, 382, 30, 223] start node= 5 start time= 11 capacity type= 2
(0,1)->(0,2)->(0,3)->(0,4)->(0,5)->(0,6)->(5,11)->(0,16)->(0,17)->(0,18)->(5,23)->(5,24)->(5,25)->(5,26)->(0,1):1.0

Total time= 18032478


-------------------------------------------------------------------------------------------------------------------------------------------------------
test9_7_30_30_400B

BranchAndPriceB_M bap=new BranchAndPriceB_M(dataModel, master, pricingProblems, solvers, branchCreators,Double.MAX_VALUE,0.65,0.3,0.1,10,0.001,5,0.1,true,false);
number of service arcs=900
number of holding arcs=210

Yes
207

javax.naming.TimeLimitExceededException
	at cg.master.Master.solveMasterProblem(Master.java:414)
	at org.jorlib.frameworks.columnGeneration.master.AbstractMaster.solve(AbstractMaster.java:152)
	at org.jorlib.frameworks.columnGeneration.colgenMain.ColGen.invokeMaster(ColGen.java:271)
	at org.jorlib.frameworks.columnGeneration.colgenMain.ColGen.solve(ColGen.java:224)
	at org.jorlib.frameworks.columnGeneration.branchAndPrice.AbstractBranchAndPrice.solveBAPNode(AbstractBranchAndPrice.java:342)
	at bap.BranchAndPriceB_M.runBranchAndPrice(BranchAndPriceB_M.java:239)
	at SNDRCSolver.<init>(SNDRCSolver.java:93)
	at SNDRCSolver.main(SNDRCSolver.java:228)
================ Solution ================
BAP terminated with objective : 36534
Total Number of iterations: 183
Total Number of processed nodes: 11
Total Time spent on master problems: 4453756 Total time spent on pricing problems: 2376
Best bound : 34356.47
[1, 3, 7, 8, 10, 12, 14, 16, 20, 26, 27, 28, 29, 31, 36, 42, 48, 52, 55, 59, 64, 67, 68, 70, 75, 78, 82, 86, 89, 99, 101, 102, 106, 109, 115, 120, 123, 124, 126, 128, 130, 131, 132, 133, 134, 135, 138, 141, 142, 143, 146, 147, 148, 152, 154, 156, 159, 161, 163, 165, 171, 175, 179, 180, 181, 182, 184, 191, 192, 195, 197, 198, 200, 206]
The number of service edges used= 74

Solution is optimal: false
Columns (only non-zero columns are returned):
artificial: false set: [16, 257, 146, 131, 341, 86, 200] start node= 4 start time= 14 capacity type= 1
(0,4)->(3,9)->(4,14)->(4,15)->(1,20)->(1,21)->(6,29)->(0,4):1.0

artificial: false set: [353, 354, 198, 120, 10, 28, 142] start node= 4 start time= 27 capacity type= 1
(0,5)->(2,10)->(6,16)->(0,21)->(4,26)->(4,27)->(4,28)->(0,5):1.0

artificial: false set: [352, 353, 242, 354, 355, 356, 133, 102, 55, 315, 143, 351] start node= 4 start time= 24 capacity type= 1
(4,0)->(1,5)->(1,6)->(2,11)->(3,18)->(3,19)->(4,24)->(4,25)->(4,26)->(4,27)->(4,28)->(4,29)->(4,0):1.0

artificial: false set: [336, 161, 337, 130, 152, 109, 335] start node= 4 start time= 8 capacity type= 1
(3,3)->(4,8)->(4,9)->(4,10)->(4,11)->(2,18)->(4,26)->(3,3):1.0

artificial: false set: [304, 305, 306, 132, 342, 135, 343, 344, 156, 159] start node= 4 start time= 0 capacity type= 1
(4,0)->(3,7)->(3,8)->(3,9)->(3,10)->(4,15)->(4,16)->(4,17)->(4,18)->(3,25)->(4,0):1.0

artificial: false set: [227, 228, 294, 295, 296, 106, 138, 267, 268, 269, 14, 338, 339] start node= 4 start time= 11 capacity type= 1
(2,0)->(2,1)->(2,2)->(2,3)->(4,11)->(4,12)->(4,13)->(0,20)->(0,21)->(0,22)->(2,27)->(2,28)->(2,29)->(2,0):1.0

artificial: false set: [67, 147, 70, 246, 247, 248, 344, 345, 346, 347, 124, 348] start node= 4 start time= 17 capacity type= 1
(3,3)->(1,9)->(1,10)->(1,11)->(1,12)->(4,17)->(4,18)->(4,19)->(4,20)->(4,21)->(4,22)->(1,27)->(3,3):1.0

artificial: false set: [128, 64, 52, 101, 126] start node= 1 start time= 0 capacity type= 2
(1,0)->(2,5)->(3,12)->(1,18)->(3,24)->(1,0):1.0

artificial: false set: [48, 1, 200, 42, 415] start node= 1 start time= 12 capacity type= 2
(0,4)->(1,12)->(0,20)->(6,28)->(6,29)->(0,4):1.0

artificial: false set: [99, 181, 154, 27, 75] start node= 1 start time= 6 capacity type= 2
(1,6)->(5,11)->(0,17)->(4,22)->(2,29)->(1,6):1.0

artificial: false set: [240, 82, 148, 20, 197, 134, 239] start node= 1 start time= 2 capacity type= 2
(1,2)->(1,3)->(1,4)->(6,12)->(0,17)->(3,22)->(4,27)->(1,2):1.0

artificial: false set: [257, 258, 3, 195, 294, 391, 392, 393, 123, 59] start node= 1 start time= 21 capacity type= 2
(6,4)->(6,5)->(6,6)->(6,7)->(0,12)->(1,20)->(1,21)->(1,22)->(2,27)->(2,28)->(6,4):1.0

artificial: false set: [197, 27, 171, 29, 141] start node= 4 start time= 4 capacity type= 2
(4,4)->(6,12)->(0,17)->(4,22)->(0,29)->(4,4):1.0

artificial: false set: [16, 131, 165, 200, 415, 191] start node= 5 start time= 20 capacity type= 2
(0,4)->(3,9)->(4,14)->(5,20)->(6,28)->(6,29)->(0,4):1.0

artificial: false set: [179, 36, 373, 182, 374, 375, 215, 31] start node= 5 start time= 2 capacity type= 2
(5,2)->(0,8)->(0,9)->(5,16)->(5,17)->(5,18)->(5,19)->(0,25)->(5,2):1.0

artificial: false set: [115, 8, 184, 89, 12, 381] start node= 5 start time= 25 capacity type= 2
(0,1)->(2,6)->(0,13)->(2,18)->(5,24)->(5,25)->(0,1):1.0

artificial: false set: [192, 3, 195, 392, 393, 382, 78, 383] start node= 5 start time= 26 capacity type= 2
(6,5)->(6,6)->(6,7)->(0,12)->(1,20)->(5,25)->(5,26)->(5,27)->(6,5):1.0

artificial: false set: [163, 68, 372, 373, 182, 374, 7, 375, 232] start node= 5 start time= 15 capacity type= 2
(1,4)->(4,9)->(5,15)->(5,16)->(5,17)->(5,18)->(5,19)->(0,25)->(0,26)->(1,4):1.0

artificial: false set: [180, 358, 359, 360, 361, 26, 362, 412, 206, 175] start node= 5 start time= 1 capacity type= 2
(5,1)->(5,2)->(5,3)->(5,4)->(5,5)->(5,6)->(0,12)->(4,17)->(6,25)->(6,26)->(5,1):1.0

Total time= 18006051

-------------------------------------------------------------------------------------------------------------------------------------------------------
test9_7_30_30_400C

BranchAndPriceB_M bap=new BranchAndPriceB_M(dataModel, master, pricingProblems, solvers, branchCreators,Double.MAX_VALUE,0.65,0.3,0.1,10,0.001,5,0.1,true,false);

number of service arcs=900
number of holding arcs=210

Yes
222

javax.naming.TimeLimitExceededException
	at cg.master.Master.solveMasterProblem(Master.java:414)
	at org.jorlib.frameworks.columnGeneration.master.AbstractMaster.solve(AbstractMaster.java:152)
	at org.jorlib.frameworks.columnGeneration.colgenMain.ColGen.invokeMaster(ColGen.java:271)
	at org.jorlib.frameworks.columnGeneration.colgenMain.ColGen.solve(ColGen.java:224)
	at org.jorlib.frameworks.columnGeneration.branchAndPrice.AbstractBranchAndPrice.solveBAPNode(AbstractBranchAndPrice.java:342)
	at bap.BranchAndPriceB_M.runBranchAndPrice(BranchAndPriceB_M.java:239)
	at bap.BranchAndPriceB_M.LearningUB(BranchAndPriceB_M.java:924)
	at bap.BranchAndPriceB_M.runBranchAndPrice(BranchAndPriceB_M.java:323)
	at SNDRCSolver.<init>(SNDRCSolver.java:93)
	at SNDRCSolver.main(SNDRCSolver.java:228)
javax.naming.TimeLimitExceededException
	at cg.master.Master.solveMasterProblem(Master.java:414)
	at org.jorlib.frameworks.columnGeneration.master.AbstractMaster.solve(AbstractMaster.java:152)
	at org.jorlib.frameworks.columnGeneration.colgenMain.ColGen.invokeMaster(ColGen.java:271)
	at org.jorlib.frameworks.columnGeneration.colgenMain.ColGen.solve(ColGen.java:224)
	at org.jorlib.frameworks.columnGeneration.branchAndPrice.AbstractBranchAndPrice.solveBAPNode(AbstractBranchAndPrice.java:342)
	at bap.BranchAndPriceB_M.runBranchAndPrice(BranchAndPriceB_M.java:239)
	at SNDRCSolver.<init>(SNDRCSolver.java:93)
	at SNDRCSolver.main(SNDRCSolver.java:228)
================ Solution ================
BAP terminated with objective : 82346
Total Number of iterations: 97
Total Number of processed nodes: 11
Total Time spent on master problems: 3596189 Total time spent on pricing problems: 1282
Best bound : 80580.47499999992
[1, 3, 4, 5, 6, 9, 11, 14, 16, 17, 21, 22, 25, 26, 29, 30, 32, 34, 37, 39, 40, 41, 43, 44, 45, 48, 50, 51, 52, 56, 57, 61, 65, 66, 71, 72, 77, 81, 84, 85, 89, 97, 100, 101, 107, 108, 109, 111, 116, 120, 123, 124, 125, 127, 128, 129, 130, 133, 134, 136, 138, 140, 145, 148, 149, 150, 151, 152, 153, 155, 156, 157, 158, 160, 161, 162, 165, 168, 173, 174, 175, 176, 179, 183, 185, 186, 187, 189, 190, 192, 196, 199, 200, 201, 202, 203, 205, 208, 212, 217, 220, 221]
The number of service edges used= 102

Solution is optimal: false
Columns (only non-zero columns are returned):
artificial: false set: [256, 81, 293, 37, 294, 295, 72, 120] start node= 1 start time= 4 capacity type= 1
(1,4)->(1,5)->(2,11)->(2,12)->(2,13)->(2,14)->(3,19)->(2,27)->(1,4):1.0

artificial: false set: [401, 385, 386, 275, 52, 165, 56, 168] start node= 1 start time= 8 capacity type= 1
(5,0)->(1,8)->(5,13)->(5,14)->(5,15)->(1,23)->(1,24)->(5,29)->(5,0):1.0

artificial: false set: [179, 389, 133, 149, 390, 342, 220, 190] start node= 4 start time= 0 capacity type= 1
(4,0)->(4,1)->(5,7)->(3,12)->(5,17)->(5,18)->(5,19)->(6,24)->(4,0):1.0

artificial: false set: [66, 388, 310, 424, 152, 9, 205, 189] start node= 4 start time= 10 capacity type= 1
(0,4)->(4,10)->(5,16)->(5,17)->(6,22)->(6,23)->(2,28)->(2,29)->(0,4):3.0

artificial: false set: [145, 148, 363, 123, 364, 365, 366, 127] start node= 4 start time= 22 capacity type= 1
(3,2)->(4,8)->(3,15)->(4,21)->(4,22)->(4,23)->(4,24)->(4,25)->(3,2):1.0

artificial: false set: [32, 26, 138, 346, 428, 221, 429] start node= 4 start time= 4 capacity type= 1
(4,4)->(4,5)->(1,11)->(0,18)->(6,26)->(6,27)->(6,28)->(4,4):1.0

artificial: false set: [192, 233, 201, 234, 11, 235, 155, 61] start node= 4 start time= 20 capacity type= 1
(6,1)->(2,6)->(0,11)->(0,12)->(0,13)->(0,14)->(4,20)->(5,26)->(6,1):1.0

artificial: false set: [162, 356, 6, 153, 43, 125] start node= 4 start time= 14 capacity type= 1
(1,2)->(3,8)->(4,14)->(4,15)->(5,21)->(0,26)->(1,2):3.0

artificial: false set: [224, 225, 34, 22, 217, 140, 223] start node= 4 start time= 18 capacity type= 1
(0,1)->(0,2)->(0,3)->(0,4)->(6,12)->(4,18)->(1,24)->(0,1):1.0

artificial: false set: [48, 160, 129, 4, 151, 346] start node= 4 start time= 5 capacity type= 1
(4,4)->(4,5)->(5,11)->(0,16)->(1,22)->(3,28)->(4,4):1.0

artificial: false set: [384, 65, 301, 174, 21, 247, 248, 249, 250, 379, 380, 381, 382, 383] start node= 5 start time= 11 capacity type= 1
(5,7)->(5,8)->(5,9)->(5,10)->(5,11)->(5,12)->(5,13)->(2,19)->(2,20)->(0,25)->(0,26)->(0,27)->(0,28)->(0,29)->(5,7):1.0

artificial: false set: [3, 40, 201, 108, 61, 269, 270, 271] start node= 1 start time= 17 capacity type= 2
(6,1)->(2,6)->(0,11)->(1,17)->(1,18)->(1,19)->(1,20)->(2,26)->(6,1):1.0

artificial: false set: [116, 85, 40, 77, 111] start node= 1 start time= 20 capacity type= 2
(3,1)->(2,9)->(3,14)->(1,20)->(2,26)->(3,1):2.0

artificial: false set: [402, 3, 39, 201, 107, 61, 430, 431] start node= 1 start time= 17 capacity type= 2
(6,0)->(6,1)->(2,6)->(0,11)->(1,17)->(2,23)->(6,28)->(6,29)->(6,0):1.0

artificial: false set: [212, 25, 236, 109, 237, 30] start node= 1 start time= 7 capacity type= 2
(3,1)->(1,7)->(0,14)->(0,15)->(0,16)->(6,24)->(3,1):1.0

artificial: false set: [128, 368, 1, 156, 45, 157] start node= 4 start time= 26 capacity type= 2
(5,3)->(0,8)->(1,14)->(3,20)->(4,26)->(4,27)->(5,3):1.0

artificial: false set: [48, 129, 273, 196, 150, 187] start node= 4 start time= 4 capacity type= 2
(4,4)->(5,10)->(6,15)->(1,21)->(1,22)->(3,28)->(4,4):1.0

artificial: false set: [276, 101, 89, 41, 202, 140] start node= 4 start time= 18 capacity type= 2
(2,1)->(6,6)->(2,11)->(4,18)->(1,24)->(1,25)->(2,1):1.0

artificial: false set: [65, 149, 186, 203, 379, 301, 14, 415] start node= 4 start time= 1 capacity type= 2
(4,1)->(5,7)->(5,8)->(6,13)->(6,14)->(2,19)->(2,20)->(0,25)->(4,1):1.0

artificial: false set: [192, 233, 201, 234, 11, 235, 155, 61] start node= 4 start time= 20 capacity type= 2
(6,1)->(2,6)->(0,11)->(0,12)->(0,13)->(0,14)->(4,20)->(5,26)->(6,1):1.0

artificial: false set: [176, 97, 100, 391, 376, 173] start node= 5 start time= 4 capacity type= 2
(5,4)->(5,5)->(2,11)->(5,19)->(5,20)->(2,26)->(5,4):1.0

artificial: false set: [401, 385, 386, 275, 52, 165, 56, 168] start node= 5 start time= 13 capacity type= 2
(5,0)->(1,8)->(5,13)->(5,14)->(5,15)->(1,23)->(1,24)->(5,29)->(5,0):1.0

artificial: false set: [51, 3, 71, 39, 377, 158] start node= 5 start time= 6 capacity type= 2
(1,0)->(5,5)->(5,6)->(0,11)->(1,17)->(2,23)->(1,0):1.0

artificial: false set: [305, 130, 306, 179, 84, 133, 312, 313, 175] start node= 5 start time= 7 capacity type= 2
(3,0)->(3,1)->(3,2)->(5,7)->(3,12)->(5,17)->(2,23)->(2,24)->(2,25)->(3,0):1.0

artificial: false set: [208, 134, 183, 327, 136, 328, 329, 185] start node= 5 start time= 3 capacity type= 2
(5,3)->(6,8)->(3,15)->(3,16)->(3,17)->(3,18)->(5,23)->(3,28)->(5,3):1.0

artificial: false set: [161, 50, 5, 152, 315, 124] start node= 5 start time= 16 capacity type= 2
(3,3)->(3,4)->(4,10)->(5,16)->(0,21)->(1,27)->(3,3):1.0

artificial: false set: [17, 199, 426, 29, 253, 254, 190, 255] start node= 5 start time= 19 capacity type= 2
(1,1)->(1,2)->(1,3)->(1,4)->(0,11)->(5,19)->(6,24)->(6,25)->(1,1):1.0

artificial: false set: [16, 161, 5, 374, 57, 157] start node= 5 start time= 2 capacity type= 2
(5,2)->(5,3)->(0,8)->(5,16)->(0,21)->(1,27)->(5,2):1.0

artificial: false set: [323, 133, 200, 107, 44, 430, 175] start node= 5 start time= 17 capacity type= 2
(1,5)->(3,11)->(3,12)->(5,17)->(2,23)->(6,28)->(6,29)->(1,5):1.0

artificial: false set: [179, 133, 149, 389, 342, 390, 220, 190] start node= 5 start time= 17 capacity type= 2
(4,0)->(4,1)->(5,7)->(3,12)->(5,17)->(5,18)->(5,19)->(6,24)->(4,0):1.0

Total time= 18046274
-------------------------------------------------------------------------------------------------------------------------------------------------------
test9_7_30_30_400D

BranchAndPriceB_M bap=new BranchAndPriceB_M(dataModel, master, pricingProblems, solvers, branchCreators,Double.MAX_VALUE,0.65,0.3,0.1,10,0.001,5,0.1,true,false);
number of service arcs=900
number of holding arcs=210

Yes
218

javax.naming.TimeLimitExceededException
	at cg.master.Master.solveMasterProblem(Master.java:414)
	at org.jorlib.frameworks.columnGeneration.master.AbstractMaster.solve(AbstractMaster.java:152)
	at org.jorlib.frameworks.columnGeneration.colgenMain.ColGen.invokeMaster(ColGen.java:271)
	at org.jorlib.frameworks.columnGeneration.colgenMain.ColGen.solve(ColGen.java:224)
	at org.jorlib.frameworks.columnGeneration.branchAndPrice.AbstractBranchAndPrice.solveBAPNode(AbstractBranchAndPrice.java:342)
	at bap.BranchAndPriceB_M.runBranchAndPrice(BranchAndPriceB_M.java:239)
	at bap.BranchAndPriceB_M.LearningUB(BranchAndPriceB_M.java:924)
	at bap.BranchAndPriceB_M.runBranchAndPrice(BranchAndPriceB_M.java:323)
	at SNDRCSolver.<init>(SNDRCSolver.java:93)
	at SNDRCSolver.main(SNDRCSolver.java:228)
javax.naming.TimeLimitExceededException
	at cg.master.Master.solveMasterProblem(Master.java:414)
	at org.jorlib.frameworks.columnGeneration.master.AbstractMaster.solve(AbstractMaster.java:152)
	at org.jorlib.frameworks.columnGeneration.colgenMain.ColGen.invokeMaster(ColGen.java:271)
	at org.jorlib.frameworks.columnGeneration.colgenMain.ColGen.solve(ColGen.java:224)
	at org.jorlib.frameworks.columnGeneration.branchAndPrice.AbstractBranchAndPrice.solveBAPNode(AbstractBranchAndPrice.java:342)
	at bap.BranchAndPriceB_M.runBranchAndPrice(BranchAndPriceB_M.java:239)
	at SNDRCSolver.<init>(SNDRCSolver.java:93)
	at SNDRCSolver.main(SNDRCSolver.java:228)
================ Solution ================
BAP terminated with objective : 84833
Total Number of iterations: 56
Total Number of processed nodes: 11
Total Time spent on master problems: 2566749 Total time spent on pricing problems: 874
Best bound : 83072.94000000015
[2, 3, 4, 5, 6, 10, 12, 14, 20, 21, 22, 24, 26, 28, 29, 31, 35, 36, 42, 47, 48, 49, 50, 51, 52, 57, 59, 61, 63, 65, 66, 67, 69, 70, 72, 76, 79, 83, 85, 87, 88, 91, 95, 101, 103, 109, 110, 113, 115, 117, 119, 121, 122, 124, 125, 127, 128, 129, 130, 131, 133, 134, 135, 136, 137, 138, 141, 144, 155, 156, 157, 158, 159, 160, 161, 162, 163, 164, 167, 169, 170, 171, 172, 174, 176, 177, 178, 179, 180, 181, 182, 184, 185, 188, 194, 196, 203, 204, 208, 211, 212, 214, 216]
The number of service edges used= 103

Solution is optimal: false
Columns (only non-zero columns are returned):
artificial: false set: [177, 3, 36, 101, 341, 342, 343, 125] start node= 4 start time= 3 capacity type= 1
(4,3)->(4,4)->(4,5)->(4,6)->(6,12)->(0,17)->(1,22)->(3,28)->(4,3):3.0

artificial: false set: [162, 178, 52, 4, 410, 411, 412, 125] start node= 4 start time= 6 capacity type= 1
(5,0)->(4,6)->(6,12)->(6,13)->(6,14)->(6,15)->(0,20)->(1,25)->(5,0):1.0

artificial: false set: [128, 353, 354, 163, 179, 421, 247, 376, 218, 12] start node= 4 start time= 15 capacity type= 1
(0,0)->(0,1)->(5,8)->(5,9)->(4,15)->(4,16)->(4,17)->(6,23)->(6,24)->(0,29)->(0,0):1.0

artificial: false set: [320, 321, 117, 88, 59, 365, 157, 366, 367] start node= 4 start time= 0 capacity type= 1
(4,0)->(5,6)->(3,12)->(3,13)->(3,14)->(2,20)->(4,27)->(4,28)->(4,29)->(4,0):3.0

artificial: false set: [288, 161, 356, 85, 357, 311, 57, 394, 122] start node= 4 start time= 18 capacity type= 1
(3,3)->(3,4)->(2,10)->(2,11)->(4,18)->(4,19)->(4,20)->(5,26)->(5,27)->(3,3):3.0

artificial: false set: [129, 164, 180, 6, 119, 424, 381] start node= 4 start time= 20 capacity type= 1
(0,2)->(4,7)->(5,13)->(5,14)->(4,20)->(6,26)->(6,27)->(0,2):1.0

artificial: false set: [176, 403, 131, 137, 10, 14] start node= 4 start time= 29 capacity type= 1
(6,5)->(6,6)->(0,11)->(5,18)->(0,24)->(4,29)->(6,5):2.0

artificial: false set: [177, 162, 21, 216, 235, 397, 125] start node= 4 start time= 6 capacity type= 1
(5,0)->(4,6)->(6,12)->(0,17)->(0,18)->(6,24)->(5,29)->(5,0):1.0

artificial: false set: [336, 337, 163, 419, 308, 309, 310, 103, 204, 127] start node= 4 start time= 15 capacity type= 1
(3,0)->(3,1)->(3,2)->(3,3)->(5,9)->(4,15)->(6,21)->(6,22)->(3,28)->(3,29)->(3,0):1.0

artificial: false set: [180, 6, 22, 119, 136, 381, 382] start node= 4 start time= 7 capacity type= 1
(0,2)->(4,7)->(5,13)->(5,14)->(5,15)->(0,21)->(6,27)->(0,2):1.0

artificial: false set: [320, 212, 87, 297, 426, 427, 76, 157, 398] start node= 5 start time= 6 capacity type= 1
(6,0)->(6,1)->(5,6)->(3,12)->(3,13)->(2,19)->(2,20)->(6,28)->(6,29)->(6,0):1.0

artificial: false set: [20, 133, 69, 185, 29] start node= 1 start time= 21 capacity type= 2
(5,4)->(0,10)->(6,16)->(1,21)->(2,28)->(5,4):1.0

artificial: false set: [65, 292, 181, 389, 26, 172, 253, 254] start node= 1 start time= 6 capacity type= 2
(6,0)->(1,5)->(1,6)->(1,7)->(2,14)->(2,15)->(5,21)->(5,22)->(6,0):1.0

artificial: false set: [368, 67, 315, 156, 300, 28, 397, 79] start node= 1 start time= 15 capacity type= 2
(5,0)->(5,1)->(3,7)->(3,8)->(1,15)->(2,22)->(2,23)->(5,29)->(5,0):1.0

artificial: false set: [160, 49, 184, 169, 110] start node= 1 start time= 18 capacity type= 2
(5,5)->(6,13)->(1,18)->(5,23)->(3,29)->(5,5):1.0

artificial: false set: [144, 48, 336, 36, 141, 110] start node= 1 start time= 22 capacity type= 2
(5,5)->(1,11)->(5,16)->(1,22)->(3,28)->(3,29)->(5,5):1.0

artificial: false set: [208, 129, 211, 408, 409, 124] start node= 4 start time= 4 capacity type= 2
(4,4)->(6,10)->(6,11)->(6,12)->(4,20)->(6,26)->(4,4):1.0

artificial: false set: [2, 130, 212, 134, 265, 42] start node= 4 start time= 25 capacity type= 2
(6,1)->(5,6)->(0,12)->(1,17)->(1,18)->(4,25)->(6,1):2.0

artificial: false set: [144, 51, 214, 167, 124, 270, 383] start node= 4 start time= 4 capacity type= 2
(4,4)->(6,10)->(5,15)->(5,16)->(1,22)->(1,23)->(5,28)->(4,4):1.0

artificial: false set: [5, 389, 121, 138, 317, 95, 31] start node= 4 start time= 15 capacity type= 2
(1,3)->(3,9)->(3,10)->(4,15)->(5,21)->(5,22)->(0,28)->(1,3):1.0

artificial: false set: [20, 69, 133, 185, 29] start node= 5 start time= 4 capacity type= 2
(5,4)->(0,10)->(6,16)->(1,21)->(2,28)->(5,4):1.0

artificial: false set: [161, 50, 3, 103, 135, 377, 378] start node= 5 start time= 9 capacity type= 2
(3,3)->(5,9)->(5,10)->(5,11)->(0,17)->(1,22)->(5,27)->(3,3):1.0

artificial: false set: [182, 109, 158, 174, 47] start node= 5 start time= 26 capacity type= 2
(6,4)->(1,9)->(5,14)->(3,20)->(5,26)->(6,4):1.0

artificial: false set: [320, 113, 321, 196, 373, 70, 157] start node= 5 start time= 6 capacity type= 2
(5,5)->(5,6)->(3,12)->(3,13)->(3,14)->(6,22)->(2,29)->(5,5):1.0

artificial: false set: [66, 194, 72, 155, 396] start node= 5 start time= 28 capacity type= 2
(2,7)->(6,15)->(2,22)->(5,28)->(5,29)->(2,7):2.0

artificial: false set: [280, 281, 170, 378, 91, 203, 379, 61] start node= 5 start time= 10 capacity type= 2
(2,2)->(2,3)->(2,4)->(5,10)->(5,11)->(5,12)->(6,20)->(3,26)->(2,2):1.0

artificial: false set: [2, 115, 35, 212, 134] start node= 5 start time= 6 capacity type= 2
(6,1)->(5,6)->(0,12)->(1,17)->(3,23)->(6,1):1.0

artificial: false set: [83, 276, 277, 24, 381, 382, 63, 159] start node= 5 start time= 13 capacity type= 2
(1,0)->(2,7)->(5,13)->(5,14)->(5,15)->(3,21)->(1,28)->(1,29)->(1,0):1.0

artificial: false set: [277, 24, 171, 188, 381, 382, 63, 383] start node= 5 start time= 13 capacity type= 2
(1,0)->(2,7)->(5,13)->(5,14)->(5,15)->(5,16)->(6,24)->(1,29)->(1,0):1.0

Total time= 18005342

-------------------------------------------------------------------------------------------------------------------------------------------------------
test9_7_30_30_400E

BranchAndPriceB_M bap=new BranchAndPriceB_M(dataModel, master, pricingProblems, solvers, branchCreators,Double.MAX_VALUE,0.65,0.3,0.1,10,0.001,5,0.1,true,false);
number of service arcs=900
number of holding arcs=210

Yes
180

javax.naming.TimeLimitExceededException
	at cg.master.Master.solveMasterProblem(Master.java:414)
	at org.jorlib.frameworks.columnGeneration.master.AbstractMaster.solve(AbstractMaster.java:152)
	at org.jorlib.frameworks.columnGeneration.colgenMain.ColGen.invokeMaster(ColGen.java:271)
	at org.jorlib.frameworks.columnGeneration.colgenMain.ColGen.solve(ColGen.java:224)
	at org.jorlib.frameworks.columnGeneration.branchAndPrice.AbstractBranchAndPrice.solveBAPNode(AbstractBranchAndPrice.java:342)
	at bap.BranchAndPriceB_M.runBranchAndPrice(BranchAndPriceB_M.java:239)
	at bap.BranchAndPriceB_M.LearningUB(BranchAndPriceB_M.java:924)
	at bap.BranchAndPriceB_M.runBranchAndPrice(BranchAndPriceB_M.java:323)
	at SNDRCSolver.<init>(SNDRCSolver.java:93)
	at SNDRCSolver.main(SNDRCSolver.java:228)
javax.naming.TimeLimitExceededException
	at cg.master.Master.solveMasterProblem(Master.java:414)
	at org.jorlib.frameworks.columnGeneration.master.AbstractMaster.solve(AbstractMaster.java:152)
	at org.jorlib.frameworks.columnGeneration.colgenMain.ColGen.invokeMaster(ColGen.java:271)
	at org.jorlib.frameworks.columnGeneration.colgenMain.ColGen.solve(ColGen.java:224)
	at org.jorlib.frameworks.columnGeneration.branchAndPrice.AbstractBranchAndPrice.solveBAPNode(AbstractBranchAndPrice.java:342)
	at bap.BranchAndPriceB_M.runBranchAndPrice(BranchAndPriceB_M.java:239)
	at SNDRCSolver.<init>(SNDRCSolver.java:93)
	at SNDRCSolver.main(SNDRCSolver.java:228)
================ Solution ================
BAP terminated with objective : 39089
Total Number of iterations: 151
Total Number of processed nodes: 11
Total Time spent on master problems: 4212029 Total time spent on pricing problems: 3285
Best bound : 37482.13000000001
[1, 5, 7, 9, 13, 16, 17, 19, 20, 21, 24, 26, 28, 29, 31, 32, 33, 35, 36, 37, 41, 44, 49, 51, 55, 61, 63, 70, 75, 77, 79, 80, 83, 85, 86, 87, 94, 98, 103, 107, 109, 110, 112, 115, 118, 121, 122, 127, 128, 129, 131, 134, 137, 138, 144, 145, 148, 150, 156, 159, 160, 162, 163, 164, 166, 170, 171, 172, 174, 178]
The number of service edges used= 70

Solution is optimal: false
Columns (only non-zero columns are returned):
artificial: false set: [340, 21, 341, 118, 184, 24, 200, 121] start node= 5 start time= 10 capacity type= 0
(0,4)->(0,5)->(5,10)->(5,11)->(5,12)->(0,20)->(0,21)->(5,26)->(0,4):1.0

artificial: false set: [160, 384, 256, 304, 385, 257, 164, 77, 110, 255, 303] start node= 4 start time= 3 capacity type= 1
(4,3)->(4,4)->(4,5)->(6,10)->(2,15)->(2,16)->(2,17)->(2,18)->(6,24)->(6,25)->(6,26)->(4,3):1.0

artificial: false set: [98, 181, 182, 87, 315, 316, 156, 28, 317, 318] start node= 4 start time= 19 capacity type= 1
(0,1)->(0,2)->(0,3)->(6,8)->(4,15)->(4,16)->(4,17)->(4,18)->(4,19)->(3,26)->(0,1):1.0

artificial: false set: [112, 181, 182, 310, 87, 311, 312, 378, 379, 172, 13] start node= 4 start time= 10 capacity type= 1
(0,1)->(0,2)->(0,3)->(4,10)->(4,11)->(4,12)->(4,13)->(6,18)->(6,19)->(6,20)->(3,26)->(0,1):1.0

artificial: false set: [160, 32, 368, 369, 85, 170, 109] start node= 4 start time= 3 capacity type= 1
(4,3)->(6,8)->(6,9)->(6,10)->(3,16)->(0,21)->(6,26)->(4,3):1.0

artificial: false set: [80, 131, 163, 70, 231, 44] start node= 1 start time= 22 capacity type= 2
(6,5)->(2,10)->(5,16)->(1,21)->(1,22)->(2,29)->(6,5):1.0

artificial: false set: [33, 162, 227, 37, 150, 75] start node= 1 start time= 18 capacity type= 2
(6,1)->(2,6)->(6,12)->(1,17)->(1,18)->(0,26)->(6,1):1.0

artificial: false set: [115, 35, 148, 159, 31] start node= 1 start time= 9 capacity type= 2
(6,4)->(1,9)->(0,17)->(6,22)->(4,29)->(6,4):1.0

artificial: false set: [128, 86, 216, 41, 26, 205, 63] start node= 1 start time= 7 capacity type= 2
(5,1)->(1,6)->(1,7)->(2,14)->(3,20)->(0,25)->(0,26)->(5,1):1.0

artificial: false set: [49, 293, 294, 7, 87, 295, 137, 171] start node= 1 start time= 6 capacity type= 2
(0,1)->(1,6)->(5,12)->(6,17)->(3,23)->(3,24)->(3,25)->(3,26)->(0,1):1.0

artificial: false set: [144, 17, 324, 325, 326, 327, 29, 94] start node= 4 start time= 24 capacity type= 2
(0,5)->(6,10)->(0,17)->(4,24)->(4,25)->(4,26)->(4,27)->(4,28)->(0,5):1.0

artificial: false set: [129, 20, 36, 181, 5, 182, 87] start node= 5 start time= 8 capacity type= 2
(0,1)->(0,2)->(0,3)->(5,8)->(1,13)->(0,21)->(3,26)->(0,1):1.0

artificial: false set: [51, 83, 355, 278, 9, 61, 127] start node= 5 start time= 25 capacity type= 2
(2,2)->(3,8)->(3,9)->(0,14)->(1,19)->(5,25)->(5,26)->(2,2):1.0

artificial: false set: [1, 51, 83, 355, 9, 121] start node= 5 start time= 25 capacity type= 2
(0,4)->(3,9)->(0,14)->(1,19)->(5,25)->(5,26)->(0,4):1.0

artificial: false set: [145, 19, 341, 103, 137, 204, 205, 206, 207] start node= 5 start time= 11 capacity type= 2
(4,5)->(5,11)->(5,12)->(6,17)->(0,24)->(0,25)->(0,26)->(0,27)->(0,28)->(4,5):1.0

artificial: false set: [16, 359, 55, 330, 122, 331, 107] start node= 5 start time= 2 capacity type= 2
(5,0)->(5,1)->(5,2)->(2,8)->(0,16)->(4,23)->(5,29)->(5,0):1.0

artificial: false set: [178, 163, 70, 134, 138, 381] start node= 5 start time= 0 capacity type= 2
(5,0)->(6,5)->(2,10)->(5,16)->(6,21)->(6,22)->(5,0):1.0

artificial: false set: [340, 341, 166, 361, 377, 137, 378, 379, 174, 79] start node= 5 start time= 10 capacity type= 2
(6,1)->(6,2)->(5,10)->(5,11)->(5,12)->(6,17)->(6,18)->(6,19)->(6,20)->(2,25)->(6,1):1.0

Total time= 18003714

-------------------------------------------------------------------------------------------------------------------------------------------------------
test10_7_30_50_300A

BranchAndPriceB_M bap=new BranchAndPriceB_M(dataModel, master, pricingProblems, solvers, branchCreators,Double.MAX_VALUE,0.65,0.3,0.1,1,0.001,8,0.1,true,false);

number of service arcs=1500
number of holding arcs=350

Yes
230

javax.naming.TimeLimitExceededException
	at cg.master.Master.solveMasterProblem(Master.java:414)
	at org.jorlib.frameworks.columnGeneration.master.AbstractMaster.solve(AbstractMaster.java:152)
	at org.jorlib.frameworks.columnGeneration.colgenMain.ColGen.invokeMaster(ColGen.java:271)
	at org.jorlib.frameworks.columnGeneration.colgenMain.ColGen.solve(ColGen.java:224)
	at org.jorlib.frameworks.columnGeneration.branchAndPrice.AbstractBranchAndPrice.solveBAPNode(AbstractBranchAndPrice.java:342)
	at bap.BranchAndPriceB_M.runBranchAndPrice(BranchAndPriceB_M.java:235)
	at bap.BranchAndPriceB_M.LearningUB(BranchAndPriceB_M.java:915)
	at bap.BranchAndPriceB_M.runBranchAndPrice(BranchAndPriceB_M.java:319)
	at SNDRCSolver.<init>(SNDRCSolver.java:87)
	at SNDRCSolver.main(SNDRCSolver.java:207)
Exception in thread "main" java.lang.RuntimeException: Duplicate column has been generated for pricing problem: capacity type: 0 origin node: 5! This column already exists and by definition should not have negative reduced cost: artificial: false set: [197, 202, 523, 524, 525, 526, 211, 91, 96, 487, 488, 489, 490, 491, 492, 557, 493, 366, 558, 494, 367, 559, 495, 560, 496, 497, 498, 499] start node= 5 start time= 9 capacity type= 0
	at org.jorlib.frameworks.columnGeneration.master.MasterData.addColumn(MasterData.java:76)
	at cg.master.Master.addColumn(Master.java:671)
	at cg.master.Master.addColumn(Master.java:1)
	at org.jorlib.frameworks.columnGeneration.colgenMain.ColGen.invokePricingProblems(ColGen.java:315)
	at org.jorlib.frameworks.columnGeneration.colgenMain.ColGen.solve(ColGen.java:242)
	at org.jorlib.frameworks.columnGeneration.branchAndPrice.AbstractBranchAndPrice.solveBAPNode(AbstractBranchAndPrice.java:342)
	at bap.BranchAndPriceB_M.runBranchAndPrice(BranchAndPriceB_M.java:235)
	at bap.BranchAndPriceB_M.LearningUB(BranchAndPriceB_M.java:915)
	at bap.BranchAndPriceB_M.runBranchAndPrice(BranchAndPriceB_M.java:319)
	at SNDRCSolver.<init>(SNDRCSolver.java:87)
	at SNDRCSolver.main(SNDRCSolver.java:207)


-------------------------------------------------------------------------------------------------------------------------------------------------------
test11_10_40_30_200A

BranchAndPriceB_M bap=new BranchAndPriceB_M(dataModel, master, pricingProblems, solvers, branchCreators,Double.MAX_VALUE,0.65,0.3,0.1,10,0.001,6,0.1,true,false);

number of service arcs=1200
number of holding arcs=300

Yes
232

================ Solution ================
BAP terminated with objective : 31529
Total Number of iterations: 190
Total Number of processed nodes: 11
Total Time spent on master problems: 3481353 Total time spent on pricing problems: 6336
Best bound : 26890.506953308875
The number of service edges used= 225
Solution is optimal: false
Columns (only non-zero columns are returned):
artificial: false set: [144, 53, 152, 377, 378, 429, 110] start node= 4 start time= 25 capacity type= 0
(1,2)->(3,9)->(2,17)->(2,18)->(1,20)->(0,23)->(1,24)->(2,1):1.0

artificial: false set: [2, 18, 244, 245, 246, 345, 265, 346, 91, 347] start node= 1 start time= 3 capacity type= 1
(1,1)->(0,2)->(1,4)->(1,5)->(1,6)->(2,15)->(2,16)->(2,17)->(0,18)->(1,25)->(6,3):1.0

artificial: false set: [372, 149, 373, 439, 151, 440, 441, 106, 412, 109] start node= 4 start time= 8 capacity type= 1
(1,1)->(2,12)->(2,13)->(1,16)->(1,19)->(3,19)->(3,20)->(3,21)->(2,22)->(1,29)->(2,6):1.0

artificial: false set: [288, 289, 358, 359, 360, 361, 362, 363, 43, 108, 364, 147, 287] start node= 4 start time= 12 capacity type= 1
(2,0)->(2,1)->(2,2)->(2,3)->(2,4)->(0,13)->(1,17)->(1,18)->(1,18)->(1,19)->(1,27)->(2,28)->(2,29)->(4,7):1.0

artificial: false set: [448, 449, 450, 163, 451, 452, 453, 118, 249, 250, 11, 379] start node= 4 start time= 27 capacity type= 1
(4,0)->(4,1)->(4,2)->(4,3)->(1,9)->(1,10)->(0,11)->(1,13)->(2,19)->(3,28)->(1,28)->(3,29)->(1,6):1.0

artificial: false set: [82, 260, 261, 165, 6, 232, 361, 93] start node= 7 start time= 23 capacity type= 1
(2,1)->(1,3)->(0,6)->(1,15)->(1,20)->(1,21)->(0,22)->(1,22)->(5,0):1.0

artificial: false set: [211, 214, 186, 188] start node= 7 start time= 28 capacity type= 1
(1,1)->(1,4)->(1,6)->(1,8)->(4,16):1.0

artificial: false set: [368, 416, 369, 417, 115, 150, 183, 365, 366, 367, 415] start node= 7 start time= 26 capacity type= 1
(1,0)->(1,3)->(2,5)->(2,6)->(2,7)->(2,8)->(2,9)->(1,25)->(2,25)->(2,26)->(2,27)->(7,3):1.0

artificial: false set: [384, 228, 452, 453, 454, 137, 523, 524, 383, 191] start node= 7 start time= 10 capacity type= 1
(4,2)->(4,3)->(4,4)->(1,11)->(4,13)->(4,14)->(1,17)->(1,18)->(2,23)->(2,24)->(5,0):1.0

artificial: false set: [227, 515, 404, 405, 443, 444, 189, 445, 446, 143] start node= 7 start time= 1 capacity type= 1
(4,5)->(1,9)->(2,14)->(2,15)->(1,17)->(3,23)->(1,23)->(3,24)->(3,25)->(3,26)->(1,3):1.0

artificial: false set: [480, 481, 482, 201, 90, 476, 477, 62, 478, 479] start node= 8 start time= 4 capacity type= 1
(4,0)->(1,0)->(4,1)->(0,2)->(4,2)->(1,21)->(4,26)->(4,27)->(4,28)->(4,29)->(2,6):1.0

artificial: false set: [147, 133, 428, 476, 429, 477, 62, 206, 287] start node= 8 start time= 4 capacity type= 1
(0,2)->(3,8)->(3,9)->(1,13)->(1,17)->(4,26)->(1,26)->(1,27)->(4,27)->(2,4):1.0

artificial: false set: [400, 401, 483, 148, 135, 264, 57, 399, 207] start node= 8 start time= 11 capacity type= 1
(4,3)->(2,9)->(2,10)->(2,11)->(1,15)->(1,24)->(1,27)->(0,27)->(1,28)->(2,5):1.0

artificial: false set: [384, 452, 453, 454, 455, 456, 457, 137, 458, 459, 210, 187, 382, 383] start node= 8 start time= 25 capacity type= 1
(1,0)->(4,2)->(4,3)->(4,4)->(4,5)->(4,6)->(1,7)->(4,7)->(4,8)->(4,9)->(1,17)->(2,22)->(2,23)->(2,24)->(5,0):1.0

artificial: false set: [167, 215, 490, 59, 491, 492, 493, 270, 494, 271, 495] start node= 8 start time= 18 capacity type= 1
(1,0)->(1,1)->(1,5)->(4,10)->(4,11)->(4,12)->(4,13)->(4,14)->(4,15)->(1,17)->(0,29)->(4,7):1.0

artificial: false set: [224, 528, 53, 266, 267, 268, 157, 269, 526, 270, 527] start node= 9 start time= 25 capacity type= 1
(1,0)->(1,7)->(1,14)->(4,16)->(4,17)->(4,18)->(0,23)->(1,26)->(1,27)->(1,28)->(1,29)->(6,7):1.0

artificial: false set: [256, 512, 257, 513, 258, 514, 259, 515, 516, 517, 17, 218, 508, 509, 510, 511] start node= 9 start time= 6 capacity type= 1
(4,0)->(4,1)->(4,2)->(4,3)->(4,4)->(4,5)->(4,6)->(4,7)->(1,8)->(1,16)->(0,17)->(1,17)->(1,18)->(1,19)->(4,28)->(4,29)->(5,5):1.0

artificial: false set: [49, 277, 406, 136, 155, 412, 221] start node= 9 start time= 8 capacity type= 1
(1,5)->(1,7)->(1,11)->(1,16)->(2,16)->(0,19)->(2,22)->(7,28):1.0

artificial: false set: [515, 516, 517, 518, 519, 520, 521, 234, 522, 235, 523, 236, 524, 13, 525, 219] start node= 9 start time= 13 capacity type= 1
(4,5)->(4,6)->(4,7)->(4,8)->(1,9)->(4,9)->(4,10)->(4,11)->(4,12)->(0,13)->(4,13)->(4,14)->(4,15)->(1,24)->(1,25)->(1,26)->(5,4):1.0

artificial: false set: [385, 386, 279, 88, 104, 41, 378, 125] start node= 1 start time= 17 capacity type= 2
(1,5)->(1,9)->(0,11)->(1,14)->(2,18)->(2,25)->(2,26)->(0,28)->(9,6):1.0

artificial: false set: [417, 50, 132, 282, 411, 156, 222] start node= 1 start time= 20 capacity type= 2
(1,6)->(1,12)->(1,12)->(1,12)->(0,20)->(2,21)->(2,27)->(7,3):1.0

artificial: false set: [320, 321, 89, 329, 281, 330, 331, 332, 333, 29, 63, 319] start node= 1 start time= 19 capacity type= 2
(2,0)->(2,1)->(2,2)->(2,3)->(0,3)->(1,11)->(2,19)->(2,20)->(2,21)->(2,29)->(0,29)->(0,29)->(3,7):1.0

artificial: false set: [208, 130, 324, 86, 408, 490, 491, 59, 492] start node= 1 start time= 10 capacity type= 2
(1,10)->(4,10)->(4,11)->(4,12)->(2,18)->(2,24)->(0,26)->(1,28)->(0,29)->(4,7):1.0

artificial: false set: [128, 100, 37, 345, 265, 346, 91, 347] start node= 1 start time= 3 capacity type= 2
(1,1)->(0,7)->(1,8)->(1,10)->(2,15)->(2,16)->(2,17)->(1,25)->(6,3):1.0

artificial: false set: [113, 149, 55, 360, 169] start node= 4 start time= 8 capacity type= 2
(2,0)->(1,19)->(1,23)->(0,25)->(1,29)->(2,6):1.0

artificial: false set: [373, 70, 120, 79, 95] start node= 5 start time= 5 capacity type= 2
(1,0)->(1,5)->(0,10)->(2,13)->(0,19)->(9,27):1.0

artificial: false set: [81, 407, 296, 297, 124, 77, 174] start node= 5 start time= 25 capacity type= 2
(1,4)->(2,17)->(0,17)->(0,21)->(1,24)->(1,26)->(1,27)->(8,5):1.0

artificial: false set: [464, 17, 226, 165, 140, 463] start node= 9 start time= 6 capacity type= 2
(4,13)->(4,14)->(1,15)->(1,16)->(0,17)->(1,20)->(2,27):1.0

Total time= 18009739



-------------------------------------------------------------------------------------------------------------------------------------------------------
test12_10_50_30_100A

number of service arcs=1500
number of holding arcs=300

Yes
175

javax.naming.TimeLimitExceededException
	at cg.master.Master.solveMasterProblem(Master.java:414)
	at org.jorlib.frameworks.columnGeneration.master.AbstractMaster.solve(AbstractMaster.java:152)
	at org.jorlib.frameworks.columnGeneration.colgenMain.ColGen.invokeMaster(ColGen.java:271)
	at org.jorlib.frameworks.columnGeneration.colgenMain.ColGen.solve(ColGen.java:224)
	at org.jorlib.frameworks.columnGeneration.branchAndPrice.AbstractBranchAndPrice.solveBAPNode(AbstractBranchAndPrice.java:342)
	at bap.BranchAndPriceB_M.runBranchAndPrice(BranchAndPriceB_M.java:235)
	at SNDRCSolver.<init>(SNDRCSolver.java:87)
	at SNDRCSolver.main(SNDRCSolver.java:207)
================ Solution ================
BAP terminated with objective : 11893
Total Number of iterations: 253
Total Number of processed nodes: 11
Total Time spent on master problems: 7358110 Total time spent on pricing problems: 8420
Best bound : 8779.120000000008
The number of service edges used= 198
Solution is optimal: false
Columns (only non-zero columns are returned):
artificial: false set: [65, 277, 85, 86, 278, 41, 330, 235, 331, 60] start node= 5 start time= 5 capacity type= 0
(2,0)->(0,0)->(2,1)->(0,5)->(2,7)->(2,8)->(0,11)->(1,25)->(0,25)->(0,26)->(6,0):1.0

artificial: false set: [97, 133, 42, 237, 238, 239, 240, 241, 242, 243, 244, 245, 246, 247, 343, 248, 411, 412] start node= 5 start time= 18 capacity type= 0
(1,0)->(1,1)->(1,2)->(1,3)->(1,4)->(1,5)->(1,6)->(1,7)->(1,7)->(1,8)->(0,12)->(2,13)->(1,13)->(2,21)->(2,22)->(1,27)->(1,28)->(1,29)->(7,5):1.0

artificial: false set: [128, 113, 98, 84, 89, 11] start node= 7 start time= 6 capacity type= 1
(1,8)->(1,8)->(0,11)->(1,23)->(0,24)->(0,29)->(6,3):1.0

artificial: false set: [33, 129, 385, 386, 3, 387, 388, 389, 390, 391, 392, 393, 394, 410, 411, 412, 413, 189, 414] start node= 7 start time= 0 capacity type= 1
(2,0)->(2,1)->(2,2)->(0,3)->(0,3)->(2,3)->(2,4)->(1,9)->(1,9)->(2,20)->(2,21)->(2,22)->(2,23)->(2,24)->(2,25)->(2,26)->(2,27)->(2,28)->(2,29)->(5,3):1.0

artificial: false set: [192, 385, 34, 386, 131, 387, 4, 36, 388, 389, 244, 245, 246, 413, 414, 191] start node= 7 start time= 0 capacity type= 1
(0,4)->(1,4)->(0,4)->(1,5)->(0,6)->(1,6)->(1,11)->(1,11)->(1,12)->(2,23)->(2,24)->(2,25)->(2,26)->(2,27)->(2,28)->(2,29)->(5,3):1.0

artificial: false set: [339, 83, 340, 341, 389, 134, 390, 377, 107, 93, 47] start node= 7 start time= 4 capacity type= 1
(2,0)->(1,3)->(2,9)->(2,10)->(2,11)->(1,14)->(2,17)->(0,17)->(1,17)->(0,23)->(2,29)->(5,3):1.0

artificial: false set: [274, 275, 276, 69, 136, 78, 143, 15] start node= 7 start time= 23 capacity type= 1
(2,4)->(2,5)->(2,6)->(0,9)->(0,15)->(1,16)->(0,18)->(1,23)->(4,1):1.0

artificial: false set: [145, 66, 357, 165, 119, 282, 347, 348, 349, 94, 350, 351] start node= 8 start time= 8 capacity type= 1
(1,4)->(0,6)->(2,12)->(1,15)->(2,17)->(2,18)->(2,19)->(2,20)->(2,21)->(1,25)->(2,27)->(1,29)->(3,4):1.0

artificial: false set: [448, 449, 164, 69, 433, 434, 275, 435, 276, 436, 437, 438, 439, 152, 440, 445, 446, 447] start node= 8 start time= 18 capacity type= 1
(1,2)->(2,5)->(2,6)->(0,9)->(2,13)->(1,14)->(2,14)->(2,15)->(2,16)->(2,17)->(2,18)->(2,19)->(2,20)->(2,25)->(2,26)->(2,27)->(2,28)->(2,29)->(8,3):1.0

artificial: false set: [420, 421, 422, 171, 140, 173, 431, 432, 433, 145, 434, 151, 413] start node= 8 start time= 5 capacity type= 1
(2,0)->(2,1)->(1,1)->(2,2)->(2,11)->(2,12)->(2,13)->(2,14)->(1,20)->(1,21)->(2,23)->(1,23)->(1,25)->(4,3):1.0

artificial: false set: [256, 416, 257, 258, 259, 260, 132, 261, 392, 393, 394, 395, 396, 397, 141, 398, 399, 400, 401, 50] start node= 8 start time= 1 capacity type= 1
(2,2)->(2,3)->(2,4)->(2,5)->(2,6)->(2,7)->(2,8)->(2,9)->(2,10)->(2,11)->(1,12)->(1,16)->(1,17)->(1,18)->(1,19)->(0,20)->(1,20)->(1,21)->(1,21)->(2,26)->(7,1):1.0

artificial: false set: [163, 421, 422, 423, 424, 425, 426, 427, 236, 462, 463, 48, 464, 465, 466, 467, 147, 468] start node= 8 start time= 6 capacity type= 1
(2,1)->(2,2)->(2,3)->(2,4)->(2,5)->(2,6)->(2,7)->(3,12)->(1,13)->(3,13)->(3,14)->(3,15)->(3,16)->(3,17)->(0,18)->(3,18)->(1,26)->(1,27)->(4,5):1.0

artificial: false set: [100, 6, 202, 203, 333, 334, 335, 336, 337, 338, 467, 22, 156] start node= 9 start time= 22 capacity type= 1
(2,3)->(2,4)->(2,5)->(0,6)->(2,6)->(1,6)->(2,7)->(2,8)->(1,10)->(3,17)->(1,22)->(0,22)->(1,23)->(6,29):1.0

artificial: false set: [64, 292, 293, 294, 167, 265, 266, 267, 367, 368, 369, 466, 124, 92] start node= 9 start time= 21 capacity type= 1
(1,2)->(0,4)->(1,4)->(2,7)->(2,8)->(2,9)->(3,16)->(1,17)->(2,22)->(2,23)->(2,24)->(1,25)->(1,26)->(1,27)->(9,5):1.0

artificial: false set: [80, 306, 19, 52, 6, 200, 201, 202, 203] start node= 1 start time= 3 capacity type= 2
(2,6)->(0,6)->(0,19)->(0,20)->(1,20)->(1,21)->(0,22)->(1,22)->(1,23)->(6,29):1.0

artificial: false set: [18, 227, 228, 229, 56, 265, 266, 61, 79] start node= 1 start time= 22 capacity type= 2
(0,1)->(1,17)->(0,18)->(1,18)->(1,19)->(0,19)->(1,25)->(1,26)->(0,26)->(4,0):1.0

artificial: false set: [0, 402, 403, 117, 135, 73, 204, 28, 318] start node= 1 start time= 4 capacity type= 2
(0,0)->(2,12)->(2,13)->(0,13)->(1,15)->(2,18)->(1,24)->(1,27)->(0,28)->(1,2):1.0

artificial: false set: [2, 354, 99, 115, 453, 454, 154, 30] start node= 1 start time= 18 capacity type= 2
(0,0)->(0,2)->(3,3)->(1,4)->(3,4)->(1,9)->(2,24)->(1,25)->(3,0):1.0

Total time= 18002828
