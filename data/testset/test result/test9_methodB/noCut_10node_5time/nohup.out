number of service arcs=900
number of holding arcs=210

Yes
209

javax.naming.TimeLimitExceededException
	at cg.master.Master.solveMasterProblem(Master.java:414)
	at org.jorlib.frameworks.columnGeneration.master.AbstractMaster.solve(AbstractMaster.java:152)
	at org.jorlib.frameworks.columnGeneration.colgenMain.ColGen.invokeMaster(ColGen.java:271)
	at org.jorlib.frameworks.columnGeneration.colgenMain.ColGen.solve(ColGen.java:224)
	at org.jorlib.frameworks.columnGeneration.branchAndPrice.AbstractBranchAndPrice.solveBAPNode(AbstractBranchAndPrice.java:342)
	at bap.BranchAndPriceB_M.runBranchAndPrice(BranchAndPriceB_M.java:239)
	at bap.BranchAndPriceB_M.LearningUB(BranchAndPriceB_M.java:924)
	at bap.BranchAndPriceB_M.runBranchAndPrice(BranchAndPriceB_M.java:323)
	at SNDRCSolver.<init>(SNDRCSolver.java:93)
	at SNDRCSolver.main(SNDRCSolver.java:228)
javax.naming.TimeLimitExceededException
	at cg.master.Master.solveMasterProblem(Master.java:414)
	at org.jorlib.frameworks.columnGeneration.master.AbstractMaster.solve(AbstractMaster.java:152)
	at org.jorlib.frameworks.columnGeneration.colgenMain.ColGen.invokeMaster(ColGen.java:271)
	at org.jorlib.frameworks.columnGeneration.colgenMain.ColGen.solve(ColGen.java:224)
	at org.jorlib.frameworks.columnGeneration.branchAndPrice.AbstractBranchAndPrice.solveBAPNode(AbstractBranchAndPrice.java:342)
	at bap.BranchAndPriceB_M.runBranchAndPrice(BranchAndPriceB_M.java:239)
	at SNDRCSolver.<init>(SNDRCSolver.java:93)
	at SNDRCSolver.main(SNDRCSolver.java:228)
================ Solution ================
BAP terminated with objective : 82386
Total Number of iterations: 83
Total Number of processed nodes: 11
Total Time spent on master problems: 3018083 Total time spent on pricing problems: 1081
Best bound : 80545.44000000003
[1, 2, 3, 4, 5, 8, 9, 11, 12, 13, 16, 20, 22, 24, 25, 28, 29, 34, 35, 37, 38, 39, 40, 46, 48, 51, 52, 54, 55, 58, 59, 61, 62, 63, 67, 69, 70, 71, 73, 74, 75, 76, 78, 79, 86, 90, 93, 97, 99, 104, 107, 108, 109, 111, 112, 113, 114, 116, 117, 118, 121, 122, 123, 124, 129, 130, 131, 132, 133, 134, 135, 136, 137, 139, 140, 141, 142, 143, 144, 147, 148, 153, 154, 155, 157, 158, 161, 162, 165, 166, 168, 169, 170, 172, 173, 174, 178, 183, 187, 188, 189, 191, 192, 196, 200, 203, 204, 207]
The number of service edges used= 108

Solution is optimal: false
Columns (only non-zero columns are returned):
artificial: false set: [257, 242, 258, 243, 67, 35, 70, 38] start node= 1 start time= 5 capacity type= 1
(1,3)->(1,4)->(1,5)->(2,11)->(1,18)->(1,19)->(1,20)->(2,26)->(1,3):1.0

artificial: false set: [256, 178, 392, 24, 393, 394, 395, 252, 253, 29, 254, 255] start node= 1 start time= 18 capacity type= 1
(6,3)->(6,4)->(6,5)->(6,6)->(6,7)->(1,13)->(1,14)->(1,15)->(1,16)->(1,17)->(1,18)->(0,25)->(6,3):1.0

artificial: false set: [289, 51, 372, 124, 93, 157, 207] start node= 4 start time= 2 capacity type= 1
(4,2)->(1,8)->(5,13)->(5,14)->(2,20)->(2,21)->(6,26)->(4,2):1.0

artificial: false set: [113, 355, 74, 170, 140, 189, 397, 398] start node= 4 start time= 26 capacity type= 1
(5,3)->(6,8)->(6,9)->(6,10)->(2,15)->(3,20)->(4,26)->(4,27)->(5,3):1.0

artificial: false set: [144, 114, 3, 327, 136, 46] start node= 4 start time= 5 capacity type= 1
(4,5)->(5,11)->(0,16)->(1,22)->(3,28)->(3,29)->(4,5):1.0

artificial: false set: [240, 241, 130, 20, 407, 25, 204] start node= 4 start time= 25 capacity type= 1
(1,1)->(1,2)->(1,3)->(0,10)->(6,18)->(6,19)->(4,25)->(1,1):2.0

artificial: false set: [22, 247, 248, 249, 28, 124, 207] start node= 4 start time= 2 capacity type= 1
(4,2)->(1,8)->(1,9)->(1,10)->(1,11)->(0,18)->(6,26)->(4,2):1.0

artificial: false set: [48, 129, 402, 116, 203, 172, 349] start node= 4 start time= 21 capacity type= 1
(3,3)->(5,8)->(6,13)->(6,14)->(4,20)->(4,21)->(1,27)->(3,3):1.0

artificial: false set: [352, 353, 131, 134, 314, 108, 351, 111] start node= 4 start time= 8 capacity type= 1
(3,2)->(4,8)->(3,15)->(3,16)->(4,22)->(4,23)->(4,24)->(4,25)->(3,2):1.0

artificial: false set: [272, 340, 341, 166, 137, 378, 107, 78] start node= 4 start time= 11 capacity type= 1
(2,3)->(2,4)->(4,11)->(4,12)->(4,13)->(5,19)->(5,20)->(3,25)->(2,3):1.0

artificial: false set: [133, 344, 345, 346, 155, 123, 347, 348, 79] start node= 4 start time= 15 capacity type= 1
(5,2)->(2,8)->(4,15)->(4,16)->(4,17)->(4,18)->(4,19)->(4,20)->(3,27)->(5,2):1.0

artificial: false set: [304, 305, 200, 137, 109, 413, 302, 414, 174, 303] start node= 4 start time= 13 capacity type= 1
(3,3)->(3,4)->(3,5)->(3,6)->(3,7)->(4,13)->(5,19)->(6,24)->(6,25)->(6,26)->(3,3):1.0

artificial: false set: [354, 227, 355, 148, 9, 28, 140] start node= 4 start time= 25 capacity type= 1
(5,3)->(1,11)->(0,18)->(0,19)->(4,25)->(4,26)->(4,27)->(5,3):1.0

artificial: false set: [112, 353, 337, 338, 132, 134, 108, 316] start node= 4 start time= 8 capacity type= 1
(3,2)->(4,8)->(4,9)->(4,10)->(3,17)->(3,18)->(4,24)->(4,25)->(3,2):1.0

artificial: false set: [192, 35, 5, 405, 90, 236, 237, 63] start node= 1 start time= 5 capacity type= 2
(1,5)->(2,11)->(6,16)->(6,17)->(2,22)->(0,27)->(0,28)->(0,29)->(1,5):1.0

artificial: false set: [97, 69, 37, 71, 39] start node= 1 start time= 28 capacity type= 2
(2,4)->(3,9)->(1,15)->(2,21)->(1,28)->(2,4):1.0

artificial: false set: [1, 52, 86, 141, 158] start node= 1 start time= 12 capacity type= 2
(5,1)->(0,6)->(1,12)->(5,17)->(2,23)->(5,1):1.0

artificial: false set: [256, 16, 2, 234, 363, 364, 29, 142] start node= 1 start time= 18 capacity type= 2
(5,4)->(5,5)->(5,6)->(0,11)->(1,17)->(1,18)->(0,25)->(0,26)->(5,4):1.0

artificial: false set: [35, 5, 90, 235, 236, 237, 62, 191] start node= 1 start time= 5 capacity type= 2
(1,5)->(2,11)->(6,16)->(2,21)->(0,26)->(0,27)->(0,28)->(0,29)->(1,5):1.0

artificial: false set: [147, 8, 139, 12, 143] start node= 4 start time= 20 capacity type= 2
(0,1)->(5,9)->(0,14)->(4,20)->(5,26)->(0,1):1.0

artificial: false set: [183, 40, 137, 109, 174, 239] start node= 4 start time= 13 capacity type= 2
(1,0)->(1,1)->(3,7)->(4,13)->(5,19)->(6,24)->(1,0):2.0

artificial: false set: [162, 135, 104, 11, 61] start node= 4 start time= 1 capacity type= 2
(4,1)->(5,7)->(3,12)->(2,20)->(0,25)->(4,1):2.0

artificial: false set: [169, 122, 90, 75, 187, 191] start node= 5 start time= 1 capacity type= 2
(5,1)->(6,6)->(2,11)->(6,16)->(2,21)->(3,26)->(5,1):1.0

artificial: false set: [192, 161, 117, 123, 76, 173] start node= 5 start time= 2 capacity type= 2
(5,2)->(3,7)->(5,12)->(6,17)->(2,22)->(3,27)->(5,2):1.0

artificial: false set: [1, 52, 86, 141, 158] start node= 5 start time= 1 capacity type= 2
(5,1)->(0,6)->(1,12)->(5,17)->(2,23)->(5,1):1.0

artificial: false set: [144, 114, 3, 327, 136, 46] start node= 5 start time= 11 capacity type= 2
(4,5)->(5,11)->(0,16)->(1,22)->(3,28)->(3,29)->(4,5):1.0

artificial: false set: [34, 99, 54, 73, 153] start node= 5 start time= 26 capacity type= 2
(1,4)->(2,10)->(3,15)->(1,21)->(5,26)->(1,4):2.0

artificial: false set: [324, 166, 122, 58, 154, 13] start node= 5 start time= 1 capacity type= 2
(5,1)->(2,7)->(0,12)->(5,20)->(3,25)->(3,26)->(5,1):1.0

artificial: false set: [322, 388, 196, 165, 118, 311, 168, 121] start node= 5 start time= 0 capacity type= 2
(5,0)->(6,5)->(3,12)->(3,13)->(5,18)->(3,23)->(3,24)->(5,29)->(5,0):1.0

artificial: false set: [4, 228, 229, 55, 361, 282, 170, 59, 188] start node= 5 start time= 2 capacity type= 2
(5,2)->(5,3)->(6,8)->(2,13)->(2,14)->(0,19)->(0,20)->(0,21)->(1,27)->(5,2):1.0

artificial: false set: [183, 40, 137, 109, 174, 239] start node= 5 start time= 19 capacity type= 2
(1,0)->(1,1)->(3,7)->(4,13)->(5,19)->(6,24)->(1,0):1.0

Total time= 18027054
