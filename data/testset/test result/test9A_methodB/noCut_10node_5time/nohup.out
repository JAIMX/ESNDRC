number of service arcs=900
number of holding arcs=210

Yes
188

javax.naming.TimeLimitExceededException
	at cg.master.Master.solveMasterProblem(Master.java:414)
	at org.jorlib.frameworks.columnGeneration.master.AbstractMaster.solve(AbstractMaster.java:152)
	at org.jorlib.frameworks.columnGeneration.colgenMain.ColGen.invokeMaster(ColGen.java:271)
	at org.jorlib.frameworks.columnGeneration.colgenMain.ColGen.solve(ColGen.java:224)
	at org.jorlib.frameworks.columnGeneration.branchAndPrice.AbstractBranchAndPrice.solveBAPNode(AbstractBranchAndPrice.java:342)
	at bap.BranchAndPriceB_M.runBranchAndPrice(BranchAndPriceB_M.java:239)
	at bap.BranchAndPriceB_M.LearningUB(BranchAndPriceB_M.java:924)
	at bap.BranchAndPriceB_M.runBranchAndPrice(BranchAndPriceB_M.java:323)
	at SNDRCSolver.<init>(SNDRCSolver.java:93)
	at SNDRCSolver.main(SNDRCSolver.java:228)
javax.naming.TimeLimitExceededException
	at cg.master.Master.solveMasterProblem(Master.java:414)
	at org.jorlib.frameworks.columnGeneration.master.AbstractMaster.solve(AbstractMaster.java:152)
	at org.jorlib.frameworks.columnGeneration.colgenMain.ColGen.invokeMaster(ColGen.java:271)
	at org.jorlib.frameworks.columnGeneration.colgenMain.ColGen.solve(ColGen.java:224)
	at org.jorlib.frameworks.columnGeneration.branchAndPrice.AbstractBranchAndPrice.solveBAPNode(AbstractBranchAndPrice.java:342)
	at bap.BranchAndPriceB_M.runBranchAndPrice(BranchAndPriceB_M.java:239)
	at SNDRCSolver.<init>(SNDRCSolver.java:93)
	at SNDRCSolver.main(SNDRCSolver.java:228)
================ Solution ================
BAP terminated with objective : 39352
Total Number of iterations: 145
Total Number of processed nodes: 11
Total Time spent on master problems: 3099565 Total time spent on pricing problems: 2021
Best bound : 37475.99999999999
[3, 6, 7, 9, 10, 12, 14, 15, 16, 17, 19, 23, 27, 28, 32, 33, 37, 41, 42, 44, 45, 48, 52, 56, 64, 66, 67, 75, 77, 78, 79, 80, 81, 82, 83, 84, 85, 86, 88, 90, 93, 96, 97, 101, 105, 107, 112, 114, 115, 116, 118, 121, 123, 126, 135, 136, 137, 138, 141, 144, 146, 150, 151, 153, 156, 158, 159, 161, 163, 164, 167, 169, 176, 180, 182, 187]
The number of service edges used= 76

Solution is optimal: false
Columns (only non-zero columns are returned):
artificial: false set: [112, 163, 115, 327, 328, 394, 379, 395, 396, 159] start node= 4 start time= 19 capacity type= 0
(4,6)->(6,11)->(6,12)->(4,19)->(4,20)->(4,21)->(6,26)->(6,27)->(6,28)->(6,29)->(4,6):1.0

artificial: false set: [257, 258, 387, 259, 388, 260, 389, 390, 391, 392, 393, 394, 42, 78, 156] start node= 1 start time= 2 capacity type= 1
(1,2)->(2,9)->(2,10)->(2,11)->(2,12)->(2,13)->(6,19)->(6,20)->(6,21)->(6,22)->(6,23)->(6,24)->(6,25)->(6,26)->(6,27)->(1,2):1.0

artificial: false set: [97, 19, 3, 83, 86, 202] start node= 4 start time= 2 capacity type= 1
(4,2)->(3,9)->(0,14)->(0,15)->(3,20)->(0,25)->(4,2):1.0

artificial: false set: [33, 82, 180, 93, 15] start node= 4 start time= 14 capacity type= 1
(3,2)->(0,7)->(4,14)->(0,21)->(6,26)->(3,2):1.0

artificial: false set: [101, 329, 330, 331, 332, 333, 16, 83, 281, 282, 283, 284, 285, 286] start node= 4 start time= 21 capacity type= 1
(3,3)->(3,4)->(3,5)->(3,6)->(3,7)->(3,8)->(3,9)->(0,14)->(4,21)->(4,22)->(4,23)->(4,24)->(4,25)->(4,26)->(3,3):1.0

artificial: false set: [96, 17, 146, 376, 204, 28, 205, 190] start node= 4 start time= 25 capacity type= 1
(0,2)->(0,3)->(6,8)->(6,9)->(0,16)->(0,17)->(0,18)->(4,25)->(0,2):1.0

artificial: false set: [32, 161, 116, 37, 151] start node= 1 start time= 9 capacity type= 2
(6,4)->(1,9)->(0,17)->(6,22)->(4,29)->(6,4):1.0

artificial: false set: [48, 3, 86, 118, 218, 12] start node= 1 start time= 0 capacity type= 2
(1,0)->(1,1)->(5,7)->(0,15)->(3,20)->(0,25)->(1,0):1.0

artificial: false set: [225, 226, 227, 228, 150, 7, 392, 44, 79] start node= 1 start time= 7 capacity type= 2
(0,2)->(1,7)->(1,8)->(1,9)->(1,10)->(1,11)->(2,18)->(6,24)->(6,25)->(0,2):1.0

artificial: false set: [368, 80, 164, 153, 77, 45] start node= 1 start time= 17 capacity type= 2
(6,0)->(6,1)->(2,6)->(6,12)->(1,17)->(2,24)->(6,0):1.0

artificial: false set: [176, 242, 84, 41, 10, 28] start node= 1 start time= 24 capacity type= 2
(0,3)->(6,8)->(3,14)->(0,19)->(1,24)->(1,25)->(0,3):1.0

artificial: false set: [67, 105, 90, 14, 126] start node= 5 start time= 16 capacity type= 2
(0,3)->(4,10)->(5,16)->(2,22)->(3,28)->(0,3):1.0

artificial: false set: [368, 144, 52, 164, 56, 9] start node= 5 start time= 25 capacity type= 2
(6,0)->(6,1)->(2,6)->(0,14)->(1,19)->(5,25)->(6,0):1.0

artificial: false set: [114, 339, 340, 136, 169, 75, 158] start node= 5 start time= 1 capacity type= 2
(5,1)->(5,2)->(5,3)->(6,8)->(4,15)->(6,20)->(2,25)->(5,1):1.0

artificial: false set: [64, 33, 85, 187, 123] start node= 5 start time= 4 capacity type= 2
(5,4)->(2,10)->(3,16)->(0,21)->(6,26)->(5,4):1.0

artificial: false set: [48, 327, 135, 138, 107, 159] start node= 5 start time= 26 capacity type= 2
(1,1)->(5,7)->(6,12)->(4,19)->(4,20)->(5,26)->(1,1):1.0

artificial: false set: [66, 342, 167, 343, 216, 88, 264, 137, 27] start node= 5 start time= 4 capacity type= 2
(5,4)->(5,5)->(5,6)->(6,11)->(2,16)->(2,17)->(3,23)->(0,28)->(0,29)->(5,4):1.0

artificial: false set: [352, 81, 273, 274, 275, 276, 182, 169, 141, 351] start node= 5 start time= 13 capacity type= 2
(6,5)->(5,13)->(5,14)->(5,15)->(6,20)->(2,25)->(2,26)->(2,27)->(2,28)->(2,29)->(6,5):1.0

artificial: false set: [83, 357, 6, 23, 216, 121, 282, 283, 284, 285, 286] start node= 5 start time= 19 capacity type= 2
(3,4)->(3,5)->(3,6)->(3,7)->(3,8)->(3,9)->(0,14)->(5,19)->(5,20)->(0,28)->(0,29)->(3,4):1.0

Total time= 18005047
