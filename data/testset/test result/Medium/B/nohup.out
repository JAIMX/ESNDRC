number of service arcs=1500
number of holding arcs=300

Yes
175

javax.naming.TimeLimitExceededException
	at cg.master.Master.solveMasterProblem(Master.java:414)
	at org.jorlib.frameworks.columnGeneration.master.AbstractMaster.solve(AbstractMaster.java:152)
	at org.jorlib.frameworks.columnGeneration.colgenMain.ColGen.invokeMaster(ColGen.java:271)
	at org.jorlib.frameworks.columnGeneration.colgenMain.ColGen.solve(ColGen.java:224)
	at org.jorlib.frameworks.columnGeneration.branchAndPrice.AbstractBranchAndPrice.solveBAPNode(AbstractBranchAndPrice.java:342)
	at bap.BranchAndPriceB_M.runBranchAndPrice(BranchAndPriceB_M.java:235)
	at SNDRCSolver.<init>(SNDRCSolver.java:87)
	at SNDRCSolver.main(SNDRCSolver.java:207)
================ Solution ================
BAP terminated with objective : 11893
Total Number of iterations: 253
Total Number of processed nodes: 11
Total Time spent on master problems: 7358110 Total time spent on pricing problems: 8420
Best bound : 8779.120000000008
The number of service edges used= 198
Solution is optimal: false
Columns (only non-zero columns are returned):
artificial: false set: [65, 277, 85, 86, 278, 41, 330, 235, 331, 60] start node= 5 start time= 5 capacity type= 0
(2,0)->(0,0)->(2,1)->(0,5)->(2,7)->(2,8)->(0,11)->(1,25)->(0,25)->(0,26)->(6,0):1.0

artificial: false set: [97, 133, 42, 237, 238, 239, 240, 241, 242, 243, 244, 245, 246, 247, 343, 248, 411, 412] start node= 5 start time= 18 capacity type= 0
(1,0)->(1,1)->(1,2)->(1,3)->(1,4)->(1,5)->(1,6)->(1,7)->(1,7)->(1,8)->(0,12)->(2,13)->(1,13)->(2,21)->(2,22)->(1,27)->(1,28)->(1,29)->(7,5):1.0

artificial: false set: [128, 113, 98, 84, 89, 11] start node= 7 start time= 6 capacity type= 1
(1,8)->(1,8)->(0,11)->(1,23)->(0,24)->(0,29)->(6,3):1.0

artificial: false set: [33, 129, 385, 386, 3, 387, 388, 389, 390, 391, 392, 393, 394, 410, 411, 412, 413, 189, 414] start node= 7 start time= 0 capacity type= 1
(2,0)->(2,1)->(2,2)->(0,3)->(0,3)->(2,3)->(2,4)->(1,9)->(1,9)->(2,20)->(2,21)->(2,22)->(2,23)->(2,24)->(2,25)->(2,26)->(2,27)->(2,28)->(2,29)->(5,3):1.0

artificial: false set: [192, 385, 34, 386, 131, 387, 4, 36, 388, 389, 244, 245, 246, 413, 414, 191] start node= 7 start time= 0 capacity type= 1
(0,4)->(1,4)->(0,4)->(1,5)->(0,6)->(1,6)->(1,11)->(1,11)->(1,12)->(2,23)->(2,24)->(2,25)->(2,26)->(2,27)->(2,28)->(2,29)->(5,3):1.0

artificial: false set: [339, 83, 340, 341, 389, 134, 390, 377, 107, 93, 47] start node= 7 start time= 4 capacity type= 1
(2,0)->(1,3)->(2,9)->(2,10)->(2,11)->(1,14)->(2,17)->(0,17)->(1,17)->(0,23)->(2,29)->(5,3):1.0

artificial: false set: [274, 275, 276, 69, 136, 78, 143, 15] start node= 7 start time= 23 capacity type= 1
(2,4)->(2,5)->(2,6)->(0,9)->(0,15)->(1,16)->(0,18)->(1,23)->(4,1):1.0

artificial: false set: [145, 66, 357, 165, 119, 282, 347, 348, 349, 94, 350, 351] start node= 8 start time= 8 capacity type= 1
(1,4)->(0,6)->(2,12)->(1,15)->(2,17)->(2,18)->(2,19)->(2,20)->(2,21)->(1,25)->(2,27)->(1,29)->(3,4):1.0

artificial: false set: [448, 449, 164, 69, 433, 434, 275, 435, 276, 436, 437, 438, 439, 152, 440, 445, 446, 447] start node= 8 start time= 18 capacity type= 1
(1,2)->(2,5)->(2,6)->(0,9)->(2,13)->(1,14)->(2,14)->(2,15)->(2,16)->(2,17)->(2,18)->(2,19)->(2,20)->(2,25)->(2,26)->(2,27)->(2,28)->(2,29)->(8,3):1.0

artificial: false set: [420, 421, 422, 171, 140, 173, 431, 432, 433, 145, 434, 151, 413] start node= 8 start time= 5 capacity type= 1
(2,0)->(2,1)->(1,1)->(2,2)->(2,11)->(2,12)->(2,13)->(2,14)->(1,20)->(1,21)->(2,23)->(1,23)->(1,25)->(4,3):1.0

artificial: false set: [256, 416, 257, 258, 259, 260, 132, 261, 392, 393, 394, 395, 396, 397, 141, 398, 399, 400, 401, 50] start node= 8 start time= 1 capacity type= 1
(2,2)->(2,3)->(2,4)->(2,5)->(2,6)->(2,7)->(2,8)->(2,9)->(2,10)->(2,11)->(1,12)->(1,16)->(1,17)->(1,18)->(1,19)->(0,20)->(1,20)->(1,21)->(1,21)->(2,26)->(7,1):1.0

artificial: false set: [163, 421, 422, 423, 424, 425, 426, 427, 236, 462, 463, 48, 464, 465, 466, 467, 147, 468] start node= 8 start time= 6 capacity type= 1
(2,1)->(2,2)->(2,3)->(2,4)->(2,5)->(2,6)->(2,7)->(3,12)->(1,13)->(3,13)->(3,14)->(3,15)->(3,16)->(3,17)->(0,18)->(3,18)->(1,26)->(1,27)->(4,5):1.0

artificial: false set: [100, 6, 202, 203, 333, 334, 335, 336, 337, 338, 467, 22, 156] start node= 9 start time= 22 capacity type= 1
(2,3)->(2,4)->(2,5)->(0,6)->(2,6)->(1,6)->(2,7)->(2,8)->(1,10)->(3,17)->(1,22)->(0,22)->(1,23)->(6,29):1.0

artificial: false set: [64, 292, 293, 294, 167, 265, 266, 267, 367, 368, 369, 466, 124, 92] start node= 9 start time= 21 capacity type= 1
(1,2)->(0,4)->(1,4)->(2,7)->(2,8)->(2,9)->(3,16)->(1,17)->(2,22)->(2,23)->(2,24)->(1,25)->(1,26)->(1,27)->(9,5):1.0

artificial: false set: [80, 306, 19, 52, 6, 200, 201, 202, 203] start node= 1 start time= 3 capacity type= 2
(2,6)->(0,6)->(0,19)->(0,20)->(1,20)->(1,21)->(0,22)->(1,22)->(1,23)->(6,29):1.0

artificial: false set: [18, 227, 228, 229, 56, 265, 266, 61, 79] start node= 1 start time= 22 capacity type= 2
(0,1)->(1,17)->(0,18)->(1,18)->(1,19)->(0,19)->(1,25)->(1,26)->(0,26)->(4,0):1.0

artificial: false set: [0, 402, 403, 117, 135, 73, 204, 28, 318] start node= 1 start time= 4 capacity type= 2
(0,0)->(2,12)->(2,13)->(0,13)->(1,15)->(2,18)->(1,24)->(1,27)->(0,28)->(1,2):1.0

artificial: false set: [2, 354, 99, 115, 453, 454, 154, 30] start node= 1 start time= 18 capacity type= 2
(0,0)->(0,2)->(3,3)->(1,4)->(3,4)->(1,9)->(2,24)->(1,25)->(3,0):1.0

Total time= 18002828
