number of service arcs=900
number of holding arcs=210

Yes
218

javax.naming.TimeLimitExceededException
	at cg.master.Master.solveMasterProblem(Master.java:414)
	at org.jorlib.frameworks.columnGeneration.master.AbstractMaster.solve(AbstractMaster.java:152)
	at org.jorlib.frameworks.columnGeneration.colgenMain.ColGen.invokeMaster(ColGen.java:271)
	at org.jorlib.frameworks.columnGeneration.colgenMain.ColGen.solve(ColGen.java:224)
	at org.jorlib.frameworks.columnGeneration.branchAndPrice.AbstractBranchAndPrice.solveBAPNode(AbstractBranchAndPrice.java:342)
	at bap.BranchAndPriceB_M.runBranchAndPrice(BranchAndPriceB_M.java:239)
	at bap.BranchAndPriceB_M.LearningUB(BranchAndPriceB_M.java:924)
	at bap.BranchAndPriceB_M.runBranchAndPrice(BranchAndPriceB_M.java:323)
	at SNDRCSolver.<init>(SNDRCSolver.java:93)
	at SNDRCSolver.main(SNDRCSolver.java:228)
javax.naming.TimeLimitExceededException
	at cg.master.Master.solveMasterProblem(Master.java:414)
	at org.jorlib.frameworks.columnGeneration.master.AbstractMaster.solve(AbstractMaster.java:152)
	at org.jorlib.frameworks.columnGeneration.colgenMain.ColGen.invokeMaster(ColGen.java:271)
	at org.jorlib.frameworks.columnGeneration.colgenMain.ColGen.solve(ColGen.java:224)
	at org.jorlib.frameworks.columnGeneration.branchAndPrice.AbstractBranchAndPrice.solveBAPNode(AbstractBranchAndPrice.java:342)
	at bap.BranchAndPriceB_M.runBranchAndPrice(BranchAndPriceB_M.java:239)
	at SNDRCSolver.<init>(SNDRCSolver.java:93)
	at SNDRCSolver.main(SNDRCSolver.java:228)
================ Solution ================
BAP terminated with objective : 84833
Total Number of iterations: 56
Total Number of processed nodes: 11
Total Time spent on master problems: 2566749 Total time spent on pricing problems: 874
Best bound : 83072.94000000015
[2, 3, 4, 5, 6, 10, 12, 14, 20, 21, 22, 24, 26, 28, 29, 31, 35, 36, 42, 47, 48, 49, 50, 51, 52, 57, 59, 61, 63, 65, 66, 67, 69, 70, 72, 76, 79, 83, 85, 87, 88, 91, 95, 101, 103, 109, 110, 113, 115, 117, 119, 121, 122, 124, 125, 127, 128, 129, 130, 131, 133, 134, 135, 136, 137, 138, 141, 144, 155, 156, 157, 158, 159, 160, 161, 162, 163, 164, 167, 169, 170, 171, 172, 174, 176, 177, 178, 179, 180, 181, 182, 184, 185, 188, 194, 196, 203, 204, 208, 211, 212, 214, 216]
The number of service edges used= 103

Solution is optimal: false
Columns (only non-zero columns are returned):
artificial: false set: [177, 3, 36, 101, 341, 342, 343, 125] start node= 4 start time= 3 capacity type= 1
(4,3)->(4,4)->(4,5)->(4,6)->(6,12)->(0,17)->(1,22)->(3,28)->(4,3):3.0

artificial: false set: [162, 178, 52, 4, 410, 411, 412, 125] start node= 4 start time= 6 capacity type= 1
(5,0)->(4,6)->(6,12)->(6,13)->(6,14)->(6,15)->(0,20)->(1,25)->(5,0):1.0

artificial: false set: [128, 353, 354, 163, 179, 421, 247, 376, 218, 12] start node= 4 start time= 15 capacity type= 1
(0,0)->(0,1)->(5,8)->(5,9)->(4,15)->(4,16)->(4,17)->(6,23)->(6,24)->(0,29)->(0,0):1.0

artificial: false set: [320, 321, 117, 88, 59, 365, 157, 366, 367] start node= 4 start time= 0 capacity type= 1
(4,0)->(5,6)->(3,12)->(3,13)->(3,14)->(2,20)->(4,27)->(4,28)->(4,29)->(4,0):3.0

artificial: false set: [288, 161, 356, 85, 357, 311, 57, 394, 122] start node= 4 start time= 18 capacity type= 1
(3,3)->(3,4)->(2,10)->(2,11)->(4,18)->(4,19)->(4,20)->(5,26)->(5,27)->(3,3):3.0

artificial: false set: [129, 164, 180, 6, 119, 424, 381] start node= 4 start time= 20 capacity type= 1
(0,2)->(4,7)->(5,13)->(5,14)->(4,20)->(6,26)->(6,27)->(0,2):1.0

artificial: false set: [176, 403, 131, 137, 10, 14] start node= 4 start time= 29 capacity type= 1
(6,5)->(6,6)->(0,11)->(5,18)->(0,24)->(4,29)->(6,5):2.0

artificial: false set: [177, 162, 21, 216, 235, 397, 125] start node= 4 start time= 6 capacity type= 1
(5,0)->(4,6)->(6,12)->(0,17)->(0,18)->(6,24)->(5,29)->(5,0):1.0

artificial: false set: [336, 337, 163, 419, 308, 309, 310, 103, 204, 127] start node= 4 start time= 15 capacity type= 1
(3,0)->(3,1)->(3,2)->(3,3)->(5,9)->(4,15)->(6,21)->(6,22)->(3,28)->(3,29)->(3,0):1.0

artificial: false set: [180, 6, 22, 119, 136, 381, 382] start node= 4 start time= 7 capacity type= 1
(0,2)->(4,7)->(5,13)->(5,14)->(5,15)->(0,21)->(6,27)->(0,2):1.0

artificial: false set: [320, 212, 87, 297, 426, 427, 76, 157, 398] start node= 5 start time= 6 capacity type= 1
(6,0)->(6,1)->(5,6)->(3,12)->(3,13)->(2,19)->(2,20)->(6,28)->(6,29)->(6,0):1.0

artificial: false set: [20, 133, 69, 185, 29] start node= 1 start time= 21 capacity type= 2
(5,4)->(0,10)->(6,16)->(1,21)->(2,28)->(5,4):1.0

artificial: false set: [65, 292, 181, 389, 26, 172, 253, 254] start node= 1 start time= 6 capacity type= 2
(6,0)->(1,5)->(1,6)->(1,7)->(2,14)->(2,15)->(5,21)->(5,22)->(6,0):1.0

artificial: false set: [368, 67, 315, 156, 300, 28, 397, 79] start node= 1 start time= 15 capacity type= 2
(5,0)->(5,1)->(3,7)->(3,8)->(1,15)->(2,22)->(2,23)->(5,29)->(5,0):1.0

artificial: false set: [160, 49, 184, 169, 110] start node= 1 start time= 18 capacity type= 2
(5,5)->(6,13)->(1,18)->(5,23)->(3,29)->(5,5):1.0

artificial: false set: [144, 48, 336, 36, 141, 110] start node= 1 start time= 22 capacity type= 2
(5,5)->(1,11)->(5,16)->(1,22)->(3,28)->(3,29)->(5,5):1.0

artificial: false set: [208, 129, 211, 408, 409, 124] start node= 4 start time= 4 capacity type= 2
(4,4)->(6,10)->(6,11)->(6,12)->(4,20)->(6,26)->(4,4):1.0

artificial: false set: [2, 130, 212, 134, 265, 42] start node= 4 start time= 25 capacity type= 2
(6,1)->(5,6)->(0,12)->(1,17)->(1,18)->(4,25)->(6,1):2.0

artificial: false set: [144, 51, 214, 167, 124, 270, 383] start node= 4 start time= 4 capacity type= 2
(4,4)->(6,10)->(5,15)->(5,16)->(1,22)->(1,23)->(5,28)->(4,4):1.0

artificial: false set: [5, 389, 121, 138, 317, 95, 31] start node= 4 start time= 15 capacity type= 2
(1,3)->(3,9)->(3,10)->(4,15)->(5,21)->(5,22)->(0,28)->(1,3):1.0

artificial: false set: [20, 69, 133, 185, 29] start node= 5 start time= 4 capacity type= 2
(5,4)->(0,10)->(6,16)->(1,21)->(2,28)->(5,4):1.0

artificial: false set: [161, 50, 3, 103, 135, 377, 378] start node= 5 start time= 9 capacity type= 2
(3,3)->(5,9)->(5,10)->(5,11)->(0,17)->(1,22)->(5,27)->(3,3):1.0

artificial: false set: [182, 109, 158, 174, 47] start node= 5 start time= 26 capacity type= 2
(6,4)->(1,9)->(5,14)->(3,20)->(5,26)->(6,4):1.0

artificial: false set: [320, 113, 321, 196, 373, 70, 157] start node= 5 start time= 6 capacity type= 2
(5,5)->(5,6)->(3,12)->(3,13)->(3,14)->(6,22)->(2,29)->(5,5):1.0

artificial: false set: [66, 194, 72, 155, 396] start node= 5 start time= 28 capacity type= 2
(2,7)->(6,15)->(2,22)->(5,28)->(5,29)->(2,7):2.0

artificial: false set: [280, 281, 170, 378, 91, 203, 379, 61] start node= 5 start time= 10 capacity type= 2
(2,2)->(2,3)->(2,4)->(5,10)->(5,11)->(5,12)->(6,20)->(3,26)->(2,2):1.0

artificial: false set: [2, 115, 35, 212, 134] start node= 5 start time= 6 capacity type= 2
(6,1)->(5,6)->(0,12)->(1,17)->(3,23)->(6,1):1.0

artificial: false set: [83, 276, 277, 24, 381, 382, 63, 159] start node= 5 start time= 13 capacity type= 2
(1,0)->(2,7)->(5,13)->(5,14)->(5,15)->(3,21)->(1,28)->(1,29)->(1,0):1.0

artificial: false set: [277, 24, 171, 188, 381, 382, 63, 383] start node= 5 start time= 13 capacity type= 2
(1,0)->(2,7)->(5,13)->(5,14)->(5,15)->(5,16)->(6,24)->(1,29)->(1,0):1.0

Total time= 18005342
