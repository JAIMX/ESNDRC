number of service arcs=750
number of holding arcs=250

javax.naming.TimeLimitExceededException
	at cg.master.Master.solveMasterProblem(Master.java:414)
	at org.jorlib.frameworks.columnGeneration.master.AbstractMaster.solve(AbstractMaster.java:152)
	at org.jorlib.frameworks.columnGeneration.colgenMain.ColGen.invokeMaster(ColGen.java:271)
	at org.jorlib.frameworks.columnGeneration.colgenMain.ColGen.solve(ColGen.java:224)
	at org.jorlib.frameworks.columnGeneration.branchAndPrice.AbstractBranchAndPrice.solveBAPNode(AbstractBranchAndPrice.java:342)
	at bap.BranchAndPriceA_M.runBranchAndPrice(BranchAndPriceA_M.java:236)
	at SNDRCSolver.<init>(SNDRCSolver.java:90)
	at SNDRCSolver.main(SNDRCSolver.java:210)
================ Solution ================
BAP terminated with objective : 46130
Total Number of iterations: 26
Total Number of processed nodes: 3
Total Time spent on master problems: 2370088 Total time spent on pricing problems: 676
Best bound : 45350.12000000001
The number of service edges used= 125
Solution is optimal: false
Columns (only non-zero columns are returned):
artificial: false set: [224, 513, 260, 549, 583, 296, 520, 267, 428, 437, 506, 253, 542] start node= 1 start time= 10 capacity type= 2
(1,3)->(3,6)->(1,10)->(3,13)->(1,17)->(3,20)->(1,24)->(2,28)->(3,33)->(2,37)->(3,42)->(1,46)->(3,49)->(1,3):1.0

artificial: false set: [36, 743, 456, 713, 109, 496, 466, 723, 339, 149, 182, 119, 476, 29, 703] start node= 1 start time= 32 capacity type= 2
(4,3)->(3,6)->(0,9)->(4,13)->(3,16)->(0,19)->(4,23)->(3,26)->(0,29)->(1,32)->(0,36)->(1,39)->(4,43)->(3,46)->(0,49)->(4,3):1.0

artificial: false set: [737, 450, 707, 103, 490, 747, 460, 717, 333, 143, 176, 113, 470, 23, 30] start node= 1 start time= 33 capacity type= 2
(3,0)->(0,3)->(4,7)->(3,10)->(0,13)->(4,17)->(3,20)->(0,23)->(1,26)->(0,30)->(1,33)->(4,37)->(3,40)->(0,43)->(4,47)->(3,0):1.0

artificial: false set: [512, 0, 497, 433, 420, 229, 407, 216, 442, 203, 588, 525] start node= 1 start time= 16 capacity type= 2
(0,0)->(1,3)->(2,7)->(3,12)->(1,16)->(2,20)->(3,25)->(1,29)->(2,33)->(3,38)->(2,42)->(3,47)->(0,0):1.0

artificial: false set: [353, 641, 337, 66, 611, 307, 229, 375, 249, 571, 46, 383] start node= 1 start time= 29 capacity type= 2
(2,3)->(1,7)->(4,11)->(0,16)->(3,21)->(2,25)->(1,29)->(2,33)->(1,37)->(4,41)->(0,46)->(1,49)->(2,3):1.0

artificial: false set: [579, 163, 3, 488, 424, 648, 41, 10, 433, 17, 344, 220, 156] start node= 4 start time= 48 capacity type= 2
(0,3)->(1,6)->(0,10)->(1,13)->(0,17)->(1,20)->(2,24)->(3,29)->(2,33)->(3,38)->(0,41)->(1,44)->(4,48)->(0,3):1.0

artificial: false set: [98, 66, 453, 710, 487, 106, 74, 495, 463, 82, 471, 90, 479] start node= 4 start time= 10 capacity type= 2
(3,3)->(0,6)->(4,10)->(3,13)->(0,16)->(3,21)->(0,24)->(3,29)->(0,32)->(3,37)->(0,40)->(3,45)->(0,48)->(3,3):1.0

artificial: false set: [1, 628, 133, 646, 361, 315, 619, 124, 557, 637, 254, 142] start node= 4 start time= 19 capacity type= 2
(0,1)->(1,4)->(3,7)->(2,11)->(1,15)->(4,19)->(0,24)->(4,28)->(0,33)->(4,37)->(0,42)->(4,46)->(0,1):1.0

artificial: false set: [672, 210, 356, 244, 390, 377, 202, 331, 364, 685, 318, 398] start node= 4 start time= 22 capacity type= 2
(1,2)->(2,6)->(1,10)->(2,14)->(1,18)->(4,22)->(2,27)->(1,31)->(4,35)->(2,40)->(1,44)->(2,48)->(1,2):1.0

artificial: false set: [464, 434, 117, 230, 376, 696, 489, 409, 205, 142, 671, 351] start node= 4 start time= 46 capacity type= 2
(2,1)->(1,5)->(2,9)->(3,14)->(0,17)->(4,21)->(2,26)->(1,30)->(2,34)->(3,39)->(0,42)->(4,46)->(2,1):1.0

Total time= 19465978
number of service arcs=900
number of holding arcs=210

