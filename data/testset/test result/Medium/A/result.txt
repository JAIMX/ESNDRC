test6_5_15_40_200A

BranchAndPriceA_M bap=new BranchAndPriceA_M(dataModel, master, pricingProblems, solvers, branchCreators,Double.MAX_VALUE,0.65,1,0.1,10,0.001,10,0.1,false,true);

number of service arcs=600
number of holding arcs=200

javax.naming.TimeLimitExceededException
	at cg.master.Master.solveMasterProblem(Master.java:414)
	at org.jorlib.frameworks.columnGeneration.master.AbstractMaster.solve(AbstractMaster.java:152)
	at org.jorlib.frameworks.columnGeneration.colgenMain.ColGen.invokeMaster(ColGen.java:271)
	at org.jorlib.frameworks.columnGeneration.colgenMain.ColGen.solve(ColGen.java:224)
	at org.jorlib.frameworks.columnGeneration.branchAndPrice.AbstractBranchAndPrice.solveBAPNode(AbstractBranchAndPrice.java:342)
	at bap.BranchAndPriceA_M.runBranchAndPrice(BranchAndPriceA_M.java:236)
	at SNDRCSolver.<init>(SNDRCSolver.java:90)
	at SNDRCSolver.main(SNDRCSolver.java:210)
================ Solution ================
BAP terminated with objective : 22196
Total Number of iterations: 69
Total Number of processed nodes: 7
Total Time spent on master problems: 2694887 Total time spent on pricing problems: 1360
Best bound : 21378.996774193576
The number of service edges used= 71
Solution is optimal: false
Columns (only non-zero columns are returned):
artificial: false set: [385, 391, 363, 332, 397, 302, 369, 308, 280, 314, 379, 286, 575] start node= 4 start time= 15 capacity type= 1
(2,0)->(3,3)->(2,6)->(3,9)->(2,12)->(4,15)->(3,19)->(2,22)->(3,25)->(2,28)->(3,31)->(2,34)->(3,37)->(2,0):1.0

artificial: false set: [112, 482, 580, 437, 469, 167, 424, 90, 415] start node= 1 start time= 7 capacity type= 2
(4,2)->(1,7)->(0,10)->(3,15)->(4,20)->(3,24)->(4,29)->(0,32)->(3,37)->(4,2):1.0

artificial: false set: [2, 356, 231, 343, 506, 218, 330, 493, 205, 479] start node= 1 start time= 5 capacity type= 2
(0,2)->(1,5)->(2,10)->(4,13)->(1,18)->(2,23)->(4,26)->(1,31)->(2,36)->(4,39)->(0,2):1.0

artificial: false set: [337, 467, 485, 150, 374, 344, 473, 122, 250, 156, 540, 479] start node= 1 start time= 10 capacity type= 2
(0,2)->(4,5)->(1,10)->(3,14)->(2,17)->(4,20)->(2,24)->(4,27)->(0,30)->(4,33)->(0,36)->(4,39)->(0,2):1.0

artificial: false set: [352, 178, 515, 67, 21, 408, 200, 184, 493, 285] start node= 1 start time= 18 capacity type= 2
(1,0)->(2,5)->(3,8)->(4,13)->(1,18)->(0,21)->(1,24)->(0,27)->(2,32)->(4,35)->(1,0):1.0

artificial: false set: [0, 432, 64, 416, 48, 643, 644, 309, 293, 165, 477, 461] start node= 1 start time= 3 capacity type= 2
(0,0)->(1,3)->(1,4)->(1,5)->(0,8)->(2,13)->(3,16)->(4,21)->(0,24)->(2,29)->(3,32)->(4,37)->(0,0):1.0

artificial: false set: [32, 417, 449, 723, 195, 404, 118, 502, 667, 92, 668, 189] start node= 4 start time= 22 capacity type= 2
(3,3)->(3,4)->(4,9)->(0,12)->(3,17)->(4,22)->(1,27)->(1,28)->(1,29)->(0,32)->(1,35)->(0,38)->(3,3):1.0

Total time= 18614786

-------------------------------------------------------------------------------------------------------------------------------------------------------
test7_5_15_50_400A

BranchAndPriceA_M bap=new BranchAndPriceA_M(dataModel, master, pricingProblems, solvers, branchCreators,Double.MAX_VALUE,0.65,1,0.1,10,0.001,10,0.1,false,true);
number of service arcs=750
number of holding arcs=250

javax.naming.TimeLimitExceededException
	at cg.master.Master.solveMasterProblem(Master.java:414)
	at org.jorlib.frameworks.columnGeneration.master.AbstractMaster.solve(AbstractMaster.java:152)
	at org.jorlib.frameworks.columnGeneration.colgenMain.ColGen.invokeMaster(ColGen.java:271)
	at org.jorlib.frameworks.columnGeneration.colgenMain.ColGen.solve(ColGen.java:224)
	at org.jorlib.frameworks.columnGeneration.branchAndPrice.AbstractBranchAndPrice.solveBAPNode(AbstractBranchAndPrice.java:342)
	at bap.BranchAndPriceA_M.runBranchAndPrice(BranchAndPriceA_M.java:236)
	at SNDRCSolver.<init>(SNDRCSolver.java:90)
	at SNDRCSolver.main(SNDRCSolver.java:210)
================ Solution ================
BAP terminated with objective : 46130
Total Number of iterations: 26
Total Number of processed nodes: 3
Total Time spent on master problems: 2370088 Total time spent on pricing problems: 676
Best bound : 45350.12000000001
The number of service edges used= 125
Solution is optimal: false
Columns (only non-zero columns are returned):
artificial: false set: [224, 513, 260, 549, 583, 296, 520, 267, 428, 437, 506, 253, 542] start node= 1 start time= 10 capacity type= 2
(1,3)->(3,6)->(1,10)->(3,13)->(1,17)->(3,20)->(1,24)->(2,28)->(3,33)->(2,37)->(3,42)->(1,46)->(3,49)->(1,3):1.0

artificial: false set: [36, 743, 456, 713, 109, 496, 466, 723, 339, 149, 182, 119, 476, 29, 703] start node= 1 start time= 32 capacity type= 2
(4,3)->(3,6)->(0,9)->(4,13)->(3,16)->(0,19)->(4,23)->(3,26)->(0,29)->(1,32)->(0,36)->(1,39)->(4,43)->(3,46)->(0,49)->(4,3):1.0

artificial: false set: [737, 450, 707, 103, 490, 747, 460, 717, 333, 143, 176, 113, 470, 23, 30] start node= 1 start time= 33 capacity type= 2
(3,0)->(0,3)->(4,7)->(3,10)->(0,13)->(4,17)->(3,20)->(0,23)->(1,26)->(0,30)->(1,33)->(4,37)->(3,40)->(0,43)->(4,47)->(3,0):1.0

artificial: false set: [512, 0, 497, 433, 420, 229, 407, 216, 442, 203, 588, 525] start node= 1 start time= 16 capacity type= 2
(0,0)->(1,3)->(2,7)->(3,12)->(1,16)->(2,20)->(3,25)->(1,29)->(2,33)->(3,38)->(2,42)->(3,47)->(0,0):1.0

artificial: false set: [353, 641, 337, 66, 611, 307, 229, 375, 249, 571, 46, 383] start node= 1 start time= 29 capacity type= 2
(2,3)->(1,7)->(4,11)->(0,16)->(3,21)->(2,25)->(1,29)->(2,33)->(1,37)->(4,41)->(0,46)->(1,49)->(2,3):1.0

artificial: false set: [579, 163, 3, 488, 424, 648, 41, 10, 433, 17, 344, 220, 156] start node= 4 start time= 48 capacity type= 2
(0,3)->(1,6)->(0,10)->(1,13)->(0,17)->(1,20)->(2,24)->(3,29)->(2,33)->(3,38)->(0,41)->(1,44)->(4,48)->(0,3):1.0

artificial: false set: [98, 66, 453, 710, 487, 106, 74, 495, 463, 82, 471, 90, 479] start node= 4 start time= 10 capacity type= 2
(3,3)->(0,6)->(4,10)->(3,13)->(0,16)->(3,21)->(0,24)->(3,29)->(0,32)->(3,37)->(0,40)->(3,45)->(0,48)->(3,3):1.0

artificial: false set: [1, 628, 133, 646, 361, 315, 619, 124, 557, 637, 254, 142] start node= 4 start time= 19 capacity type= 2
(0,1)->(1,4)->(3,7)->(2,11)->(1,15)->(4,19)->(0,24)->(4,28)->(0,33)->(4,37)->(0,42)->(4,46)->(0,1):1.0

artificial: false set: [672, 210, 356, 244, 390, 377, 202, 331, 364, 685, 318, 398] start node= 4 start time= 22 capacity type= 2
(1,2)->(2,6)->(1,10)->(2,14)->(1,18)->(4,22)->(2,27)->(1,31)->(4,35)->(2,40)->(1,44)->(2,48)->(1,2):1.0

artificial: false set: [464, 434, 117, 230, 376, 696, 489, 409, 205, 142, 671, 351] start node= 4 start time= 46 capacity type= 2
(2,1)->(1,5)->(2,9)->(3,14)->(0,17)->(4,21)->(2,26)->(1,30)->(2,34)->(3,39)->(0,42)->(4,46)->(2,1):1.0

Total time= 19465978

-------------------------------------------------------------------------------------------------------------------------------------------------------
test8_7_30_30_200A

number of service arcs=900
number of holding arcs=210

javax.naming.TimeLimitExceededException
	at cg.master.Master.solveMasterProblem(Master.java:414)
	at org.jorlib.frameworks.columnGeneration.master.AbstractMaster.solve(AbstractMaster.java:152)
	at org.jorlib.frameworks.columnGeneration.colgenMain.ColGen.invokeMaster(ColGen.java:271)
	at org.jorlib.frameworks.columnGeneration.colgenMain.ColGen.solve(ColGen.java:224)
	at org.jorlib.frameworks.columnGeneration.branchAndPrice.AbstractBranchAndPrice.solveBAPNode(AbstractBranchAndPrice.java:342)
	at bap.BranchAndPriceA_M.runBranchAndPrice(BranchAndPriceA_M.java:236)
	at SNDRCSolver.<init>(SNDRCSolver.java:90)
	at SNDRCSolver.main(SNDRCSolver.java:210)
================ Solution ================
BAP terminated with objective : 45251
Total Number of iterations: 143
Total Number of processed nodes: 6
Total Time spent on master problems: 3425094 Total time spent on pricing problems: 2073
Best bound : 43453.43999999997
The number of service edges used= 83
Solution is optimal: false
Columns (only non-zero columns are returned):
artificial: false set: [992, 993, 994, 995, 996, 997, 85, 998, 137, 429, 991] start node= 1 start time= 17 capacity type= 1
(3,1)->(3,2)->(3,3)->(3,4)->(3,5)->(3,6)->(3,7)->(3,8)->(3,9)->(1,17)->(0,25)->(3,1):1.0

artificial: false set: [400, 501, 1048, 1049, 634, 75, 1020, 1021, 1022, 1023] start node= 4 start time= 28 capacity type= 1
(4,0)->(4,1)->(4,2)->(4,3)->(4,4)->(3,10)->(0,15)->(3,21)->(4,28)->(4,29)->(4,0):1.0

artificial: false set: [1040, 33, 1041, 1042, 339, 595, 1043, 1044, 1037, 1038, 1039] start node= 4 start time= 17 capacity type= 1
(0,3)->(2,9)->(4,17)->(4,18)->(4,19)->(4,20)->(4,21)->(4,22)->(4,23)->(4,24)->(4,25)->(0,3):1.0

artificial: false set: [685, 1039, 1040, 1041, 1042, 1043, 756, 1044, 341, 1051, 1052, 1053, 1054, 1055] start node= 4 start time= 19 capacity type= 1
(5,1)->(5,2)->(5,3)->(5,4)->(5,5)->(5,6)->(2,11)->(4,19)->(4,20)->(4,21)->(4,22)->(4,23)->(4,24)->(4,25)->(5,1):1.0

artificial: false set: [449, 465, 322, 937, 188] start node= 1 start time= 7 capacity type= 2
(1,7)->(1,8)->(3,15)->(2,22)->(3,29)->(1,7):1.0

artificial: false set: [944, 321, 945, 166, 569, 1018, 815, 943] start node= 1 start time= 13 capacity type= 2
(6,5)->(1,13)->(1,14)->(1,15)->(1,16)->(2,21)->(3,28)->(3,29)->(6,5):1.0

artificial: false set: [992, 1089, 323, 820, 168, 990, 543, 991] start node= 1 start time= 18 capacity type= 2
(3,0)->(3,1)->(3,2)->(3,3)->(6,9)->(6,10)->(1,18)->(2,23)->(3,0):1.0

artificial: false set: [144, 548, 824, 952, 953, 62] start node= 1 start time= 22 capacity type= 2
(0,2)->(3,8)->(6,14)->(1,22)->(1,23)->(1,24)->(0,2):1.0

artificial: false set: [934, 43, 125, 446, 319] start node= 1 start time= 4 capacity type= 2
(1,4)->(1,5)->(0,13)->(2,19)->(3,26)->(1,4):1.0

artificial: false set: [834, 579, 212, 1028, 107] start node= 4 start time= 8 capacity type= 2
(1,2)->(4,8)->(4,9)->(0,17)->(6,24)->(1,2):1.0

artificial: false set: [898, 226, 725, 712, 11, 1053, 1054] start node= 5 start time= 3 capacity type= 2
(5,3)->(5,4)->(5,5)->(0,11)->(1,16)->(4,22)->(6,28)->(5,3):1.0

artificial: false set: [785, 946, 227, 611, 268, 623] start node= 5 start time= 5 capacity type= 2
(5,5)->(4,11)->(1,16)->(1,17)->(4,23)->(1,28)->(5,5):1.0

artificial: false set: [673, 739, 150, 25, 335] start node= 5 start time= 19 capacity type= 2
(1,0)->(2,5)->(4,13)->(5,19)->(0,25)->(1,0):1.0

artificial: false set: [707, 809, 1036, 220, 605, 894, 1103] start node= 5 start time= 29 capacity type= 2
(4,5)->(1,10)->(4,16)->(4,17)->(6,23)->(6,24)->(5,29)->(4,5):1.0

artificial: false set: [1073, 375, 744, 90, 847] start node= 5 start time= 23 capacity type= 2
(0,0)->(6,7)->(2,15)->(5,23)->(5,24)->(0,0):1.0

artificial: false set: [966, 1065, 1018, 652, 796, 367, 479] start node= 5 start time= 15 capacity type= 2
(2,6)->(2,7)->(5,15)->(5,16)->(4,22)->(3,28)->(3,29)->(2,6):1.0

artificial: false set: [880, 694, 507, 651, 795] start node= 5 start time= 15 capacity type= 2
(4,4)->(6,10)->(5,15)->(4,21)->(3,27)->(4,4):1.0

artificial: false set: [754, 198, 535, 280, 969, 1053] start node= 5 start time= 3 capacity type= 2
(5,3)->(5,4)->(2,9)->(2,10)->(1,18)->(3,25)->(5,3):1.0

artificial: false set: [83, 789, 585, 1019, 990, 511] start node= 5 start time= 9 capacity type= 2
(3,0)->(3,1)->(5,9)->(4,15)->(0,23)->(3,29)->(3,0):1.0

artificial: false set: [1024, 881, 737, 695, 23, 1066, 238] start node= 5 start time= 17 capacity type= 2
(4,4)->(4,5)->(6,11)->(5,16)->(5,17)->(0,23)->(1,28)->(4,4):1.0

Total time= 18499636

-------------------------------------------------------------------------------------------------------------------------------------------------------
test9_7_30_30_400A


BranchAndPriceA_M bap=new BranchAndPriceA_M(dataModel, master, pricingProblems, solvers, branchCreators,Double.MAX_VALUE,0.65,1,0.1,10,0.001,10,0.1,false,true);

number of service arcs=900
number of holding arcs=210

javax.naming.TimeLimitExceededException
	at cg.master.Master.solveMasterProblem(Master.java:414)
	at org.jorlib.frameworks.columnGeneration.master.AbstractMaster.solve(AbstractMaster.java:152)
	at org.jorlib.frameworks.columnGeneration.colgenMain.ColGen.invokeMaster(ColGen.java:271)
	at org.jorlib.frameworks.columnGeneration.colgenMain.ColGen.solve(ColGen.java:224)
	at org.jorlib.frameworks.columnGeneration.branchAndPrice.AbstractBranchAndPrice.solveBAPNode(AbstractBranchAndPrice.java:342)
	at bap.BranchAndPriceA_M.runBranchAndPrice(BranchAndPriceA_M.java:236)
	at SNDRCSolver.<init>(SNDRCSolver.java:90)
	at SNDRCSolver.main(SNDRCSolver.java:210)
================ Solution ================
BAP terminated with objective : 24480
Total Number of iterations: 53
Total Number of processed nodes: 2
Total Time spent on master problems: 2396204 Total time spent on pricing problems: 1852
Best bound : 19117.926666666666
The number of service edges used= 74
Solution is optimal: false
Columns (only non-zero columns are returned):
artificial: false set: [552, 394, 859, 268, 957] start node= 1 start time= 27 capacity type= 1
(2,4)->(3,12)->(6,19)->(1,27)->(1,28)->(2,4):1.0

artificial: false set: [944, 945, 1012, 1013, 566, 1014, 1015, 843, 941, 286, 942, 943] start node= 1 start time= 11 capacity type= 1
(6,3)->(1,11)->(1,12)->(1,13)->(1,14)->(1,15)->(1,16)->(3,22)->(3,23)->(3,24)->(3,25)->(3,26)->(6,3):1.0

artificial: false set: [275, 628, 676, 502, 1047, 491] start node= 1 start time= 5 capacity type= 2
(1,5)->(3,11)->(4,16)->(3,22)->(4,27)->(4,28)->(1,5):1.0

artificial: false set: [182, 1096, 25, 907, 797, 158] start node= 1 start time= 2 capacity type= 2
(1,2)->(0,7)->(0,8)->(6,16)->(6,17)->(0,25)->(1,2):1.0

artificial: false set: [327, 312, 620, 605] start node= 1 start time= 12 capacity type= 2
(4,5)->(1,12)->(4,20)->(1,27)->(4,5):1.0

artificial: false set: [562, 869, 937, 74, 938, 189] start node= 1 start time= 7 capacity type= 2
(1,7)->(1,8)->(1,9)->(0,14)->(3,22)->(6,29)->(1,7):1.0

artificial: false set: [624, 243, 931, 932, 341, 969, 970, 109] start node= 1 start time= 1 capacity type= 2
(1,1)->(1,2)->(1,3)->(2,9)->(2,10)->(2,11)->(0,19)->(4,24)->(1,1):1.0

artificial: false set: [475, 828, 460, 813] start node= 2 start time= 10 capacity type= 2
(6,3)->(2,10)->(6,18)->(2,25)->(6,3):1.0

artificial: false set: [643, 117, 662, 488, 349] start node= 4 start time= 13 capacity type= 2
(4,2)->(3,8)->(4,13)->(2,19)->(0,27)->(4,2):1.0

artificial: false set: [449, 1042, 434, 1027, 653, 638] start node= 4 start time= 23 capacity type= 2
(4,7)->(4,8)->(2,14)->(4,22)->(4,23)->(2,29)->(4,7):1.0

artificial: false set: [176, 739, 522, 874, 924, 925] start node= 5 start time= 19 capacity type= 2
(6,4)->(3,12)->(5,19)->(0,24)->(0,25)->(0,26)->(6,4):1.0

artificial: false set: [720, 145, 65, 588, 493] start node= 5 start time= 0 capacity type= 2
(5,0)->(0,5)->(3,13)->(4,18)->(0,25)->(5,0):1.0

artificial: false set: [481, 981, 1062, 696, 763, 412, 990] start node= 5 start time= 12 capacity type= 2
(3,0)->(3,1)->(4,6)->(5,12)->(5,13)->(2,21)->(2,22)->(3,0):1.0

artificial: false set: [915, 787, 179, 916, 917, 918, 744, 139] start node= 5 start time= 24 capacity type= 2
(6,7)->(0,15)->(0,16)->(0,17)->(0,18)->(0,19)->(5,24)->(0,29)->(6,7):1.0

artificial: false set: [913, 914, 165, 728, 893, 511] start node= 5 start time= 8 capacity type= 2
(3,1)->(5,8)->(0,13)->(0,14)->(0,15)->(6,23)->(3,1):1.0

artificial: false set: [928, 724, 149, 39, 347, 925, 926, 927] start node= 5 start time= 4 capacity type= 2
(5,4)->(0,9)->(2,17)->(0,25)->(0,26)->(0,27)->(0,28)->(0,29)->(5,4):1.0

artificial: false set: [290, 949, 727, 1016, 1017, 1018, 1019, 12, 510] start node= 5 start time= 7 capacity type= 2
(3,0)->(5,7)->(0,12)->(1,19)->(1,20)->(3,26)->(3,27)->(3,28)->(3,29)->(3,0):1.0

artificial: false set: [928, 369, 929, 226, 742, 968, 30, 927] start node= 5 start time= 22 capacity type= 2
(0,0)->(2,8)->(2,9)->(1,16)->(5,22)->(0,27)->(0,28)->(0,29)->(0,0):1.0

Total time= 18001835



-------------------------------------------------------------------------------------------------------------------------------------------------------
test10_7_30_50_300A



-------------------------------------------------------------------------------------------------------------------------------------------------------
test11_10_40_30_200A(not cut)
number of service arcs=1200
number of holding arcs=300

BranchAndPriceA_M bap=new BranchAndPriceA_M(dataModel, master, pricingProblems, solvers, branchCreators,Double.MAX_VALUE,0.65,1,0.1,10,0.001,10,0.1,false,true);

javax.naming.TimeLimitExceededException
	at cg.master.Master.solveMasterProblem(Master.java:414)
	at org.jorlib.frameworks.columnGeneration.master.AbstractMaster.solve(AbstractMaster.java:152)
	at org.jorlib.frameworks.columnGeneration.colgenMain.ColGen.invokeMaster(ColGen.java:271)
	at org.jorlib.frameworks.columnGeneration.colgenMain.ColGen.solve(ColGen.java:224)
	at org.jorlib.frameworks.columnGeneration.branchAndPrice.AbstractBranchAndPrice.solveBAPNode(AbstractBranchAndPrice.java:342)
	at bap.BranchAndPriceA_M.runBranchAndPrice(BranchAndPriceA_M.java:240)
	at SNDRCSolver.<init>(SNDRCSolver.java:93)
	at SNDRCSolver.main(SNDRCSolver.java:228)
================ Solution ================
BAP terminated with objective : 32219
Total Number of iterations: 133
Total Number of processed nodes: 9
Total Time spent on master problems: 1381233 Total time spent on pricing problems: 3944
Best bound : 26749.18
[6, 36, 44, 59, 71, 77, 84, 118, 123, 143, 151, 156, 171, 182, 186, 197, 205, 213, 250, 256, 262, 280, 293, 298, 309, 339, 365, 371, 379, 390, 402, 407, 412, 413, 423, 428, 429, 434, 436, 438, 446, 449, 465, 466, 494, 498, 505, 517, 520, 535, 548, 555, 563, 566, 574, 581, 595, 601, 621, 645, 653, 655, 671, 684, 711, 714, 719, 720, 726, 736, 739, 750, 755, 765, 781, 784, 804, 814, 826, 842, 850, 899, 900, 915, 918, 921, 923, 938, 948, 961, 1015, 1029, 1049, 1050, 1054, 1057, 1072, 1085, 1096, 1107, 1122, 1126, 1132, 1136, 1152]
The number of service edges used= 105

Solution is optimal: false
Columns (only non-zero columns are returned):
artificial: false set: [449, 434, 171, 156] start node= 1 start time= 6 capacity type= 1
(1,6)->(3,14)->(1,21)->(3,29)->(1,6):1.0

artificial: false set: [1252, 548, 1253, 1254, 826, 1323, 1324, 205, 1325, 1326, 1327] start node= 4 start time= 4 capacity type= 1
(4,3)->(4,4)->(4,5)->(4,6)->(4,7)->(4,8)->(7,16)->(1,22)->(1,23)->(1,24)->(1,25)->(4,3):1.0

artificial: false set: [736, 1392, 720, 1344, 1393, 1394, 1395, 517, 535, 1343] start node= 4 start time= 23 capacity type= 1
(6,0)->(4,7)->(6,12)->(6,13)->(6,14)->(6,15)->(6,16)->(4,23)->(4,24)->(4,25)->(6,0):1.0

artificial: false set: [1328, 1329, 1330, 1331, 804, 1332, 1333, 1334, 1433, 59, 555, 1327] start node= 4 start time= 7 capacity type= 1
(4,7)->(4,8)->(4,9)->(4,10)->(4,11)->(4,12)->(4,13)->(4,14)->(4,15)->(7,23)->(7,24)->(0,29)->(4,7):1.0

artificial: false set: [1072, 1057, 915, 900] start node= 7 start time= 0 capacity type= 1
(7,0)->(8,7)->(7,15)->(8,22)->(7,0):1.0

artificial: false set: [465, 1410, 36, 1334, 412, 781, 1438, 1439] start node= 7 start time= 28 capacity type= 1
(7,0)->(7,1)->(0,6)->(4,14)->(4,15)->(2,22)->(7,28)->(7,29)->(7,0):1.0

artificial: false set: [498, 339, 1411, 1337, 842, 684] start node= 7 start time= 1 capacity type= 1
(7,1)->(7,2)->(2,9)->(4,17)->(4,18)->(5,24)->(7,1):1.0

artificial: false set: [739, 566, 1398, 250, 814] start node= 7 start time= 4 capacity type= 1
(7,4)->(1,10)->(6,18)->(6,19)->(4,26)->(7,4):1.0

artificial: false set: [784, 563, 1411, 1412, 1413, 1209, 1210, 1211, 44, 1212, 1213, 1342] start node= 7 start time= 1 capacity type= 1
(7,1)->(7,2)->(7,3)->(7,4)->(0,9)->(0,10)->(0,11)->(0,12)->(0,13)->(0,14)->(4,22)->(4,23)->(7,1):1.0

artificial: false set: [850, 407, 1418, 1050, 923, 1419] start node= 8 start time= 0 capacity type= 1
(8,0)->(7,8)->(7,9)->(7,10)->(2,17)->(7,23)->(8,0):1.0

artificial: false set: [1458, 1459, 1460, 1461, 1462, 423, 1015, 1463, 280, 1464] start node= 8 start time= 18 capacity type= 1
(3,3)->(1,10)->(8,18)->(8,19)->(8,20)->(8,21)->(8,22)->(8,23)->(8,24)->(8,25)->(3,3):1.0

artificial: false set: [1364, 645, 1029, 1446, 711, 1447, 1400, 1448, 298] start node= 8 start time= 6 capacity type= 1
(8,6)->(8,7)->(8,8)->(8,9)->(5,14)->(5,15)->(6,20)->(6,21)->(1,28)->(8,6):1.0

artificial: false set: [402, 1428, 1429, 1430, 921, 1049, 1468, 574] start node= 8 start time= 28 capacity type= 1
(5,4)->(2,12)->(7,18)->(7,19)->(7,20)->(7,21)->(8,28)->(8,29)->(5,4):1.0

artificial: false set: [1440, 1441, 1442, 1443, 1422, 1423, 1424, 1425, 1426, 1427, 918, 1465, 1466, 1467, 1468, 1469, 1054] start node= 8 start time= 25 capacity type= 1
(8,0)->(8,1)->(8,2)->(8,3)->(8,4)->(7,12)->(7,13)->(7,14)->(7,15)->(7,16)->(7,17)->(7,18)->(8,25)->(8,26)->(8,27)->(8,28)->(8,29)->(8,0):1.0

artificial: false set: [1152, 1477, 1478, 1479, 1480, 1481, 750, 655, 1370, 1371, 1372, 1373, 1374] start node= 9 start time= 11 capacity type= 1
(6,0)->(9,7)->(9,8)->(9,9)->(9,10)->(9,11)->(9,12)->(5,20)->(5,21)->(5,22)->(5,23)->(5,24)->(5,25)->(6,0):1.0

artificial: false set: [1249, 1250, 1122, 755, 1251, 1380, 1381, 1382, 262, 1383, 1384] start node= 9 start time= 12 capacity type= 1
(6,0)->(6,1)->(6,2)->(6,3)->(6,4)->(6,5)->(9,12)->(1,19)->(1,20)->(1,21)->(1,22)->(6,0):1.0

artificial: false set: [71, 1489, 1490, 1107, 1491, 1492, 1205, 1493, 1206, 1494, 1207, 1495, 1208, 1496, 1209, 1210] start node= 9 start time= 19 capacity type= 1
(0,5)->(0,6)->(0,7)->(0,8)->(0,9)->(0,10)->(0,11)->(9,19)->(9,20)->(9,21)->(9,22)->(9,23)->(9,24)->(9,25)->(9,26)->(9,27)->(0,5):1.0

artificial: false set: [1472, 1473, 1474, 1475, 1476, 1477, 1478, 1479, 1096, 1480, 1481, 1482, 1483, 1484, 1485, 84] start node= 9 start time= 3 capacity type= 1
(9,2)->(9,3)->(9,4)->(9,5)->(9,6)->(9,7)->(9,8)->(9,9)->(9,10)->(9,11)->(9,12)->(9,13)->(9,14)->(9,15)->(9,16)->(0,24)->(9,2):1.0

artificial: false set: [1216, 1472, 1473, 1474, 77, 1495, 1496, 1497, 1498, 1499, 1213, 1085, 1214, 1470, 1215, 1471] start node= 9 start time= 25 capacity type= 1
(9,0)->(9,1)->(9,2)->(9,3)->(9,4)->(9,5)->(0,13)->(0,14)->(0,15)->(0,16)->(0,17)->(9,25)->(9,26)->(9,27)->(9,28)->(9,29)->(9,0):1.0

artificial: false set: [438, 6, 118, 1255, 1304, 1256, 1305, 1257, 1306, 1307] start node= 1 start time= 25 capacity type= 2
(0,6)->(3,14)->(3,15)->(3,16)->(3,17)->(3,18)->(1,25)->(1,26)->(1,27)->(1,28)->(0,6):1.0

artificial: false set: [256, 151, 714, 429] start node= 1 start time= 1 capacity type= 2
(1,1)->(3,9)->(1,16)->(6,24)->(1,1):1.0

artificial: false set: [1296, 1297, 197, 601, 505, 428, 1245, 1246] start node= 1 start time= 17 capacity type= 2
(5,1)->(3,6)->(3,7)->(3,8)->(1,15)->(1,16)->(1,17)->(4,25)->(5,1):1.0

artificial: false set: [1126, 390, 1416, 1417, 938, 143] start node= 1 start time= 23 capacity type= 2
(2,0)->(7,6)->(7,7)->(7,8)->(9,16)->(1,23)->(2,0):1.0

artificial: false set: [961, 436, 309, 293] start node= 1 start time= 23 capacity type= 2
(8,1)->(2,9)->(3,16)->(1,23)->(8,1):1.0

artificial: false set: [466, 899, 1333, 726, 1334, 1335, 413] start node= 4 start time= 13 capacity type= 2
(6,6)->(4,13)->(4,14)->(4,15)->(4,16)->(2,23)->(7,29)->(6,6):1.0

artificial: false set: [1136, 948, 213, 671] start node= 5 start time= 11 capacity type= 2
(1,3)->(5,11)->(7,18)->(9,26)->(1,3):1.0

artificial: false set: [371, 1270, 1367, 1368, 1369, 1370, 123, 621, 446] start node= 5 start time= 18 capacity type= 2
(1,3)->(2,10)->(2,11)->(5,17)->(5,18)->(5,19)->(5,20)->(5,21)->(3,26)->(1,3):1.0

artificial: false set: [1408, 186, 1370, 1371, 1372, 653, 494, 719] start node= 5 start time= 20 capacity type= 2
(1,6)->(4,14)->(5,20)->(5,21)->(5,22)->(5,23)->(6,28)->(6,29)->(1,6):1.0

artificial: false set: [1264, 595, 581, 379, 365, 1263] start node= 5 start time= 25 capacity type= 2
(2,3)->(2,4)->(2,5)->(5,11)->(2,19)->(5,25)->(2,3):1.0

artificial: false set: [182, 520, 1259, 1132, 765, 1230, 1231] start node= 9 start time= 22 capacity type= 2
(1,0)->(1,1)->(1,2)->(4,10)->(6,15)->(9,22)->(1,29)->(1,0):1.0

Total time= 18528912



-------------------------------------------------------------------------------------------------------------------------------------------------------
test12_10_50_30_100A

number of service arcs=1500
number of holding arcs=300

javax.naming.TimeLimitExceededException
	at cg.master.Master.solveMasterProblem(Master.java:414)
	at org.jorlib.frameworks.columnGeneration.master.AbstractMaster.solve(AbstractMaster.java:152)
	at org.jorlib.frameworks.columnGeneration.colgenMain.ColGen.invokeMaster(ColGen.java:271)
	at org.jorlib.frameworks.columnGeneration.colgenMain.ColGen.solve(ColGen.java:224)
	at org.jorlib.frameworks.columnGeneration.branchAndPrice.AbstractBranchAndPrice.solveBAPNode(AbstractBranchAndPrice.java:342)
	at bap.BranchAndPriceA_M.runBranchAndPrice(BranchAndPriceA_M.java:240)
	at SNDRCSolver.<init>(SNDRCSolver.java:93)
	at SNDRCSolver.main(SNDRCSolver.java:228)
================ Solution ================
BAP terminated with objective : 12653
Total Number of iterations: 115
Total Number of processed nodes: 5
Total Time spent on master problems: 3231619 Total time spent on pricing problems: 3924
Best bound : 8764.36989898989
[0, 5, 14, 19, 23, 54, 60, 78, 85, 86, 94, 113, 131, 146, 168, 177, 207, 219, 228, 289, 296, 369, 399, 439, 478, 489, 499, 529, 540, 579, 598, 602, 610, 612, 648, 664, 679, 696, 700, 728, 738, 748, 755, 764, 773, 784, 792, 823, 833, 842, 872, 892, 922, 933, 1020, 1038, 1078, 1084, 1139, 1154, 1155, 1162, 1175, 1184, 1185, 1204, 1214, 1239, 1254, 1268, 1269, 1276, 1290, 1305, 1309, 1313, 1330, 1339, 1414, 1433, 1437, 1440, 1475]
The number of service edges used= 83

Solution is optimal: false
Columns (only non-zero columns are returned):
artificial: false set: [833, 369, 1078, 823, 1175, 1038] start node= 7 start time= 5 capacity type= 1
(7,5)->(2,9)->(5,13)->(6,18)->(5,23)->(6,28)->(7,5):1.0

artificial: false set: [610, 1731, 755, 86, 1162, 1276, 1020] start node= 7 start time= 22 capacity type= 1
(6,0)->(5,5)->(3,10)->(8,16)->(7,21)->(7,22)->(0,26)->(6,0):1.0

artificial: false set: [1523, 54, 1239, 1305, 842, 1339, 748] start node= 7 start time= 9 capacity type= 1
(5,2)->(7,9)->(8,15)->(9,19)->(0,23)->(0,24)->(4,28)->(5,2):1.0

artificial: false set: [1440, 738, 1204, 792, 728, 892] start node= 7 start time= 4 capacity type= 1
(9,0)->(7,4)->(4,8)->(5,12)->(4,18)->(5,22)->(9,0):1.0

artificial: false set: [1154, 1269, 922, 1084, 60, 78] start node= 7 start time= 14 capacity type= 1
(0,0)->(6,4)->(8,9)->(7,14)->(0,18)->(6,22)->(0,0):1.0

artificial: false set: [1184, 289, 1475, 1139, 1523, 1524, 85, 1269, 1578] start node= 8 start time= 9 capacity type= 1
(9,5)->(8,9)->(7,14)->(2,18)->(2,19)->(0,23)->(0,24)->(0,25)->(6,29)->(9,5):1.0

artificial: false set: [1618, 1619, 612, 696, 1433, 540, 1309, 1758] start node= 8 start time= 18 capacity type= 1
(3,0)->(4,6)->(3,12)->(8,18)->(8,19)->(9,23)->(3,28)->(3,29)->(3,0):1.0

artificial: false set: [228, 1414, 1254, 489, 1290, 1547] start node= 1 start time= 17 capacity type= 2
(8,0)->(9,4)->(3,9)->(1,17)->(1,18)->(7,24)->(8,0):1.0

artificial: false set: [933, 23, 648, 1214, 399, 207] start node= 1 start time= 27 capacity type= 2
(6,3)->(2,9)->(7,14)->(4,18)->(0,23)->(1,27)->(6,3):1.0

artificial: false set: [1330, 773, 598, 872, 168, 14] start node= 1 start time= 18 capacity type= 2
(5,2)->(9,10)->(0,14)->(1,18)->(5,23)->(3,28)->(5,2):1.0

artificial: false set: [0, 529, 579, 296, 764, 94, 1663] start node= 1 start time= 4 capacity type= 2
(0,0)->(1,4)->(3,9)->(5,13)->(5,14)->(3,19)->(2,26)->(0,0):1.0

artificial: false set: [113, 19, 1155, 5, 219, 478] start node= 1 start time= 23 capacity type= 2
(0,5)->(1,9)->(7,15)->(0,19)->(1,23)->(3,28)->(0,5):1.0

artificial: false set: [146, 131, 679, 664] start node= 4 start time= 4 capacity type= 2
(4,4)->(1,11)->(4,19)->(1,26)->(4,4):1.0

artificial: false set: [784, 177, 499, 1652, 1653, 1606, 1607, 1608, 700] start node= 5 start time= 2 capacity type= 2
(5,2)->(5,3)->(5,4)->(4,10)->(3,16)->(3,17)->(3,18)->(3,19)->(1,27)->(5,2):1.0

artificial: false set: [1313, 1185, 1268, 439, 602, 1723, 1724, 1437] start node= 9 start time= 27 capacity type= 2
(3,2)->(8,8)->(7,13)->(7,14)->(7,15)->(2,19)->(8,23)->(9,27)->(3,2):1.0

Total time= 19819691
