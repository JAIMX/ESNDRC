number of service arcs=600
number of holding arcs=200

javax.naming.TimeLimitExceededException
	at cg.master.Master.solveMasterProblem(Master.java:479)
	at org.jorlib.frameworks.columnGeneration.master.AbstractMaster.solve(AbstractMaster.java:152)
	at org.jorlib.frameworks.columnGeneration.colgenMain.ColGen.invokeMaster(ColGen.java:271)
	at org.jorlib.frameworks.columnGeneration.colgenMain.ColGen.solve(ColGen.java:224)
	at org.jorlib.frameworks.columnGeneration.branchAndPrice.AbstractBranchAndPrice.solveBAPNode(AbstractBranchAndPrice.java:342)
	at bap.BranchAndPriceA_M.runBranchAndPrice(BranchAndPriceA_M.java:278)
	at SNDRCSolver.<init>(SNDRCSolver.java:97)
	at SNDRCSolver.main(SNDRCSolver.java:233)
================ Solution ================
BAP terminated with objective : 25328
Total Number of iterations: 1165
Total Number of processed nodes: 88
Total Time spent on master problems: 24707060 Total time spent on pricing problems: 13440
Best bound : 25135.062500000004
[97, 241, 251, 256, 259, 267, 269, 275, 279, 282, 285, 287, 292, 295, 301, 302, 307, 309, 313, 314, 320, 324, 326, 332, 336, 341, 344, 352, 354, 363, 371, 374, 378, 384, 390, 396, 398, 409, 442, 471, 523, 525, 528, 531, 537, 541, 545, 549, 558, 567, 570, 572, 580, 586, 587, 592, 594, 598, 599]
The number of service edges used= 59

Solution is optimal: false
Columns (only non-zero columns are returned):
artificial: false set: [784, 736, 737, 545, 594, 309, 378, 523, 572, 398, 783, 287] start node= 4 start time= 25 capacity type= 1
(4,3)->(1,7)->(2,12)->(3,16)->(3,17)->(3,18)->(4,23)->(4,24)->(4,25)->(1,29)->(2,34)->(3,38)->(4,3):1.0

artificial: false set: [352, 256, 786, 371, 341, 567, 282, 267, 797, 558] start node= 1 start time= 2 capacity type= 2
(1,2)->(2,7)->(3,11)->(4,16)->(0,21)->(4,26)->(4,27)->(0,32)->(4,37)->(4,38)->(1,2):1.0

artificial: false set: [320, 275, 390, 537, 409, 586, 332, 525, 301] start node= 1 start time= 21 capacity type= 2
(0,0)->(4,5)->(1,9)->(0,12)->(4,17)->(1,21)->(2,26)->(3,30)->(4,35)->(0,0):1.0

artificial: false set: [259, 549, 598, 374, 344, 313, 442, 570, 285] start node= 1 start time= 5 capacity type= 2
(3,2)->(1,5)->(2,10)->(3,14)->(4,19)->(0,24)->(4,29)->(1,33)->(2,38)->(3,2):1.0

artificial: false set: [336, 592, 241, 307, 326, 665, 666, 251, 396, 541] start node= 1 start time= 26 capacity type= 2
(4,1)->(0,6)->(4,11)->(0,16)->(4,21)->(1,25)->(1,26)->(1,27)->(2,32)->(3,36)->(4,1):1.0

artificial: false set: [384, 769, 770, 354, 531, 324, 580, 279, 295, 269] start node= 1 start time= 15 capacity type= 2
(0,4)->(4,9)->(4,10)->(4,11)->(1,15)->(2,20)->(3,24)->(4,29)->(0,34)->(4,39)->(0,4):1.0

artificial: false set: [528, 97, 292, 599, 471, 314, 363, 587, 302] start node= 4 start time= 8 capacity type= 2
(3,3)->(4,8)->(1,12)->(2,17)->(1,22)->(2,27)->(3,31)->(1,34)->(2,39)->(3,3):1.0

Total time= 36000851
