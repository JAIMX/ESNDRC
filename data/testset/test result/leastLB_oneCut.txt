test0_5_10_10_5
number of service arcs=100
number of holding arcs=50

================ Solution ================
BAP terminated with objective : 552
Total Number of iterations: 7990
Total Number of processed nodes: 145
Total Time spent on master problems: 15302 Total time spent on pricing problems: 4781
Best bound : 552.0
Solution is optimal: true
Columns (only non-zero columns are returned):
artificial: false set: [35, 51, 7, 89, 13] start node= 4 start time= 9 capacity type= 0
(2,1)->(0,3)->(1,5)->(0,7)->(4,9)->(2,1)

artificial: false set: [49, 65, 71, 27, 93] start node= 4 start time= 3 capacity type= 1
(3,1)->(4,3)->(3,5)->(1,7)->(2,9)->(3,1)

Total time= 25420

--------------------------------------------------------------------------------------------------
test1_5_10_15_5
number of service arcs=150
number of holding arcs=75

================ Solution ================
BAP terminated with objective : 959
Total Number of iterations: 64076
Total Number of processed nodes: 3111
Total Time spent on master problems: 153475 Total time spent on pricing problems: 97992
Best bound : 959.0
Solution is optimal: true
Columns (only non-zero columns are returned):
artificial: false set: [1, 87, 124, 189, 190, 191] start node= 4 start time= 4 capacity type= 0
(0,1)->(4,4)->(2,9)->(2,10)->(2,11)->(2,12)->(0,1)

artificial: false set: [33, 67, 100, 165, 166, 167] start node= 1 start time= 0 capacity type= 1
(1,0)->(1,1)->(1,2)->(1,3)->(2,7)->(3,10)->(1,0)

Total time= 331018

---------------------------------------------------------------------------------------------------
test1_5_10_15_10
number of service arcs=150
number of holding arcs=75

================ Solution ================
BAP terminated with objective : 2330
Total Number of iterations: 1348469
Total Number of processed nodes: 22531
Total Time spent on master problems: 5232298 Total time spent on pricing problems: 26822539
Best bound : 2293.743999999999
Solution is optimal: false
Columns (only non-zero columns are returned):
artificial: false set: [1, 164, 85, 150, 124, 189] start node= 4 start time= 4 capacity type= 0
(0,0)->(0,1)->(4,4)->(2,9)->(2,10)->(0,14)->(0,0)

artificial: false set: [210, 211, 116, 68, 212, 123] start node= 4 start time= 2 capacity type= 0
(4,0)->(4,1)->(4,2)->(4,3)->(2,8)->(3,11)->(4,0)

artificial: false set: [208, 213, 214, 119, 204, 140, 205, 206, 207] start node= 4 start time= 3 capacity type= 0
(4,3)->(4,4)->(4,5)->(3,9)->(3,10)->(3,11)->(3,12)->(3,13)->(3,14)->(4,3)

artificial: false set: [1, 163, 164, 84, 150, 124] start node= 4 start time= 4 capacity type= 0
(0,0)->(0,1)->(4,4)->(2,9)->(0,13)->(0,14)->(0,0)

artificial: false set: [208, 34, 69, 104, 188, 207] start node= 1 start time= 4 capacity type= 1
(1,4)->(2,8)->(2,9)->(3,12)->(3,13)->(3,14)->(1,4)

artificial: false set: [210, 83, 211, 212, 123, 12] start node= 4 start time= 0 capacity type= 1
(4,0)->(4,1)->(4,2)->(4,3)->(2,8)->(0,12)->(4,0)

Total time= 36000930





---------------------------------------------------------------------------------------------------
test1_5_10_15_20
number of service arcs=150
number of holding arcs=75

================ Solution ================
BAP terminated with objective : 3930
Total Number of iterations: 1108364
Total Number of processed nodes: 5513
Total Time spent on master problems: 15533292 Total time spent on pricing problems: 18981286
Best bound : 3761.733333333334
Solution is optimal: false
Columns (only non-zero columns are returned):
artificial: false set: [176, 42, 61, 94, 174, 175] start node= 1 start time= 9 capacity type= 1
(2,1)->(3,4)->(1,9)->(1,10)->(1,11)->(1,12)->(2,1)

artificial: false set: [54, 168, 169, 170, 171, 172, 29, 173] start node= 1 start time= 3 capacity type= 1
(1,3)->(1,4)->(1,5)->(1,6)->(1,7)->(1,8)->(1,9)->(0,14)->(1,3)

artificial: false set: [148, 216, 217, 218, 107, 219, 220, 221, 222] start node= 4 start time= 6 capacity type= 1
(3,2)->(4,6)->(4,7)->(4,8)->(4,9)->(4,10)->(4,11)->(4,12)->(4,13)->(3,2)

artificial: false set: [161, 162, 82, 163, 122, 14] start node= 4 start time= 2 capacity type= 1
(4,2)->(2,7)->(0,11)->(0,12)->(0,13)->(0,14)->(4,2)

artificial: false set: [1, 164, 85, 150, 124, 189] start node= 4 start time= 4 capacity type= 1
(0,0)->(0,1)->(4,4)->(2,9)->(2,10)->(0,14)->(0,0)

artificial: false set: [208, 213, 214, 119, 215, 216, 206, 142, 207] start node= 4 start time= 3 capacity type= 1
(4,3)->(4,4)->(4,5)->(4,6)->(4,7)->(3,11)->(3,12)->(3,13)->(3,14)->(4,3)

artificial: false set: [212, 85, 213, 214, 125, 14] start node= 4 start time= 2 capacity type= 1
(4,2)->(4,3)->(4,4)->(4,5)->(2,10)->(0,14)->(4,2)

Total time= 36000201

---------------------------------------------------------------------------------------------------
test2_5_15_20_25
number of service arcs=300
number of holding arcs=100

================ Solution ================
BAP terminated with objective : 4019
Total Number of iterations: 258932
Total Number of processed nodes: 878
Total Time spent on master problems: 28050380 Total time spent on pricing problems: 1173495
Best bound : 3784.360000000001
Solution is optimal: false
Columns (only non-zero columns are returned):
artificial: false set: [308, 309, 360, 361, 170, 379, 205, 222, 15] start node= 4 start time= 15 capacity type= 0
(3,0)->(3,1)->(3,2)->(1,5)->(0,8)->(0,9)->(0,10)->(4,15)->(3,19)->(3,0)

artificial: false set: [208, 225, 340, 36, 281, 171] start node= 4 start time= 16 capacity type= 1
(2,0)->(2,1)->(3,5)->(1,8)->(0,11)->(4,16)->(2,0)

artificial: false set: [208, 38, 311, 327, 42, 172, 397] start node= 4 start time= 17 capacity type= 1
(2,2)->(1,7)->(1,8)->(0,11)->(0,12)->(4,17)->(4,18)->(2,2)

artificial: false set: [144, 49, 260, 74, 399] start node= 4 start time= 0 capacity type= 1
(4,0)->(1,4)->(2,9)->(1,14)->(4,19)->(4,0)

artificial: false set: [321, 322, 323, 167, 392, 393, 204, 238, 14] start node= 4 start time= 12 capacity type= 1
(1,1)->(1,2)->(1,3)->(1,4)->(0,7)->(4,12)->(4,13)->(4,14)->(3,18)->(1,1)

artificial: false set: [130, 116, 185, 281, 315] start node= 4 start time= 10 capacity type= 1
(2,1)->(3,5)->(4,10)->(0,15)->(0,16)->(2,1)

Total time= 36000341


---------------------------------------------------------------------------------------------------
test3_5_15_25_25
number of service arcs=375
number of holding arcs=125

Repairing basis singularity.
Added to 1 columns superbasic list.
Markowitz threshold set to 0.2
javax.naming.TimeLimitExceededException
	at cg.master.Master.solveMasterProblem(Master.java:306)
	at org.jorlib.frameworks.columnGeneration.master.AbstractMaster.solve(AbstractMaster.java:152)
	at org.jorlib.frameworks.columnGeneration.colgenMain.ColGen.invokeMaster(ColGen.java:271)
	at org.jorlib.frameworks.columnGeneration.colgenMain.ColGen.solve(ColGen.java:224)
	at org.jorlib.frameworks.columnGeneration.branchAndPrice.AbstractBranchAndPrice.solveBAPNode(AbstractBranchAndPrice.java:342)
	at bap.BranchAndPrice.runBranchAndPrice(BranchAndPrice.java:165)
	at SNDRCSolver.<init>(SNDRCSolver.java:72)
	at SNDRCSolver.main(SNDRCSolver.java:170)
================ Solution ================
BAP terminated with objective : 3765
Total Number of iterations: 42572
Total Number of processed nodes: 55
Total Time spent on master problems: 33954506 Total time spent on pricing problems: 154280
Best bound : 3592.3454566045225
Solution is optimal: false
Columns (only non-zero columns are returned):
artificial: false set: [166, 486, 151, 487, 488, 489, 490, 221, 206] start node= 4 start time= 11 capacity type= 0
(4,1)->(0,6)->(4,11)->(4,12)->(4,13)->(4,14)->(4,15)->(4,16)->(0,21)->(4,1)

artificial: false set: [64, 256, 134, 327, 269, 222] start node= 1 start time= 6 capacity type= 1
(4,2)->(1,6)->(0,9)->(2,14)->(1,19)->(0,22)->(4,2)

artificial: false set: [181, 278, 24, 266, 219, 61] start node= 4 start time= 24 capacity type= 1
(3,3)->(1,6)->(2,11)->(1,16)->(0,19)->(4,24)->(3,3)

artificial: false set: [352, 48, 290, 306, 361, 93] start node= 4 start time= 23 capacity type= 1
(2,2)->(3,6)->(2,11)->(3,15)->(1,18)->(4,23)->(2,2)

Total time= 36000234
---------------------------------------------------------------------------------------------------
test4_5_15_15_100
number of service arcs=225
number of holding arcs=75

================ Solution ================
BAP terminated with objective : 15499
Total Number of iterations: 330081
Total Number of processed nodes: 1230
Total Time spent on master problems: 25318742 Total time spent on pricing problems: 443905
Best bound : 15316.480000000005
Solution is optimal: false
Columns (only non-zero columns are returned):
artificial: false set: [288, 289, 290, 147, 291, 7, 281, 287] start node= 4 start time= 6 capacity type= 0
(4,2)->(4,3)->(4,4)->(4,5)->(4,6)->(4,7)->(3,11)->(3,12)->(4,2)

artificial: false set: [149, 69, 199, 248] start node= 4 start time= 4 capacity type= 0
(4,4)->(1,8)->(1,9)->(3,14)->(4,4)

artificial: false set: [132, 197, 234, 235, 236, 156] start node= 4 start time= 2 capacity type= 0
(4,2)->(1,6)->(0,9)->(0,10)->(0,11)->(0,12)->(4,2)

artificial: false set: [80, 179, 152, 220] start node= 1 start time= 2 capacity type= 1
(1,2)->(0,5)->(2,10)->(3,14)->(1,2)

artificial: false set: [240, 241, 37, 107, 252, 253, 254] start node= 1 start time= 12 capacity type= 1
(1,0)->(1,1)->(1,2)->(2,7)->(1,12)->(1,13)->(1,14)->(1,0)

artificial: false set: [83, 167, 155, 223] start node= 1 start time= 5 capacity type= 1
(3,2)->(1,5)->(0,8)->(2,13)->(3,2)

artificial: false set: [42, 187, 62] start node= 1 start time= 2 capacity type= 1
(1,2)->(3,7)->(2,12)->(1,2)

artificial: false set: [41, 186, 61] start node= 1 start time= 1 capacity type= 1
(1,1)->(3,6)->(2,11)->(1,1)

artificial: false set: [294, 151, 295, 296, 124, 207] start node= 4 start time= 9 capacity type= 1
(1,1)->(0,4)->(4,9)->(4,10)->(4,11)->(4,12)->(1,1)

artificial: false set: [210, 294, 295, 26, 139] start node= 4 start time= 9 capacity type= 1
(2,0)->(3,4)->(4,9)->(4,10)->(4,11)->(2,0)

artificial: false set: [208, 292, 293, 294, 295, 296, 297, 47] start node= 4 start time= 7 capacity type= 1
(1,2)->(4,7)->(4,8)->(4,9)->(4,10)->(4,11)->(4,12)->(4,13)->(1,2)

artificial: false set: [0, 130, 169, 157] start node= 4 start time= 0 capacity type= 1
(4,0)->(3,4)->(1,7)->(0,10)->(4,0)

artificial: false set: [226, 292, 101, 293, 294, 295, 122] start node= 4 start time= 7 capacity type= 1
(0,1)->(0,2)->(4,7)->(4,8)->(4,9)->(4,10)->(4,11)->(0,1)

artificial: false set: [73, 138, 203, 252] start node= 4 start time= 8 capacity type= 1
(3,3)->(4,8)->(1,12)->(1,13)->(3,3)

artificial: false set: [288, 289, 98, 290, 291, 292, 133] start node= 4 start time= 3 capacity type= 1
(4,3)->(4,4)->(4,5)->(4,6)->(4,7)->(4,8)->(0,13)->(4,3)

artificial: false set: [288, 147, 19, 218, 287] start node= 4 start time= 2 capacity type= 1
(4,2)->(4,3)->(4,4)->(2,8)->(3,12)->(4,2)

artificial: false set: [177, 150, 8, 123] start node= 4 start time= 8 capacity type= 1
(1,0)->(0,3)->(4,8)->(3,12)->(1,0)

artificial: false set: [230, 296, 297, 90, 298, 299, 126] start node= 4 start time= 11 capacity type= 1
(4,0)->(0,5)->(0,6)->(4,11)->(4,12)->(4,13)->(4,14)->(4,0)

artificial: false set: [161, 289, 290, 134, 201, 250] start node= 4 start time= 4 capacity type= 1
(4,4)->(4,5)->(4,6)->(1,10)->(1,11)->(0,14)->(4,4)

artificial: false set: [294, 74, 139, 205] start node= 4 start time= 9 capacity type= 1
(3,4)->(4,9)->(4,10)->(1,14)->(3,4)

artificial: false set: [288, 19, 38, 58] start node= 4 start time= 3 capacity type= 1
(4,3)->(4,4)->(2,8)->(1,13)->(4,3)

Total time= 36000527
---------------------------------------------------------------------------------------------------
test5_5_15_15_200
number of service arcs=225
number of holding arcs=75

================ Solution ================
BAP terminated with objective : 32950
Total Number of iterations: 248015
Total Number of processed nodes: 4987
Total Time spent on master problems: 14211729 Total time spent on pricing problems: 320539
Best bound : 32858.68
Solution is optimal: false
Columns (only non-zero columns are returned):
artificial: false set: [256, 113, 33, 257, 268, 269, 255] start node= 2 start time= 13 capacity type= 0
(2,0)->(2,1)->(2,2)->(2,3)->(1,8)->(2,13)->(2,14)->(2,0)

artificial: false set: [96, 290, 120, 236, 237, 238, 239] start node= 4 start time= 5 capacity type= 0
(0,0)->(4,5)->(4,6)->(0,11)->(0,12)->(0,13)->(0,14)->(0,0)

artificial: false set: [288, 97, 289, 290, 291, 133, 237] start node= 4 start time= 3 capacity type= 0
(4,3)->(4,4)->(4,5)->(4,6)->(4,7)->(0,12)->(0,13)->(4,3)

artificial: false set: [0, 274, 275, 296, 297, 298, 299, 141] start node= 4 start time= 0 capacity type= 0
(4,0)->(3,4)->(3,5)->(3,6)->(4,11)->(4,12)->(4,13)->(4,14)->(4,0)

artificial: false set: [241, 178, 242, 243, 219, 109] start node= 1 start time= 1 capacity type= 1
(1,1)->(1,2)->(1,3)->(1,4)->(2,9)->(3,13)->(1,1)

artificial: false set: [245, 167, 266, 267, 223, 111] start node= 1 start time= 5 capacity type= 1
(3,2)->(1,5)->(1,6)->(2,11)->(2,12)->(2,13)->(3,2)

artificial: false set: [210, 115, 247, 248, 169, 249] start node= 1 start time= 7 capacity type= 1
(2,0)->(3,4)->(1,7)->(1,8)->(1,9)->(1,10)->(2,0)

artificial: false set: [212, 117, 249, 250, 171, 251] start node= 1 start time= 9 capacity type= 1
(2,2)->(3,6)->(1,9)->(1,10)->(1,11)->(1,12)->(2,2)

artificial: false set: [213, 118, 250, 251, 172, 252] start node= 1 start time= 10 capacity type= 1
(2,3)->(3,7)->(1,10)->(1,11)->(1,12)->(1,13)->(2,3)

artificial: false set: [259, 279, 215, 119, 253, 175] start node= 1 start time= 13 capacity type= 1
(2,4)->(2,5)->(3,9)->(3,10)->(1,13)->(1,14)->(2,4)

artificial: false set: [176, 240, 241, 217, 107, 254] start node= 1 start time= 0 capacity type= 1
(1,0)->(1,1)->(1,2)->(2,7)->(3,11)->(1,14)->(1,0)

artificial: false set: [211, 116, 248, 249, 170, 250] start node= 1 start time= 8 capacity type= 1
(2,1)->(3,5)->(1,8)->(1,9)->(1,10)->(1,11)->(2,1)

artificial: false set: [215, 105, 252, 253, 254, 174] start node= 1 start time= 0 capacity type= 1
(1,0)->(2,5)->(3,9)->(1,12)->(1,13)->(1,14)->(1,0)

artificial: false set: [243, 244, 165, 265, 221, 110] start node= 1 start time= 3 capacity type= 1
(3,0)->(1,3)->(1,4)->(1,5)->(2,10)->(2,11)->(3,0)

artificial: false set: [112, 244, 245, 166, 246, 222] start node= 1 start time= 5 capacity type= 1
(3,1)->(1,4)->(1,5)->(1,6)->(1,7)->(2,12)->(3,1)

artificial: false set: [34, 258, 118, 249, 250, 251, 252] start node= 1 start time= 10 capacity type= 1
(2,3)->(2,4)->(1,9)->(1,10)->(1,11)->(1,12)->(1,13)->(2,3)

artificial: false set: [288, 289, 130, 285, 286, 95, 287] start node= 4 start time= 0 capacity type= 1
(4,0)->(4,1)->(4,2)->(4,3)->(4,4)->(4,5)->(0,10)->(4,0)

artificial: false set: [291, 292, 101, 293, 294, 295, 121] start node= 4 start time= 6 capacity type= 1
(0,1)->(4,6)->(4,7)->(4,8)->(4,9)->(4,10)->(4,11)->(0,1)

artificial: false set: [293, 294, 103, 295, 296, 297, 123] start node= 4 start time= 8 capacity type= 1
(0,3)->(4,8)->(4,9)->(4,10)->(4,11)->(4,12)->(4,13)->(0,3)

artificial: false set: [295, 296, 297, 90, 298, 299, 125] start node= 4 start time= 10 capacity type= 1
(4,0)->(0,5)->(4,10)->(4,11)->(4,12)->(4,13)->(4,14)->(4,0)

artificial: false set: [297, 298, 299, 92, 285, 286, 127] start node= 4 start time= 12 capacity type= 1
(4,0)->(4,1)->(4,2)->(0,7)->(4,12)->(4,13)->(4,14)->(4,0)

artificial: false set: [128, 298, 299, 93, 285, 286, 287] start node= 4 start time= 13 capacity type= 1
(4,0)->(4,1)->(4,2)->(4,3)->(0,8)->(4,13)->(4,14)->(4,0)

artificial: false set: [74, 139, 204, 253] start node= 4 start time= 9 capacity type= 1
(3,4)->(4,9)->(1,13)->(1,14)->(3,4)

artificial: false set: [295, 140, 60, 206] start node= 4 start time= 10 capacity type= 1
(1,0)->(3,5)->(4,10)->(4,11)->(1,0)

artificial: false set: [208, 242, 143, 63] start node= 4 start time= 13 capacity type= 1
(1,2)->(1,3)->(3,8)->(4,13)->(1,2)

artificial: false set: [290, 70, 135, 201] start node= 4 start time= 6 capacity type= 1
(3,0)->(4,5)->(4,6)->(1,10)->(3,0)

artificial: false set: [65, 146, 196, 280] start node= 4 start time= 1 capacity type= 1
(4,1)->(1,5)->(3,10)->(3,11)->(4,1)

artificial: false set: [66, 147, 197, 281] start node= 4 start time= 2 capacity type= 1
(4,2)->(1,6)->(3,11)->(3,12)->(4,2)

artificial: false set: [293, 73, 138, 204] start node= 4 start time= 8 capacity type= 1
(3,3)->(4,8)->(4,9)->(1,13)->(3,3)

artificial: false set: [96, 288, 289, 290, 131, 286, 287] start node= 4 start time= 1 capacity type= 1
(4,1)->(4,2)->(4,3)->(4,4)->(4,5)->(4,6)->(0,11)->(4,1)

artificial: false set: [291, 71, 136, 202] start node= 4 start time= 6 capacity type= 1
(3,1)->(4,6)->(4,7)->(1,11)->(3,1)

artificial: false set: [289, 290, 99, 291, 292, 293, 134] start node= 4 start time= 4 capacity type= 1
(4,4)->(4,5)->(4,6)->(4,7)->(4,8)->(4,9)->(0,14)->(4,4)

artificial: false set: [288, 132, 234, 235, 236, 94, 287] start node= 4 start time= 2 capacity type= 1
(4,2)->(4,3)->(4,4)->(0,9)->(0,10)->(0,11)->(0,12)->(4,2)

artificial: false set: [149, 69, 199, 248] start node= 4 start time= 4 capacity type= 1
(4,4)->(1,8)->(1,9)->(3,14)->(4,4)

artificial: false set: [225, 97, 291, 121, 237, 238, 239] start node= 4 start time= 6 capacity type= 1
(0,0)->(0,1)->(4,6)->(4,7)->(0,12)->(0,13)->(0,14)->(0,0)

artificial: false set: [161, 289, 290, 291, 134, 202] start node= 4 start time= 4 capacity type= 1
(4,4)->(4,5)->(4,6)->(4,7)->(1,11)->(0,14)->(4,4)

artificial: false set: [67, 148, 198, 282] start node= 4 start time= 3 capacity type= 1
(4,3)->(1,7)->(3,12)->(3,13)->(4,3)

artificial: false set: [227, 228, 102, 294, 295, 296, 124] start node= 4 start time= 9 capacity type= 1
(0,2)->(0,3)->(0,4)->(4,9)->(4,10)->(4,11)->(4,12)->(0,2)

artificial: false set: [129, 195, 232, 233, 154, 299] start node= 4 start time= 0 capacity type= 1
(4,0)->(1,4)->(0,7)->(0,8)->(0,9)->(4,14)->(4,0)

artificial: false set: [296, 141, 61, 207] start node= 4 start time= 11 capacity type= 1
(1,1)->(3,6)->(4,11)->(4,12)->(1,1)

artificial: false set: [209, 296, 153, 297, 298, 126] start node= 4 start time= 11 capacity type= 1
(1,3)->(0,6)->(4,11)->(4,12)->(4,13)->(4,14)->(1,3)

Total time= 36001337