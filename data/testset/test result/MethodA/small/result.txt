test1_5_10_15_20

number of service arcs=150
number of holding arcs=75

================ Solution ================
BAP terminated with objective : 3836
Total Number of iterations: 2422
Total Number of processed nodes: 387
Total Time spent on master problems: 25530 Total time spent on pricing problems: 3427
Best bound : 3836.0
The number of service edges used= 17
Solution is optimal: true
Columns (only non-zero columns are returned):
artificial: false set: [194, 180, 181, 40, 62, 95] start node= 2 start time= 14 capacity type= 0
(2,0)->(2,1)->(2,2)->(3,5)->(1,10)->(2,14)->(2,0):1.0

artificial: false set: [148, 216, 217, 218, 107, 219, 220, 221, 222] start node= 4 start time= 6 capacity type= 0
(3,2)->(4,6)->(4,7)->(4,8)->(4,9)->(4,10)->(4,11)->(4,12)->(4,13)->(3,2):2.0

artificial: false set: [224, 210, 115, 211, 212, 213, 214, 215, 141] start node= 4 start time= 14 capacity type= 0
(4,0)->(4,1)->(4,2)->(4,3)->(4,4)->(4,5)->(4,6)->(3,10)->(4,14)->(4,0):2.0

artificial: false set: [19, 163, 164, 53, 150, 151, 152, 153] start node= 1 start time= 8 capacity type= 1
(0,0)->(0,1)->(0,2)->(0,3)->(0,4)->(1,8)->(0,13)->(0,14)->(0,0):1.0

artificial: false set: [40, 74, 92, 172, 173, 174] start node= 1 start time= 7 capacity type= 1
(3,2)->(1,7)->(1,8)->(1,9)->(1,10)->(2,14)->(3,2):1.0

artificial: false set: [211, 84, 212, 213, 124, 13] start node= 4 start time= 1 capacity type= 1
(4,1)->(4,2)->(4,3)->(4,4)->(2,9)->(0,13)->(4,1):1.0

artificial: false set: [1, 164, 85, 150, 214, 125] start node= 4 start time= 4 capacity type= 1
(0,0)->(0,1)->(4,4)->(4,5)->(2,10)->(0,14)->(0,0):1.0

Total time= 45747
---------------------------------------------------------------------------------------------------------
test2_5_15_20_25

number of service arcs=300
number of holding arcs=100

================ Solution ================
BAP terminated with objective : 3869
Total Number of iterations: 13443
Total Number of processed nodes: 2061
Total Time spent on master problems: 4771477 Total time spent on pricing problems: 33905
Best bound : 3869.0
The number of service edges used= 20
Solution is optimal: true
Columns (only non-zero columns are returned):
artificial: false set: [193, 289, 103, 138, 348] start node= 4 start time= 18 capacity type= 0
(0,3)->(2,8)->(2,9)->(3,13)->(4,18)->(0,3):1.0

artificial: false set: [320, 305, 321, 306, 307, 308, 309, 55, 202, 110] start node= 1 start time= 0 capacity type= 1
(1,0)->(1,1)->(1,2)->(0,5)->(0,6)->(0,7)->(0,8)->(0,9)->(0,10)->(2,15)->(1,0):1.0

artificial: false set: [33, 167, 392, 297, 204, 221] start node= 4 start time= 13 capacity type= 1
(3,1)->(1,4)->(0,7)->(4,12)->(4,13)->(2,17)->(3,1):1.0

artificial: false set: [274, 68, 393, 43, 158] start node= 4 start time= 13 capacity type= 1
(2,3)->(1,8)->(4,13)->(4,14)->(1,18)->(2,3):1.0

artificial: false set: [160, 385, 386, 387, 372, 216, 8, 233, 319] start node= 4 start time= 5 capacity type= 1
(0,0)->(4,5)->(4,6)->(4,7)->(4,8)->(3,12)->(3,13)->(1,16)->(0,19)->(0,0):1.0

Total time= 7097333
---------------------------------------------------------------------------------------------------------
test3_5_15_25_25

number of service arcs=375
number of holding arcs=125

Repairing basis singularity.
Added to 1 columns superbasic list.
Markowitz threshold set to 0.2
Repairing basis singularity.
Added to 3 columns superbasic list.
Markowitz threshold set to 0.2
================ Solution ================
BAP terminated with objective : 3661
Total Number of iterations: 30726
Total Number of processed nodes: 1738
Total Time spent on master problems: 29331453 Total time spent on pricing problems: 109933
Best bound : 3639.0000000919467
The number of service edges used= 20
Solution is optimal: false
Columns (only non-zero columns are returned):
artificial: false set: [480, 481, 482, 483, 389, 390, 391, 392, 498, 499, 218, 475, 476, 477, 478, 159, 479] start node= 4 start time= 0 capacity type= 0
(4,0)->(4,1)->(4,2)->(4,3)->(4,4)->(4,5)->(4,6)->(4,7)->(4,8)->(4,9)->(0,14)->(0,15)->(0,16)->(0,17)->(0,18)->(4,23)->(4,24)->(4,0):1.0

artificial: false set: [353, 37, 198, 295, 232, 366] start node= 4 start time= 12 capacity type= 1
(2,3)->(3,7)->(4,12)->(2,16)->(3,20)->(1,23)->(2,3):1.0000000000000004

artificial: false set: [144, 337, 74, 266, 254, 207] start node= 4 start time= 12 capacity type= 1
(1,4)->(0,7)->(4,12)->(1,16)->(0,19)->(2,24)->(1,4):1.0

artificial: false set: [133, 277, 23, 93, 63, 255] start node= 4 start time= 23 capacity type= 1
(3,2)->(1,5)->(0,8)->(2,13)->(1,18)->(4,23)->(3,2):1.0

Total time= 36006214
---------------------------------------------------------------------------------------------------------
test4_5_15_15_100

number of service arcs=225
number of holding arcs=75

================ Solution ================
BAP terminated with objective : 15426
Total Number of iterations: 22294
Total Number of processed nodes: 5363
Total Time spent on master problems: 1011504 Total time spent on pricing problems: 53034
Best bound : 15426.0
The number of service edges used= 54
Solution is optimal: true
Columns (only non-zero columns are returned):
artificial: false set: [71, 137, 202, 271] start node= 4 start time= 7 capacity type= 0
(3,1)->(3,2)->(4,7)->(1,11)->(3,1):1.0

artificial: false set: [130, 196, 245, 246, 157, 285] start node= 4 start time= 0 capacity type= 0
(4,0)->(4,1)->(1,5)->(1,6)->(1,7)->(0,10)->(4,0):1.0

artificial: false set: [36, 181, 71] start node= 1 start time= 11 capacity type= 1
(3,1)->(2,6)->(1,11)->(3,1):1.0

artificial: false set: [39, 184, 74] start node= 1 start time= 14 capacity type= 1
(3,4)->(2,9)->(1,14)->(3,4):1.0

artificial: false set: [224, 84, 168, 156] start node= 1 start time= 6 capacity type= 1
(3,3)->(1,6)->(0,9)->(2,14)->(3,3):1.0

artificial: false set: [162, 215, 75, 174] start node= 1 start time= 12 capacity type= 1
(0,0)->(2,5)->(3,9)->(1,12)->(0,0):1.0

artificial: false set: [242, 179, 263, 264, 220, 108] start node= 1 start time= 2 capacity type= 1
(1,2)->(1,3)->(2,8)->(2,9)->(2,10)->(3,14)->(1,2):1.0

artificial: false set: [291, 22, 41, 46] start node= 4 start time= 6 capacity type= 1
(1,1)->(4,6)->(4,7)->(2,11)->(1,1):1.0

artificial: false set: [164, 292, 293, 122, 204, 253] start node= 4 start time= 7 capacity type= 1
(0,2)->(4,7)->(4,8)->(4,9)->(1,13)->(1,14)->(0,2):1.0

artificial: false set: [292, 72, 137, 203] start node= 4 start time= 7 capacity type= 1
(3,2)->(4,7)->(4,8)->(1,12)->(3,2):1.0

artificial: false set: [161, 4, 134, 173] start node= 4 start time= 4 capacity type= 1
(4,4)->(3,8)->(1,11)->(0,14)->(4,4):1.0

artificial: false set: [211, 295, 296, 27, 140] start node= 4 start time= 10 capacity type= 1
(2,1)->(3,5)->(4,10)->(4,11)->(4,12)->(2,1):1.0

artificial: false set: [293, 294, 103, 295, 296, 297, 123] start node= 4 start time= 8 capacity type= 1
(0,3)->(4,8)->(4,9)->(4,10)->(4,11)->(4,12)->(4,13)->(0,3):1.0

artificial: false set: [294, 295, 104, 296, 297, 298, 124] start node= 4 start time= 9 capacity type= 1
(0,4)->(4,9)->(4,10)->(4,11)->(4,12)->(4,13)->(4,14)->(0,4):2.0

artificial: false set: [130, 198, 157, 285, 286, 287] start node= 4 start time= 0 capacity type= 1
(4,0)->(4,1)->(4,2)->(4,3)->(1,7)->(0,10)->(4,0):1.0

artificial: false set: [147, 67, 198, 287] start node= 4 start time= 2 capacity type= 1
(4,2)->(4,3)->(1,7)->(3,12)->(4,2):1.0

artificial: false set: [162, 290, 120, 201, 250, 251] start node= 4 start time= 5 capacity type= 1
(0,0)->(4,5)->(4,6)->(1,10)->(1,11)->(1,12)->(0,0):1.0

artificial: false set: [33, 54, 248, 29] start node= 4 start time= 14 capacity type= 1
(2,3)->(1,8)->(1,9)->(4,14)->(2,3):1.0

artificial: false set: [291, 292, 23, 136, 222] start node= 4 start time= 8 capacity type= 1
(3,1)->(4,6)->(4,7)->(4,8)->(2,12)->(3,1):1.0

artificial: false set: [289, 290, 291, 292, 149, 293, 294, 10] start node= 4 start time= 4 capacity type= 1
(4,4)->(4,5)->(4,6)->(4,7)->(4,8)->(4,9)->(4,10)->(3,14)->(4,4):1.0

Total time= 2025318
---------------------------------------------------------------------------------------------------------
test5_5_15_15_200

number of service arcs=225
number of holding arcs=75

================ Solution ================
BAP terminated with objective : 32900
Total Number of iterations: 1224
Total Number of processed nodes: 133
Total Time spent on master problems: 87286 Total time spent on pricing problems: 3778
Best bound : 32900.0
The number of service edges used= 95
Solution is optimal: true
Columns (only non-zero columns are returned):
artificial: false set: [257, 258, 259, 260, 117, 37, 261] start node= 2 start time= 3 capacity type= 0
(2,2)->(2,3)->(2,4)->(2,5)->(2,6)->(2,7)->(1,12)->(2,2):1.0

artificial: false set: [288, 147, 4, 278, 279, 280, 281, 287] start node= 4 start time= 2 capacity type= 0
(4,2)->(4,3)->(4,4)->(3,8)->(3,9)->(3,10)->(3,11)->(3,12)->(4,2):1.0

artificial: false set: [35, 105, 250, 251, 252, 253, 254] start node= 1 start time= 10 capacity type= 1
(1,0)->(2,5)->(1,10)->(1,11)->(1,12)->(1,13)->(1,14)->(1,0):1.0

artificial: false set: [178, 261, 262, 282, 218, 106] start node= 1 start time= 1 capacity type= 1
(1,1)->(2,6)->(2,7)->(2,8)->(3,12)->(3,13)->(1,1):2.0

artificial: false set: [242, 179, 243, 244, 220, 110] start node= 1 start time= 2 capacity type= 1
(1,2)->(1,3)->(1,4)->(1,5)->(2,10)->(3,14)->(1,2):2.0

artificial: false set: [243, 244, 165, 245, 221, 111] start node= 1 start time= 3 capacity type= 1
(3,0)->(1,3)->(1,4)->(1,5)->(1,6)->(2,11)->(3,0):2.0

artificial: false set: [244, 245, 166, 266, 222, 111] start node= 1 start time= 4 capacity type= 1
(3,1)->(1,4)->(1,5)->(1,6)->(2,11)->(2,12)->(3,1):1.0

artificial: false set: [113, 245, 246, 167, 247, 223] start node= 1 start time= 5 capacity type= 1
(3,2)->(1,5)->(1,6)->(1,7)->(1,8)->(2,13)->(3,2):2.0

artificial: false set: [224, 114, 246, 247, 168, 248] start node= 1 start time= 6 capacity type= 1
(3,3)->(1,6)->(1,7)->(1,8)->(1,9)->(2,14)->(3,3):1.0

artificial: false set: [211, 115, 248, 249, 170, 255] start node= 1 start time= 8 capacity type= 1
(2,0)->(2,1)->(3,5)->(1,8)->(1,9)->(1,10)->(2,0):1.0

artificial: false set: [256, 115, 212, 249, 171, 255] start node= 1 start time= 9 capacity type= 1
(2,0)->(2,1)->(2,2)->(3,6)->(1,9)->(1,10)->(2,0):2.0

artificial: false set: [214, 119, 251, 252, 173, 253] start node= 1 start time= 11 capacity type= 1
(2,4)->(3,8)->(1,11)->(1,12)->(1,13)->(1,14)->(2,4):1.0

artificial: false set: [259, 215, 119, 252, 253, 174] start node= 1 start time= 12 capacity type= 1
(2,4)->(2,5)->(3,9)->(1,12)->(1,13)->(1,14)->(2,4):2.0

artificial: false set: [240, 216, 106, 253, 254, 175] start node= 1 start time= 13 capacity type= 1
(1,0)->(1,1)->(2,6)->(3,10)->(1,13)->(1,14)->(1,0):1.0

artificial: false set: [176, 240, 261, 217, 106, 254] start node= 1 start time= 14 capacity type= 1
(1,0)->(1,1)->(2,6)->(2,7)->(3,11)->(1,14)->(1,0):1.0

artificial: false set: [96, 288, 289, 290, 131, 286, 287] start node= 4 start time= 1 capacity type= 1
(4,1)->(4,2)->(4,3)->(4,4)->(4,5)->(4,6)->(0,11)->(4,1):1.0

artificial: false set: [288, 97, 289, 290, 291, 132, 287] start node= 4 start time= 2 capacity type= 1
(4,2)->(4,3)->(4,4)->(4,5)->(4,6)->(4,7)->(0,12)->(4,2):1.0

artificial: false set: [288, 289, 98, 290, 291, 292, 133] start node= 4 start time= 3 capacity type= 1
(4,3)->(4,4)->(4,5)->(4,6)->(4,7)->(4,8)->(0,13)->(4,3):2.0

artificial: false set: [290, 291, 100, 292, 293, 294, 120] start node= 4 start time= 5 capacity type= 1
(0,0)->(4,5)->(4,6)->(4,7)->(4,8)->(4,9)->(4,10)->(0,0):2.0

artificial: false set: [292, 293, 102, 294, 295, 296, 122] start node= 4 start time= 7 capacity type= 1
(0,2)->(4,7)->(4,8)->(4,9)->(4,10)->(4,11)->(4,12)->(0,2):1.0

artificial: false set: [294, 295, 104, 296, 297, 298, 124] start node= 4 start time= 9 capacity type= 1
(0,4)->(4,9)->(4,10)->(4,11)->(4,12)->(4,13)->(4,14)->(0,4):1.0

artificial: false set: [295, 296, 297, 90, 298, 299, 125] start node= 4 start time= 10 capacity type= 1
(4,0)->(0,5)->(4,10)->(4,11)->(4,12)->(4,13)->(4,14)->(4,0):1.0

artificial: false set: [296, 297, 298, 91, 299, 285, 126] start node= 4 start time= 11 capacity type= 1
(4,0)->(4,1)->(0,6)->(4,11)->(4,12)->(4,13)->(4,14)->(4,0):1.0

artificial: false set: [297, 298, 299, 92, 285, 286, 127] start node= 4 start time= 12 capacity type= 1
(4,0)->(4,1)->(4,2)->(0,7)->(4,12)->(4,13)->(4,14)->(4,0):1.0

artificial: false set: [128, 298, 299, 93, 285, 286, 287] start node= 4 start time= 13 capacity type= 1
(4,0)->(4,1)->(4,2)->(4,3)->(0,8)->(4,13)->(4,14)->(4,0):2.0

artificial: false set: [144, 64, 195, 299] start node= 4 start time= 0 capacity type= 1
(4,0)->(1,4)->(3,9)->(4,14)->(4,0):1.0

artificial: false set: [146, 66, 197, 286] start node= 4 start time= 1 capacity type= 1
(4,1)->(4,2)->(1,6)->(3,11)->(4,1):1.0

artificial: false set: [288, 148, 68, 199] start node= 4 start time= 3 capacity type= 1
(4,3)->(4,4)->(1,8)->(3,13)->(4,3):2.0

artificial: false set: [72, 137, 202, 251] start node= 4 start time= 7 capacity type= 1
(3,2)->(4,7)->(1,11)->(1,12)->(3,2):1.0

artificial: false set: [292, 72, 137, 203] start node= 4 start time= 8 capacity type= 1
(3,2)->(4,7)->(4,8)->(1,12)->(3,2):1.0

artificial: false set: [294, 74, 139, 205] start node= 4 start time= 9 capacity type= 1
(3,4)->(4,9)->(4,10)->(1,14)->(3,4):2.0

artificial: false set: [295, 140, 60, 206] start node= 4 start time= 10 capacity type= 1
(1,0)->(3,5)->(4,10)->(4,11)->(1,0):1.0

artificial: false set: [240, 141, 61, 206] start node= 4 start time= 11 capacity type= 1
(1,0)->(1,1)->(3,6)->(4,11)->(1,0):1.0

artificial: false set: [241, 142, 62, 207] start node= 4 start time= 12 capacity type= 1
(1,1)->(1,2)->(3,7)->(4,12)->(1,1):1.0

artificial: false set: [208, 242, 143, 63] start node= 4 start time= 13 capacity type= 1
(1,2)->(1,3)->(3,8)->(4,13)->(1,2):1.0

artificial: false set: [130, 198, 157, 285, 286, 287] start node= 4 start time= 0 capacity type= 1
(4,0)->(4,1)->(4,2)->(4,3)->(1,7)->(0,10)->(4,0):1.0

artificial: false set: [163, 291, 292, 293, 121, 204] start node= 4 start time= 6 capacity type= 1
(0,1)->(4,6)->(4,7)->(4,8)->(4,9)->(1,13)->(0,1):1.0

artificial: false set: [209, 296, 153, 297, 298, 126] start node= 4 start time= 11 capacity type= 1
(1,3)->(0,6)->(4,11)->(4,12)->(4,13)->(4,14)->(1,3):1.0

artificial: false set: [69, 135, 200, 284] start node= 4 start time= 5 capacity type= 1
(3,0)->(4,5)->(1,9)->(3,14)->(3,0):1.0

Total time= 204635


