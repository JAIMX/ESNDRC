test1_5_10_15_20

BranchAndPriceB bap=new BranchAndPriceB(dataModel, master, pricingProblems, solvers, branchCreators,Double.MAX_VALUE,0.65,0.2,0.1,1,0.001,3,0.1,true);

number of service arcs=150
number of holding arcs=75

================ Solution ================
BAP terminated with objective : 3836
Total Number of iterations: 2355
Total Number of processed nodes: 277
Total Time spent on master problems: 30310 Total time spent on pricing problems: 2717
Best bound : 3836.0
The number of service edges used= 50
Solution is optimal: true
Columns (only non-zero columns are returned):
artificial: false set: [70, 71, 24, 72, 11, 15] start node= 2 start time= 2 capacity type= 0
(0,0)->(0,9)->(2,10)->(2,11)->(0,11)->(2,12)->(3,0):1.0

artificial: false set: [36, 104, 105, 106, 27, 107, 108, 109, 110] start node= 4 start time= 7 capacity type= 0
(3,0)->(3,1)->(3,2)->(3,3)->(3,4)->(3,5)->(1,6)->(0,12)->(3,14)->(1,4):1.0

artificial: false set: [98, 35, 99, 100, 101, 102, 92, 29, 93] start node= 4 start time= 0 capacity type= 0
(3,2)->(3,3)->(1,5)->(3,8)->(3,9)->(3,10)->(3,11)->(3,12)->(0,14)->(1,3):2.0

artificial: false set: [112, 34, 98, 99, 100, 101, 28, 110, 111] start node= 4 start time= 12 capacity type= 0
(1,4)->(3,5)->(3,6)->(3,7)->(3,8)->(3,9)->(3,10)->(3,11)->(0,13)->(1,2):1.0

artificial: false set: [80, 81, 18, 85, 23, 10] start node= 1 start time= 8 capacity type= 1
(0,3)->(2,5)->(2,6)->(0,8)->(0,10)->(2,10)->(0,14):1.0

artificial: false set: [3, 51, 52, 57, 58, 59, 60, 13] start node= 1 start time= 7 capacity type= 1
(2,0)->(0,3)->(1,6)->(1,7)->(1,12)->(0,13)->(1,13)->(1,14)->(0,4):1.0

artificial: false set: [2, 99, 100, 21, 101, 31] start node= 4 start time= 1 capacity type= 1
(1,1)->(0,2)->(0,6)->(3,9)->(3,10)->(3,11)->(1,1):1.0

artificial: false set: [0, 32, 38, 22, 102, 103] start node= 4 start time= 4 capacity type= 1
(0,0)->(1,2)->(0,7)->(1,8)->(3,12)->(3,13)->(1,3):1.0


Total time= 43881
---------------------------------------------------------------------------------------------------------
test2_5_15_20_25

BranchAndPriceB bap=new BranchAndPriceB(dataModel, master, pricingProblems, solvers, branchCreators,Double.MAX_VALUE,0.65,0.2,0.1,1,0.001,3,0.1,true);
number of service arcs=300
number of holding arcs=100

================ Solution ================
BAP terminated with objective : 3869
Total Number of iterations: 27096
Total Number of processed nodes: 1547
Total Time spent on master problems: 12077437 Total time spent on pricing problems: 72455
Best bound : 3869.0
The number of service edges used= 20
Solution is optimal: true
Columns (only non-zero columns are returned):
artificial: false set: [193, 289, 104, 139, 398] start node= 4 start time= 19 capacity type= 0
(0,4)->(2,9)->(3,13)->(4,18)->(4,19)->(0,4):1.0

artificial: false set: [306, 307, 308, 309, 295, 379, 203, 220, 110] start node= 1 start time= 3 capacity type= 1
(3,0)->(1,3)->(0,6)->(0,7)->(0,8)->(0,9)->(0,10)->(2,15)->(3,19)->(3,0):1.0

artificial: false set: [48, 279, 73, 398, 143] start node= 4 start time= 19 capacity type= 1
(1,3)->(2,8)->(1,13)->(4,18)->(4,19)->(1,3):1.0

artificial: false set: [161, 386, 387, 388, 389, 217, 234, 10, 300] start node= 4 start time= 6 capacity type= 1
(0,0)->(0,1)->(4,6)->(4,7)->(4,8)->(4,9)->(4,10)->(3,14)->(1,17)->(0,0):1.0

artificial: false set: [305, 33, 306, 307, 168, 57, 202] start node= 4 start time= 13 capacity type= 1
(1,2)->(0,5)->(0,6)->(0,7)->(0,8)->(4,13)->(2,17)->(1,2):1.0

Total time= 13247706
---------------------------------------------------------------------------------------------------------
test3_5_15_25_25

BranchAndPriceB bap=new BranchAndPriceB(dataModel, master, pricingProblems, solvers, branchCreators,Double.MAX_VALUE,0.65,0.2,0.1,1,0.001,3,0.1,true);

number of service arcs=375
number of holding arcs=125

Repairing basis singularity.
Markowitz threshold set to 0.2
Repairing basis singularity.
Added to 1 columns superbasic list.
Markowitz threshold set to 0.2
Repairing basis singularity.
Added to 1 columns superbasic list.
Markowitz threshold set to 0.2
Repairing basis singularity.
Markowitz threshold set to 0.2
Repairing basis singularity.
Added to 4 columns superbasic list.
Markowitz threshold set to 0.2
Repairing basis singularity.
Added to 1 columns superbasic list.
Markowitz threshold set to 0.2
================ Solution ================
BAP terminated with objective : 3661
Total Number of iterations: 36643
Total Number of processed nodes: 1288
Total Time spent on master problems: 33000681 Total time spent on pricing problems: 125526
Best bound : 3540.908222222223
The number of service edges used= 33
Solution is optimal: false
Columns (only non-zero columns are returned):
artificial: false set: [36, 199, 200, 201, 202, 203, 204, 205, 206, 207, 113, 114, 51, 220, 221, 222, 223] start node= 4 start time= 21 capacity type= 0
(0,0)->(0,1)->(2,1)->(0,2)->(0,3)->(0,4)->(0,5)->(0,6)->(0,7)->(4,11)->(1,13)->(1,14)->(0,20)->(0,21)->(0,22)->(0,23)->(1,24)->(2,4):1.0

artificial: false set: [65, 51, 89, 28, 13, 61] start node= 4 start time= 21 capacity type= 1
(2,1)->(4,3)->(2,11)->(4,13)->(1,14)->(2,15)->(1,20):1.0

artificial: false set: [32, 0, 65, 18, 20, 72] start node= 4 start time= 6 capacity type= 1
(4,0)->(4,7)->(2,15)->(4,18)->(4,20)->(2,22)->(1,2):1.0

artificial: false set: [97, 69, 40, 8, 57, 92] start node= 4 start time= 17 capacity type= 1
(2,7)->(4,8)->(4,15)->(1,17)->(2,19)->(1,22)->(4,2):1.0

Total time= 36000449
---------------------------------------------------------------------------------------------------------
test4_5_15_15_100
BranchAndPriceB bap=new BranchAndPriceB(dataModel, master, pricingProblems, solvers, branchCreators,Double.MAX_VALUE,0.65,0.2,0.1,1,0.001,3,0.1,true);

number of service arcs=225
number of holding arcs=75

================ Solution ================
BAP terminated with objective : 15426
Total Number of iterations: 58740
Total Number of processed nodes: 8435
Total Time spent on master problems: 5219511 Total time spent on pricing problems: 138807
Best bound : 15426.0
The number of service edges used= 59
Solution is optimal: true
Columns (only non-zero columns are returned):
artificial: false set: [164, 292, 293, 294, 122, 205] start node= 4 start time= 7 capacity type= 0
(0,2)->(4,7)->(4,8)->(4,9)->(4,10)->(1,14)->(0,2):1.0

artificial: false set: [295, 140, 60, 206] start node= 4 start time= 10 capacity type= 0
(1,0)->(3,5)->(4,10)->(4,11)->(1,0):1.0

artificial: false set: [177, 150, 218, 78] start node= 1 start time= 0 capacity type= 1
(1,0)->(0,3)->(2,8)->(3,12)->(1,0):1.0

artificial: false set: [40, 185, 60] start node= 1 start time= 0 capacity type= 1
(1,0)->(3,5)->(2,10)->(1,0):1.0

artificial: false set: [84, 244, 233, 155, 44] start node= 1 start time= 4 capacity type= 1
(1,4)->(1,5)->(0,8)->(0,9)->(2,14)->(1,4):1.0

artificial: false set: [166, 264, 265, 266, 109, 222] start node= 1 start time= 4 capacity type= 1
(3,1)->(1,4)->(2,9)->(2,10)->(2,11)->(2,12)->(3,1):1.0

artificial: false set: [34, 194, 69] start node= 1 start time= 9 capacity type= 1
(2,4)->(1,9)->(3,14)->(2,4):1.0

artificial: false set: [134, 199, 248, 237, 238, 159] start node= 4 start time= 4 capacity type= 1
(4,4)->(1,8)->(1,9)->(0,12)->(0,13)->(0,14)->(4,4):1.0

artificial: false set: [129, 209, 243, 232, 233, 154] start node= 4 start time= 14 capacity type= 1
(1,3)->(1,4)->(0,7)->(0,8)->(0,9)->(4,14)->(1,3):1.0

artificial: false set: [292, 72, 137, 203] start node= 4 start time= 7 capacity type= 1
(3,2)->(4,7)->(4,8)->(1,12)->(3,2):1.0

artificial: false set: [148, 68, 198, 247] start node= 4 start time= 3 capacity type= 1
(4,3)->(1,7)->(1,8)->(3,13)->(4,3):1.0

artificial: false set: [225, 226, 100, 292, 293, 294, 122] start node= 4 start time= 7 capacity type= 1
(0,0)->(0,1)->(0,2)->(4,7)->(4,8)->(4,9)->(4,10)->(0,0):1.0

artificial: false set: [128, 298, 299, 93, 285, 286, 287] start node= 4 start time= 13 capacity type= 1
(4,0)->(4,1)->(4,2)->(4,3)->(0,8)->(4,13)->(4,14)->(4,0):1.0

artificial: false set: [145, 17, 216, 285, 286] start node= 4 start time= 0 capacity type= 1
(4,0)->(4,1)->(4,2)->(2,6)->(3,10)->(4,0):1.0

artificial: false set: [224, 293, 294, 25, 138] start node= 4 start time= 8 capacity type= 1
(3,3)->(4,8)->(4,9)->(4,10)->(2,14)->(3,3):1.0

artificial: false set: [288, 289, 54, 200, 299, 285, 286, 287] start node= 4 start time= 14 capacity type= 1
(4,0)->(4,1)->(4,2)->(4,3)->(4,4)->(4,5)->(1,9)->(4,14)->(4,0):1.0

artificial: false set: [163, 6, 121, 175] start node= 4 start time= 6 capacity type= 1
(0,1)->(4,6)->(3,10)->(1,13)->(0,1):1.0

artificial: false set: [1, 131, 170, 158] start node= 4 start time= 1 capacity type= 1
(4,1)->(3,5)->(1,8)->(0,11)->(4,1):1.0

artificial: false set: [288, 97, 289, 290, 291, 132, 287] start node= 4 start time= 2 capacity type= 1
(4,2)->(4,3)->(4,4)->(4,5)->(4,6)->(4,7)->(0,12)->(4,2):1.0

artificial: false set: [18, 37, 57, 287] start node= 4 start time= 2 capacity type= 1
(4,2)->(4,3)->(2,7)->(1,12)->(4,2):1.0

artificial: false set: [272, 293, 24, 138, 223] start node= 4 start time= 8 capacity type= 1
(3,2)->(3,3)->(4,8)->(4,9)->(2,13)->(3,2):1.0

Total time= 6716187
---------------------------------------------------------------------------------------------------------
test5_5_15_15_200

BranchAndPriceB bap=new BranchAndPriceB(dataModel, master, pricingProblems, solvers, branchCreators,Double.MAX_VALUE,0.65,0.2,0.1,1,0.001,3,0.1,true);

number of service arcs=225
number of holding arcs=75

================ Solution ================
BAP terminated with objective : 32900
Total Number of iterations: 1357
Total Number of processed nodes: 131
Total Time spent on master problems: 93308 Total time spent on pricing problems: 2434
Best bound : 32900.0
The number of service edges used= 70
Solution is optimal: true
Columns (only non-zero columns are returned):
artificial: false set: [83, 84, 21, 5, 85, 86, 87] start node= 2 start time= 2 capacity type= 0
(4,5)->(4,6)->(0,8)->(0,9)->(0,10)->(0,11)->(0,12)->(2,2):1.0

artificial: false set: [1, 120, 121, 122, 123, 28, 124, 125] start node= 4 start time= 7 capacity type= 0
(0,0)->(4,1)->(0,1)->(0,2)->(0,3)->(0,4)->(0,5)->(4,13)->(2,2):1.0

artificial: false set: [51, 19, 70, 71, 72, 42] start node= 1 start time= 2 capacity type= 1
(4,4)->(1,6)->(1,10)->(1,11)->(1,12)->(2,12)->(1,2):6.0

artificial: false set: [52, 20, 38, 73, 74, 75] start node= 1 start time= 5 capacity type= 1
(0,0)->(4,5)->(1,7)->(2,8)->(1,13)->(1,14)->(3,4):3.0

artificial: false set: [48, 83, 21, 103, 40, 77] start node= 1 start time= 9 capacity type= 1
(0,2)->(1,3)->(4,6)->(0,8)->(2,10)->(4,13)->(0,3):5.0

artificial: false set: [80, 81, 49, 22, 87, 41] start node= 1 start time= 14 capacity type= 1
(1,4)->(0,5)->(0,6)->(4,7)->(2,11)->(0,12)->(2,2):4.0

artificial: false set: [20, 7, 71, 72, 73, 74, 75] start node= 1 start time= 3 capacity type= 1
(0,0)->(4,5)->(4,7)->(1,11)->(1,12)->(1,13)->(1,14)->(3,4):1.0

artificial: false set: [34, 69, 70, 71, 25, 47] start node= 4 start time= 12 capacity type= 1
(1,2)->(2,4)->(1,9)->(4,10)->(1,10)->(1,11)->(3,1):3.0

artificial: false set: [25, 58, 59, 125, 13, 126, 127] start node= 4 start time= 14 capacity type= 1
(0,5)->(0,6)->(0,7)->(4,10)->(1,13)->(4,13)->(1,14)->(4,4):2.0

artificial: false set: [113, 114, 115, 116, 117, 26, 14] start node= 4 start time= 0 capacity type= 1
(1,8)->(1,9)->(1,10)->(1,11)->(4,11)->(1,12)->(4,14)->(3,3):4.0

artificial: false set: [32, 11, 76, 44] start node= 4 start time= 4 capacity type= 1
(0,1)->(2,2)->(4,11)->(2,14)->(1,4):3.0

artificial: false set: [120, 28, 12, 45] start node= 4 start time= 7 capacity type= 1
(0,0)->(1,0)->(4,12)->(4,13)->(2,2):5.0

artificial: false set: [114, 10, 43, 31] start node= 4 start time= 1 capacity type= 1
(2,1)->(1,9)->(4,10)->(2,13)->(1,3):3.0

artificial: false set: [116, 117, 118, 119, 120, 27, 15] start node= 4 start time= 3 capacity type= 1
(0,0)->(4,0)->(1,11)->(1,12)->(4,12)->(1,13)->(1,14)->(2,4):2.0

artificial: false set: [16, 23, 119, 120, 121, 122, 123] start node= 4 start time= 6 capacity type= 1
(0,0)->(4,1)->(0,1)->(0,2)->(0,3)->(4,8)->(1,14)->(2,4):5.0

artificial: false set: [8, 124, 30, 47] start node= 4 start time= 11 capacity type= 1
(2,0)->(1,2)->(0,4)->(4,8)->(3,12):2.0

Total time= 182543